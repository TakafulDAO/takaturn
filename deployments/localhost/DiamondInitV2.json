{
  "address": "0x89520Df74b37E3EF56888E39D2503e20f2162aF5",
  "abi": [
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x906e866e5507375c52b12bc8f3d968f48981014f458194ad014b254a6af85130",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "98486",
    "logsBloom": "0x
    "blockHash": "0x2e2ac09a2305926d0a19416a435f458fd3adb4154dba65d33602c5b50ae2c515",
    "transactionHash": "0x906e866e5507375c52b12bc8f3d968f48981014f458194ad014b254a6af85130",
    "logs": [],
    "blockNumber": 104233362,
    "cumulativeGasUsed": "98486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be7b57ce45c34b546ad2dd923dcb09b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/DiamondInitV2.sol\":\"DiamondInitV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/version-2/DiamondInitV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"./libraries/LibTermV2.sol\\\";\\r\\n\\r\\ncontract DiamondInitV2 {\\r\\n    function init() external {\\r\\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\\r\\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\\r\\n        termConsts.sequencerUptimeFeedAddress = address(0xFdB631F5EE196F0ed6FAa767959853A9F217697D); // TODO: make this a deploy parameter on the diamond\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd4e609fa5888d17b952cf1743bc425e8d99d94914a6c90d557f47798429fa4b8\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb43c10a301314b64c9711d24884d0ba527e3f47a68b676f03affd947fedfacc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5060cf8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e1c7392a14602d575b600080fd5b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec580546001600160a01b03191673fdb631f5ee196f0ed6faa767959853a9f217697d17905500fea2646970667358221220a3c3cdc616e22c1f6d10f3c2f93ea424e4fdc4b4058bd0a45ea61e0f92d7295164736f6c63430008120033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063e1c7392a14602d575b600080fd5b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec580546001600160a01b03191673fdb631f5ee196f0ed6faa767959853a9f217697d17905500fea2646970667358221220a3c3cdc616e22c1f6d10f3c2f93ea424e4fdc4b4058bd0a45ea61e0f92d7295164736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}