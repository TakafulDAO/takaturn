{
  "address": "0x850eFc4C3Ac6d5B9dc407a4BEDDd4C5F3661Efae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sequencerUptimeFeedAddress",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f9510cc58465dd9d5fef7043a7100438bc07341e2b2d699361716e2369ecd52",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "127590",
    "logsBloom": "0x
    "blockHash": "0x55906b49ae80e5d694ed136a2ec38c52fc788b6ce65ffcdf3bf53c8c27c4e425",
    "transactionHash": "0x6f9510cc58465dd9d5fef7043a7100438bc07341e2b2d699361716e2369ecd52",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "127590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fcf3f5ced1f3d5f96be9fe2a13cdc034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerUptimeFeedAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/DiamondInitV2.sol\":\"DiamondInitV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/version-2/DiamondInitV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"./libraries/LibTermV2.sol\\\";\\r\\n\\r\\ncontract DiamondInitV2 {\\r\\n    function init(address _aggregatorAddress, address _sequencerUptimeFeedAddress) external {\\r\\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\\r\\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\\r\\n        termConsts.aggregatorAddress = _aggregatorAddress;\\r\\n        termConsts.sequencerUptimeFeedAddress = _sequencerUptimeFeedAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7a4ed8eab4c2ebf5357ccbb9fc786c976d661b49c95a124602840e0aadddf7\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd1a70e9fe6c7cc82d1642757f0dd6874d2a0da1f7f38d47ee98909c9811ad562\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610156806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f09a401614610030575b600080fd5b6100cf61003e3660046100ed565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec680546001600160a01b039384166001600160a01b0319918216179091557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec58054929093169116179055565b005b80356001600160a01b03811681146100e857600080fd5b919050565b6000806040838503121561010057600080fd5b610109836100d1565b9150610117602084016100d1565b9050925092905056fea2646970667358221220cbddf68a6a2b50414f945865d04df314d17af06c58ee083745587898a4753fec64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f09a401614610030575b600080fd5b6100cf61003e3660046100ed565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec680546001600160a01b039384166001600160a01b0319918216179091557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec58054929093169116179055565b005b80356001600160a01b03811681146100e857600080fd5b919050565b6000806040838503121561010057600080fd5b610109836100d1565b9150610117602084016100d1565b9050925092905056fea2646970667358221220cbddf68a6a2b50414f945865d04df314d17af06c58ee083745587898a4753fec64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}