{
  "address": "0x80fCd683DC69f569cD924Ae8701c73A2c755B7Dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "currentOrNextCyclePaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "expelledBeforeBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getAllJoinedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "firstAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "zapAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vaultAddress",
          "type": "string"
        }
      ],
      "name": "getConstants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getExpelledTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "enum LibTermStorage.TermStates",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "getJoinedTermsByState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNeededAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getNextBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRegistrationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToCollateralConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToStableConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldLockState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isExempted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasoptedInYG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2c416966200ac6f52715b852087b6e6badbc3e23e1f7a015c4cbe8978bd9019",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x80fCd683DC69f569cD924Ae8701c73A2c755B7Dc",
    "transactionIndex": 0,
    "gasUsed": "2587840",
    "logsBloom": "0x
    "blockHash": "0x75e659f28eb117117353a3fd200b74613ed940cbf5232a4df812daa4e1e6fb2e",
    "transactionHash": "0xc2c416966200ac6f52715b852087b6e6badbc3e23e1f7a015c4cbe8978bd9019",
    "logs": [],
    "blockNumber": 175144209,
    "cumulativeGasUsed": "2587840",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b5dda25a70667bdda8fc65f97f7d4af7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"currentOrNextCyclePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"expelledBeforeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getAllJoinedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"firstAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zapAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vaultAddress\",\"type\":\"string\"}],\"name\":\"getConstants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getExpelledTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"getJoinedTermsByState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNeededAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getNextBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToCollateralConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToStableConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldLockState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasoptedInYG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"paidThisCycle, true if has paid the current cycle\",\"_1\":\"paidNextCycle, true if has paid the next cycle\"}},\"expelledBeforeBeneficiary(uint256,address)\":{\"params\":{\"termId\":\"the id of the term\",\"user\":\"the address of the participant to check\"},\"returns\":{\"_0\":\"true if the participant is expelled before being a beneficiary\"}},\"getAllJoinedTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of\"}},\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"collateral initialized\",\"_1\":\"collateral state\",\"_2\":\"collateral firstDepositTime\",\"_3\":\"counterMembers\",\"_4\":\"collateral depositors\"}},\"getConstants(string,string,string,string)\":{\"params\":{\"firstAggregator\":\"The name of the first aggregator. Example: \\\"ETH/USD\\\"\",\"secondAggregator\":\"The name of the second aggregator. Example: \\\"USDC/USD\\\"\",\"vaultAddress\":\"The name of the vault address. Example: \\\"ZaynVault\\\"\",\"zapAddress\":\"The name of the zap address. Example: \\\"ZaynZap\\\"\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"isCollateralMember\",\"_1\":\"collateralMembersBank\",\"_2\":\"collateralPaymentBank\",\"_3\":\"collateralDepositByUser\",\"_4\":\"expulsion limit\"}},\"getExpelledTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array the term ids the participant is part of, giving the state of the term\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"fund initialized\",\"_1\":\"fund currentState\",\"_2\":\"fund stableToken\",\"_3\":\"fund beneficiariesOrder\",\"_4\":\"fund fundStart\",\"_5\":\"fund fundEnd\",\"_6\":\"fund currentCycle\",\"_7\":\"fund totalAmountOfCycles\"}},\"getJoinedTermsByState(address,uint8)\":{\"params\":{\"participant\":\"the participant address\",\"state\":\"the term state\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of, giving the state of the term\"}},\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getNeededAllowance(address)\":{\"params\":{\"user\":\"the user address\"},\"returns\":{\"_0\":\"the needed allowance\"}},\"getNextBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"isParticipant, true if is participant\",\"_1\":\"isBeneficiary, true if has been beneficiary\",\"_2\":\"paidThisCycle, true if has paid the current cycle\",\"_3\":\"autoPayEnabled, true if auto pay is enabled\",\"_4\":\"beneficiariesPool, the beneficiary pool, 6 decimals\",\"_5\":\"beneficiariesFrozenPool, true if the beneficiary pool is frozen\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution\"}},\"getRemainingRegistrationTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining contribution period\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term struct\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToCollateralConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"USDAmount\":\"The amount in USD with 18 decimals\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToStableConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"getUserSet(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"on participant set\",\"_1\":\"on beneficiary set\",\"_2\":\"on defaulter set\"}},\"getUserYieldSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"_0\":\"hasOptedIn\",\"_1\":\"withdrawnYield\",\"_2\":\"withdrawnCollateral\",\"_3\":\"availableYield\",\"_4\":\"depositedCollateralByUser\",\"_5\":\"yieldDistributed\"}},\"getWithdrawableUserBalance(uint256,address)\":{\"params\":{\"termId\":\"term id\",\"user\":\"depositor address\"},\"returns\":{\"allowedWithdrawal\":\"amount the amount of collateral the depositor can withdraw\"}},\"getYieldSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"initialized\",\"_1\":\"startTimeStamp\",\"_2\":\"totalDeposit\",\"_3\":\"currentTotalDeposit\",\"_4\":\"totalShares\",\"_5\":\"yieldUsers\",\"_6\":\"vaultAddress\",\"_7\":\"zapAddress\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"isExempted(uint256,uint256,address)\":{\"params\":{\"cycle\":\"the cycle to check\",\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user is exempted\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"minCollateralToDeposit(uint256,uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5\",\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPY(uint256)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPY(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\",\"user\":\"The user for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the user\"}},\"userHasoptedInYG(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the check is being made\",\"user\":\"The user for which the check is being made\"},\"returns\":{\"_0\":\"True if the user has opted in\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getConstants(string,string,string,string)\":{\"notice\":\"This function return the current constant values for oracles and yield providers\"},\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the current beneficiary\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getNeededAllowance(address)\":{\"notice\":\"a function to get the needed allowance for every active term the user is part of\"},\"getNextBeneficiary(uint256)\":{\"notice\":\"function to get the current beneficiary\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getRemainingRegistrationTime(uint256)\":{\"notice\":\"Gets the remaining registration period for a term\"},\"getToCollateralConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToStableConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"getUserSet(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getWithdrawableUserBalance(uint256,address)\":{\"notice\":\"Called to check how much collateral a user can withdraw\"},\"getYieldLockState()\":{\"notice\":\"This function is used to get the current state of the yield lock\"},\"isExempted(uint256,uint256,address)\":{\"notice\":\"function to see if a user is exempted from paying a cycle\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"minCollateralToDeposit(uint256,uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPY(uint256)\":{\"notice\":\"This function is used to get a term APY\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPY(uint256,address)\":{\"notice\":\"This function is used to get a user APY\"},\"userHasoptedInYG(uint256,address)\":{\"notice\":\"This function is used to check if a user has opted in for yield generation\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\ncontract GettersFacet is IGetters {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    // TERM GETTERS\\r\\n    /// @return the current term id\\r\\n    /// @return the next term id\\r\\n    function getTermsId() external view returns (uint, uint) {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        uint lastTermId = termStorage.nextTermId - 1;\\r\\n        uint nextTermId = termStorage.nextTermId;\\r\\n        return (lastTermId, nextTermId);\\r\\n    }\\r\\n\\r\\n    ///  @notice Gets the remaining registration period for a term\\r\\n    ///  @param termId the term id\\r\\n    ///  @return remaining contribution period\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        require(collateral.firstDepositTime != 0, \\\"Nobody has deposited yet\\\");\\r\\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return the term struct\\r\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\\r\\n        return (LibTermStorage._termStorage().terms[termId]);\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array with the term ids the participant is part of\\r\\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\r\\n        return participantTermIds;\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @param state the term state\\r\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTermStorage.TermStates state\\r\\n    ) public view returns (uint[] memory) {\\r\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\r\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\r\\n        uint termsCounter;\\r\\n        uint joinedTermsLength = joinedTerms.length;\\r\\n\\r\\n        for (uint i; i < joinedTermsLength; ) {\\r\\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\\r\\n                temporaryArray[termsCounter] = joinedTerms[i];\\r\\n                unchecked {\\r\\n                    ++termsCounter;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory userTermsByState = new uint[](termsCounter);\\r\\n\\r\\n        for (uint i; i < termsCounter; ) {\\r\\n            userTermsByState[i] = temporaryArray[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return userTermsByState;\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array the term ids the participant is part of, giving the state of the term\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\\r\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\r\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\r\\n        uint termsCounter;\\r\\n        uint joinedTermsLength = joinedTerms.length;\\r\\n\\r\\n        for (uint i; i < joinedTermsLength; ) {\\r\\n            if (wasExpelled(joinedTerms[i], participant)) {\\r\\n                temporaryArray[termsCounter] = joinedTerms[i];\\r\\n                unchecked {\\r\\n                    ++termsCounter;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory termsExpelled = new uint[](termsCounter);\\r\\n\\r\\n        for (uint i; i < termsCounter; ) {\\r\\n            termsExpelled[i] = temporaryArray[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return termsExpelled;\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) public view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n\\r\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining time in the current cycle\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\r\\n        if (block.timestamp > cycleEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return cycleEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining cycles contribution\\r\\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\r\\n        uint contributionAmountWei = getToCollateralConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        return remainingCycles * contributionAmountWei;\\r\\n    }\\r\\n\\r\\n    /// @notice a function to get the needed allowance for every active term the user is part of\\r\\n    /// @param user the user address\\r\\n    /// @return the needed allowance\\r\\n    function getNeededAllowance(address user) external view returns (uint) {\\r\\n        uint neededAllowance;\\r\\n\\r\\n        uint[] memory activeTerms = getJoinedTermsByState(\\r\\n            user,\\r\\n            LibTermStorage.TermStates.ActiveTerm\\r\\n        );\\r\\n        uint[] memory initializedTerms = getJoinedTermsByState(\\r\\n            user,\\r\\n            LibTermStorage.TermStates.InitializingTerm\\r\\n        );\\r\\n\\r\\n        uint activeTermsLength = activeTerms.length;\\r\\n        uint initializedTermsLength = initializedTerms.length;\\r\\n\\r\\n        for (uint i; i < activeTermsLength; ) {\\r\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\\r\\n            uint remainingPayments = term.contributionAmount *\\r\\n                getRemainingCycles(activeTerms[i]) *\\r\\n                10 ** 6;\\r\\n            neededAllowance += remainingPayments;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i; i < initializedTermsLength; ) {\\r\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\\r\\n                initializedTerms[i]\\r\\n            ];\\r\\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\\r\\n            neededAllowance += totalPayments;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return neededAllowance;\\r\\n    }\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @param depositor the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return isCollateralMember\\r\\n    /// @return collateralMembersBank\\r\\n    /// @return collateralPaymentBank\\r\\n    /// @return collateralDepositByUser\\r\\n    /// @return expulsion limit\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        uint limit;\\r\\n        if (!fund.isBeneficiary[depositor]) {\\r\\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\r\\n        } else {\\r\\n            limit = getRemainingCyclesContributionWei(termId);\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            collateral.isCollateralMember[depositor],\\r\\n            collateral.collateralMembersBank[depositor],\\r\\n            collateral.collateralPaymentBank[depositor],\\r\\n            collateral.collateralDepositByUser[depositor],\\r\\n            limit\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return collateral initialized\\r\\n    /// @return collateral state\\r\\n    /// @return collateral firstDepositTime\\r\\n    /// @return counterMembers\\r\\n    /// @return collateral depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\\r\\n    {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        return (\\r\\n            collateral.initialized,\\r\\n            collateral.state, // Current state of Collateral\\r\\n            collateral.firstDepositTime, // Time when the first deposit was made\\r\\n            collateral.counterMembers, // Current member count\\r\\n            collateral.depositors // List of depositors\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\r\\n    /// @return amount the minimum collateral amount to deposit in wei\\r\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\r\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\r\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\r\\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\\r\\n    function minCollateralToDeposit(\\r\\n        uint termId,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint amount) {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        require(depositorIndex < term.totalParticipants, \\\"Index out of bounds\\\");\\r\\n\\r\\n        uint contributionAmountInWei = getToCollateralConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\r\\n    }\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal) {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint userCollateral = collateral.collateralMembersBank[user];\\r\\n        uint availableYield = yield.availableYield[user];\\r\\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\\r\\n\\r\\n        if (\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\r\\n            expelledBeforeBeingBeneficiary\\r\\n        ) {\\r\\n            allowedWithdrawal = userCollateral + availableYield;\\r\\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\r\\n            uint minRequiredCollateral;\\r\\n\\r\\n            // Check if the user has paid this cycle\\r\\n            if (!fund.paidThisCycle[user]) {\\r\\n                // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\r\\n                minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\\r\\n            } else {\\r\\n                // If the user have paid this cycle, we need to check his remaining cycles and get the contribution amount for those\\r\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle;\\r\\n                uint contributionAmountWei = getToCollateralConversionRate(\\r\\n                    term.contributionAmount * 10 ** 18\\r\\n                );\\r\\n\\r\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\r\\n            }\\r\\n\\r\\n            // Collateral must be higher than 1.5 X RCC\\r\\n            if (userCollateral > minRequiredCollateral) {\\r\\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\\r\\n            } else {\\r\\n                allowedWithdrawal = 0;\\r\\n            }\\r\\n        } else {\\r\\n            allowedWithdrawal = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\r\\n        return LibCollateral._isUnderCollaterized(termId, member);\\r\\n    }\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    /// @notice function to get the cycle information in one go\\r\\n    /// @param termId the fund id\\r\\n    /// @return fund initialized\\r\\n    /// @return fund currentState\\r\\n    /// @return fund stableToken\\r\\n    /// @return fund beneficiariesOrder\\r\\n    /// @return fund fundStart\\r\\n    /// @return fund fundEnd\\r\\n    /// @return fund currentCycle\\r\\n    /// @return fund totalAmountOfCycles\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\r\\n    {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return (\\r\\n            fund.initialized,\\r\\n            fund.currentState,\\r\\n            fund.stableToken,\\r\\n            fund.beneficiariesOrder,\\r\\n            fund.fundStart,\\r\\n            fund.fundEnd,\\r\\n            fund.currentCycle,\\r\\n            fund.totalAmountOfCycles\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get the current beneficiary\\r\\n    /// @param termId the fund id\\r\\n    /// @return the current beneficiary\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\r\\n    }\\r\\n\\r\\n    /// @notice function to get the current beneficiary\\r\\n    /// @param termId the fund id\\r\\n    /// @return the current beneficiary\\r\\n    function getNextBeneficiary(uint termId) external view returns (address) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.beneficiariesOrder[fund.currentCycle];\\r\\n    }\\r\\n\\r\\n    /// @notice function to know if a user was expelled before\\r\\n    /// @param termId the fund id\\r\\n    /// @param user the user to check\\r\\n    /// @return true if the user was expelled before\\r\\n    function wasExpelled(uint termId, address user) public view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to see if a user is exempted from paying a cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @param cycle the cycle to check\\r\\n    /// @param user the user to check\\r\\n    /// @return true if the user is exempted\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.isExemptedOnCycle[cycle].exempted[user];\\r\\n    }\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return isParticipant, true if is participant\\r\\n    /// @return isBeneficiary, true if has been beneficiary\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return autoPayEnabled, true if auto pay is enabled\\r\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\r\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n\\r\\n        bool isMoneyPotFrozen = _checkFrozenMoneyPot(participant, termId);\\r\\n\\r\\n        return (\\r\\n            fund.isParticipant[participant],\\r\\n            fund.isBeneficiary[participant],\\r\\n            fund.paidThisCycle[participant],\\r\\n            fund.autoPayEnabled[participant],\\r\\n            fund.beneficiariesPool[participant],\\r\\n            isMoneyPotFrozen\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return paidNextCycle, true if has paid the next cycle\\r\\n    function currentOrNextCyclePaid(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n\\r\\n        return (fund.paidThisCycle[participant], fund.paidNextCycle[participant]);\\r\\n    }\\r\\n\\r\\n    function _checkFrozenMoneyPot(\\r\\n        address _participant,\\r\\n        uint _termId\\r\\n    ) internal view returns (bool _isMoneyPotFrozen) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        if (fund.expelledBeforeBeneficiary[_participant]) {\\r\\n            _isMoneyPotFrozen = false;\\r\\n        } else {\\r\\n            uint neededCollateral = (110 * getRemainingCyclesContributionWei(_termId)) / 100; // 1.1 x RCC\\r\\n\\r\\n            if (collateral.collateralMembersBank[_participant] < neededCollateral) {\\r\\n                _isMoneyPotFrozen = true;\\r\\n            } else {\\r\\n                _isMoneyPotFrozen = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to get cycle information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return on participant set\\r\\n    /// @return on beneficiary set\\r\\n    /// @return on defaulter set\\r\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\\r\\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\\r\\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\\r\\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\\r\\n    }\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.isBeneficiary[beneficiary];\\r\\n    }\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user the address of the participant to check\\r\\n    /// @return true if the participant is expelled before being a beneficiary\\r\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.expelledBeforeBeneficiary[user];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the time left to contribute for this cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @return the time left to contribute\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\r\\n        uint contributionEndTimestamp = term.cycleTime *\\r\\n            (fund.currentCycle - 1) +\\r\\n            fund.fundStart +\\r\\n            term.contributionPeriod;\\r\\n        if (block.timestamp > contributionEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return contributionEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    /// @notice Gets latest ETH / USD price\\r\\n    /// @return uint latest price in Wei Note: 18 decimals\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\r\\n\\r\\n        (\\r\\n            uint80 roundID_ethUSD,\\r\\n            int256 price_ethUSD,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\r\\n            uint80 answeredInRound_ethUSD\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Check if chainlink data is not stale or incorrect\\r\\n        require(\\r\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint80 roundID_usdUSDC,\\r\\n            int256 price_usdUSDC,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\r\\n            uint80 answeredInRound_usdUSDC\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USDC/USD\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        require(\\r\\n            timeStamp_usdUSDC != 0 &&\\r\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\r\\n                price_usdUSDC > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\r\\n\\r\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param USDAmount The amount in USD with 18 decimals\\r\\n    /// @return uint converted amount in wei\\r\\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\r\\n        return USDAmountInEth;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param ethAmount The amount in ETH\\r\\n    /// @return uint converted amount in USD correct to 18 decimals\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\\r\\n        // NOTE: This will be made internal\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    /// @notice This function is used to check if a user has opted in for yield generation\\r\\n    /// @param termId The term id for which the check is being made\\r\\n    /// @param user The user for which the check is being made\\r\\n    /// @return True if the user has opted in\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        return yield.hasOptedIn[user];\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get a user APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @param user The user for which the APY is being calculated\\r\\n    /// @return The APY for the user\\r\\n    function userAPY(uint termId, address user) external view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        uint userYieldGenerated = yield.withdrawnYield[user] +\\r\\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\r\\n\\r\\n        return\\r\\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\\r\\n                365 days) / elaspedTime;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get a term APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @return The APY for the term\\r\\n    function termAPY(uint termId) external view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        return\\r\\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\\r\\n            elaspedTime;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a term\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint totalWithdrawnYield;\\r\\n\\r\\n        address[] memory arrayToCheck = yield.yieldUsers;\\r\\n        uint arrayLength = arrayToCheck.length;\\r\\n\\r\\n        for (uint i; i < arrayLength; ) {\\r\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\\r\\n\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return totalWithdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return hasOptedIn\\r\\n    /// @return withdrawnYield\\r\\n    /// @return withdrawnCollateral\\r\\n    /// @return availableYield\\r\\n    /// @return depositedCollateralByUser\\r\\n    /// @return yieldDistributed\\r\\n    function getUserYieldSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\r\\n\\r\\n        return (\\r\\n            yield.hasOptedIn[user],\\r\\n            yield.withdrawnYield[user],\\r\\n            yield.withdrawnCollateral[user],\\r\\n            yield.availableYield[user],\\r\\n            yield.depositedCollateralByUser[user],\\r\\n            yieldDistributed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return initialized\\r\\n    /// @return startTimeStamp\\r\\n    /// @return totalDeposit\\r\\n    /// @return currentTotalDeposit\\r\\n    /// @return totalShares\\r\\n    /// @return yieldUsers\\r\\n    /// @return vaultAddress\\r\\n    /// @return zapAddress\\r\\n    function getYieldSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        return (\\r\\n            yield.initialized,\\r\\n            yield.startTimeStamp,\\r\\n            yield.totalDeposit,\\r\\n            yield.currentTotalDeposit,\\r\\n            yield.totalShares,\\r\\n            yield.yieldUsers,\\r\\n            yield.providerAddresses[\\\"ZaynVault\\\"],\\r\\n            yield.providerAddresses[\\\"ZaynZap\\\"]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current state of the yield lock\\r\\n    function getYieldLockState() external view returns (bool) {\\r\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\r\\n    }\\r\\n\\r\\n    /// @notice This function return the current constant values for oracles and yield providers\\r\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\r\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\r\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\r\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\r\\n    function getConstants(\\r\\n        string memory firstAggregator,\\r\\n        string memory secondAggregator,\\r\\n        string memory zapAddress,\\r\\n        string memory vaultAddress\\r\\n    ) external view returns (address, address, address, address) {\\r\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\r\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\r\\n            ._yieldProviders();\\r\\n\\r\\n        return (\\r\\n            termConsts.aggregatorsAddresses[firstAggregator],\\r\\n            termConsts.aggregatorsAddresses[secondAggregator],\\r\\n            yieldProvider.providerAddresses[zapAddress],\\r\\n            yieldProvider.providerAddresses[vaultAddress]\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5008950909fb06be26ea7f7947863fd2f21fa760ac1f9e53f1233b0a917e158d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    /// @notice Gets the current and next term id\\r\\n    /// @return current termID\\r\\n    /// @return next termID\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Must return 0 before starting the fund\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining registration time in seconds\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get current information of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return Term Struct, see LibTermStorage.sol\\r\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\r\\n    /// @param participant address\\r\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\r\\n    /// @return List of termIDs\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTermStorage.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user was previously expelled from\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice a function to get the needed allowance\\r\\n    /// @param user the user address\\r\\n    /// @return the needed allowance\\r\\n    function getNeededAllowance(address user) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    /// @return expulsion limit\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the required minimum collateral deposit based on the position\\r\\n    /// @param termId the term id\\r\\n    /// @param depositorIndex the index of the depositor\\r\\n    /// @return required minimum in wei\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    // FUND GETTERS\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the current beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets the next beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getNextBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return isParticipant, true if is participant\\r\\n    /// @return isBeneficiary, true if has been beneficiary\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return autoPayEnabled, true if auto pay is enabled\\r\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\r\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return paidNextCycle, true if has paid the next cycle\\r\\n    function currentOrNextCyclePaid(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user the address of the participant to check\\r\\n    /// @return true if the participant is expelled before being a beneficiary\\r\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function userAPY(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPY(uint termId) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return hasOptedIn\\r\\n    /// @return withdrawnYield\\r\\n    /// @return withdrawnCollateral\\r\\n    /// @return availableYield\\r\\n    /// @return depositedCollateralByUser\\r\\n    /// @return yieldDistributed\\r\\n    function getUserYieldSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return initialized\\r\\n    /// @return startTimeStamp\\r\\n    /// @return totalDeposit\\r\\n    /// @return currentTotalDeposit\\r\\n    /// @return totalShares\\r\\n    /// @return yieldUsers\\r\\n    /// @return vaultAddress\\r\\n    /// @return zapAddress\\r\\n    function getYieldSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\r\\n\\r\\n    function getYieldLockState() external view returns (bool);\\r\\n\\r\\n    /// @notice This function return the current constant values for oracles and yield providers\\r\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\r\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\r\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\r\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\r\\n    function getConstants(\\r\\n        string memory firstAggregator,\\r\\n        string memory secondAggregator,\\r\\n        string memory zapAddress,\\r\\n        string memory vaultAddress\\r\\n    ) external view returns (address, address, address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x6e946b406614d96e15f5eacec3776646ece2e77160eca0cf6e7d4ff338baaead\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external view returns (address);\\r\\n\\r\\n    function balance() external view returns (uint256);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external view returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x78699e5f3347a796b59482d2d5ad459c68125c87223e0d4634188f3e1339cf7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n\\r\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d0cdf796501fc604bc1c83c28ff89fefe49ea1b994677c60dc62312af143c94\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralStorage.CollateralStates indexed oldState,\\r\\n        LibCollateralStorage.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnReimbursementWithdrawn(\\r\\n        uint indexed termId,\\r\\n        address indexed participant,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    );\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _participant Address of the depositor\\r\\n    function _withdrawReimbursement(\\r\\n        uint _termId,\\r\\n        address _participant,\\r\\n        address _receiver\\r\\n    ) internal {\\r\\n        require(LibFundStorage._fundExists(_termId), \\\"Fund does not exists\\\");\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint amount = collateral.collateralPaymentBank[_participant];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n        collateral.collateralPaymentBank[_participant] = 0;\\r\\n\\r\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _termId The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\r\\n\\r\\n        if (!LibFundStorage._fundExists(_termId)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _termId\\r\\n            );\\r\\n        } else {\\r\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\r\\n        }\\r\\n\\r\\n        return (memberCollateral < collateralLimit);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3a7b828fbe1a4d4c243084a319a8ccfb14b3f36d864fe61b46b2eca9eef4497a\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd4f3ddd4b3ea2531cb93494be6ee8433464221d6f0563eecabbf0d8d0c03ed01\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\r\\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdc5fee2561d7cce812c38156de9b39f94f6805d5c9c5f2a6faf26d3ff5b3a6b5\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermStorage {\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d12e51a175c821d32aa12da41bf3158a8aa1ec0a377232800cd6cfd21e81a2b\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    event OnYieldClaimed(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    ); // Emits when a user claims their yield\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param _termId The term id for which the collateral is being deposited\\r\\n    /// @param _ethAmount The amount of collateral being deposited\\r\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        yield.totalDeposit = _ethAmount;\\r\\n        yield.currentTotalDeposit = _ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\r\\n            vaultAddress,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param _termId The term id for which the collateral is being withdrawn\\r\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\r\\n    /// @param _user The user address that is withdrawing the collateral\\r\\n    function _withdrawYG(\\r\\n        uint _termId,\\r\\n        uint256 _collateralAmount,\\r\\n        address _user\\r\\n    ) internal returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\r\\n\\r\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\r\\n        yield.currentTotalDeposit -= _collateralAmount;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n\\r\\n        // Prevent rounding errors\\r\\n        if (neededShares > sharesBalance) {\\r\\n            if (neededShares - sharesBalance < 10000) {\\r\\n                neededShares = sharesBalance;\\r\\n            }\\r\\n        } else {\\r\\n            if (sharesBalance - neededShares < 10000) {\\r\\n                neededShares = sharesBalance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        if (withdrawnAmount < _collateralAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\r\\n            yield.withdrawnYield[_user] += withdrawnYield;\\r\\n            yield.availableYield[_user] += withdrawnYield;\\r\\n\\r\\n            return withdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from shares to eth\\r\\n    /// @param _termId The term id\\r\\n    /// @param _yield The yield generation struct\\r\\n    function _sharesToEth(\\r\\n        uint _termId,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\r\\n    ) internal view returns (uint) {\\r\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        return (termBalance * pricePerShare) / 10 ** 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from eth to shares\\r\\n    /// @param _collateralAmount The amount of collateral to withdraw\\r\\n    /// @param _totalShares The total shares in the yield from the term\\r\\n    /// @param _totalDeposit The total deposit in the yield from the term\\r\\n    function _neededShares(\\r\\n        uint _collateralAmount,\\r\\n        uint _totalShares,\\r\\n        uint _totalDeposit\\r\\n    ) internal pure returns (uint) {\\r\\n        if (_totalDeposit == 0) return 0;\\r\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current total yield generated for a term\\r\\n    /// @param _termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the yield distribution ratio for a user\\r\\n    /// @param _termId The term id for which the ratio is being calculated\\r\\n    /// @param _user The user for which the ratio is being calculated\\r\\n    /// @return The yield distribution ratio for the user\\r\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        if (yield.currentTotalDeposit == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\r\\n                    10 ** 18) / yield.totalDeposit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a user\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @param user The user for which the yield is being calculated\\r\\n    /// @return The total yield generated for the user\\r\\n    function _unwithdrawnUserYieldGenerated(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) internal view returns (uint) {\\r\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\r\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\r\\n\\r\\n        return yieldDistributed;\\r\\n    }\\r\\n\\r\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint availableYield = yield.availableYield[_user];\\r\\n\\r\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\r\\n\\r\\n        yield.availableYield[_user] = 0;\\r\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08a54ebf69c17a15c93518f6acc0ef67e5ccefd11449750dd979574ea9a4df7f\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGenerationStorage {\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    struct YieldLock {\\r\\n        bool yieldLock;\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n        mapping(address => uint256) depositedCollateralByUser;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\r\\n        bytes32 position = YIELD_LOCK_POSITION;\\r\\n        assembly {\\r\\n            yieldLock.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaeed5248c171a073c6cdf849d6bc3d840a5f9d5d6ef514b462c06f83c886a042\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dda806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806391ce5ff711610130578063d7992e5b116100b8578063dc9e24ae1161007c578063dc9e24ae1461063f578063e51a629514610652578063e9783e6014610665578063f0d826e714610678578063fd4dba9d1461068b57600080fd5b8063d7992e5b146105c2578063d8f8e991146105d5578063da3791ca146105e8578063dbd576831461060c578063dbf428101461062c57600080fd5b8063b7cf483f116100ff578063b7cf483f14610525578063bb91b76d14610538578063c177f09114610575578063d072f4bc14610588578063d72bb87e1461059b57600080fd5b806391ce5ff71461049257806392a6c802146104a55780639d4eb26f146104b8578063b6abd1a4146104df57600080fd5b806365654fe3116101b357806377778baf1161018257806377778baf1461041d5780637aed53a614610430578063805307311461044d57806384bc198d146104605780638e15f4731461048a57600080fd5b806365654fe31461039a5780636bbbb5fb146103ad57806375aaa78c146103c057806375d4e40b146103d357600080fd5b80631e993b53116101fa5780631e993b53146102f35780632d591bdc146103135780633d17f1e01461033e5780636191474c1461037457806362f02abd1461038757600080fd5b80630c64c6971461022c5780630fc4a7ef146102525780631268612d146102655780631c162dbe146102b1575b600080fd5b61023f61023a366004612654565b6106bd565b6040519081526020015b60405180910390f35b61023f610260366004612676565b61077f565b6102786102733660046126ab565b6107b3565b604080519615158752941515602087015292151593850193909352151560608401526080830191909152151560a082015260c001610249565b6102c46102bf3660046126ab565b61084e565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c001610249565b6103066103013660046126d5565b6108e4565b60405161024991906126f0565b610326610321366004612676565b610a57565b6040516001600160a01b039091168152602001610249565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff165b6040519015158152602001610249565b61023f610382366004612676565b610aaa565b61023f610395366004612676565b610b68565b61023f6103a8366004612734565b610bac565b6103646103bb366004612734565b610c83565b6103066103ce3660046126d5565b610cbd565b6103646103e1366004612734565b6000918252600080516020612d25833981519152602090815260408084206001600160a01b039390931684526007909201905290205460ff1690565b61023f61042b366004612734565b610d5d565b610438610f34565b60408051928352602083019190915201610249565b61023f61045b366004612676565b610f65565b61047361046e3660046126ab565b610fcc565b604080519215158352901515602083015201610249565b61023f61101b565b61023f6104a0366004612676565b6112af565b61023f6104b3366004612676565b611377565b6104cb6104c6366004612676565b6113c4565b6040516102499897969594939291906127a4565b6104f26104ed3660046128a4565b6114ff565b604080516001600160a01b0395861681529385166020850152918416918301919091529091166060820152608001610249565b610364610533366004612951565b611601565b61054b6105463660046126ab565b611644565b6040805195151586526020860194909452928401919091526060830152608082015260a001610249565b610364610583366004612734565b61173b565b61023f610596366004612676565b611747565b6105ae6105a9366004612676565b611769565b60405161024998979695949392919061299c565b6103646105d0366004612734565b61183f565b6103266105e3366004612676565b6118d4565b6105fb6105f6366004612676565b611916565b604051610249959493929190612a1a565b61061f61061a366004612676565b6119cc565b6040516102499190612a5d565b61023f61063a366004612676565b611b15565b61030661064d366004612afb565b611c40565b61023f6106603660046126d5565b611e01565b610364610673366004612734565b611f64565b61023f610686366004612676565b611f9e565b61069e6106993660046126ab565b612025565b6040805193151584529115156020840152151590820152606001610249565b6000828152600080516020612d4583398151915260205260408120600481015483106107265760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064015b60405180910390fd5b60006107438260060154670de0b6b3a76400006105969190612b4c565b905060648483600401546107579190612b63565b6107619083612b4c565b61076c906096612b4c565b6107769190612b8c565b95945050505050565b60008061078a61101b565b90506000670de0b6b3a76400006107a18584612b4c565b6107ab9190612b8c565b949350505050565b60008060008060008060006107c6612083565b60008981526020919091526040812091506107e18a8a6120a7565b6001600160a01b039a909a1660009081526005830160209081526040808320546006860183528184205460078701845282852054600888018552838620546009909801909452919093205460ff9384169e9184169d9284169c509290941699509097509550909350505050565b6000818152600080516020612d2583398151915260205260408120819081908190819081908161087e898b61215d565b6001600160a01b039a909a1660009081526007830160209081526040808320546008860183528184205460098701845282852054600a8801855283862054600b909801909452919093205460ff9093169d909c919b509399509097509550909350505050565b606060006108f183610cbd565b90506000815167ffffffffffffffff81111561090f5761090f612801565b604051908082528060200260200182016040528015610938578160200160208202803683370190505b508251909150600090815b818110156109ba5761096e85828151811061096057610960612ba0565b60200260200101518861183f565b156109b25784818151811061098557610985612ba0565b602002602001015184848151811061099f5761099f612ba0565b6020026020010181815250508260010192505b600101610943565b5060008267ffffffffffffffff8111156109d6576109d6612801565b6040519080825280602002602001820160405280156109ff578160200160208202803683370190505b50905060005b83811015610a4c57848181518110610a1f57610a1f612ba0565b6020026020010151828281518110610a3957610a39612ba0565b6020908102919091010152600101610a05565b509695505050505050565b600080610a62612083565b6000848152602091909152604090206004810154600182018054929350918110610a8e57610a8e612ba0565b6000918252602090912001546001600160a01b03169392505050565b600080610ab5612083565b600084815260209182526040808220600080516020612d458339815191529093529020815491925090600190610100900460ff166004811115610afa57610afa612986565b14610b09575060009392505050565b60008160070154836002015460018560040154610b269190612b63565b8460050154610b359190612b4c565b610b3f9190612bb6565b610b499190612bb6565b905080421115610b5e57506000949350505050565b6107764282612b63565b600080610b73612083565b6000848152602091909152604090206004810154601482015491925090610b9b906001612bb6565b610ba59190612b63565b9392505050565b6000828152600080516020612d2583398151915260209081526040808320600080516020612d65833981519152909252822060028201548390610bef9042612b63565b90506000610bfd878761215d565b6001600160a01b0387166000908152600886016020526040902054610c229190612bb6565b6001600160a01b03871660009081526005850160205260409020549091508290610c5483670de0b6b3a7640000612b4c565b610c5e9190612b8c565b610c6c906301e13380612b4c565b610c769190612b8c565b9450505050505b92915050565b600080610c8e612083565b6000858152602091825260408082206001600160a01b0387168352601501909252205460ff1691505092915050565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b602090815260408083208054825181850281018501909352808352606094600080516020612d85833981519152949093929190830182828015610d4f57602002820191906000526020600020905b815481526020019060010190808311610d3b575b509398975050505050505050565b6000828152600080516020612d458339815191526020526040812081610d81612083565b600086815260209182526040808220600080516020612d658339815191528452818320600080516020612d2583398151915285528284206001600160a01b038a16855260058201865283852054600a8201875284862054601585019097529390942054815492965090949160ff918216916002916101009004166003811115610e0c57610e0c612986565b1480610e155750805b15610e2b57610e248284612bb6565b9750610f27565b60018554610100900460ff166003811115610e4857610e48612986565b03610f22576001600160a01b038916600090815260078701602052604081205460ff16610e9657600a610e7a8c611f9e565b610e8590600f612b4c565b610e8f9190612b8c565b9050610ef3565b600087600401548860140154610eac9190612b63565b90506000610ecb8a60060154670de0b6b3a76400006105969190612b4c565b9050600a610ed98284612b4c565b610ee490600f612b4c565b610eee9190612b8c565b925050505b80841115610f175782610f068286612b63565b610f109190612bb6565b9850610f1c565b600098505b50610f27565b600097505b5050505050505092915050565b600080516020612d85833981519152805460009182918290610f5890600190612b63565b9154919491935090915050565b6000818152600080516020612d258339815191526020526040812060028101548290610f919042612b63565b9050808260040154610fa286611b15565b610fb490670de0b6b3a7640000612b4c565b610fbe9190612b8c565b6107a1906301e13380612b4c565b6000806000610fd9612083565b6000858152602091825260408082206001600160a01b038916835260078101845281832054601690910190935290205460ff9182169450169150509250929050565b6000807f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec490506000806000808460000160405161106590661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190612be0565b945094505093509350816000141580156111085750836001600160501b0316816001600160501b031610155b80156111145750600083135b6111605760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c6520646174610000000000604482015260640161071d565b6000806000808860000160405161118590671554d110cbd554d160c21b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190612be0565b945094505093509350816000141580156112285750836001600160501b0316816001600160501b031610155b80156112345750600083135b6112805760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c6520646174610000000000604482015260640161071d565b600061128c8489612c30565b90506112a081670de0b6b3a7640000612c5e565b9a505050505050505050505090565b6000818152600080516020612d4583398151915260209081526040808320600080516020612d658339815191529092528220600181015483036113345760405162461bcd60e51b815260206004820152601860248201527f4e6f626f647920686173206465706f7369746564207965740000000000000000604482015260640161071d565b816003015481600101546113489190612bb6565b4210611358575060009392505050565b428260030154826001015461136d9190612bb6565b6107ab9190612b63565b600080611382612083565b600084815260209182526040808220600080516020612d45833981519152909352812060028301546004840154600583015494955091939091610b3f91612b4c565b6000808080806060818080600080516020612d2583398151915260000160008b815260200190815260200160002090508060000160009054906101000a900460ff168160020154826003015483600401548460050154856006018660010160405161143e906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316906001890190611474906605a61796e5a61760cc1b815260070190565b908152604080519182900360209081018320548554808302850183019093528284526001600160a01b0316929185918301828280156114dc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114be575b505050505092509850985098509850985098509850985050919395975091939597565b6040516000908190819081907f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4907ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b897790829061155c908c90612c8e565b908152604051908190036020018120546001600160a01b0316908390611583908c90612c8e565b908152604051908190036020018120546001600160a01b03169083906115aa908c90612c8e565b908152604051908190036020018120546001600160a01b03169084906115d1908c90612c8e565b9081526040519081900360200190205492985090965094506001600160a01b031692505050945094509450949050565b60008061160c612083565b600086815260209182526040808220878352600c0183528082206001600160a01b0387168352909252205460ff169150509392505050565b6000818152600080516020612d6583398151915260205260408120819081908190819081611670612083565b600089815260209182526040808220600080516020612d4583398151915284528183206001600160a01b038e168452600682019094529082205490935060ff166116d6576116cf8260060154670de0b6b3a76400006105969190612b4c565b90506116e2565b6116df8a611f9e565b90505b6001600160a01b039a909a1660009081526004840160209081526040808320546005870183528184205460068801845282852054600790980190935292205460ff9092169c909b949a5090985092965091945050505050565b6000610ba58383612186565b60008061175261101b565b90506000816107a185670de0b6b3a7640000612b4c565b600080600060606000806000806000611780612083565b60008b81526020918252604090819020805460028201546003830154600484015460148501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b031697919691879183018282801561181c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117fe575b505050505094509850985098509850985098509850985050919395975091939597565b60008061184a612083565b600085815260209182526040808220600080516020612d6583398151915284528183206001600160a01b03881684526005820190945291205490925060ff161580156118b157506001600160a01b038416600090815260048201602052604090205460ff16155b156118c157600192505050610c7d565b600092505050610c7d565b505092915050565b6000806118df612083565b60008481526020919091526040902060048101549091506001808301916119069190612b63565b81548110610a8e57610a8e612ba0565b6000808080606081600080516020612d658339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff8085169761010090950416959294919390929183918301828280156119b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611993575b50505050509050955095509550955095505091939590929450565b611a3c60408051610160810190915260008082526020820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6000828152600080516020612d45833981519152602090815260409182902082516101608101909352805460ff808216151585529192840191610100909104166003811115611a8d57611a8d612986565b6003811115611a9e57611a9e612986565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015292915050565b6000818152600080516020612d2583398151915260209081526040808320600681018054835181860281018601909452808452919385938493909291830182828015611b8a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b6c575b505083519394506000925050505b81811015611bf657846008016000848381518110611bb857611bb8612ba0565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205484611bec9190612bb6565b9350600101611b98565b506000611c0387866122b0565b90508460040154811115611c35576004850154611c208286612bb6565b611c2a9190612b63565b979650505050505050565b509195945050505050565b60606000611c4d84610cbd565b90506000815167ffffffffffffffff811115611c6b57611c6b612801565b604051908082528060200260200182016040528015611c94578160200160208202803683370190505b508251909150600090815b81811015611d6357866003811115611cb957611cb9612986565b600080516020612d858339815191526001016000878481518110611cdf57611cdf612ba0565b6020026020010151815260200190815260200160002060000160019054906101000a900460ff166003811115611d1757611d17612986565b03611d5b57848181518110611d2e57611d2e612ba0565b6020026020010151848481518110611d4857611d48612ba0565b6020026020010181815250508260010192505b600101611c9f565b5060008267ffffffffffffffff811115611d7f57611d7f612801565b604051908082528060200260200182016040528015611da8578160200160208202803683370190505b50905060005b83811015611df557848181518110611dc857611dc8612ba0565b6020026020010151828281518110611de257611de2612ba0565b6020908102919091010152600101611dae565b50979650505050505050565b6000806000611e11846001611c40565b90506000611e20856000611c40565b825181519192509060005b82811015611ece576000600080516020612d858339815191526001016000878481518110611e5b57611e5b612ba0565b6020026020010151815260200190815260200160002090506000611e97878481518110611e8a57611e8a612ba0565b6020026020010151610b68565b8260060154611ea69190612b4c565b611eb390620f4240612b4c565b9050611ebf8189612bb6565b97508260010192505050611e2b565b5060005b81811015611f58576000600080516020612d858339815191526001016000868481518110611f0257611f02612ba0565b602002602001015181526020019081526020016000209050600081600401548260060154611f309190612b4c565b611f3d90620f4240612b4c565b9050611f498189612bb6565b97508260010192505050611ed2565b50939695505050505050565b600080611f6f612083565b6000858152602091825260408082206001600160a01b0387168352600601909252205460ff1691505092915050565b600080611fa9612083565b600084815260209182526040808220600080516020612d458339815191529093528120600483015460148401549394509092611fe6906001612bb6565b611ff09190612b63565b9050600061200f8360060154670de0b6b3a76400006105969190612b4c565b905061201b8183612b4c565b9695505050505050565b600080600080612033612083565b6000868152602091909152604081209150612051600d8301886123fc565b9050600061206283600f01896123fc565b90506000612073846011018a6123fc565b9299919850919650945050505050565b7f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c90565b6000806120b2612083565b600084815260209182526040808220600080516020612d6583398151915284528183206001600160a01b03891684526015820190945291205490925060ff16156120ff57600092506118cc565b6000606461210c86611f9e565b61211790606e612b4c565b6121219190612b8c565b6001600160a01b038716600090815260058401602052604090205490915081111561214f5760019350612154565b600093505b50505092915050565b600080670de0b6b3a7640000612173858561241e565b61217c866124aa565b6107a19190612b4c565b6000828152600080516020612d65833981519152602090815260408083206001600160a01b03851684526005810190925282205482906121c586612636565b6122445760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015612214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122389190612cbd565b95506122a79350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a49190612d0b565b91505b10949350505050565b600080826001016040516122d3906816985e5b95985d5b1d60ba1b815260090190565b90815260405190819003602001812054631398fee160e31b82526001600160a01b031690639cc7f7089061230f90879060040190815260200190565b602060405180830381865afa15801561232c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123509190612d0b565b9050600083600101604051612374906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e79190612d0b565b9050670de0b6b3a764000061076c8284612b4c565b6001600160a01b03811660009081526001830160205260408120541515610ba5565b6000828152600080516020612d25833981519152602052604081206004810154820361244e576000915050610c7d565b60038101546001600160a01b0384166000908152600983016020908152604080832054600b8601909252909120546124869190612b63565b61249890670de0b6b3a7640000612b4c565b6124a29190612b8c565b915050610c7d565b6000818152600080516020612d25833981519152602052604080822081516816985e5b95985d5b1d60ba1b8152600182016009820152915191829003602901822054631398fee160e31b835260048301859052909183916001600160a01b031690639cc7f70890602401602060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125559190612d0b565b9050600082600101604051612579906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa1580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec9190612d0b565b90506000670de0b6b3a76400006126038385612b4c565b61260d9190612b8c565b9050836004015481111561262a57600484015461201b9082612b63565b50600095945050505050565b6000612640612083565b600092835260205250604090205460ff1690565b6000806040838503121561266757600080fd5b50508035926020909101359150565b60006020828403121561268857600080fd5b5035919050565b80356001600160a01b03811681146126a657600080fd5b919050565b600080604083850312156126be57600080fd5b6126c78361268f565b946020939093013593505050565b6000602082840312156126e757600080fd5b610ba58261268f565b6020808252825182820181905260009190848201906040850190845b818110156127285783518352928401929184019160010161270c565b50909695505050505050565b6000806040838503121561274757600080fd5b823591506127576020840161268f565b90509250929050565b600081518084526020808501945080840160005b838110156127995781516001600160a01b031687529582019590820190600101612774565b509495945050505050565b60006101008a151583528960208401528860408401528760608401528660808401528060a08401526127d881840187612760565b6001600160a01b0395861660c08501529390941660e09092019190915250979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261282857600080fd5b813567ffffffffffffffff8082111561284357612843612801565b604051601f8301601f19908116603f0116810190828211818310171561286b5761286b612801565b8160405283815286602085880101111561288457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156128ba57600080fd5b843567ffffffffffffffff808211156128d257600080fd5b6128de88838901612817565b955060208701359150808211156128f457600080fd5b61290088838901612817565b9450604087013591508082111561291657600080fd5b61292288838901612817565b9350606087013591508082111561293857600080fd5b5061294587828801612817565b91505092959194509250565b60008060006060848603121561296657600080fd5b833592506020840135915061297d6040850161268f565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60006101008a1515835260058a106129b6576129b6612986565b602083018a90526001600160a01b0389166040840152606083018190526129df81840189612760565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b60048110612a1757612a17612986565b50565b8515158152612a2885612a07565b84602082015283604082015282606082015260a060808201526000611c2a60a0830184612760565b612a5981612a07565b9052565b81511515815261016081016020830151612a7a6020840182612a50565b506040830151612a9560408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401518184015250610140808401516118cc828501826001600160a01b03169052565b60008060408385031215612b0e57600080fd5b612b178361268f565b9150602083013560048110612b2b57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c7d57610c7d612b36565b81810381811115610c7d57610c7d612b36565b634e487b7160e01b600052601260045260246000fd5b600082612b9b57612b9b612b76565b500490565b634e487b7160e01b600052603260045260246000fd5b80820180821115610c7d57610c7d612b36565b80516001600160501b03811681146126a657600080fd5b600080600080600060a08688031215612bf857600080fd5b612c0186612bc9565b9450602086015193506040860151925060608601519150612c2460808701612bc9565b90509295509295909350565b600082612c3f57612c3f612b76565b600160ff1b821460001984141615612c5957612c59612b36565b500590565b80820260008212600160ff1b84141615612c7a57612c7a612b36565b8181058314821517610c7d57610c7d612b36565b6000825160005b81811015612caf5760208186018101518583015201612c95565b506000920191825250919050565b600080600080600060a08688031215612cd557600080fd5b85518015158114612ce557600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b600060208284031215612d1d57600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf987101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288887101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89a26469706673582212209786da259717467e5fb7e1eaf22a2954e6ee8875fa8ce9c8c2e8ccd72bd243b864736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "paidThisCycle, true if has paid the current cycle",
          "_1": "paidNextCycle, true if has paid the next cycle"
        }
      },
      "expelledBeforeBeneficiary(uint256,address)": {
        "params": {
          "termId": "the id of the term",
          "user": "the address of the participant to check"
        },
        "returns": {
          "_0": "true if the participant is expelled before being a beneficiary"
        }
      },
      "getAllJoinedTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of"
        }
      },
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "collateral initialized",
          "_1": "collateral state",
          "_2": "collateral firstDepositTime",
          "_3": "counterMembers",
          "_4": "collateral depositors"
        }
      },
      "getConstants(string,string,string,string)": {
        "params": {
          "firstAggregator": "The name of the first aggregator. Example: \"ETH/USD\"",
          "secondAggregator": "The name of the second aggregator. Example: \"USDC/USD\"",
          "vaultAddress": "The name of the vault address. Example: \"ZaynVault\"",
          "zapAddress": "The name of the zap address. Example: \"ZaynZap\""
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "isCollateralMember",
          "_1": "collateralMembersBank",
          "_2": "collateralPaymentBank",
          "_3": "collateralDepositByUser",
          "_4": "expulsion limit"
        }
      },
      "getExpelledTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array the term ids the participant is part of, giving the state of the term"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "fund initialized",
          "_1": "fund currentState",
          "_2": "fund stableToken",
          "_3": "fund beneficiariesOrder",
          "_4": "fund fundStart",
          "_5": "fund fundEnd",
          "_6": "fund currentCycle",
          "_7": "fund totalAmountOfCycles"
        }
      },
      "getJoinedTermsByState(address,uint8)": {
        "params": {
          "participant": "the participant address",
          "state": "the term state"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of, giving the state of the term"
        }
      },
      "getLatestPrice()": {
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getNeededAllowance(address)": {
        "params": {
          "user": "the user address"
        },
        "returns": {
          "_0": "the needed allowance"
        }
      },
      "getNextBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "isParticipant, true if is participant",
          "_1": "isBeneficiary, true if has been beneficiary",
          "_2": "paidThisCycle, true if has paid the current cycle",
          "_3": "autoPayEnabled, true if auto pay is enabled",
          "_4": "beneficiariesPool, the beneficiary pool, 6 decimals",
          "_5": "beneficiariesFrozenPool, true if the beneficiary pool is frozen"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution"
        }
      },
      "getRemainingRegistrationTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining contribution period"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term struct"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToCollateralConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "USDAmount": "The amount in USD with 18 decimals"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToStableConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "getUserSet(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "on participant set",
          "_1": "on beneficiary set",
          "_2": "on defaulter set"
        }
      },
      "getUserYieldSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "_0": "hasOptedIn",
          "_1": "withdrawnYield",
          "_2": "withdrawnCollateral",
          "_3": "availableYield",
          "_4": "depositedCollateralByUser",
          "_5": "yieldDistributed"
        }
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "params": {
          "termId": "term id",
          "user": "depositor address"
        },
        "returns": {
          "allowedWithdrawal": "amount the amount of collateral the depositor can withdraw"
        }
      },
      "getYieldSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "initialized",
          "_1": "startTimeStamp",
          "_2": "totalDeposit",
          "_3": "currentTotalDeposit",
          "_4": "totalShares",
          "_5": "yieldUsers",
          "_6": "vaultAddress",
          "_7": "zapAddress"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "isExempted(uint256,uint256,address)": {
        "params": {
          "cycle": "the cycle to check",
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user is exempted"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5",
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPY(uint256)": {
        "params": {
          "termId": "The term id for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPY(uint256,address)": {
        "params": {
          "termId": "The term id for which the APY is being calculated",
          "user": "The user for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the user"
        }
      },
      "userHasoptedInYG(uint256,address)": {
        "params": {
          "termId": "The term id for which the check is being made",
          "user": "The user for which the check is being made"
        },
        "returns": {
          "_0": "True if the user has opted in"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getConstants(string,string,string,string)": {
        "notice": "This function return the current constant values for oracles and yield providers"
      },
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the current beneficiary"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getNeededAllowance(address)": {
        "notice": "a function to get the needed allowance for every active term the user is part of"
      },
      "getNextBeneficiary(uint256)": {
        "notice": "function to get the current beneficiary"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getRemainingRegistrationTime(uint256)": {
        "notice": "Gets the remaining registration period for a term"
      },
      "getToCollateralConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToStableConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "getUserSet(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "notice": "Called to check how much collateral a user can withdraw"
      },
      "getYieldLockState()": {
        "notice": "This function is used to get the current state of the yield lock"
      },
      "isExempted(uint256,uint256,address)": {
        "notice": "function to see if a user is exempted from paying a cycle"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPY(uint256)": {
        "notice": "This function is used to get a term APY"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPY(uint256,address)": {
        "notice": "This function is used to get a user APY"
      },
      "userHasoptedInYG(uint256,address)": {
        "notice": "This function is used to check if a user has opted in for yield generation"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}