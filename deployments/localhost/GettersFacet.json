{
  "address": "0x228828d72fcBd316a4FCc2ec96EB52b5647120d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateral.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFund.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedCollateralEth",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aggregatorAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTerm.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa28831fe65aa2d414617eb006101c3de823f27a4d20ff9c81e64c7302eb9b3c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "598882",
    "logsBloom": "0x
    "blockHash": "0xa06a83b9f7311406a9c21853d39ed092fcd75abdaa6ad977db63bc985c5cdca0",
    "transactionHash": "0xaa28831fe65aa2d414617eb006101c3de823f27a4d20ff9c81e64c7302eb9b3c",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "598882",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f7a732c1897a3dc667c51fd3f255384",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateral.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFund.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedCollateralEth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTerm.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCollateralSummary(uint256)\":{\"params\":{\"id\":\"the collateral id\"},\"returns\":{\"_0\":\"collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"id\":\"the collateral id\"},\"returns\":{\"_0\":\"isCollateralMember, collateralMembersBank, collateralPaymentBank\"}},\"getFundSummary(uint256)\":{\"params\":{\"id\":\"the fund id\"},\"returns\":{\"_0\":\"initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, lastBeneficiary, totalAmountOfCycles, fundEnd\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"id\":\"the fund id\",\"participant\":\"the user to get the info from\"},\"returns\":{\"_0\":\"isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"id\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"id\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getTermSummary(uint256)\":{\"params\":{\"id\":\"the term id\"},\"returns\":{\"_0\":\"the term struct\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-1/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ncontract GettersFacet is IGetters {\\r\\n    // TERM GETTERS\\r\\n    /// @return the current term id\\r\\n    /// @return the next term id\\r\\n    function getTermsId() external view returns (uint, uint) {\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        uint lastTermId = termStorage.nextTermId - 1;\\r\\n        uint nextTermId = termStorage.nextTermId;\\r\\n        return (lastTermId, nextTermId);\\r\\n    }\\r\\n\\r\\n    /// @param id the term id\\r\\n    /// @return the term struct\\r\\n    function getTermSummary(uint id) external view returns (LibTerm.Term memory) {\\r\\n        return (LibTerm._termStorage().terms[id]);\\r\\n    }\\r\\n\\r\\n    /// @param id the term id\\r\\n    /// @return remaining time in the current cycle\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\\r\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\r\\n        if (block.timestamp > cycleEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return cycleEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @param depositor the depositor address\\r\\n    /// @param id the collateral id\\r\\n    /// @return isCollateralMember, collateralMembersBank, collateralPaymentBank\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        return (\\r\\n            collateral.isCollateralMember[depositor],\\r\\n            collateral.collateralMembersBank[depositor],\\r\\n            collateral.collateralPaymentBank[depositor]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param id the collateral id\\r\\n    /// @return collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory, uint)\\r\\n    {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        return (\\r\\n            collateral.initialized,\\r\\n            collateral.state, // Current state of Collateral\\r\\n            collateral.firstDepositTime, // Time when the first deposit was made\\r\\n            collateral.counterMembers, // Current member count\\r\\n            collateral.depositors, // List of depositors\\r\\n            collateral.collateralDeposit // Collateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    /// @notice function to get the cycle information in one go\\r\\n    /// @param id the fund id\\r\\n    /// @return initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, lastBeneficiary, totalAmountOfCycles, fundEnd\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFund.FundStates,\\r\\n            IERC20,\\r\\n            uint,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint,\\r\\n            uint\\r\\n        )\\r\\n    {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\\r\\n        return (\\r\\n            fund.initialized,\\r\\n            fund.currentState,\\r\\n            fund.stableToken,\\r\\n            fund.currentCycle,\\r\\n            fund.beneficiariesOrder,\\r\\n            fund.fundStart,\\r\\n            fund.currentCycle,\\r\\n            fund.lastBeneficiary,\\r\\n            fund.totalAmountOfCycles,\\r\\n            fund.fundEnd\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get cycle information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param id the fund id\\r\\n    /// @return isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\\r\\n        return (\\r\\n            fund.isParticipant[participant],\\r\\n            fund.isBeneficiary[participant],\\r\\n            fund.paidThisCycle[participant],\\r\\n            fund.autoPayEnabled[participant],\\r\\n            fund.beneficiariesPool[participant]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the time left to contribute for this cycle\\r\\n    /// @param id the fund id\\r\\n    /// @return the time left to contribute\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\\r\\n        if (fund.currentState != LibFund.FundStates.AcceptingContributions) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\r\\n        uint contributionEndTimestamp = term.cycleTime *\\r\\n            (fund.currentCycle - 1) +\\r\\n            fund.fundStart +\\r\\n            term.contributionPeriod;\\r\\n        if (block.timestamp > contributionEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return contributionEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7253983b78efc0ad52a1e23226926b13b1f1515e63997d9fbfe4b82698a6ea7c\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateral.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n\\r\\n    // function getDepositorSummary(\\r\\n    //     uint id,\\r\\n    //     address participant\\r\\n    // ) external view returns (uint, uint, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x74d7cb77f00a5db5bcda375b91a2fe38c29cf0db6ab20867b6584a41c5687e3f\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getTermSummary(uint id) external view returns (LibTerm.Term memory);\\r\\n\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint);\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory, uint);\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFund.FundStates,\\r\\n            IERC20,\\r\\n            uint,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint,\\r\\n            uint\\r\\n        );\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x6bbb485db28ce6920043b27eed8fb41c36bbd6ab51d49469b9c9e3de29c57a2c\",\"license\":\"GPL-3.0\"},\"contracts/version-1/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        uint collateralDeposit; // Total value of collateral in USD (1.5x of total fund)\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd028d150850638ebdcfb99808b6748eaa26142a1430a97e34fdd43854a983b10\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        ChoosingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcab1bf6f6b55e2cd629cdd8286f3c65c9d22006af743559ee16faa32fa7936e4\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109d8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bb91b76d1161005b578063bb91b76d14610197578063d72bb87e14610228578063da3791ca14610251578063dbd576831461027657600080fd5b80631268612d1461008d5780636191474c146101465780637aed53a61461016757806392a6c80214610184575b600080fd5b61011161009b366004610711565b6000908152600080516020610983833981519152602090815260408083206001600160a01b03949094168352600584018252808320546006850183528184205460078601845282852054600887018552838620546009909701909452919093205460ff9384169591841694928416939092169190565b6040805195151586529315156020860152911515928401929092529015156060830152608082015260a0015b60405180910390f35b610159610154366004610749565b610296565b60405190815260200161013d565b61016f61036f565b6040805192835260208301919091520161013d565b610159610192366004610749565b6103b2565b61020b6101a5366004610711565b60009081527f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888602090815260408083206001600160a01b03949094168352600484018252808320546005850183528184205460069095019092529091205460ff90911692565b60408051931515845260208401929092529082015260600161013d565b61023b610236366004610749565b610411565b60405161013d9a999897969594939291906107bc565b61026461025f366004610749565b610504565b60405161013d96959493929190610836565b610289610284366004610749565b6105d5565b60405161013d9190610886565b6000818152600080516020610983833981519152602090815260408083207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a90925282208154600190610100900460ff1660048111156102f8576102f8610762565b14610307575060009392505050565b60008160060154836002015460018560040154610324919061093f565b84600401546103339190610958565b61033d919061096f565b610347919061096f565b90508042111561035c57506000949350505050565b610366428261093f565b95945050505050565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac898054600091829182906103a59060019061093f565b9154919491935090915050565b6000818152600080516020610983833981519152602090815260408083207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a909252822060028201546004808401549083015485929161033d91610958565b6000808080606081808080808060008051602061098383398151915260008d815260209182526040908190208054600482015460028301546011840154601285015460038601546001870180548951818c0281018c01909a52808a52979a5060ff8088169a6101008904909116996001600160a01b036201000090990489169997989297899690931694939290918891908301828280156104db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104bd575b505050505095509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b6000808080606081807f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628886000898152602091825260409081902080546001820154600283015460078401546003850180548751818a0281018a0190985280885295985060ff808616986101009096041696939592949093919284918301828280156105b857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161059a575b505050505091509650965096509650965096505091939550919395565b61064f60405180610160016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b5060009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a6020908152604091829020825161016081018452815460ff8116151582526001600160a01b03610100918290048116948301949094526001830154948201949094526002820154606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e082015260078201549381019390935260088101548216610120840152600901541661014082015290565b6000806040838503121561072457600080fd5b82356001600160a01b038116811461073b57600080fd5b946020939093013593505050565b60006020828403121561075b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156107b15781516001600160a01b03168752958201959082019060010161078c565b509495945050505050565b60006101408c1515835260058c106107d6576107d6610762565b602083018c90526001600160a01b038b81166040850152606084018b9052608084018290526108078285018b610778565b60a085019990995260c084019790975250509290931660e0830152610100820152610120015295945050505050565b861515815260006004871061084d5761084d610762565b86602083015285604083015284606083015260c0608083015261087360c0830185610778565b90508260a0830152979650505050505050565b815115158152610160810160208301516108ab60208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015161090f828501826001600160a01b03169052565b5050610140928301516001600160a01b0316919092015290565b634e487b7160e01b600052601160045260246000fd5b8181038181111561095257610952610929565b92915050565b808202811582820484141761095257610952610929565b808201808211156109525761095261092956fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307ca2646970667358221220ace7c3f326f091226210940f551c5196c87454c9db5f472e8acaa23d55eed65f64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063bb91b76d1161005b578063bb91b76d14610197578063d72bb87e14610228578063da3791ca14610251578063dbd576831461027657600080fd5b80631268612d1461008d5780636191474c146101465780637aed53a61461016757806392a6c80214610184575b600080fd5b61011161009b366004610711565b6000908152600080516020610983833981519152602090815260408083206001600160a01b03949094168352600584018252808320546006850183528184205460078601845282852054600887018552838620546009909701909452919093205460ff9384169591841694928416939092169190565b6040805195151586529315156020860152911515928401929092529015156060830152608082015260a0015b60405180910390f35b610159610154366004610749565b610296565b60405190815260200161013d565b61016f61036f565b6040805192835260208301919091520161013d565b610159610192366004610749565b6103b2565b61020b6101a5366004610711565b60009081527f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888602090815260408083206001600160a01b03949094168352600484018252808320546005850183528184205460069095019092529091205460ff90911692565b60408051931515845260208401929092529082015260600161013d565b61023b610236366004610749565b610411565b60405161013d9a999897969594939291906107bc565b61026461025f366004610749565b610504565b60405161013d96959493929190610836565b610289610284366004610749565b6105d5565b60405161013d9190610886565b6000818152600080516020610983833981519152602090815260408083207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a90925282208154600190610100900460ff1660048111156102f8576102f8610762565b14610307575060009392505050565b60008160060154836002015460018560040154610324919061093f565b84600401546103339190610958565b61033d919061096f565b610347919061096f565b90508042111561035c57506000949350505050565b610366428261093f565b95945050505050565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac898054600091829182906103a59060019061093f565b9154919491935090915050565b6000818152600080516020610983833981519152602090815260408083207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a909252822060028201546004808401549083015485929161033d91610958565b6000808080606081808080808060008051602061098383398151915260008d815260209182526040908190208054600482015460028301546011840154601285015460038601546001870180548951818c0281018c01909a52808a52979a5060ff8088169a6101008904909116996001600160a01b036201000090990489169997989297899690931694939290918891908301828280156104db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104bd575b505050505095509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b6000808080606081807f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628886000898152602091825260409081902080546001820154600283015460078401546003850180548751818a0281018a0190985280885295985060ff808616986101009096041696939592949093919284918301828280156105b857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161059a575b505050505091509650965096509650965096505091939550919395565b61064f60405180610160016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b5060009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a6020908152604091829020825161016081018452815460ff8116151582526001600160a01b03610100918290048116948301949094526001830154948201949094526002820154606082015260038201546080820152600482015460a0820152600582015460c0820152600682015460e082015260078201549381019390935260088101548216610120840152600901541661014082015290565b6000806040838503121561072457600080fd5b82356001600160a01b038116811461073b57600080fd5b946020939093013593505050565b60006020828403121561075b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156107b15781516001600160a01b03168752958201959082019060010161078c565b509495945050505050565b60006101408c1515835260058c106107d6576107d6610762565b602083018c90526001600160a01b038b81166040850152606084018b9052608084018290526108078285018b610778565b60a085019990995260c084019790975250509290931660e0830152610100820152610120015295945050505050565b861515815260006004871061084d5761084d610762565b86602083015285604083015284606083015260c0608083015261087360c0830185610778565b90508260a0830152979650505050505050565b815115158152610160810160208301516108ab60208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015161090f828501826001600160a01b03169052565b5050610140928301516001600160a01b0316919092015290565b634e487b7160e01b600052601160045260246000fd5b8181038181111561095257610952610929565b92915050565b808202811582820484141761095257610952610929565b808201808211156109525761095261092956fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307ca2646970667358221220ace7c3f326f091226210940f551c5196c87454c9db5f472e8acaa23d55eed65f64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCollateralSummary(uint256)": {
        "params": {
          "id": "the collateral id"
        },
        "returns": {
          "_0": "collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "id": "the collateral id"
        },
        "returns": {
          "_0": "isCollateralMember, collateralMembersBank, collateralPaymentBank"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "id": "the fund id"
        },
        "returns": {
          "_0": "initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, lastBeneficiary, totalAmountOfCycles, fundEnd"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "id": "the fund id",
          "participant": "the user to get the info from"
        },
        "returns": {
          "_0": "isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "id": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "id": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "id": "the term id"
        },
        "returns": {
          "_0": "the term struct"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}