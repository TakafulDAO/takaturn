{
  "address": "0x8Bbf9FF3D61A23643005F49D1704cB588bcf9721",
  "abi": [
    {
      "inputs": [],
      "name": "FunctionInvalidAtThisState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnCollateralStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnFrozenMoneyPotLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTermOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTermOwner",
          "type": "address"
        }
      ],
      "name": "TermOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "emptyCollateralAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "expired",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermV2.Term",
          "name": "term",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "defaulters",
          "type": "address[]"
        }
      ],
      "name": "requestContribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "setStateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "withdrawReimbursement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49b64cf1594f9e4115830a52c34788d6ff78447b3ca22458b213a2db338dcb67",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2183297",
    "logsBloom": "0x
    "blockHash": "0x41a43d474ccddb9cfd990cc7b5ca62cb5087c4e84e9faa414c46704e1943c793",
    "transactionHash": "0x49b64cf1594f9e4115830a52c34788d6ff78447b3ca22458b213a2db338dcb67",
    "logs": [],
    "blockNumber": 104233351,
    "cumulativeGasUsed": "2183297",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7fd8a3dd9f976d40ffd25cccf6b1d82b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FunctionInvalidAtThisState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnCollateralStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnFrozenMoneyPotLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTermOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTermOwner\",\"type\":\"address\"}],\"name\":\"TermOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"emptyCollateralAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermV2.Term\",\"name\":\"term\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"defaulters\",\"type\":\"address[]\"}],\"name\":\"requestContribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"setStateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"withdrawReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aisha El Allam\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"params\":{\"termId\":\"The term id\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"releaseCollateral(uint256)\":{\"params\":{\"termId\":\"term id\"}},\"requestContribution((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"details\":\"Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\",\"params\":{\"defaulters\":\"Address that was randomly selected for the current cycle\"},\"returns\":{\"_0\":\"expellants array of addresses that were expelled\"}},\"setStateOwner(uint256,uint8)\":{\"params\":{\"newState\":\"collateral state\",\"termId\":\"term id\"}},\"withdrawCollateral(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"termId\":\"term id\"}},\"withdrawReimbursement(uint256,address)\":{\"params\":{\"depositor\":\"Address of the depositor\",\"termId\":\"term id\"}}},\"title\":\"Takaturn Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the Collateral after 180 days\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"requestContribution((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"notice\":\"Called from Fund contract when someone defaults\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Called by each member after the end of the cycle to withraw collateral\"}},\"notice\":\"This is used to operate the Takaturn collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/CollateralFacetV2.sol\":\"CollateralFacetV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/access/TermOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that starts a new term. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract TermOwnable is Context {\\r\\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        _checkTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function _termOwner(uint termId) internal view virtual returns (address) {\\r\\n        return LibTerm._termStorage().terms[termId].termOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkTermOwner(uint termId) internal view virtual {\\r\\n        require(_termOwner(termId) == _msgSender(), \\\"TermOwnable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyTermOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\\r\\n        _transferTermOwnership(termId, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    // function transferTermOwnership(\\r\\n    //     uint termId,\\r\\n    //     address newTermOwner\\r\\n    // ) internal virtual onlyTermOwner(termId) {\\r\\n    //     require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    //     _transferTermOwnership(termId, newTermOwner);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferTermOwnership(\\r\\n        uint termId,\\r\\n        address newTermOwner\\r\\n    ) internal virtual onlyTermOwner(termId) {\\r\\n        require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        address oldOwner = term.termOwner;\\r\\n        term.termOwner = newTermOwner;\\r\\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c6005fcd387d8c93c9f6fe1d0d2e3593895a5a97221259c771a7c59deb796e6\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"},\"contracts/version-2/facets/CollateralFacetV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFundV2} from \\\"../interfaces/IFundV2.sol\\\";\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\nimport {IGettersV2} from \\\"../interfaces/IGettersV2.sol\\\";\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\n\\r\\nimport {TermOwnable} from \\\"../../version-1/access/TermOwnable.sol\\\";\\r\\n\\r\\n/// @title Takaturn Collateral\\r\\n/// @author Aisha El Allam\\r\\n/// @notice This is used to operate the Takaturn collateral\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract CollateralFacetV2 is ICollateralV2, TermOwnable {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralV2.CollateralStates indexed oldState,\\r\\n        LibCollateralV2.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnCollateralWithdrawal(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnFrozenMoneyPotLiquidated(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        uint indexed amount\\r\\n    );\\r\\n\\r\\n    /// @param termId term id\\r\\n    /// @param _state collateral state\\r\\n    modifier atState(uint termId, LibCollateralV2.CollateralStates _state) {\\r\\n        _atState(termId, _state);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param termId term id\\r\\n    /// @param newState collateral state\\r\\n    function setStateOwner(uint termId, LibCollateralV2.CollateralStates newState) external {\\r\\n        _setState(termId, newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function requestContribution(\\r\\n        LibTermV2.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    )\\r\\n        external\\r\\n        atState(term.termId, LibCollateralV2.CollateralStates.CycleOngoing)\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[term.termId];\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[term.termId];\\r\\n\\r\\n        (uint shareEth, uint shareUsdc, address[] memory expellants) = _whoExpelled(\\r\\n            collateral,\\r\\n            term,\\r\\n            fund,\\r\\n            defaulters\\r\\n        );\\r\\n\\r\\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _liquidateCollateral(\\r\\n            collateral,\\r\\n            term\\r\\n        );\\r\\n\\r\\n        // Finally, divide the share equally among non-beneficiaries //todo: check if this is still needed\\r\\n        if (nonBeneficiaryCounter > 0) {\\r\\n            // This case can only happen when what?\\r\\n            shareEth = shareEth / nonBeneficiaryCounter;\\r\\n            shareUsdc = shareUsdc / nonBeneficiaryCounter;\\r\\n            for (uint i; i < nonBeneficiaryCounter; ) {\\r\\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += shareEth;\\r\\n                fund.beneficiariesPool[nonBeneficiaries[i]] += shareUsdc;\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId term id\\r\\n    function withdrawCollateral(\\r\\n        uint termId\\r\\n    ) external atState(termId, LibCollateralV2.CollateralStates.ReleasingCollateral) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[termId];\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        require(fund.paidThisCycle[msg.sender], \\\"You have not paid this cycle\\\");\\r\\n        require(fund.currentState == LibFundV2.FundStates.CycleOngoing, \\\"Wrong state\\\");\\r\\n\\r\\n        uint userSecurity = collateral.collateralDepositByUser[msg.sender]; // todo: or collateralMembersBank?\\r\\n\\r\\n        uint remainingCycles = IGettersV2(address(this)).getRemainingCycles(termId);\\r\\n        uint remainingCyclesContribution = IGettersV2(address(this))\\r\\n            .getRemainingCyclesContributionWei(termId);\\r\\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        uint allowedWithdraw = ((userSecurity - remainingCyclesContribution) / remainingCycles) +\\r\\n            contributionAmountWei;\\r\\n\\r\\n        if (allowedWithdraw <= collateral.collateralPaymentBank[msg.sender]) {\\r\\n            _withdrawFromYield(termId, msg.sender, allowedWithdraw, yield);\\r\\n\\r\\n            collateral.collateralPaymentBank[msg.sender] -= allowedWithdraw;\\r\\n            (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\\\"\\\");\\r\\n            require(success);\\r\\n        } else {\\r\\n            uint neededAmount = allowedWithdraw - collateral.collateralPaymentBank[msg.sender];\\r\\n            if (neededAmount <= collateral.collateralMembersBank[msg.sender]) {\\r\\n                _withdrawFromYield(termId, msg.sender, allowedWithdraw, yield);\\r\\n\\r\\n                collateral.collateralPaymentBank[msg.sender] -= 0;\\r\\n                collateral.collateralMembersBank[msg.sender] -= neededAmount;\\r\\n                (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\\\"\\\");\\r\\n                require(success);\\r\\n            } else {\\r\\n                // todo: check if this is still needed. Think now with partial withdraws this else can be removed\\r\\n                uint amount = collateral.collateralMembersBank[msg.sender] +\\r\\n                    collateral.collateralPaymentBank[msg.sender];\\r\\n                _withdrawFromYield(termId, msg.sender, amount, yield);\\r\\n\\r\\n                collateral.collateralMembersBank[msg.sender] = 0;\\r\\n                collateral.collateralPaymentBank[msg.sender] = 0;\\r\\n                (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n                require(success);\\r\\n                --collateral.counterMembers;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId term id\\r\\n    /// @param depositor Address of the depositor\\r\\n    function withdrawReimbursement(uint termId, address depositor) external {\\r\\n        require(LibFundV2._fundExists(termId), \\\"Fund does not exists\\\");\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint amount = collateral.collateralPaymentBank[depositor];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        _withdrawFromYield(termId, msg.sender, amount, yield);\\r\\n\\r\\n        collateral.collateralPaymentBank[depositor] = 0;\\r\\n\\r\\n        (bool success, ) = payable(depositor).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnCollateralWithdrawal(termId, depositor, amount);\\r\\n    }\\r\\n\\r\\n    /// @param termId term id\\r\\n    function releaseCollateral(uint termId) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        require(fund.currentState == LibFundV2.FundStates.FundClosed, \\\"Wrong state\\\");\\r\\n        _setState(termId, LibCollateralV2.CollateralStates.ReleasingCollateral);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\r\\n        return _isUnderCollaterized(termId, member);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    /// @param termId The term id\\r\\n    function emptyCollateralAfterEnd(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        onlyTermOwner(termId)\\r\\n        atState(termId, LibCollateralV2.CollateralStates.ReleasingCollateral)\\r\\n    {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        (, , , , , uint fundEnd, , ) = IGettersV2(address(this)).getFundSummary(termId);\\r\\n        require(block.timestamp > fundEnd + 180 days, \\\"Can't empty yet\\\");\\r\\n\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n            uint amount = collateral.collateralMembersBank[depositor] +\\r\\n                collateral.collateralPaymentBank[depositor];\\r\\n\\r\\n            _withdrawFromYield(termId, depositor, amount, yield);\\r\\n\\r\\n            collateral.collateralMembersBank[depositor] = 0;\\r\\n            collateral.collateralPaymentBank[depositor] = 0;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _setState(termId, LibCollateralV2.CollateralStates.Closed);\\r\\n\\r\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _termId, LibCollateralV2.CollateralStates _newState) internal {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibCollateralV2.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _termId The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\r\\n\\r\\n        if (!LibFundV2._fundExists(_termId)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , collateralLimit) = IGettersV2(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _termId\\r\\n            );\\r\\n        } else {\\r\\n            collateralLimit = IGettersV2(address(this)).getRemainingCyclesContributionWei(_termId);\\r\\n        }\\r\\n\\r\\n        return (memberCollateral < collateralLimit);\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @param _defaulters Defaulters array\\r\\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function _whoExpelled(\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        LibTermV2.Term memory _term,\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        address[] memory _defaulters\\r\\n    ) internal returns (uint, uint, address[] memory) {\\r\\n        // require(_defaulters.length > 0, \\\"No defaulters\\\"); // todo: needed? only call this function when there are defaulters\\r\\n\\r\\n        address[] memory expellants;\\r\\n        uint expellantsCounter;\\r\\n        uint shareEth;\\r\\n        uint shareUsdc;\\r\\n        //uint currentDefaulterBank;\\r\\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\\r\\n            _term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\\r\\n        for (uint i; i < _defaulters.length; ) {\\r\\n            //currentDefaulterBank = _collateral.collateralMembersBank[_defaulters[i]];\\r\\n\\r\\n            if (\\r\\n                (!_fund.isBeneficiary[_defaulters[i]] &&\\r\\n                    (_collateral.collateralMembersBank[_defaulters[i]] >= contributionAmountWei)) ||\\r\\n                (_fund.isBeneficiary[_defaulters[i]] &&\\r\\n                    !_isUnderCollaterized(_term.termId, _defaulters[i])) ||\\r\\n                (_fund.isBeneficiary[_defaulters[i]] &&\\r\\n                    _isUnderCollaterized(_term.termId, _defaulters[i]) &&\\r\\n                    _fund.beneficiariesFrozenPool[_defaulters[i]] &&\\r\\n                    (_collateral.collateralMembersBank[_defaulters[i]] >= contributionAmountWei))\\r\\n            ) {\\r\\n                // Pay with collateral\\r\\n                // Not expelled\\r\\n                _payDefaulterContribution(\\r\\n                    _collateral,\\r\\n                    _fund,\\r\\n                    _term,\\r\\n                    _defaulters[i],\\r\\n                    contributionAmountWei,\\r\\n                    true, // Pay with collateral\\r\\n                    false, // Does not pay with frozen pool\\r\\n                    false // Not expelled\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                (!_fund.isBeneficiary[_defaulters[i]] &&\\r\\n                    (_collateral.collateralMembersBank[_defaulters[i]] < contributionAmountWei)) ||\\r\\n                (_fund.isBeneficiary[_defaulters[i]] &&\\r\\n                    _isUnderCollaterized(_term.termId, _defaulters[i]) &&\\r\\n                    !_fund.beneficiariesFrozenPool[_defaulters[i]])\\r\\n            ) {\\r\\n                _payDefaulterContribution(\\r\\n                    _collateral,\\r\\n                    _fund,\\r\\n                    _term,\\r\\n                    _defaulters[i],\\r\\n                    contributionAmountWei,\\r\\n                    true,\\r\\n                    false, // Does not pay with frozen pool\\r\\n                    true // Expelled\\r\\n                );\\r\\n                if (_fund.isBeneficiary[_defaulters[i]]) {\\r\\n                    // Expelled\\r\\n                    // Remaining collateral distributed\\r\\n                    shareEth += _collateral.collateralMembersBank[_defaulters[i]];\\r\\n                } else {\\r\\n                    // Expelled\\r\\n                    // Keep remaining collateral\\r\\n                    _collateral.collateralPaymentBank[_defaulters[i]] += _collateral\\r\\n                        .collateralMembersBank[_defaulters[i]];\\r\\n                }\\r\\n\\r\\n                expellants[i] = _defaulters[i];\\r\\n\\r\\n                unchecked {\\r\\n                    ++expellantsCounter;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                _fund.isBeneficiary[_defaulters[i]] &&\\r\\n                _isUnderCollaterized(_term.termId, _defaulters[i]) &&\\r\\n                _fund.beneficiariesFrozenPool[_defaulters[i]] &&\\r\\n                (_collateral.collateralMembersBank[_defaulters[i]] < contributionAmountWei)\\r\\n            ) {\\r\\n                if (_fund.beneficiariesPool[_defaulters[i]] >= _term.contributionAmount) {\\r\\n                    // Pay with frozen pool\\r\\n                    // Not expelled\\r\\n                    _payDefaulterContribution(\\r\\n                        _collateral,\\r\\n                        _fund,\\r\\n                        _term,\\r\\n                        _defaulters[i],\\r\\n                        contributionAmountWei,\\r\\n                        false, // Does not pay with collateral\\r\\n                        true, // Pay with frozen pool\\r\\n                        false // Not expelled\\r\\n                    );\\r\\n                } else {\\r\\n                    uint totalAmountWei = _collateral.collateralMembersBank[_defaulters[i]] +\\r\\n                        IGettersV2(address(this)).getToEthConversionRate(\\r\\n                            _fund.beneficiariesPool[_defaulters[i]] * 10 ** 18\\r\\n                        );\\r\\n                    if (\\r\\n                        totalAmountWei >=\\r\\n                        IGettersV2(address(this)).getRemainingCyclesContributionWei(_term.termId)\\r\\n                    ) {\\r\\n                        // Pay with collateral and frozen pool\\r\\n                        // First with collateral, leftover with frozen pool\\r\\n                        // Not expelled\\r\\n                        _payDefaulterContribution(\\r\\n                            _collateral,\\r\\n                            _fund,\\r\\n                            _term,\\r\\n                            _defaulters[i],\\r\\n                            contributionAmountWei,\\r\\n                            true, // Pay with collateral\\r\\n                            true, // Pay with frozen pool\\r\\n                            false // Not expelled\\r\\n                        );\\r\\n                    } else {\\r\\n                        // Expelled\\r\\n                        // Distribute collateral and frozen money pot\\r\\n                        _payDefaulterContribution(\\r\\n                            _collateral,\\r\\n                            _fund,\\r\\n                            _term,\\r\\n                            _defaulters[i],\\r\\n                            contributionAmountWei,\\r\\n                            true,\\r\\n                            false,\\r\\n                            true\\r\\n                        );\\r\\n                        shareEth += _collateral.collateralMembersBank[_defaulters[i]];\\r\\n                        shareUsdc += _fund.beneficiariesPool[_defaulters[i]];\\r\\n                        _fund.beneficiariesPool[_defaulters[i]] = 0;\\r\\n                        expellants[i] = _defaulters[i];\\r\\n\\r\\n                        unchecked {\\r\\n                            ++expellantsCounter;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (shareEth, shareUsdc, expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice called internally to pay defaulter contribution\\r\\n    function _payDefaulterContribution(\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        LibTermV2.Term memory _term,\\r\\n        address _defaulter,\\r\\n        uint _contributionAmountWei,\\r\\n        bool _payWithCollateral,\\r\\n        bool _payWithFrozenPool,\\r\\n        bool _isExpelled\\r\\n    ) internal {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[_term.termId];\\r\\n\\r\\n        address beneficiary = IGettersV2(address(this)).getCurrentBeneficiary(_term.termId);\\r\\n\\r\\n        if (_payWithCollateral && !_payWithFrozenPool) {\\r\\n            if (!_isExpelled) {\\r\\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\\r\\n\\r\\n                // Subtract contribution from defaulter and add to beneficiary.\\r\\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\\r\\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\\r\\n            } else {\\r\\n                _withdrawFromYield(\\r\\n                    _term.termId,\\r\\n                    _defaulter,\\r\\n                    _collateral.collateralMembersBank[_defaulter],\\r\\n                    yield\\r\\n                );\\r\\n\\r\\n                // Expelled\\r\\n                _collateral.isCollateralMember[_defaulter] = false;\\r\\n                _collateral.collateralMembersBank[_defaulter] = 0;\\r\\n            }\\r\\n            emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\\r\\n        }\\r\\n        if (_payWithFrozenPool && !_payWithCollateral) {\\r\\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount;\\r\\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount;\\r\\n\\r\\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\\r\\n        }\\r\\n        if (_payWithCollateral && _payWithFrozenPool) {\\r\\n            _withdrawFromYield(\\r\\n                _term.termId,\\r\\n                _defaulter,\\r\\n                _collateral.collateralMembersBank[_defaulter],\\r\\n                yield\\r\\n            );\\r\\n\\r\\n            uint leftover = IGettersV2(address(this)).getToEthConversionRate(\\r\\n                _term.contributionAmount * 10 ** 18\\r\\n            ) - _collateral.collateralMembersBank[_defaulter];\\r\\n\\r\\n            uint leftoverUSDC = IGettersV2(address(this)).getToUSDConversionRate(leftover);\\r\\n\\r\\n            _collateral.collateralPaymentBank[beneficiary] += _collateral.collateralMembersBank[\\r\\n                _defaulter\\r\\n            ];\\r\\n            _collateral.collateralMembersBank[_defaulter] = 0;\\r\\n            _fund.beneficiariesPool[beneficiary] += leftoverUSDC;\\r\\n            _fund.beneficiariesPool[_defaulter] -= leftoverUSDC;\\r\\n\\r\\n            emit OnCollateralLiquidated(\\r\\n                _term.termId,\\r\\n                _defaulter,\\r\\n                _collateral.collateralMembersBank[_defaulter]\\r\\n            );\\r\\n\\r\\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, leftoverUSDC);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return nonBeneficiaries array of addresses that were expelled\\r\\n    function _liquidateCollateral(\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        LibTermV2.Term memory _term\\r\\n    ) internal view returns (uint, address[] memory) {\\r\\n        address currentDepositor;\\r\\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\\r\\n\\r\\n        uint nonBeneficiaryCounter;\\r\\n\\r\\n        // Divide and Liquidate\\r\\n        uint depositorsLength = _collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            currentDepositor = _collateral.depositors[i];\\r\\n            if (\\r\\n                !IFundV2(address(this)).isBeneficiary(_term.termId, currentDepositor) &&\\r\\n                _collateral.isCollateralMember[currentDepositor]\\r\\n            ) {\\r\\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\\r\\n                nonBeneficiaryCounter++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (nonBeneficiaryCounter, nonBeneficiaries);\\r\\n    }\\r\\n\\r\\n    function _withdrawFromYield(\\r\\n        uint _termId,\\r\\n        address _user,\\r\\n        uint _amount,\\r\\n        LibYieldGeneration.YieldGeneration storage _yield\\r\\n    ) internal {\\r\\n        if (_yield.hasOptedIn[_user]) {\\r\\n            IYGFacetZaynFi(address(this)).withdrawYG(_termId, _user, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _atState(uint _termId, LibCollateralV2.CollateralStates _state) internal view {\\r\\n        LibCollateralV2.CollateralStates state = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId]\\r\\n            .state;\\r\\n        if (state != _state) revert FunctionInvalidAtThisState();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3336e69c46301a2217b0fad639ceaabd1583dd578eb67c25e8778210815eb4ef\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ICollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface ICollateralV2 {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint termId, LibCollateralV2.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTermV2.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    function withdrawReimbursement(uint termId, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x46d91766fc74d556bff4bdd9afb32cbd9ceca6dfbace72bb0be68fa3be52ab35\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IFundV2 {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7f1511cf096ba3a24f2a20843e77a2e01057f7b6d5b13a5622615043dda5509\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IGettersV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IGettersV2 {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getRemainingContributionPeriod(uint termId) external view returns (uint);\\r\\n\\r\\n    function getTermSummary(uint termId) external view returns (LibTermV2.Term memory);\\r\\n\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundV2.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userAPR(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPR(uint termId) external view returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8e3d79e3a992f8ae2c0756845b82c35fc5a7122bab1b9908617864b1b519efa\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(uint termId, address user, uint256 ethAmount) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x916cd38cb81f706628cb91ee4c262d2ee01fbb5132c1933c68e064adf0e1f72d\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\n\\r\\nlibrary LibFundV2 {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        // todo: add another one to freeze collateral?\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.5RCC\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x602deb4e1075915d84d7ceb686192ca42ae71a0228a90e410406dfa1503b156f\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        address[] zaps;\\r\\n        address[] vaults;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        address zap;\\r\\n        address vault;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x43636f87b823484826f26660cf6bfcac3c5c84e36ebb46483da19240da844608\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Aisha El Allam",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "params": {
          "termId": "The term id"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "releaseCollateral(uint256)": {
        "params": {
          "termId": "term id"
        }
      },
      "requestContribution((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "details": "Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract",
        "params": {
          "defaulters": "Address that was randomly selected for the current cycle"
        },
        "returns": {
          "_0": "expellants array of addresses that were expelled"
        }
      },
      "setStateOwner(uint256,uint8)": {
        "params": {
          "newState": "collateral state",
          "termId": "term id"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "termId": "term id"
        }
      },
      "withdrawReimbursement(uint256,address)": {
        "params": {
          "depositor": "Address of the depositor",
          "termId": "term id"
        }
      }
    },
    "title": "Takaturn Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "notice": "allow the owner to empty the Collateral after 180 days"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "requestContribution((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "notice": "Called from Fund contract when someone defaults"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Called by each member after the end of the cycle to withraw collateral"
      }
    },
    "notice": "This is used to operate the Takaturn collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}