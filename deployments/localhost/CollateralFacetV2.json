{
  "address": "0x66EA75011C3239bf769347C9C23DfA86439aB20b",
  "abi": [
    {
      "inputs": [],
      "name": "FunctionInvalidAtThisState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnCollateralStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReimbursementWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTermOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTermOwner",
          "type": "address"
        }
      ],
      "name": "TermOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "emptyCollateralAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "defaulters",
          "type": "address[]"
        }
      ],
      "name": "requestContribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "setStateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "withdrawReimbursement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fe68f9fd83fa50d3ac1c14502a58db214b24af4ab783df69f07ded1cdff6b3e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1646179",
    "logsBloom": "0x
    "blockHash": "0x7b2148de780882a6bd01a449d53cfac0c3b31d23c57085173798aac8c0ba200f",
    "transactionHash": "0x1fe68f9fd83fa50d3ac1c14502a58db214b24af4ab783df69f07ded1cdff6b3e",
    "logs": [],
    "blockNumber": 16,
    "cumulativeGasUsed": "1646179",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fcf3f5ced1f3d5f96be9fe2a13cdc034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FunctionInvalidAtThisState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnCollateralStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReimbursementWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTermOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTermOwner\",\"type\":\"address\"}],\"name\":\"TermOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emptyCollateralAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"defaulters\",\"type\":\"address[]\"}],\"name\":\"requestContribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"setStateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"withdrawReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aisha El Allam\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"params\":{\"id\":\"The term id\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"id\":\"The term id\",\"member\":\"The user to check for\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"releaseCollateral(uint256)\":{\"params\":{\"id\":\"term id\"}},\"requestContribution(uint256,address,address[])\":{\"details\":\"Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\",\"params\":{\"beneficiary\":\"Address that will be receiving the cycle pot\",\"defaulters\":\"Address that was randomly selected for the current cycle\",\"id\":\"term id\"},\"returns\":{\"_0\":\"expellants array of addresses that were expelled\"}},\"setStateOwner(uint256,uint8)\":{\"params\":{\"id\":\"term id\",\"newState\":\"collateral state\"}},\"withdrawCollateral(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"id\":\"term id\"}},\"withdrawReimbursement(uint256,address)\":{\"params\":{\"depositor\":\"Address of the depositor\",\"id\":\"term id\"}}},\"title\":\"Takaturn Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the Collateral after 180 days\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"requestContribution(uint256,address,address[])\":{\"notice\":\"Called from Fund contract when someone defaults\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Called by each member after the end of the cycle to withraw collateral\"}},\"notice\":\"This is used to operate the Takaturn collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/CollateralFacetV2.sol\":\"CollateralFacetV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/access/TermOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that starts a new term. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract TermOwnable is Context {\\r\\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        _checkTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function _termOwner(uint termId) internal view virtual returns (address) {\\r\\n        return LibTerm._termStorage().terms[termId].termOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkTermOwner(uint termId) internal view virtual {\\r\\n        require(_termOwner(termId) == _msgSender(), \\\"TermOwnable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyTermOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\\r\\n        _transferTermOwnership(termId, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    // function transferTermOwnership(\\r\\n    //     uint termId,\\r\\n    //     address newTermOwner\\r\\n    // ) internal virtual onlyTermOwner(termId) {\\r\\n    //     require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    //     _transferTermOwnership(termId, newTermOwner);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferTermOwnership(\\r\\n        uint termId,\\r\\n        address newTermOwner\\r\\n    ) internal virtual onlyTermOwner(termId) {\\r\\n        require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        address oldOwner = term.termOwner;\\r\\n        term.termOwner = newTermOwner;\\r\\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c6005fcd387d8c93c9f6fe1d0d2e3593895a5a97221259c771a7c59deb796e6\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"},\"contracts/version-2/facets/CollateralFacetV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFundV2} from \\\"../interfaces/IFundV2.sol\\\";\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\nimport {IGettersV2} from \\\"../interfaces/IGettersV2.sol\\\";\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\n\\r\\nimport {TermOwnable} from \\\"../../version-1/access/TermOwnable.sol\\\";\\r\\n\\r\\n/// @title Takaturn Collateral\\r\\n/// @author Aisha El Allam\\r\\n/// @notice This is used to operate the Takaturn collateral\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract CollateralFacetV2 is ICollateralV2, TermOwnable {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralV2.CollateralStates indexed oldState,\\r\\n        LibCollateralV2.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param _state collateral state\\r\\n    modifier atState(uint id, LibCollateralV2.CollateralStates _state) {\\r\\n        LibCollateralV2.CollateralStates state = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id]\\r\\n            .state;\\r\\n        if (state != _state) revert FunctionInvalidAtThisState();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param newState collateral state\\r\\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external {\\r\\n        _setState(id, newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param id term id\\r\\n    /// @param beneficiary Address that will be receiving the cycle pot\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    )\\r\\n        external\\r\\n        atState(id, LibCollateralV2.CollateralStates.CycleOngoing)\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n\\r\\n        address[] memory actualDefaulters = _actualDefaulters(\\r\\n            fund,\\r\\n            collateral,\\r\\n            beneficiary,\\r\\n            defaulters\\r\\n        );\\r\\n\\r\\n        (uint share, address[] memory expellants) = _whoExpelled(\\r\\n            collateral,\\r\\n            term,\\r\\n            beneficiary,\\r\\n            actualDefaulters\\r\\n        );\\r\\n\\r\\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _liquidateCollateral(\\r\\n            collateral,\\r\\n            term\\r\\n        );\\r\\n\\r\\n        // Finally, divide the share equally among non-beneficiaries\\r\\n        if (nonBeneficiaryCounter > 0) {\\r\\n            // This case can only happen when what?\\r\\n            share = share / nonBeneficiaryCounter;\\r\\n            for (uint i = 0; i < nonBeneficiaryCounter; i++) {\\r\\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += share;\\r\\n            }\\r\\n        }\\r\\n        return (expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param id term id\\r\\n    function withdrawCollateral(\\r\\n        uint id\\r\\n    ) external atState(id, LibCollateralV2.CollateralStates.ReleasingCollateral) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\\r\\n        require(fund.paidThisCycle[msg.sender], \\\"You have not paid this cycle\\\");\\r\\n        require(fund.currentState == LibFundV2.FundStates.CycleOngoing, \\\"Wrong state\\\");\\r\\n\\r\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\r\\n\\r\\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n        uint remainingContribution = contributionAmountWei * remainingCycles;\\r\\n\\r\\n        uint userSecurity = collateral.collateralDepositByUser[msg.sender]; // todo: or collateralMembersBank?\\r\\n\\r\\n        uint allowedWithdraw = ((userSecurity - remainingContribution) / remainingCycles) +\\r\\n            contributionAmountWei;\\r\\n\\r\\n        if (allowedWithdraw <= collateral.collateralPaymentBank[msg.sender]) {\\r\\n            collateral.collateralPaymentBank[msg.sender] -= allowedWithdraw;\\r\\n            (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\\\"\\\");\\r\\n            require(success);\\r\\n        } else {\\r\\n            uint neededAmount = allowedWithdraw - collateral.collateralPaymentBank[msg.sender];\\r\\n            if (neededAmount <= collateral.collateralMembersBank[msg.sender]) {\\r\\n                collateral.collateralPaymentBank[msg.sender] -= 0;\\r\\n                collateral.collateralMembersBank[msg.sender] -= neededAmount;\\r\\n                (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\\\"\\\");\\r\\n                require(success);\\r\\n            } else {\\r\\n                uint amount = collateral.collateralMembersBank[msg.sender] +\\r\\n                    collateral.collateralPaymentBank[msg.sender];\\r\\n                collateral.collateralMembersBank[msg.sender] = 0;\\r\\n                collateral.collateralPaymentBank[msg.sender] = 0;\\r\\n                (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n                require(success);\\r\\n                --collateral.counterMembers;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param depositor Address of the depositor\\r\\n    function withdrawReimbursement(uint id, address depositor) external {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        require(LibFundV2._fundExists(id), \\\"Fund does not exists\\\");\\r\\n        uint amount = collateral.collateralPaymentBank[depositor];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        collateral.collateralPaymentBank[depositor] = 0;\\r\\n\\r\\n        (bool success, ) = payable(depositor).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(id, depositor, amount);\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    function releaseCollateral(uint id) external {\\r\\n        require(LibFundV2._fundExists(id), \\\"Fund does not exists\\\");\\r\\n        _setState(id, LibCollateralV2.CollateralStates.ReleasingCollateral);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param id The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool) {\\r\\n        return _isUnderCollaterized(id, member);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    /// @param id The term id\\r\\n    function emptyCollateralAfterEnd(\\r\\n        uint id\\r\\n    ) external onlyTermOwner(id) atState(id, LibCollateralV2.CollateralStates.ReleasingCollateral) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        (, , , , , uint fundEnd, , , ) = IGettersV2(address(this)).getFundSummary(id);\\r\\n        require(block.timestamp > fundEnd + 180 days, \\\"Can't empty yet\\\");\\r\\n\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; i++) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n            collateral.collateralMembersBank[depositor] = 0;\\r\\n            collateral.collateralPaymentBank[depositor] = 0;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _setState(id, LibCollateralV2.CollateralStates.Closed);\\r\\n\\r\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /// @param _id term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _id, LibCollateralV2.CollateralStates _newState) internal {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_id];\\r\\n        LibCollateralV2.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_id, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _id The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _id, address _member) internal view returns (bool) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateralUSD;\\r\\n        (, , , , , , uint currentCycle, , uint totalAmountOfCycles) = IGettersV2(address(this))\\r\\n            .getFundSummary(_id);\\r\\n\\r\\n        if (!LibFundV2._fundExists(_id)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , collateralLimit) = IGettersV2(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _id\\r\\n            );\\r\\n        } else {\\r\\n            uint remainingCycles = 1 + totalAmountOfCycles - currentCycle;\\r\\n\\r\\n            collateralLimit = remainingCycles * term.contributionAmount * 10 ** 18; // 18 decimals\\r\\n        }\\r\\n\\r\\n        memberCollateralUSD = IGettersV2(address(this)).getToUSDConversionRate(\\r\\n            collateral.collateralMembersBank[_member]\\r\\n        );\\r\\n        return (memberCollateralUSD < collateralLimit);\\r\\n    }\\r\\n\\r\\n    /// @notice Called to get the defaulters\\r\\n    /// @dev Beneficiary is never considered a defaulter\\r\\n    /// @dev If the beneficiary was previously expelled, then we only consider previous beneficiaries\\r\\n    /// @param _fund Fund storage\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _beneficiary Address that will be receiving the cycle pot\\r\\n    /// @param _defaulters Complete defaulters array that will be filtered\\r\\n    /// @return actualDefaulters array of addresses that we will consider as defaulters for the current cycle\\r\\n    function _actualDefaulters(\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        address _beneficiary,\\r\\n        address[] calldata _defaulters\\r\\n    ) internal view returns (address[] memory) {\\r\\n        address[] memory actualDefaulters = new address[](_defaulters.length);\\r\\n        address[] memory beneficiariesOrder = _fund.beneficiariesOrder; // We check on the beneficiariesOrder array\\r\\n\\r\\n        uint256 beneficiariesLength = beneficiariesOrder.length;\\r\\n        uint256 defaultersLength = _defaulters.length;\\r\\n\\r\\n        // If the beneficiary is not a participant neither a collateral member he is expelled\\r\\n        bool expelledBeneficiary = !_fund.isParticipant[_beneficiary] &&\\r\\n            !_collateral.isCollateralMember[_beneficiary];\\r\\n\\r\\n        if (expelledBeneficiary) {\\r\\n            for (uint i; i < beneficiariesLength; ++i) {\\r\\n                // When we find the first non beneficiary we exit the loop. The first one must be the beneficiary\\r\\n                if (!_fund.isBeneficiary[beneficiariesOrder[i]]) {\\r\\n                    break;\\r\\n                }\\r\\n                for (uint j; j < defaultersLength; ++j) {\\r\\n                    // We check if the previous beneficiary is on the defaulter array\\r\\n                    if (beneficiariesOrder[i] == _defaulters[j]) {\\r\\n                        actualDefaulters[i] = _defaulters[j];\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // We don't consider the beneficiary a defaulter\\r\\n            for (uint i; i < defaultersLength; ++i) {\\r\\n                if (_defaulters[i] == _beneficiary) {\\r\\n                    continue;\\r\\n                }\\r\\n                actualDefaulters[i] = _defaulters[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return actualDefaulters;\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @param _beneficiary Address that will be receiving the cycle pot\\r\\n    /// @param _defaulters Defaulters array\\r\\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function _whoExpelled(\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        LibTermV2.Term storage _term,\\r\\n        address _beneficiary,\\r\\n        address[] memory _defaulters\\r\\n    ) internal returns (uint, address[] memory) {\\r\\n        // require(_defaulters.length > 0, \\\"No defaulters\\\"); // todo: needed? only call this function when there are defaulters\\r\\n\\r\\n        bool wasBeneficiary;\\r\\n        uint8 totalExpellants;\\r\\n        address[] memory expellants = new address[](_defaulters.length);\\r\\n        uint share;\\r\\n        uint currentDefaulterBank;\\r\\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\\r\\n            _term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\\r\\n        for (uint i; i < _defaulters.length; ) {\\r\\n            wasBeneficiary = IFundV2(address(this)).isBeneficiary(_term.termId, _defaulters[i]);\\r\\n            currentDefaulterBank = _collateral.collateralMembersBank[_defaulters[i]];\\r\\n            // Avoid expelling graced defaulter\\r\\n\\r\\n            if (\\r\\n                (wasBeneficiary && _isUnderCollaterized(_term.termId, _defaulters[i])) ||\\r\\n                (currentDefaulterBank < contributionAmountWei)\\r\\n            ) {\\r\\n                // If enter this statement through the second condition, then the defaulter may not be a beneficiary\\r\\n                // In that case\\r\\n                if (!wasBeneficiary) {\\r\\n                    // Nothing to share, reimburse all the securities left\\r\\n                    // share = 0;\\r\\n                    uint amount = _collateral.collateralMembersBank[_defaulters[i]];\\r\\n                    _collateral.collateralPaymentBank[_defaulters[i]] += amount;\\r\\n                } else {\\r\\n                    share += currentDefaulterBank;\\r\\n                }\\r\\n\\r\\n                _collateral.isCollateralMember[_defaulters[i]] = false; // Expelled!\\r\\n                expellants[i] = _defaulters[i];\\r\\n                _collateral.collateralMembersBank[_defaulters[i]] = 0;\\r\\n                ++totalExpellants;\\r\\n\\r\\n                emit OnCollateralLiquidated(\\r\\n                    _term.termId,\\r\\n                    address(_defaulters[i]),\\r\\n                    currentDefaulterBank\\r\\n                );\\r\\n            } else {\\r\\n                // Subtract contribution from defaulter and add to beneficiary.\\r\\n                _collateral.collateralMembersBank[_defaulters[i]] -= contributionAmountWei;\\r\\n                _collateral.collateralPaymentBank[_beneficiary] += contributionAmountWei;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _term.totalParticipants = _term.totalParticipants - totalExpellants;\\r\\n        return (share, expellants);\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return nonBeneficiaries array of addresses that were expelled\\r\\n    function _liquidateCollateral(\\r\\n        LibCollateralV2.Collateral storage _collateral,\\r\\n        LibTermV2.Term storage _term\\r\\n    ) internal view returns (uint, address[] memory) {\\r\\n        address currentDepositor;\\r\\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\\r\\n\\r\\n        uint nonBeneficiaryCounter;\\r\\n\\r\\n        // Divide and Liquidate\\r\\n        uint depositorsLength = _collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            currentDepositor = _collateral.depositors[i];\\r\\n            if (\\r\\n                !IFundV2(address(this)).isBeneficiary(_term.termId, currentDepositor) &&\\r\\n                _collateral.isCollateralMember[currentDepositor]\\r\\n            ) {\\r\\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\\r\\n                nonBeneficiaryCounter++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (nonBeneficiaryCounter, nonBeneficiaries);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x00e05176bd01edb2224bc75d3fa46fdc7a7c07baec2c6db93c905e023d4c5ada\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ICollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\n\\r\\ninterface ICollateralV2 {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n\\r\\n    // function getDepositorSummary(\\r\\n    //     uint id,\\r\\n    //     address participant\\r\\n    // ) external view returns (uint, uint, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xae378745b2c3448a774b0e42c35b3346ead1e2417d873c638f55e7f16bd71886\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IFundV2 {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7f1511cf096ba3a24f2a20843e77a2e01057f7b6d5b13a5622615043dda5509\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IGettersV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IGettersV2 {\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getTermSummary(uint id) external view returns (LibTermV2.Term memory);\\r\\n\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint);\\r\\n\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFundV2.FundStates,\\r\\n            IERC20,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint\\r\\n        );\\r\\n\\r\\n    function getCurrentBeneficiary(uint id) external view returns (address);\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint);\\r\\n\\r\\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x5927aa11cdfdac6a49a2dfcbbc7025c52eb82d2b0c5db702578536c4f27f9e9b\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\n\\r\\nlibrary LibFundV2 {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x956c1b0a6060ea5e21e39a5a82fdbd290ff8ee09fd9ea3230f408eb78bb0b509\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd1a70e9fe6c7cc82d1642757f0dd6874d2a0da1f7f38d47ee98909c9811ad562\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ae483d071161005b578063ae483d07146100bd578063c177f091146100d0578063c3bfb61c146100f8578063e27c3ca21461010b57600080fd5b806302c1ed1f1461008257806339007b77146100975780636112fe2e146100aa575b600080fd5b6100956100903660046117f4565b61012b565b005b6100956100a5366004611828565b610139565b6100956100b8366004611828565b610198565b6100956100cb366004611856565b610632565b6100e36100de366004611856565b6107a2565b60405190151581526020015b60405180910390f35b610095610106366004611828565b6107b7565b61011e61011936600461187b565b6109d5565b6040516100ef9190611907565b6101358282610b5c565b5050565b61014281610bf9565b61018a5760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064015b60405180910390fd5b610195816002610b5c565b50565b6000818152600080516020611c6e83398151915260205260409020548190600290610100900460ff16818160038111156101d4576101d4611954565b146101f25760405163201328a760e01b815260040160405180910390fd5b6000848152600080516020611c6e833981519152602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c8352818420600080516020611c4e833981519152845282852033865260078201909452919093205490919060ff166102ab5760405162461bcd60e51b815260206004820152601c60248201527f596f752068617665206e6f7420706169642074686973206379636c65000000006044820152606401610181565b60038254610100900460ff1660048111156102c8576102c8611954565b146103035760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b6044820152606401610181565b600082600401548360120154600161031b9190611980565b6103259190611993565b90506000306001600160a01b0316639e195b408460050154670de0b6b3a764000061035091906119a6565b6040518263ffffffff1660e01b815260040161036e91815260200190565b602060405180830381865afa15801561038b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103af91906119bd565b905060006103bd83836119a6565b33600090815260078801602052604081205491925083856103de8585611993565b6103e891906119d6565b6103f29190611980565b33600090815260068a016020526040902054909150811161048e573360009081526006890160205260408120805483929061042e908490611993565b9091555050604051600090339083908381818185875af1925050503d8060008114610475576040519150601f19603f3d011682016040523d82523d6000602084013e61047a565b606091505b505090508061048857600080fd5b50610624565b3360009081526006890160205260408120546104aa9083611993565b33600090815260058b016020526040902054909150811161056b5733600090815260068a0160205260408120805482906104e5908290611993565b909155505033600090815260058a0160205260408120805483929061050b908490611993565b9091555050604051600090339084908381818185875af1925050503d8060008114610552576040519150601f19603f3d011682016040523d82523d6000602084013e610557565b606091505b505090508061056557600080fd5b50610622565b33600090815260068a01602090815260408083205460058d019092528220546105949190611980565b33600081815260058d016020908152604080832083905560068f01909152808220829055519293509183908381818185875af1925050503d80600081146105f7576040519150601f19603f3d011682016040523d82523d6000602084013e6105fc565b606091505b505090508061060a57600080fd5b8a6002016000815461061b906119f8565b9091555050505b505b505050505050505050505050565b6000828152600080516020611c6e8339815191526020526040902061065683610bf9565b6106995760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b6044820152606401610181565b6001600160a01b0382166000908152600682016020526040902054806106f45760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610181565b6001600160a01b03831660008181526006840160205260408082208290555190919083908381818185875af1925050503d8060008114610750576040519150601f19603f3d011682016040523d82523d6000602084013e610755565b606091505b505090508061076357600080fd5b81846001600160a01b0316867f1d8d3d09e68fe1873369af18c4d7d361038dac92ac768b54ac19273dbd4cb6b860405160405180910390a45050505050565b60006107ae8383610c2d565b90505b92915050565b806107c181610e32565b6000828152600080516020611c6e83398151915260205260409020548290600290610100900460ff16818160038111156107fd576107fd611954565b1461081b5760405163201328a760e01b815260040160405180910390fd5b6000600080516020611c6e833981519152600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a29190810190611a45565b505050955050505050508062ed4e006108bb9190611980565b42116108fb5760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b6044820152606401610181565b600382015460005b8181101561096957600084600301828154811061092257610922611b83565b60009182526020808320909101546001600160a01b03168252600587018152604080832083905560068801909152812055506001018061096181611b99565b915050610903565b50610975886003610b5c565b604051600090339047908381818185875af1925050503d80600081146109b7576040519150601f19603f3d011682016040523d82523d6000602084013e6109bc565b606091505b50509050806109ca57600080fd5b505050505050505050565b6000848152600080516020611c6e83398151915260205260409020546060908590600190610100900460ff1681816003811115610a1457610a14611954565b14610a325760405163201328a760e01b815260040160405180910390fd5b6000888152600080516020611c6e83398151915260209081526040808320600080516020611c4e83398151915283528184207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9093529083209092610a9a82858d8d8d610eb7565b9050600080610aab86868f866111b1565b91509150600080610abc8888611677565b90925090508115610b4857610ad182856119d6565b935060005b82811015610b465784896006016000848481518110610af757610af7611b83565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b2e9190611980565b90915550819050610b3e81611b99565b915050610ad6565b505b50909e9d5050505050505050505050505050565b6000828152600080516020611c6e83398151915260205260409020805461010080820460ff16918491849161ff00191690836003811115610b9f57610b9f611954565b0217905550826003811115610bb657610bb6611954565b816003811115610bc857610bc8611954565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b60009081527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c602052604090205460ff1690565b6000828152600080516020611c6e83398151915260209081526040808320600080516020611c4e8339815191529092528083208151636b95dc3f60e11b815260048101879052915190918491829182918291309163d72bb87e9160248082019286929091908290030181865afa158015610cab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd39190810190611a45565b9850509750505050505050610ce789610bf9565b610d655760405163bb91b76d60e01b81526001600160a01b0389166004820152602481018a9052309063bb91b76d90604401608060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611bb2565b9650610da592505050565b600082610d73836001611980565b610d7d9190611993565b9050856005015481610d8f91906119a6565b610da190670de0b6b3a76400006119a6565b9450505b6001600160a01b038816600090815260058701602052604090819020549051632f878fa160e11b815260048101919091523090635f0f1f4290602401602060405180830381865afa158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2291906119bd565b9390931098975050505050505050565b6000818152600080516020611c4e83398151915260205260409020546001600160a01b036101009091041633146101955760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b6064820152608401610181565b606060008267ffffffffffffffff811115610ed457610ed4611a24565b604051908082528060200260200182016040528015610efd578160200160208202803683370190505b509050600087600101805480602002602001604051908101604052809291908181526020018280548015610f5a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f3c575b505083516001600160a01b038b16600090815260058e016020526040812054959650909489945090925060ff161590508015610fb157506001600160a01b038916600090815260048b01602052604090205460ff16155b905080156110ec5760005b838110156110e6578b6006016000868381518110610fdc57610fdc611b83565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156110e65760005b838110156110d55789898281811061102557611025611b83565b905060200201602081019061103a9190611bef565b6001600160a01b031686838151811061105557611055611b83565b60200260200101516001600160a01b0316036110c55789898281811061107d5761107d611b83565b90506020020160208101906110929190611bef565b8783815181106110a4576110a4611b83565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6110ce81611b99565b905061100b565b506110df81611b99565b9050610fbc565b506111a2565b60005b828110156111a057896001600160a01b031689898381811061111357611113611b83565b90506020020160208101906111289190611bef565b6001600160a01b0316146111905788888281811061114857611148611b83565b905060200201602081019061115d9190611bef565b86828151811061116f5761116f611b83565b60200260200101906001600160a01b031690816001600160a01b0316815250505b61119981611b99565b90506110ef565b505b50929998505050505050505050565b600060606000806000855167ffffffffffffffff8111156111d4576111d4611a24565b6040519080825280602002602001820160405280156111fd578160200160208202803683370190505b5090506000806000306001600160a01b0316639e195b408c60050154670de0b6b3a764000061122c91906119a6565b6040518263ffffffff1660e01b815260040161124a91815260200190565b602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b91906119bd565b905060005b895181101561164b57306001600160a01b031663e9783e608d600201548c84815181106112bf576112bf611b83565b60200260200101516040518363ffffffff1660e01b81526004016112f69291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190611c13565b96508c60050160008b838151811061135157611351611b83565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205492508680156113ab57506113ab8c600201548b838151811061139e5761139e611b83565b6020026020010151610c2d565b806113b557508183105b156115be57866114605760008d60050160008c84815181106113d9576113d9611b83565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050808e60060160008d858151811061141d5761141d611b83565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114549190611980565b9091555061146d915050565b61146a8385611980565b93505b60008d60040160008c848151811061148757611487611b83565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508981815181106114d8576114d8611b83565b60200260200101518582815181106114f2576114f2611b83565b60200260200101906001600160a01b031690816001600160a01b03168152505060008d60050160008c848151811061152c5761152c611b83565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508561156290611c2e565b9550828a828151811061157757611577611b83565b60200260200101516001600160a01b03168d600201547f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a60405160405180910390a4611643565b818d60050160008c84815181106115d7576115d7611b83565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461160e9190611993565b90915550506001600160a01b038b16600090815260068e0160205260408120805484929061163d908490611980565b90915550505b600101611290565b508460ff168b6003015461165f9190611993565b60038c01555090955090935050505094509492505050565b60006060600080856003018054905067ffffffffffffffff81111561169e5761169e611a24565b6040519080825280602002602001820160405280156116c7578160200160208202803683370190505b506003870154909150600090815b818110156117e5578860030181815481106116f2576116f2611b83565b600091825260209091200154600289015460405163074bc1f360e51b815260048101919091526001600160a01b03909116602482018190529550309063e9783e6090604401602060405180830381865afa158015611754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117789190611c13565b15801561179f57506001600160a01b038516600090815260048a01602052604090205460ff165b156117dd57848484815181106117b7576117b7611b83565b6001600160a01b0390921660209283029190910190910152826117d981611b99565b9350505b6001016116d5565b50909791965090945050505050565b6000806040838503121561180757600080fd5b8235915060208301356004811061181d57600080fd5b809150509250929050565b60006020828403121561183a57600080fd5b5035919050565b6001600160a01b038116811461019557600080fd5b6000806040838503121561186957600080fd5b82359150602083013561181d81611841565b6000806000806060858703121561189157600080fd5b8435935060208501356118a381611841565b9250604085013567ffffffffffffffff808211156118c057600080fd5b818701915087601f8301126118d457600080fd5b8135818111156118e357600080fd5b8860208260051b85010111156118f857600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156119485783516001600160a01b031683529284019291840191600101611923565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156107b1576107b161196a565b818103818111156107b1576107b161196a565b80820281158282048414176107b1576107b161196a565b6000602082840312156119cf57600080fd5b5051919050565b6000826119f357634e487b7160e01b600052601260045260246000fd5b500490565b600081611a0757611a0761196a565b506000190190565b80518015158114611a1f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b8051611a1f81611841565b60008060008060008060008060006101208a8c031215611a6457600080fd5b611a6d8a611a0f565b985060208a015160058110611a8157600080fd5b60408b0151909850611a9281611841565b60608b015190975067ffffffffffffffff80821115611ab057600080fd5b818c0191508c601f830112611ac457600080fd5b815181811115611ad657611ad6611a24565b8060051b604051601f19603f83011681018181108582111715611afb57611afb611a24565b6040529182526020808301935084820101918f831115611b1a57600080fd5b6020850194505b82851015611b4357611b3285611a3a565b845260209485019490930192611b21565b809a50505050505060808a0151945060a08a0151935060c08a01519250611b6c60e08b01611a3a565b91506101008a015190509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b600060018201611bab57611bab61196a565b5060010190565b60008060008060808587031215611bc857600080fd5b611bd185611a0f565b60208601516040870151606090970151919890975090945092505050565b600060208284031215611c0157600080fd5b8135611c0c81611841565b9392505050565b600060208284031215611c2557600080fd5b6107ae82611a0f565b600060ff821660ff8103611c4457611c4461196a565b6001019291505056fe87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a2646970667358221220787510008b8efcd09140f41607cc58b4f26ada5e8af4f80ec2861c42df67cf1664736f6c63430008120033",
  "devdoc": {
    "author": "Aisha El Allam",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "params": {
          "id": "The term id"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "id": "The term id",
          "member": "The user to check for"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "releaseCollateral(uint256)": {
        "params": {
          "id": "term id"
        }
      },
      "requestContribution(uint256,address,address[])": {
        "details": "Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract",
        "params": {
          "beneficiary": "Address that will be receiving the cycle pot",
          "defaulters": "Address that was randomly selected for the current cycle",
          "id": "term id"
        },
        "returns": {
          "_0": "expellants array of addresses that were expelled"
        }
      },
      "setStateOwner(uint256,uint8)": {
        "params": {
          "id": "term id",
          "newState": "collateral state"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "id": "term id"
        }
      },
      "withdrawReimbursement(uint256,address)": {
        "params": {
          "depositor": "Address of the depositor",
          "id": "term id"
        }
      }
    },
    "title": "Takaturn Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "notice": "allow the owner to empty the Collateral after 180 days"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "requestContribution(uint256,address,address[])": {
        "notice": "Called from Fund contract when someone defaults"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Called by each member after the end of the cycle to withraw collateral"
      }
    },
    "notice": "This is used to operate the Takaturn collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}