{
  "address": "0x2a5E37771Aca6487F2D71033af93Aa4f52a00bde",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TERM_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedCollateralEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregatorAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a82a003636cd0835637d1a587fe2ec810fa8a7e08ec4ac915f50b5018e41132",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "919324",
    "logsBloom": "0x
    "blockHash": "0x0d6012b6b28e16db5cf45ad099808f7ed9736f3f3d36b84b28e1ee5e39b344ca",
    "transactionHash": "0x5a82a003636cd0835637d1a587fe2ec810fa8a7e08ec4ac915f50b5018e41132",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "919324",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fcf3f5ced1f3d5f96be9fe2a13cdc034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TERM_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedCollateralEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Takaturn Term\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is used to deploy the collateral & fund contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-1/facets/TermFacet.sol\":\"TermFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/facets/TermFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ITerm} from \\\"../interfaces/ITerm.sol\\\";\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\n\\r\\n/// @title Takaturn Term\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to deploy the collateral & fund contracts\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract TermFacet is ITerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n\\r\\n    event OnCollateralDeposited(uint indexed termId, address indexed user);\\r\\n\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        uint fixedCollateralEth,\\r\\n        uint collateralAmount,\\r\\n        address stableTokenAddress,\\r\\n        address aggregatorAddress\\r\\n    ) external returns (uint) {\\r\\n        return\\r\\n            _createTerm(\\r\\n                totalParticipants,\\r\\n                cycleTime,\\r\\n                contributionAmount,\\r\\n                contributionPeriod,\\r\\n                fixedCollateralEth,\\r\\n                collateralAmount,\\r\\n                stableTokenAddress,\\r\\n                aggregatorAddress\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function joinTerm(uint termId) external payable {\\r\\n        _joinTerm(termId);\\r\\n    }\\r\\n\\r\\n    function startTerm(uint termId) external {\\r\\n        _startTerm(termId);\\r\\n    }\\r\\n\\r\\n    function _createTerm(\\r\\n        uint _totalParticipants,\\r\\n        uint _cycleTime,\\r\\n        uint _contributionAmount,\\r\\n        uint _contributionPeriod,\\r\\n        uint _fixedCollateralEth,\\r\\n        uint _collateralAmount,\\r\\n        address _stableTokenAddress,\\r\\n        address _aggregatorAddress\\r\\n    ) internal returns (uint) {\\r\\n        require(\\r\\n            _cycleTime != 0 &&\\r\\n                _contributionAmount != 0 &&\\r\\n                _contributionPeriod != 0 &&\\r\\n                _totalParticipants != 0 &&\\r\\n                _contributionPeriod < _cycleTime &&\\r\\n                _collateralAmount != 0 &&\\r\\n                _stableTokenAddress != address(0) &&\\r\\n                _aggregatorAddress != address(0),\\r\\n            \\\"Invalid inputs\\\"\\r\\n        );\\r\\n\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        uint termId = termStorage.nextTermId;\\r\\n\\r\\n        //require(!termStorage.terms[termId].initialized, \\\"Term already exists\\\");\\r\\n\\r\\n        LibTerm.Term memory newTerm;\\r\\n\\r\\n        newTerm.termId = termId;\\r\\n        newTerm.totalParticipants = _totalParticipants;\\r\\n        newTerm.cycleTime = _cycleTime;\\r\\n        newTerm.contributionAmount = _contributionAmount;\\r\\n        newTerm.contributionPeriod = _contributionPeriod;\\r\\n        newTerm.fixedCollateralEth = _fixedCollateralEth;\\r\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\r\\n        newTerm.aggregatorAddress = _aggregatorAddress;\\r\\n        newTerm.termOwner = msg.sender;\\r\\n        newTerm.creationTime = block.timestamp;\\r\\n        newTerm.initialized = true;\\r\\n\\r\\n        termStorage.terms[termId] = newTerm;\\r\\n        termStorage.nextTermId++;\\r\\n\\r\\n        _createCollateral(termId, _totalParticipants, _collateralAmount);\\r\\n\\r\\n        return termId;\\r\\n    }\\r\\n\\r\\n    function _joinTerm(uint termId) internal {\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        LibTerm.Term memory term = termStorage.terms[termId];\\r\\n\\r\\n        LibCollateral.CollateralStorage storage collateralStorage = LibCollateral\\r\\n            ._collateralStorage();\\r\\n        LibCollateral.Collateral storage collateral = collateralStorage.collaterals[termId];\\r\\n        require(LibTerm._termExists(termId) && LibCollateral._collateralExists(termId));\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\r\\n\\r\\n        require(!collateral.isCollateralMember[msg.sender], \\\"Reentry\\\");\\r\\n        require(msg.value >= term.fixedCollateralEth, \\\"Eth payment too low\\\");\\r\\n\\r\\n        collateral.collateralMembersBank[msg.sender] += msg.value;\\r\\n        collateral.isCollateralMember[msg.sender] = true;\\r\\n\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            if (collateral.depositors[i] == address(0)) {\\r\\n                collateral.depositors[i] = msg.sender;\\r\\n                collateral.counterMembers++;\\r\\n                emit OnCollateralDeposited(termId, msg.sender);\\r\\n                if (collateral.counterMembers == 1) {\\r\\n                    collateral.firstDepositTime = block.timestamp;\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        // If all the spots are filled, change the collateral\\r\\n        if (collateral.counterMembers == term.totalParticipants) {\\r\\n            collateral.state = LibCollateral.CollateralStates.CycleOngoing;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _startTerm(uint termId) internal {\\r\\n        require(LibTerm._termExists(termId) && LibCollateral._collateralExists(termId));\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        LibTerm.Term memory term = termStorage.terms[termId];\\r\\n\\r\\n        LibCollateral.CollateralStorage storage collateralStorage = LibCollateral\\r\\n            ._collateralStorage();\\r\\n        LibCollateral.Collateral storage collateral = collateralStorage.collaterals[termId];\\r\\n\\r\\n        address[] memory depositors = collateral.depositors;\\r\\n\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        require(collateral.counterMembers == term.totalParticipants);\\r\\n\\r\\n        // Need to check each user because they can have different collateral amounts\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            require(\\r\\n                !ICollateral(address(this)).isUnderCollaterized(termId, depositors[i]),\\r\\n                \\\"Eth prices dropped\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Actually create and initialize the fund\\r\\n        _createFund(termId);\\r\\n\\r\\n        // Tell the collateral that the term has started\\r\\n        ICollateral(address(this)).setStateOwner(\\r\\n            termId,\\r\\n            LibCollateral.CollateralStates.CycleOngoing\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _createCollateral(\\r\\n        uint termId,\\r\\n        uint _totalParticipants,\\r\\n        uint _collateralAmount\\r\\n    ) internal {\\r\\n        //require(!LibCollateral._collateralExists(termId), \\\"Collateral already exists\\\");\\r\\n        LibCollateral.Collateral storage newCollateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        newCollateral.initialized = true;\\r\\n        newCollateral.state = LibCollateral.CollateralStates.AcceptingCollateral;\\r\\n        newCollateral.depositors = new address[](_totalParticipants);\\r\\n        newCollateral.collateralDeposit = _collateralAmount * 10 ** 18; // Convert to Wei; // TODO: This is the correct value?\\r\\n    }\\r\\n\\r\\n    function _createFund(uint termId) internal {\\r\\n        require(!LibFund._fundExists(termId), \\\"Fund already exists\\\");\\r\\n        LibFund.Fund storage newFund = LibFund._fundStorage().funds[termId];\\r\\n        LibTerm.Term memory term = LibTerm._termStorage().terms[termId];\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        newFund.stableToken = IERC20(term.stableTokenAddress);\\r\\n        newFund.beneficiariesOrder = collateral.depositors;\\r\\n        newFund.initialized = true;\\r\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\r\\n\\r\\n        IFund(address(this)).initFund(termId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe92feca4431f2d3d467544afa224713ded6af50a084b8e34de2d7144937f4f76\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateral.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n\\r\\n    // function getDepositorSummary(\\r\\n    //     uint id,\\r\\n    //     address participant\\r\\n    // ) external view returns (uint, uint, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x74d7cb77f00a5db5bcda375b91a2fe38c29cf0db6ab20867b6584a41c5687e3f\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IFund {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function selectBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda0eefda2da8e0f355364cade7a4702d95a8fd5291f9564ed3274ef56217c6b1\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/ITerm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITerm {\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        uint fixedCollateralEth,\\r\\n        uint collateralAmount,\\r\\n        address stableTokenAddress,\\r\\n        address aggregatorAddress\\r\\n    ) external returns (uint);\\r\\n\\r\\n    function joinTerm(uint termId) external payable;\\r\\n\\r\\n    function startTerm(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x066ddcc73d332860bc9883a0f0b4b3fee6015ee70a55fbdfcd7d23c90ae8c540\",\"license\":\"GPL-3.0\"},\"contracts/version-1/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        uint collateralDeposit; // Total value of collateral in USD (1.5x of total fund)\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd028d150850638ebdcfb99808b6748eaa26142a1430a97e34fdd43854a983b10\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        ChoosingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcab1bf6f6b55e2cd629cdd8286f3c65c9d22006af743559ee16faa32fa7936e4\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806336f6f6b5146100445780633e4986cd1461006b578063485fd07614610080578063bcdf9352146100a0575b600080fd5b34801561005057600080fd5b50610059600181565b60405190815260200160405180910390f35b61007e610079366004610da5565b6100c0565b005b34801561008c57600080fd5b5061007e61009b366004610da5565b6100cc565b3480156100ac57600080fd5b506100596100bb366004610dda565b6100d5565b6100c9816100f4565b50565b6100c981610428565b60006100e78989898989898989610711565b9998505050505050505050565b6000818152600080516020610f2e83398151915260208181526040808420815161016081018352815460ff81168015158352610100918290046001600160a01b03908116848801526001850154848701526002850154606085015260038501546080850152600485015460a0850152600585015460c0850152600685015460e08501526007850154928401929092526008840154821661012084015260099093015416610140820152868652600080516020610f4e83398151915280855292909520939092527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac899392909180156101ef57506101ef85610a25565b6101f857600080fd5b826080015181600201541061023f5760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff161561028b5760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b6044820152606401610236565b8261010001513410156102d65760405162461bcd60e51b8152602060048201526013602482015272457468207061796d656e7420746f6f206c6f7760681b6044820152606401610236565b336000908152600582016020526040812080543492906102f7908490610e5d565b90915550503360009081526004820160205260408120805460ff191660011790556003820154905b818110156104025760006001600160a01b031683600301828154811061034757610347610e76565b6000918252602090912001546001600160a01b0316036103fa573383600301828154811061037757610377610e76565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155600284018054916103b083610e8c565b9091555050604051339088907fe031011da4ef7503b7885a296cf64287b8463ecd29055e798b7db96e6f97188090600090a382600201546001036103f5574260018401555b610402565b60010161031f565b50836080015182600201540361042057815461ff0019166101001782555b505050505050565b6000818152600080516020610f2e833981519152602052604090205460ff168015610457575061045781610a25565b61046057600080fd5b6000818152600080516020610f2e83398151915260209081526040808320815161016081018352815460ff8116151582526001600160a01b0361010091829004811683870152600184015483860152600284015460608401526003808501546080850152600485015460a0850152600585015460c0850152600685015460e085015260078501549284019290925260088401548116610120840152600990930154909216610140820152858552600080516020610f4e83398151915280855283862092830180548551818802810188019096528086527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8997939692959283018282801561059657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610578575b5050505050905060008151905084608001518360020154146105b757600080fd5b60005b818110156106a657306001600160a01b031663c177f091898584815181106105e4576105e4610e76565b60200260200101516040518363ffffffff1660e01b815260040161061b9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190610ea5565b1561069e5760405162461bcd60e51b8152602060048201526012602482015271115d1a081c1c9a58d95cc8191c9bdc1c195960721b6044820152606401610236565b6001016105ba565b506106b087610a4b565b6040516302c1ed1f60e01b815230906302c1ed1f906106d6908a90600190600401610ece565b600060405180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b5050505050505050505050565b6000871580159061072157508615155b801561072c57508515155b801561073757508815155b801561074257508786105b801561074d57508315155b801561076157506001600160a01b03831615155b801561077557506001600160a01b03821615155b6107b25760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e7075747360901b6044820152606401610236565b60007f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8980546040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915291925090818160600181815250508b8160800181815250508a8160a0018181525050898160c0018181525050888160e00181815250508781610100018181525050858161012001906001600160a01b031690816001600160a01b031681525050848161014001906001600160a01b031690816001600160a01b0316815250503381602001906001600160a01b031690816001600160a01b0316815250504281604001818152505060018160000190151590811515815250508083600101600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010155606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e0820151816006015561010082015181600701556101208201518160080160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101408201518160090160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050826000016000815480929190610a0690610e8c565b9190505550610a16828d89610c25565b509a9950505050505050505050565b6000600080516020610f4e8339815191525b600092835260205250604090205460ff1690565b610a5481610cc3565b15610a975760405162461bcd60e51b815260206004820152601360248201527246756e6420616c72656164792065786973747360681b6044820152606401610236565b60008181527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c60209081526040808320600080516020610f2e8339815191528352818420825161016081018452815460ff8116151582526001600160a01b036101009182900481168388015260018085015484880152600285015460608501526003808601546080860152600486015460a0860152600586015460c0860152600686015460e08601526007860154938501939093526008850154821661012085019081526009909501548216610140850152898952600080516020610f4e83398151915290975294909620915183549416620100000262010000600160b01b0319909416939093178255938401805491949293610bb8929086019190610ceb565b50825460ff19166001908117845583015460128401556040516305e920e960e51b815260048101859052309063bd241d2090602401600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b5050505050505050565b6000838152600080516020610f4e83398151915260205260409020805461ffff191660011781558267ffffffffffffffff811115610c6557610c65610f00565b604051908082528060200260200182016040528015610c8e578160200160208202803683370190505b508051610ca5916003840191602090910190610d3b565b50610cb882670de0b6b3a7640000610f16565b600790910155505050565b60007f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c610a37565b828054828255906000526020600020908101928215610d2b5760005260206000209182015b82811115610d2b578254825591600101919060010190610d10565b50610d37929150610d90565b5090565b828054828255906000526020600020908101928215610d2b579160200282015b82811115610d2b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d5b565b5b80821115610d375760008155600101610d91565b600060208284031215610db757600080fd5b5035919050565b80356001600160a01b0381168114610dd557600080fd5b919050565b600080600080600080600080610100898b031215610df757600080fd5b883597506020890135965060408901359550606089013594506080890135935060a08901359250610e2a60c08a01610dbe565b9150610e3860e08a01610dbe565b90509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e7057610e70610e47565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610e9e57610e9e610e47565b5060010190565b600060208284031215610eb757600080fd5b81518015158114610ec757600080fd5b9392505050565b8281526040810160048310610ef357634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b8082028115828204841417610e7057610e70610e4756fe87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a2646970667358221220d26a2522eaca406c18aab85d1b42b284a06b70367a845767ede3279b28a071e064736f6c63430008120033",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {},
    "title": "Takaturn Term",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is used to deploy the collateral & fund contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}