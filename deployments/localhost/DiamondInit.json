{
  "address": "0xd3ee56bC2a0Baf1a081Ac37BD7E742206c11078C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerUptimeFeedAddress",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf34dcb51020f83fe9e095fbd57617d8f2fb7719622693f076662b09283d09f08",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "109958",
    "logsBloom": "0x
    "blockHash": "0x00d859d6a88a3fd9df5b56099df60577edb5a10ca92c29944e72f79a334f383b",
    "transactionHash": "0xf34dcb51020f83fe9e095fbd57617d8f2fb7719622693f076662b09283d09f08",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "109958",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f7a732c1897a3dc667c51fd3f255384",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerUptimeFeedAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-1/DiamondInit.sol\":\"DiamondInit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/version-1/DiamondInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"./libraries/LibTerm.sol\\\";\\r\\n\\r\\ncontract DiamondInit {\\r\\n    function init(address _sequencerUptimeFeedAddress) external {\\r\\n        LibTerm.TermConsts storage termConsts = LibTerm._termConsts();\\r\\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\\r\\n        termConsts.sequencerUptimeFeedAddress = _sequencerUptimeFeedAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf751b66a52263a52795651bbe43239732ddcc25e5bbf7ae85a91f7216039b152\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610104806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806319ab453c14602d575b600080fd5b609e603836600460a0565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec580546001600160a01b0319166001600160a01b0392909216919091179055565b005b60006020828403121560b157600080fd5b81356001600160a01b038116811460c757600080fd5b939250505056fea26469706673582212202aaa3a1a94bfe9fe22be90b0656a1da94a1b9efadcdae398a30908a445de453e64736f6c63430008120033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806319ab453c14602d575b600080fd5b609e603836600460a0565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec580546001600160a01b0319166001600160a01b0392909216919091179055565b005b60006020828403121560b157600080fd5b81356001600160a01b038116811460c757600080fd5b939250505056fea26469706673582212202aaa3a1a94bfe9fe22be90b0656a1da94a1b9efadcdae398a30908a445de453e64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}