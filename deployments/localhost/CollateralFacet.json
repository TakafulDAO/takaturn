{
  "address": "0x395d546Ce1b07DeA26BA26C8bB5325450284F67e",
  "abi": [
    {
      "inputs": [],
      "name": "FunctionInvalidAtThisState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateral.CollateralStates",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateral.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnCollateralStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReimbursementWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTermOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTermOwner",
          "type": "address"
        }
      ],
      "name": "TermOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "emptyCollateralAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToEthConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToUSDConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "defaulters",
          "type": "address[]"
        }
      ],
      "name": "requestContribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum LibCollateral.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "setStateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "withdrawReimbursement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c9481ca24c882d3fb1f36f308959d3d31e21c68eda562efaec9dfb1893210f3",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1469562",
    "logsBloom": "0x
    "blockHash": "0x7be52b058d291135853959c7a0c90665bb7f6c9f784c391d1eb649c123bbd3ea",
    "transactionHash": "0x9c9481ca24c882d3fb1f36f308959d3d31e21c68eda562efaec9dfb1893210f3",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "1469562",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f7a732c1897a3dc667c51fd3f255384",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FunctionInvalidAtThisState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibCollateral.CollateralStates\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum LibCollateral.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnCollateralStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReimbursementWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTermOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTermOwner\",\"type\":\"address\"}],\"name\":\"TermOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emptyCollateralAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToEthConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToUSDConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"defaulters\",\"type\":\"address[]\"}],\"name\":\"requestContribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum LibCollateral.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"setStateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"withdrawReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aisha El Allam\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"params\":{\"id\":\"The term id\"}},\"getLatestPrice(uint256)\":{\"params\":{\"id\":\"The term id\"},\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getToEthConversionRate(uint256,uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"USDAmount\":\"The amount in USD\",\"id\":\"The term id\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToUSDConversionRate(uint256,uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"ethAmount\":\"The amount in ETH\",\"id\":\"The term id\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"id\":\"The term id\",\"member\":\"The user to check for\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"releaseCollateral(uint256)\":{\"params\":{\"id\":\"term id\"}},\"requestContribution(uint256,address,address[])\":{\"details\":\"Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\",\"params\":{\"beneficiary\":\"Address that was randomly selected for the current cycle\",\"defaulters\":\"Address that was randomly selected for the current cycle\",\"id\":\"term id\"},\"returns\":{\"_0\":\"expellants array of addresses that were expelled\"}},\"setStateOwner(uint256,uint8)\":{\"params\":{\"id\":\"term id\",\"newState\":\"collateral state\"}},\"withdrawCollateral(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"id\":\"term id\"}},\"withdrawReimbursement(uint256,address)\":{\"params\":{\"depositor\":\"Address of the depositor\",\"id\":\"term id\"}}},\"title\":\"Takaturn Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the Collateral after 180 days\"},\"getLatestPrice(uint256)\":{\"notice\":\"Gets latest ETH / USD price\"},\"getToEthConversionRate(uint256,uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToUSDConversionRate(uint256,uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"requestContribution(uint256,address,address[])\":{\"notice\":\"Called from Fund contract when someone defaults\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Called by each member after the end of the cycle to withraw collateral\"}},\"notice\":\"This is used to operate the Takaturn collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-1/facets/CollateralFacet.sol\":\"CollateralFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/access/TermOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that starts a new term. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract TermOwnable is Context {\\r\\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        _checkTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function _termOwner(uint termId) internal view virtual returns (address) {\\r\\n        return LibTerm._termStorage().terms[termId].termOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkTermOwner(uint termId) internal view virtual {\\r\\n        require(_termOwner(termId) == _msgSender(), \\\"TermOwnable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyTermOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\\r\\n        _transferTermOwnership(termId, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    // function transferTermOwnership(\\r\\n    //     uint termId,\\r\\n    //     address newTermOwner\\r\\n    // ) internal virtual onlyTermOwner(termId) {\\r\\n    //     require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    //     _transferTermOwnership(termId, newTermOwner);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferTermOwnership(\\r\\n        uint termId,\\r\\n        address newTermOwner\\r\\n    ) internal virtual onlyTermOwner(termId) {\\r\\n        require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        address oldOwner = term.termOwner;\\r\\n        term.termOwner = newTermOwner;\\r\\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c6005fcd387d8c93c9f6fe1d0d2e3593895a5a97221259c771a7c59deb796e6\",\"license\":\"MIT\"},\"contracts/version-1/facets/CollateralFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\n\\r\\nimport {TermOwnable} from \\\"../access/TermOwnable.sol\\\";\\r\\n\\r\\n/// @title Takaturn Collateral\\r\\n/// @author Aisha El Allam\\r\\n/// @notice This is used to operate the Takaturn collateral\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract CollateralFacet is ICollateral, TermOwnable {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateral.CollateralStates indexed oldState,\\r\\n        LibCollateral.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param _state collateral state\\r\\n    modifier atState(uint id, LibCollateral.CollateralStates _state) {\\r\\n        LibCollateral.CollateralStates state = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id]\\r\\n            .state;\\r\\n        if (state != _state) revert FunctionInvalidAtThisState();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param newState collateral state\\r\\n    function setStateOwner(\\r\\n        uint id,\\r\\n        LibCollateral.CollateralStates newState\\r\\n    ) external /*onlyTermOwner(id)*/ {\\r\\n        _setState(id, newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param id term id\\r\\n    /// @param beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    // TODO: Recheck this function, it was refactorized on internal functions because the stack was too deep and the EVM can not access variables\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    ) external atState(id, LibCollateral.CollateralStates.CycleOngoing) returns (address[] memory) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\\r\\n\\r\\n        (uint share, address[] memory expellants) = _whoExpelled(\\r\\n            collateral,\\r\\n            term,\\r\\n            beneficiary,\\r\\n            defaulters\\r\\n        );\\r\\n\\r\\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _liquidateCollateral(\\r\\n            collateral,\\r\\n            term\\r\\n        );\\r\\n\\r\\n        // Finally, divide the share equally among non-beneficiaries\\r\\n        if (nonBeneficiaryCounter > 0) {\\r\\n            // This case can only happen when what?\\r\\n            share = share / nonBeneficiaryCounter;\\r\\n            for (uint i = 0; i < nonBeneficiaryCounter; i++) {\\r\\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += share;\\r\\n            }\\r\\n        }\\r\\n        return (expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param id term id\\r\\n    function withdrawCollateral(\\r\\n        uint id\\r\\n    ) external atState(id, LibCollateral.CollateralStates.ReleasingCollateral) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        uint amount = collateral.collateralMembersBank[msg.sender] +\\r\\n            collateral.collateralPaymentBank[msg.sender];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        collateral.collateralMembersBank[msg.sender] = 0;\\r\\n        collateral.collateralPaymentBank[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnCollateralWithdrawn(id, msg.sender, amount);\\r\\n\\r\\n        --collateral.counterMembers;\\r\\n        // If last person withdraws, then change state to EOL\\r\\n        if (collateral.counterMembers == 0) {\\r\\n            _setState(id, LibCollateral.CollateralStates.Closed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    /// @param depositor Address of the depositor\\r\\n    function withdrawReimbursement(uint id, address depositor) external {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        require(LibFund._fundExists(id), \\\"Fund does not exists\\\");\\r\\n        uint amount = collateral.collateralPaymentBank[depositor];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        collateral.collateralPaymentBank[depositor] = 0;\\r\\n\\r\\n        (bool success, ) = payable(depositor).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(id, depositor, amount);\\r\\n    }\\r\\n\\r\\n    /// @param id term id\\r\\n    function releaseCollateral(uint id) external {\\r\\n        require(LibFund._fundExists(id), \\\"Fund does not exists\\\");\\r\\n        _setState(id, LibCollateral.CollateralStates.ReleasingCollateral);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param id The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool) {\\r\\n        return _isUnderCollaterized(id, member);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    /// @param id The term id\\r\\n    function emptyCollateralAfterEnd(\\r\\n        uint id\\r\\n    ) external onlyTermOwner(id) atState(id, LibCollateral.CollateralStates.ReleasingCollateral) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        (, , , , , , , , , uint fundEnd) = IGetters(address(this)).getFundSummary(id);\\r\\n        require(block.timestamp > fundEnd + 180 days, \\\"Can't empty yet\\\");\\r\\n\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; i++) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n            collateral.collateralMembersBank[depositor] = 0;\\r\\n            collateral.collateralPaymentBank[depositor] = 0;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _setState(id, LibCollateral.CollateralStates.Closed);\\r\\n\\r\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets latest ETH / USD price\\r\\n    /// @param id The term id\\r\\n    /// @return uint latest price in Wei Note: 18 decimals\\r\\n    function getLatestPrice(uint id) public view returns (uint) {\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\\r\\n        LibTerm.TermConsts storage termConsts = LibTerm._termConsts();\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int256 answer,\\r\\n            uint256 startedAt /*uint256 updatedAt*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n\\r\\n        ) = AggregatorV3Interface(termConsts.sequencerUptimeFeedAddress).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Answer == 0: Sequencer is up\\r\\n        // Answer == 1: Sequencer is down\\r\\n        require(answer == 0, \\\"Sequencer down\\\");\\r\\n\\r\\n        //We must wait at least an hour after the sequencer started up\\r\\n        require(\\r\\n            termConsts.sequencerStartupTime <= block.timestamp - startedAt,\\r\\n            \\\"Sequencer starting up\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint80 roundID,\\r\\n            int256 price,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp,\\r\\n            uint80 answeredInRound\\r\\n        ) = AggregatorV3Interface(term.aggregatorAddress).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Check if chainlink data is not stale or incorrect\\r\\n        require(\\r\\n            timeStamp != 0 && answeredInRound >= roundID && price > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        return uint(price * 10 ** 10); //18 decimals\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param id The term id\\r\\n    /// @param USDAmount The amount in USD\\r\\n    /// @return uint converted amount in wei\\r\\n    function getToEthConversionRate(uint id, uint USDAmount) public view returns (uint) {\\r\\n        uint ethPrice = getLatestPrice(id);\\r\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice; //* 10 ** 18;\\r\\n        return USDAmountInEth;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param id The term id\\r\\n    /// @param ethAmount The amount in ETH\\r\\n    /// @return uint converted amount in USD correct to 18 decimals\\r\\n    function getToUSDConversionRate(uint id, uint ethAmount) public view returns (uint) {\\r\\n        // NOTE: This will be made internal\\r\\n        uint ethPrice = getLatestPrice(id);\\r\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n\\r\\n    /// @param _id term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _id, LibCollateral.CollateralStates _newState) internal {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_id];\\r\\n        LibCollateral.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_id, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _id The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _id, address _member) internal view returns (bool) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_id];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateralUSD;\\r\\n        (, , , uint currentCycle, , , , , , ) = IGetters(address(this)).getFundSummary(_id);\\r\\n        // todo: check this if statement. fund will always esist\\r\\n        if (!LibFund._fundExists(_id)) {\\r\\n            collateralLimit = term.totalParticipants * term.contributionAmount * 10 ** 18;\\r\\n        } else {\\r\\n            uint remainingCycles = 1 + collateral.counterMembers - currentCycle;\\r\\n\\r\\n            collateralLimit = remainingCycles * term.contributionAmount * 10 ** 18; // 18 decimals\\r\\n        }\\r\\n\\r\\n        memberCollateralUSD = getToUSDConversionRate(\\r\\n            _id,\\r\\n            collateral.collateralMembersBank[_member]\\r\\n        );\\r\\n        // todo: check memberCollateralUSD is not in wei (18 decimals) collateralLimit is in wei (18 decimals)\\r\\n        return (memberCollateralUSD < collateralLimit);\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @param _beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param _defaulters Address that was randomly selected for the current cycle\\r\\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function _whoExpelled(\\r\\n        LibCollateral.Collateral storage _collateral,\\r\\n        LibTerm.Term storage _term,\\r\\n        address _beneficiary,\\r\\n        address[] calldata _defaulters\\r\\n    ) internal returns (uint, address[] memory) {\\r\\n        require(_defaulters.length > 0, \\\"No defaulters\\\");\\r\\n\\r\\n        bool wasBeneficiary;\\r\\n        uint8 totalExpellants;\\r\\n        address[] memory expellants = new address[](_defaulters.length);\\r\\n        uint share;\\r\\n        uint currentDefaulterBank;\\r\\n        uint contributionAmountWei = getToEthConversionRate(\\r\\n            _term.termId,\\r\\n            _term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\\r\\n        for (uint i; i < _defaulters.length; ) {\\r\\n            wasBeneficiary = IFund(address(this)).isBeneficiary(_term.termId, _defaulters[i]);\\r\\n            currentDefaulterBank = _collateral.collateralMembersBank[_defaulters[i]];\\r\\n            if (_defaulters[i] == _beneficiary) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n                continue;\\r\\n            } // Avoid expelling graced defaulter\\r\\n\\r\\n            if (\\r\\n                (wasBeneficiary && _isUnderCollaterized(_term.termId, _defaulters[i])) ||\\r\\n                (currentDefaulterBank < contributionAmountWei)\\r\\n            ) {\\r\\n                _collateral.isCollateralMember[_defaulters[i]] = false; // Expelled!\\r\\n                expellants[i] = _defaulters[i];\\r\\n                share += currentDefaulterBank;\\r\\n                _collateral.collateralMembersBank[_defaulters[i]] = 0;\\r\\n                ++totalExpellants;\\r\\n\\r\\n                emit OnCollateralLiquidated(\\r\\n                    _term.termId,\\r\\n                    address(_defaulters[i]),\\r\\n                    currentDefaulterBank\\r\\n                );\\r\\n            } else {\\r\\n                // Subtract contribution from defaulter and add to beneficiary.\\r\\n                // todo: check if this is correct\\r\\n                _collateral.collateralMembersBank[_defaulters[i]] -= contributionAmountWei;\\r\\n                _collateral.collateralPaymentBank[_beneficiary] += contributionAmountWei;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _term.totalParticipants = _term.totalParticipants - totalExpellants;\\r\\n        return (share, expellants);\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return nonBeneficiaries array of addresses that were expelled\\r\\n    function _liquidateCollateral(\\r\\n        LibCollateral.Collateral storage _collateral,\\r\\n        LibTerm.Term storage _term\\r\\n    ) internal view returns (uint, address[] memory) {\\r\\n        address currentDepositor;\\r\\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\\r\\n\\r\\n        uint nonBeneficiaryCounter;\\r\\n\\r\\n        // Divide and Liquidate\\r\\n        uint depositorsLength = _collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            currentDepositor = _collateral.depositors[i];\\r\\n            if (\\r\\n                !IFund(address(this)).isBeneficiary(_term.termId, currentDepositor) &&\\r\\n                _collateral.isCollateralMember[currentDepositor]\\r\\n            ) {\\r\\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\\r\\n                nonBeneficiaryCounter++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (nonBeneficiaryCounter, nonBeneficiaries);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc182fc420df6a6e95010b87437bff00075f139205cefd6e1124a670370e6466c\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateral.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param beneficiary Address that was randomly selected for the current cycle\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        uint id,\\r\\n        address beneficiary,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n\\r\\n    // function getDepositorSummary(\\r\\n    //     uint id,\\r\\n    //     address participant\\r\\n    // ) external view returns (uint, uint, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x74d7cb77f00a5db5bcda375b91a2fe38c29cf0db6ab20867b6584a41c5687e3f\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IFund {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function selectBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xda0eefda2da8e0f355364cade7a4702d95a8fd5291f9564ed3274ef56217c6b1\",\"license\":\"GPL-3.0\"},\"contracts/version-1/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getTermSummary(uint id) external view returns (LibTerm.Term memory);\\r\\n\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint);\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory, uint);\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFund.FundStates,\\r\\n            IERC20,\\r\\n            uint,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint,\\r\\n            uint\\r\\n        );\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x6bbb485db28ce6920043b27eed8fb41c36bbd6ab51d49469b9c9e3de29c57a2c\",\"license\":\"GPL-3.0\"},\"contracts/version-1/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        uint collateralDeposit; // Total value of collateral in USD (1.5x of total fund)\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd028d150850638ebdcfb99808b6748eaa26142a1430a97e34fdd43854a983b10\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        ChoosingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcab1bf6f6b55e2cd629cdd8286f3c65c9d22006af743559ee16faa32fa7936e4\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611993806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ae483d0711610066578063ae483d0714610117578063b94fe9171461012a578063c177f0911461013d578063c3bfb61c14610160578063e27c3ca21461017357600080fd5b806302c1ed1f146100a357806339007b77146100b85780633cce4156146100cb5780636112fe2e146100f157806397b7b2be14610104575b600080fd5b6100b66100b1366004611449565b610193565b005b6100b66100c636600461147d565b6101a1565b6100de6100d9366004611496565b610200565b6040519081526020015b60405180910390f35b6100b66100ff36600461147d565b610238565b6100de610112366004611496565b6103f2565b6100b66101253660046114cd565b610415565b6100de61013836600461147d565b610585565b61015061014b3660046114cd565b610814565b60405190151581526020016100e8565b6100b661016e36600461147d565b610827565b6101866101813660046114f2565b610a46565b6040516100e8919061157e565b61019d8282610b94565b5050565b6101aa81610c31565b6101f25760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064015b60405180910390fd5b6101fd816002610b94565b50565b60008061020c84610585565b905060008161022385670de0b6b3a76400006115e1565b61022d91906115f8565b925050505b92915050565b600081815260008051602061193e83398151915260205260409020548190600290610100900460ff16818160038111156102745761027461161a565b146102925760405163201328a760e01b815260040160405180910390fd5b600084815260008051602061193e833981519152602090815260408083203384526006810183528184205460058201909352908320549092916102d491611630565b9050600081116103195760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016101e9565b3360008181526005840160209081526040808320839055600686019091528082208290555190919083908381818185875af1925050503d806000811461037b576040519150601f19603f3d011682016040523d82523d6000602084013e610380565b606091505b505090508061038e57600080fd5b6040518290339089907fb9e806c8f1eeab6783660f204d906cbb8e7caa567f4d21ab56eeb61bd4feeb1990600090a482600201600081546103ce90611643565b9091555060028301546000036103e9576103e9876003610b94565b50505050505050565b6000806103fe84610585565b90506000670de0b6b3a764000061022385846115e1565b600082815260008051602061193e8339815191526020526040902061043983610c31565b61047c5760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064016101e9565b6001600160a01b0382166000908152600682016020526040902054806104d75760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016101e9565b6001600160a01b03831660008181526006840160205260408082208290555190919083908381818185875af1925050503d8060008114610533576040519150601f19603f3d011682016040523d82523d6000602084013e610538565b606091505b505090508061054657600080fd5b81846001600160a01b0316867f1d8d3d09e68fe1873369af18c4d7d361038dac92ac768b54ac19273dbd4cb6b860405160405180910390a45050505050565b600081815260008051602061191e83398151915260205260408082207f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec5548251633fabe5a360e21b8152925191927f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec492859283926001600160a01b039091169163feaf968c9160048082019260a0929091908290030181865afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190611679565b505092509250508160001461069c5760405162461bcd60e51b815260206004820152600e60248201526d29b2b8bab2b731b2b9103237bbb760911b60448201526064016101e9565b6106a681426116c9565b835411156106ee5760405162461bcd60e51b8152602060048201526015602482015274053657175656e636572207374617274696e6720757605c1b60448201526064016101e9565b6000806000808760090160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190611679565b9450945050935093508160001415801561079f57508369ffffffffffffffffffff168169ffffffffffffffffffff1610155b80156107ab5750600083135b6107f75760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016101e9565b610806836402540be4006116dc565b9a9950505050505050505050565b60006108208383610c65565b9392505050565b8061083181610dc8565b600082815260008051602061193e83398151915260205260409020548290600290610100900460ff168181600381111561086d5761086d61161a565b1461088b5760405163201328a760e01b815260040160405180910390fd5b600060008051602061193e833981519152600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091291908101906117df565b99505050505050505050508062ed4e0061092c9190611630565b421161096c5760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b60448201526064016101e9565b600382015460005b818110156109da57600084600301828154811061099357610993611897565b60009182526020808320909101546001600160a01b0316825260058701815260408083208390556006880190915281205550600101806109d2816118ad565b915050610974565b506109e6886003610b94565b604051600090339047908381818185875af1925050503d8060008114610a28576040519150601f19603f3d011682016040523d82523d6000602084013e610a2d565b606091505b5050905080610a3b57600080fd5b505050505050505050565b600084815260008051602061193e83398151915260205260409020546060908590600190610100900460ff1681816003811115610a8557610a8561161a565b14610aa35760405163201328a760e01b815260040160405180910390fd5b600088815260008051602061193e8339815191526020908152604080832060008051602061191e8339815191529092528220909180610ae584848d8d8d610e4d565b91509150600080610af686866112cc565b90925090508115610b8257610b0b82856115f8565b935060005b82811015610b805784876006016000848481518110610b3157610b31611897565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b689190611630565b90915550819050610b78816118ad565b915050610b10565b505b50909c9b505050505050505050505050565b600082815260008051602061193e83398151915260205260409020805461010080820460ff16918491849161ff00191690836003811115610bd757610bd761161a565b0217905550826003811115610bee57610bee61161a565b816003811115610c0057610c0061161a565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b60009081527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c602052604090205460ff1690565b600082815260008051602061193e8339815191526020908152604080832060008051602061191e8339815191529092528083208151636b95dc3f60e11b81526004810187905291519091849182918291309163d72bb87e91602480830192869291908290030181865afa158015610ce0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0891908101906117df565b5050505050509350505050610d1c88610c31565b610d4d5783600501548460030154610d3491906115e1565b610d4690670de0b6b3a76400006115e1565b9250610d93565b60008186600201546001610d619190611630565b610d6b91906116c9565b9050846005015481610d7d91906115e1565b610d8f90670de0b6b3a76400006115e1565b9350505b6001600160a01b0387166000908152600586016020526040902054610db99089906103f2565b92909210979650505050505050565b600081815260008051602061191e83398151915260205260409020546001600160a01b036101009091041633146101fd5760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b60648201526084016101e9565b6000606082610e8e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f2064656661756c7465727360981b60448201526064016101e9565b600080808567ffffffffffffffff811115610eab57610eab611727565b604051908082528060200260200182016040528015610ed4578160200160208202803683370190505b5090506000806000610efc8c600201548d60050154670de0b6b3a76400006100d991906115e1565b905060005b8981101561129f57306001600160a01b031663e9783e608e600201548d8d85818110610f2f57610f2f611897565b9050602002016020810190610f4491906118c6565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906118e3565b96508d60050160008c8c84818110610fcc57610fcc611897565b9050602002016020810190610fe191906118c6565b6001600160a01b03166001600160a01b031681526020019081526020016000205492508b6001600160a01b03168b8b8381811061102057611020611897565b905060200201602081019061103591906118c6565b6001600160a01b03160361104b57600101610f01565b86801561108757506110878d600201548c8c8481811061106d5761106d611897565b905060200201602081019061108291906118c6565b610c65565b8061109157508183105b156112055760008e60040160008d8d858181106110b0576110b0611897565b90506020020160208101906110c591906118c6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558a8a828181106110ff576110ff611897565b905060200201602081019061111491906118c6565b85828151811061112657611126611897565b6001600160a01b03909216602092830291909101909101526111488385611630565b935060008e60050160008d8d8581811061116457611164611897565b905060200201602081019061117991906118c6565b6001600160a01b0316815260208101919091526040016000205561119c866118fe565b9550828b8b838181106111b1576111b1611897565b90506020020160208101906111c691906118c6565b6001600160a01b03168e600201547f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a60405160405180910390a4611297565b818e60050160008d8d8581811061121e5761121e611897565b905060200201602081019061123391906118c6565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461126291906116c9565b90915550506001600160a01b038c16600090815260068f01602052604081208054849290611291908490611630565b90915550505b600101610f01565b508460ff168c600301546112b391906116c9565b60038d0155509095509093505050509550959350505050565b60006060600080856003018054905067ffffffffffffffff8111156112f3576112f3611727565b60405190808252806020026020018201604052801561131c578160200160208202803683370190505b506003870154909150600090815b8181101561143a5788600301818154811061134757611347611897565b600091825260209091200154600289015460405163074bc1f360e51b815260048101919091526001600160a01b03909116602482018190529550309063e9783e6090604401602060405180830381865afa1580156113a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cd91906118e3565b1580156113f457506001600160a01b038516600090815260048a01602052604090205460ff165b15611432578484848151811061140c5761140c611897565b6001600160a01b03909216602092830291909101909101528261142e816118ad565b9350505b60010161132a565b50909791965090945050505050565b6000806040838503121561145c57600080fd5b8235915060208301356004811061147257600080fd5b809150509250929050565b60006020828403121561148f57600080fd5b5035919050565b600080604083850312156114a957600080fd5b50508035926020909101359150565b6001600160a01b03811681146101fd57600080fd5b600080604083850312156114e057600080fd5b823591506020830135611472816114b8565b6000806000806060858703121561150857600080fd5b84359350602085013561151a816114b8565b9250604085013567ffffffffffffffff8082111561153757600080fd5b818701915087601f83011261154b57600080fd5b81358181111561155a57600080fd5b8860208260051b850101111561156f57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156115bf5783516001600160a01b03168352928401929184019160010161159a565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610232576102326115cb565b60008261161557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b80820180821115610232576102326115cb565b600081611652576116526115cb565b506000190190565b805169ffffffffffffffffffff8116811461167457600080fd5b919050565b600080600080600060a0868803121561169157600080fd5b61169a8661165a565b94506020860151935060408601519250606086015191506116bd6080870161165a565b90509295509295909350565b81810381811115610232576102326115cb565b80820260008212600160ff1b841416156116f8576116f86115cb565b8181058314821517610232576102326115cb565b8051801515811461167457600080fd5b8051611674816114b8565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261174e57600080fd5b8151602067ffffffffffffffff8083111561176b5761176b611727565b8260051b604051601f19603f8301168101818110848211171561179057611790611727565b6040529384528581018301938381019250878511156117ae57600080fd5b83870191505b848210156117d4576117c58261171c565b835291830191908301906117b4565b979650505050505050565b6000806000806000806000806000806101408b8d0312156117ff57600080fd5b6118088b61170c565b995060208b01516005811061181c57600080fd5b985061182a60408c0161171c565b975060608b0151965060808b015167ffffffffffffffff81111561184d57600080fd5b6118598d828e0161173d565b96505060a08b0151945060c08b0151935061187660e08c0161171c565b92506101008b015191506101208b015190509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b6000600182016118bf576118bf6115cb565b5060010190565b6000602082840312156118d857600080fd5b8135610820816114b8565b6000602082840312156118f557600080fd5b6108208261170c565b600060ff821660ff8103611914576119146115cb565b6001019291505056fe87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212200a14e3c5786af4131d7be3e1961957c01705d71dbdee2cb9744a1e110ddf6d3464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ae483d0711610066578063ae483d0714610117578063b94fe9171461012a578063c177f0911461013d578063c3bfb61c14610160578063e27c3ca21461017357600080fd5b806302c1ed1f146100a357806339007b77146100b85780633cce4156146100cb5780636112fe2e146100f157806397b7b2be14610104575b600080fd5b6100b66100b1366004611449565b610193565b005b6100b66100c636600461147d565b6101a1565b6100de6100d9366004611496565b610200565b6040519081526020015b60405180910390f35b6100b66100ff36600461147d565b610238565b6100de610112366004611496565b6103f2565b6100b66101253660046114cd565b610415565b6100de61013836600461147d565b610585565b61015061014b3660046114cd565b610814565b60405190151581526020016100e8565b6100b661016e36600461147d565b610827565b6101866101813660046114f2565b610a46565b6040516100e8919061157e565b61019d8282610b94565b5050565b6101aa81610c31565b6101f25760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064015b60405180910390fd5b6101fd816002610b94565b50565b60008061020c84610585565b905060008161022385670de0b6b3a76400006115e1565b61022d91906115f8565b925050505b92915050565b600081815260008051602061193e83398151915260205260409020548190600290610100900460ff16818160038111156102745761027461161a565b146102925760405163201328a760e01b815260040160405180910390fd5b600084815260008051602061193e833981519152602090815260408083203384526006810183528184205460058201909352908320549092916102d491611630565b9050600081116103195760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016101e9565b3360008181526005840160209081526040808320839055600686019091528082208290555190919083908381818185875af1925050503d806000811461037b576040519150601f19603f3d011682016040523d82523d6000602084013e610380565b606091505b505090508061038e57600080fd5b6040518290339089907fb9e806c8f1eeab6783660f204d906cbb8e7caa567f4d21ab56eeb61bd4feeb1990600090a482600201600081546103ce90611643565b9091555060028301546000036103e9576103e9876003610b94565b50505050505050565b6000806103fe84610585565b90506000670de0b6b3a764000061022385846115e1565b600082815260008051602061193e8339815191526020526040902061043983610c31565b61047c5760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064016101e9565b6001600160a01b0382166000908152600682016020526040902054806104d75760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016101e9565b6001600160a01b03831660008181526006840160205260408082208290555190919083908381818185875af1925050503d8060008114610533576040519150601f19603f3d011682016040523d82523d6000602084013e610538565b606091505b505090508061054657600080fd5b81846001600160a01b0316867f1d8d3d09e68fe1873369af18c4d7d361038dac92ac768b54ac19273dbd4cb6b860405160405180910390a45050505050565b600081815260008051602061191e83398151915260205260408082207f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec5548251633fabe5a360e21b8152925191927f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec492859283926001600160a01b039091169163feaf968c9160048082019260a0929091908290030181865afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190611679565b505092509250508160001461069c5760405162461bcd60e51b815260206004820152600e60248201526d29b2b8bab2b731b2b9103237bbb760911b60448201526064016101e9565b6106a681426116c9565b835411156106ee5760405162461bcd60e51b8152602060048201526015602482015274053657175656e636572207374617274696e6720757605c1b60448201526064016101e9565b6000806000808760090160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190611679565b9450945050935093508160001415801561079f57508369ffffffffffffffffffff168169ffffffffffffffffffff1610155b80156107ab5750600083135b6107f75760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016101e9565b610806836402540be4006116dc565b9a9950505050505050505050565b60006108208383610c65565b9392505050565b8061083181610dc8565b600082815260008051602061193e83398151915260205260409020548290600290610100900460ff168181600381111561086d5761086d61161a565b1461088b5760405163201328a760e01b815260040160405180910390fd5b600060008051602061193e833981519152600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091291908101906117df565b99505050505050505050508062ed4e0061092c9190611630565b421161096c5760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b60448201526064016101e9565b600382015460005b818110156109da57600084600301828154811061099357610993611897565b60009182526020808320909101546001600160a01b0316825260058701815260408083208390556006880190915281205550600101806109d2816118ad565b915050610974565b506109e6886003610b94565b604051600090339047908381818185875af1925050503d8060008114610a28576040519150601f19603f3d011682016040523d82523d6000602084013e610a2d565b606091505b5050905080610a3b57600080fd5b505050505050505050565b600084815260008051602061193e83398151915260205260409020546060908590600190610100900460ff1681816003811115610a8557610a8561161a565b14610aa35760405163201328a760e01b815260040160405180910390fd5b600088815260008051602061193e8339815191526020908152604080832060008051602061191e8339815191529092528220909180610ae584848d8d8d610e4d565b91509150600080610af686866112cc565b90925090508115610b8257610b0b82856115f8565b935060005b82811015610b805784876006016000848481518110610b3157610b31611897565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b689190611630565b90915550819050610b78816118ad565b915050610b10565b505b50909c9b505050505050505050505050565b600082815260008051602061193e83398151915260205260409020805461010080820460ff16918491849161ff00191690836003811115610bd757610bd761161a565b0217905550826003811115610bee57610bee61161a565b816003811115610c0057610c0061161a565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b60009081527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c602052604090205460ff1690565b600082815260008051602061193e8339815191526020908152604080832060008051602061191e8339815191529092528083208151636b95dc3f60e11b81526004810187905291519091849182918291309163d72bb87e91602480830192869291908290030181865afa158015610ce0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0891908101906117df565b5050505050509350505050610d1c88610c31565b610d4d5783600501548460030154610d3491906115e1565b610d4690670de0b6b3a76400006115e1565b9250610d93565b60008186600201546001610d619190611630565b610d6b91906116c9565b9050846005015481610d7d91906115e1565b610d8f90670de0b6b3a76400006115e1565b9350505b6001600160a01b0387166000908152600586016020526040902054610db99089906103f2565b92909210979650505050505050565b600081815260008051602061191e83398151915260205260409020546001600160a01b036101009091041633146101fd5760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b60648201526084016101e9565b6000606082610e8e5760405162461bcd60e51b815260206004820152600d60248201526c4e6f2064656661756c7465727360981b60448201526064016101e9565b600080808567ffffffffffffffff811115610eab57610eab611727565b604051908082528060200260200182016040528015610ed4578160200160208202803683370190505b5090506000806000610efc8c600201548d60050154670de0b6b3a76400006100d991906115e1565b905060005b8981101561129f57306001600160a01b031663e9783e608e600201548d8d85818110610f2f57610f2f611897565b9050602002016020810190610f4491906118c6565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906118e3565b96508d60050160008c8c84818110610fcc57610fcc611897565b9050602002016020810190610fe191906118c6565b6001600160a01b03166001600160a01b031681526020019081526020016000205492508b6001600160a01b03168b8b8381811061102057611020611897565b905060200201602081019061103591906118c6565b6001600160a01b03160361104b57600101610f01565b86801561108757506110878d600201548c8c8481811061106d5761106d611897565b905060200201602081019061108291906118c6565b610c65565b8061109157508183105b156112055760008e60040160008d8d858181106110b0576110b0611897565b90506020020160208101906110c591906118c6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558a8a828181106110ff576110ff611897565b905060200201602081019061111491906118c6565b85828151811061112657611126611897565b6001600160a01b03909216602092830291909101909101526111488385611630565b935060008e60050160008d8d8581811061116457611164611897565b905060200201602081019061117991906118c6565b6001600160a01b0316815260208101919091526040016000205561119c866118fe565b9550828b8b838181106111b1576111b1611897565b90506020020160208101906111c691906118c6565b6001600160a01b03168e600201547f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a60405160405180910390a4611297565b818e60050160008d8d8581811061121e5761121e611897565b905060200201602081019061123391906118c6565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461126291906116c9565b90915550506001600160a01b038c16600090815260068f01602052604081208054849290611291908490611630565b90915550505b600101610f01565b508460ff168c600301546112b391906116c9565b60038d0155509095509093505050509550959350505050565b60006060600080856003018054905067ffffffffffffffff8111156112f3576112f3611727565b60405190808252806020026020018201604052801561131c578160200160208202803683370190505b506003870154909150600090815b8181101561143a5788600301818154811061134757611347611897565b600091825260209091200154600289015460405163074bc1f360e51b815260048101919091526001600160a01b03909116602482018190529550309063e9783e6090604401602060405180830381865afa1580156113a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cd91906118e3565b1580156113f457506001600160a01b038516600090815260048a01602052604090205460ff165b15611432578484848151811061140c5761140c611897565b6001600160a01b03909216602092830291909101909101528261142e816118ad565b9350505b60010161132a565b50909791965090945050505050565b6000806040838503121561145c57600080fd5b8235915060208301356004811061147257600080fd5b809150509250929050565b60006020828403121561148f57600080fd5b5035919050565b600080604083850312156114a957600080fd5b50508035926020909101359150565b6001600160a01b03811681146101fd57600080fd5b600080604083850312156114e057600080fd5b823591506020830135611472816114b8565b6000806000806060858703121561150857600080fd5b84359350602085013561151a816114b8565b9250604085013567ffffffffffffffff8082111561153757600080fd5b818701915087601f83011261154b57600080fd5b81358181111561155a57600080fd5b8860208260051b850101111561156f57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156115bf5783516001600160a01b03168352928401929184019160010161159a565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610232576102326115cb565b60008261161557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b80820180821115610232576102326115cb565b600081611652576116526115cb565b506000190190565b805169ffffffffffffffffffff8116811461167457600080fd5b919050565b600080600080600060a0868803121561169157600080fd5b61169a8661165a565b94506020860151935060408601519250606086015191506116bd6080870161165a565b90509295509295909350565b81810381811115610232576102326115cb565b80820260008212600160ff1b841416156116f8576116f86115cb565b8181058314821517610232576102326115cb565b8051801515811461167457600080fd5b8051611674816114b8565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261174e57600080fd5b8151602067ffffffffffffffff8083111561176b5761176b611727565b8260051b604051601f19603f8301168101818110848211171561179057611790611727565b6040529384528581018301938381019250878511156117ae57600080fd5b83870191505b848210156117d4576117c58261171c565b835291830191908301906117b4565b979650505050505050565b6000806000806000806000806000806101408b8d0312156117ff57600080fd5b6118088b61170c565b995060208b01516005811061181c57600080fd5b985061182a60408c0161171c565b975060608b0151965060808b015167ffffffffffffffff81111561184d57600080fd5b6118598d828e0161173d565b96505060a08b0151945060c08b0151935061187660e08c0161171c565b92506101008b015191506101208b015190509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b6000600182016118bf576118bf6115cb565b5060010190565b6000602082840312156118d857600080fd5b8135610820816114b8565b6000602082840312156118f557600080fd5b6108208261170c565b600060ff821660ff8103611914576119146115cb565b6001019291505056fe87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212200a14e3c5786af4131d7be3e1961957c01705d71dbdee2cb9744a1e110ddf6d3464736f6c63430008120033",
  "devdoc": {
    "author": "Aisha El Allam",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "params": {
          "id": "The term id"
        }
      },
      "getLatestPrice(uint256)": {
        "params": {
          "id": "The term id"
        },
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getToEthConversionRate(uint256,uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "USDAmount": "The amount in USD",
          "id": "The term id"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToUSDConversionRate(uint256,uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "ethAmount": "The amount in ETH",
          "id": "The term id"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "id": "The term id",
          "member": "The user to check for"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "releaseCollateral(uint256)": {
        "params": {
          "id": "term id"
        }
      },
      "requestContribution(uint256,address,address[])": {
        "details": "Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract",
        "params": {
          "beneficiary": "Address that was randomly selected for the current cycle",
          "defaulters": "Address that was randomly selected for the current cycle",
          "id": "term id"
        },
        "returns": {
          "_0": "expellants array of addresses that were expelled"
        }
      },
      "setStateOwner(uint256,uint8)": {
        "params": {
          "id": "term id",
          "newState": "collateral state"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "id": "term id"
        }
      },
      "withdrawReimbursement(uint256,address)": {
        "params": {
          "depositor": "Address of the depositor",
          "id": "term id"
        }
      }
    },
    "title": "Takaturn Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "notice": "allow the owner to empty the Collateral after 180 days"
      },
      "getLatestPrice(uint256)": {
        "notice": "Gets latest ETH / USD price"
      },
      "getToEthConversionRate(uint256,uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToUSDConversionRate(uint256,uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "requestContribution(uint256,address,address[])": {
        "notice": "Called from Fund contract when someone defaults"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Called by each member after the end of the cycle to withraw collateral"
      }
    },
    "notice": "This is used to operate the Takaturn collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}