{
  "address": "0x8bDC8d475bebD34F2C702eBCCC9c41d267A95a21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralV2.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundV2.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getParticipantTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "expired",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermV2.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToEthConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToUSDConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "expired",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermV2.Term",
          "name": "term",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "yieldDistributionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe47430e2c39d5456ffc2775bd89f4225f932410212808202d0042bf315bcd8a0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1434402",
    "logsBloom": "0x
    "blockHash": "0xeaa8f73b4234568de05ed8d8ae74ecbaae2528ac7171102006827df50e96edd4",
    "transactionHash": "0xe47430e2c39d5456ffc2775bd89f4225f932410212808202d0042bf315bcd8a0",
    "logs": [],
    "blockNumber": 104233354,
    "cumulativeGasUsed": "1434402",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7fd8a3dd9f976d40ffd25cccf6b1d82b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralV2.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundV2.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermV2.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToEthConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToUSDConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermV2.Term\",\"name\":\"term\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"yieldDistributionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"isCollateralMember, collateralMembersBank, collateralPaymentBank\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, totalAmountOfCycles, fundEnd\"}},\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\"}},\"getParticipantTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"the term ids the participant is part of\"}},\"getRemainingContributionPeriod(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the remaining contribution period\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term struct\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToEthConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"USDAmount\":\"The amount in USD\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToUSDConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"minCollateralToDeposit((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5\",\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPR(uint256)\":{\"params\":{\"termId\":\"The term id for which the APR is being calculated\"},\"returns\":{\"_0\":\"The APR for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPR(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APR is being calculated\",\"user\":\"The user for which the APR is being calculated\"},\"returns\":{\"_0\":\"The APR for the user\"}},\"userYieldGenerated(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\",\"user\":\"The user for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the user\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}},\"yieldDistributionRatio(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the ratio is being calculated\",\"user\":\"The user for which the ratio is being calculated\"},\"returns\":{\"_0\":\"The yield distribution ratio for the user\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the current beneficiary\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getRemainingContributionPeriod(uint256)\":{\"notice\":\"Gets the remaining contribution period of a term\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getToEthConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToUSDConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"minCollateralToDeposit((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPR(uint256)\":{\"notice\":\"This function is used to get a term APR\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPR(uint256,address)\":{\"notice\":\"This function is used to get a user APR\"},\"userYieldGenerated(uint256,address)\":{\"notice\":\"This function is used to get the total yield generated for a user\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"},\"yieldDistributionRatio(uint256,address)\":{\"notice\":\"This function is used to get the yield distribution ratio for a user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/GettersFacetV2.sol\":\"GettersFacetV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-2/facets/GettersFacetV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {IGettersV2} from \\\"../interfaces/IGettersV2.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\n\\r\\ncontract GettersFacetV2 is IGettersV2 {\\r\\n    // TERM GETTERS\\r\\n    /// @return the current term id\\r\\n    /// @return the next term id\\r\\n    function getTermsId() external view returns (uint, uint) {\\r\\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\\r\\n        uint lastTermId = termStorage.nextTermId - 1;\\r\\n        uint nextTermId = termStorage.nextTermId;\\r\\n        return (lastTermId, nextTermId);\\r\\n    }\\r\\n\\r\\n    ///  @notice Gets the remaining contribution period of a term\\r\\n    ///  @param termId the term id\\r\\n    ///  @return the remaining contribution period\\r\\n    function getRemainingContributionPeriod(uint termId) external view returns (uint) {\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[termId];\\r\\n        if (block.timestamp >= term.creationTime + term.registrationPeriod) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return term.creationTime + term.registrationPeriod - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return the term struct\\r\\n    function getTermSummary(uint termId) external view returns (LibTermV2.Term memory) {\\r\\n        return (LibTermV2._termStorage().terms[termId]);\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @return the term ids the participant is part of\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory) {\\r\\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\\r\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\r\\n        return participantTermIds;\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining time in the current cycle\\r\\n    function getRemainingCycles(uint termId) external view returns (uint) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n\\r\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining time in the current cycle\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[termId];\\r\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\r\\n        if (block.timestamp > cycleEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return cycleEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining cycles contribution\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[termId];\\r\\n\\r\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\r\\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        return remainingCycles * contributionAmountWei;\\r\\n    }\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @param depositor the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return isCollateralMember, collateralMembersBank, collateralPaymentBank\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        return (\\r\\n            collateral.isCollateralMember[depositor],\\r\\n            collateral.collateralMembersBank[depositor],\\r\\n            collateral.collateralPaymentBank[depositor],\\r\\n            collateral.collateralDepositByUser[depositor]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        return (\\r\\n            collateral.initialized,\\r\\n            collateral.state, // Current state of Collateral\\r\\n            collateral.firstDepositTime, // Time when the first deposit was made\\r\\n            collateral.counterMembers, // Current member count\\r\\n            collateral.depositors // List of depositors\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\r\\n    /// @return amount the minimum collateral amount to deposit in wei\\r\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\r\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\r\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\r\\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint amount) {\\r\\n        uint contributionAmountInWei = getToEthConversionRate(term.contributionAmount * 10 ** 18);\\r\\n\\r\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\r\\n    }\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    /// @notice function to get the cycle information in one go\\r\\n    /// @param termId the fund id\\r\\n    /// @return initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, totalAmountOfCycles, fundEnd\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundV2.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\r\\n    {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        return (\\r\\n            fund.initialized,\\r\\n            fund.currentState,\\r\\n            fund.stableToken,\\r\\n            fund.beneficiariesOrder,\\r\\n            fund.fundStart,\\r\\n            fund.fundEnd,\\r\\n            fund.currentCycle,\\r\\n            fund.totalAmountOfCycles\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get the current beneficiary\\r\\n    /// @param termId the fund id\\r\\n    /// @return the current beneficiary\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\r\\n    }\\r\\n\\r\\n    /// @notice function to know if a user was expelled before\\r\\n    /// @param termId the fund id\\r\\n    /// @param user the user to check\\r\\n    /// @return true if the user was expelled before\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to get cycle information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        return (\\r\\n            fund.isParticipant[participant],\\r\\n            fund.isBeneficiary[participant],\\r\\n            fund.paidThisCycle[participant],\\r\\n            fund.autoPayEnabled[participant],\\r\\n            fund.beneficiariesPool[participant]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns the time left to contribute for this cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @return the time left to contribute\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[termId];\\r\\n        if (fund.currentState != LibFundV2.FundStates.AcceptingContributions) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\r\\n        uint contributionEndTimestamp = term.cycleTime *\\r\\n            (fund.currentCycle - 1) +\\r\\n            fund.fundStart +\\r\\n            term.contributionPeriod;\\r\\n        if (block.timestamp > contributionEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return contributionEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    /// @notice Gets latest ETH / USD price\\r\\n    /// @return uint latest price in Wei Note: 18 decimals\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int256 answer,\\r\\n            uint256 startedAt /*uint256 updatedAt*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n\\r\\n        ) = AggregatorV3Interface(termConsts.sequencerUptimeFeedAddress).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Answer == 0: Sequencer is up\\r\\n        // Answer == 1: Sequencer is down\\r\\n        require(answer == 0, \\\"Sequencer down\\\");\\r\\n\\r\\n        //We must wait at least an hour after the sequencer started up\\r\\n        require(\\r\\n            termConsts.sequencerStartupTime <= block.timestamp - startedAt,\\r\\n            \\\"Sequencer starting up\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint80 roundID_ethUSD,\\r\\n            int256 price_ethUSD,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\r\\n            uint80 answeredInRound_ethUSD\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Check if chainlink data is not stale or incorrect\\r\\n        require(\\r\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint80 roundID_usdUSDC,\\r\\n            int256 price_usdUSDC,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\r\\n            uint80 answeredInRound_usdUSDC\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USD/USDC\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        require(\\r\\n            timeStamp_usdUSDC != 0 &&\\r\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\r\\n                price_usdUSDC > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\r\\n\\r\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param USDAmount The amount in USD\\r\\n    /// @return uint converted amount in wei\\r\\n    function getToEthConversionRate(uint USDAmount) public view returns (uint) {\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\r\\n        return USDAmountInEth;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param ethAmount The amount in ETH\\r\\n    /// @return uint converted amount in USD correct to 18 decimals\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint) {\\r\\n        // NOTE: This will be made internal\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    /// @notice This function is used to get a user APR\\r\\n    /// @param termId The term id for which the APR is being calculated\\r\\n    /// @param user The user for which the APR is being calculated\\r\\n    /// @return The APR for the user\\r\\n    function userAPR(uint termId, address user) external view returns (uint256) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        return\\r\\n            (userYieldGenerated(termId, user) / yield.currentTotalDeposit) /\\r\\n            (elaspedTime * 365 days);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get a term APR\\r\\n    /// @param termId The term id for which the APR is being calculated\\r\\n    /// @return The APR for the term\\r\\n    function termAPR(uint termId) external view returns (uint256) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        return (totalYieldGenerated(termId) / yield.currentTotalDeposit) / (elaspedTime * 365 days);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the yield distribution ratio for a user\\r\\n    /// @param termId The term id for which the ratio is being calculated\\r\\n    /// @param user The user for which the ratio is being calculated\\r\\n    /// @return The yield distribution ratio for the user\\r\\n    function yieldDistributionRatio(uint termId, address user) public view returns (uint256) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        return collateral.collateralMembersBank[user] / yield.currentTotalDeposit;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a term\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint totalWithdrawnYield;\\r\\n\\r\\n        address[] memory arrayToCheck = yield.yieldUsers;\\r\\n        uint arrayLength = arrayToCheck.length;\\r\\n\\r\\n        for (uint i; i < arrayLength; ) {\\r\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            totalWithdrawnYield + (yield.totalDeposit - IZaynVaultV2TakaDao(yield.vault).balance());\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a user\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @param user The user for which the yield is being calculated\\r\\n    /// @return The total yield generated for the user\\r\\n    function userYieldGenerated(uint termId, address user) public view returns (uint) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        return\\r\\n            yield.withdrawnYield[user] +\\r\\n            totalYieldGenerated(termId) -\\r\\n            yieldDistributionRatio(termId, user);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f088bf910a6e04458d35c9f50b8dc337dbffbb1061c51073e9045d5db0e7f0a\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ICollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface ICollateralV2 {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint termId, LibCollateralV2.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTermV2.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    function withdrawReimbursement(uint termId, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x46d91766fc74d556bff4bdd9afb32cbd9ceca6dfbace72bb0be68fa3be52ab35\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IGettersV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IGettersV2 {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getRemainingContributionPeriod(uint termId) external view returns (uint);\\r\\n\\r\\n    function getTermSummary(uint termId) external view returns (LibTermV2.Term memory);\\r\\n\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundV2.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userAPR(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPR(uint termId) external view returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8e3d79e3a992f8ae2c0756845b82c35fc5a7122bab1b9908617864b1b519efa\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external pure returns (address);\\r\\n\\r\\n    function balance() external pure returns (uint256);\\r\\n\\r\\n    function strategy() external pure returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x7d4120038c68ec13b4d7a115f80e0b6fb2afc754ea29c6d0a02d6991637e8125\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\n\\r\\nlibrary LibFundV2 {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        // todo: add another one to freeze collateral?\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.5RCC\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x602deb4e1075915d84d7ceb686192ca42ae71a0228a90e410406dfa1503b156f\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        address[] zaps;\\r\\n        address[] vaults;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        address zap;\\r\\n        address vault;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x43636f87b823484826f26660cf6bfcac3c5c84e36ebb46483da19240da844608\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118ef806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063bb91b76d116100c3578063da3791ca1161007c578063da3791ca1461040f578063dbd5768314610433578063dbf4281014610453578063e6bbeae514610466578063e6e9e05714610479578063f0d826e71461048c57600080fd5b8063bb91b76d146102d6578063c39179c214610367578063cd78fa4214610387578063d72bb87e1461039a578063d7992e5b146103c1578063d8f8e991146103e457600080fd5b80637aed53a6116101155780637aed53a61461026557806382bceea5146102825780638e15f4731461029557806392a6c8021461029d5780639e195b40146102b0578063afa6b963146102c357600080fd5b80631268612d146101525780631a1faa071461020b5780635f0f1f421461022c5780636191474c1461023f57806362f02abd14610252575b600080fd5b6101d6610160366004611343565b600090815260008051602061185a833981519152602090815260408083206001600160a01b03949094168352600584018252808320546006850183528184205460078601845282852054600887018552838620546009909701909452919093205460ff9384169591841694928416939092169190565b6040805195151586529315156020860152911515928401929092529015156060830152608082015260a0015b60405180910390f35b61021e61021936600461136d565b61049f565b604051908152602001610202565b61021e61023a36600461136d565b610505565b61021e61024d36600461136d565b610527565b61021e61026036600461136d565b6105ee565b61026d61062f565b60408051928352602083019190915201610202565b61021e610290366004611386565b610672565b61021e6106dc565b61021e6102ab36600461136d565b610a9e565b61021e6102be36600461136d565b610aeb565b61021e6102d1366004611386565b610b0d565b6103456102e4366004611343565b600090815260008051602061189a833981519152602090815260408083206001600160a01b03949094168352600484018252808320546005850183528184205460068601845282852054600790960190935292205460ff9092169390929190565b6040805194151585526020850193909352918301526060820152608001610202565b61037a6103753660046113b2565b610b6a565b60405161020291906113cd565b61021e610395366004611459565b610c1c565b6103ad6103a836600461136d565b610c64565b604051610202989796959493929190611576565b6103d46103cf366004611386565b610d3d565b6040519015158152602001610202565b6103f76103f236600461136d565b610dd7565b6040516001600160a01b039091168152602001610202565b61042261041d36600461136d565b610e33565b6040516102029594939291906115e1565b61044661044136600461136d565b610ee9565b6040516102029190611629565b61021e61046136600461136d565b611013565b61021e610474366004611386565b611191565b61021e61048736600461136d565b6111ea565b61021e61049a36600461136d565b61123d565b600081815260008051602061183a83398151915260205260408120600181015482906104cb90426116de565b90506104db816301e133806116f1565b82600301546104e986611013565b6104f3919061171e565b6104fd919061171e565b949350505050565b6000806105106106dc565b90506000670de0b6b3a76400006104f385846116f1565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a83398151915290925282208154600190610100900460ff1660048111156105775761057761151c565b14610586575060009392505050565b600081600701548360020154600185600401546105a391906116de565b84600501546105b291906116f1565b6105bc9190611732565b6105c69190611732565b9050804211156105db57506000949350505050565b6105e542826116de565b95945050505050565b600081815260008051602061185a833981519152602052604081206004810154601282015461061e906001611732565b61062891906116de565b9392505050565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89805460009182918290610665906001906116de565b9154919491935090915050565b600082815260008051602061183a833981519152602052604081206001810154829061069e90426116de565b90506106ae816301e133806116f1565b82600301546106bd8787610b0d565b6106c7919061171e565b6106d1919061171e565b925050505b92915050565b7f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec55460408051633fabe5a360e21b815290516000927f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec492849283926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f919061175c565b50509250925050816000146107dc5760405162461bcd60e51b815260206004820152600e60248201526d29b2b8bab2b731b2b9103237bbb760911b60448201526064015b60405180910390fd5b6107e681426116de565b8354111561082e5760405162461bcd60e51b8152602060048201526015602482015274053657175656e636572207374617274696e6720757605c1b60448201526064016107d3565b6000806000808660020160405161085290661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c9919061175c565b945094505093509350816000141580156108f55750836001600160501b0316816001600160501b031610155b80156109015750600083135b61094d5760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107d3565b6000806000808a60020160405161097290675553442f5553444360c01b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061175c565b94509450509350935081600014158015610a155750836001600160501b0316816001600160501b031610155b8015610a215750600083135b610a6d5760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107d3565b6000610a7984896117ac565b9050610a8d81670de0b6b3a76400006117da565b9c5050505050505050505050505090565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a83398151915290925282206002820154600483015460058301548592916105bc916116f1565b600080610af66106dc565b90506000816104f385670de0b6b3a76400006116f1565b600082815260008051602061183a83398151915260205260408120610b328484611191565b610b3b85611013565b6001600160a01b0385166000908152600884016020526040902054610b609190611732565b6104fd91906116de565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b6020908152604080832080548251818502810185019093528083526060947f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89949093929190830182828015610c0e57602002820191906000526020600020905b815481526020019060010190808311610bfa575b509398975050505050505050565b600080610c3b846101000151670de0b6b3a76400006102be91906116f1565b90506064838560c00151610c4f91906116de565b610c5990836116f1565b6104f39060966116f1565b600080806060818080808060008051602061185a83398151915260008b81526020918252604090819020805460028201546003830154600484015460128501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b0316979196918791830182828015610d1a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cfc575b505050505094509850985098509850985098509850985050919395975091939597565b600082815260008051602061185a8339815191526020908152604080832060008051602061189a83398151915283528184206001600160a01b0386168552600582019093529083205490919060ff16158015610db457506001600160a01b038416600090815260048201602052604090205460ff16155b15610dc4576001925050506106d6565b6000925050506106d6565b505092915050565b600081815260008051602061185a833981519152602052604081206004810154600180830191610e0791906116de565b81548110610e1757610e1761180a565b6000918252602090912001546001600160a01b03169392505050565b600080808060608160008051602061189a8339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff808516976101009095041695929491939092918391830182828015610ece57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610eb0575b50505050509050955095509550955095505091939590929450565b610f5c60405180610160016040528060001515815260200160001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b50600090815260008051602061187a8339815191526020908152604091829020825161016081018452815460ff808216151583526101008083049091161515948301949094526201000090046001600160a01b03908116948201949094526001820154606082015260028201546080820152600382015460a0820152600482015460c0820152600582015460e082015260068201549281019290925260078101546101208301526008015490911661014082015290565b600081815260008051602061183a8339815191526020908152604080832060068101805483518186028101860190945280845291938593849390929183018282801561108857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161106a575b505083519394506000925050505b818110156110f4578460080160008483815181106110b6576110b661180a565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054846110ea9190611732565b9350600101611096565b508360050160009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190611820565b846002015461117d91906116de565b6111879084611732565b9695505050505050565b600082815260008051602061183a8339815191526020908152604080832060008051602061189a833981519152835281842060038201546001600160a01b0387168652600582019094529184205490926106d19161171e565b600081815260008051602061187a83398151915260205260408120600381015460018201546112199190611732565b42106112285750600092915050565b428160030154826001015461061e9190611732565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a833981519152909252822060048201546012830154849190611287906001611732565b61129191906116de565b90506000306001600160a01b0316639e195b408460060154670de0b6b3a76400006112bc91906116f1565b6040518263ffffffff1660e01b81526004016112da91815260200190565b602060405180830381865afa1580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b9190611820565b905061118781836116f1565b80356001600160a01b038116811461133e57600080fd5b919050565b6000806040838503121561135657600080fd5b61135f83611327565b946020939093013593505050565b60006020828403121561137f57600080fd5b5035919050565b6000806040838503121561139957600080fd5b823591506113a960208401611327565b90509250929050565b6000602082840312156113c457600080fd5b61062882611327565b6020808252825182820181905260009190848201906040850190845b81811015611405578351835292840192918401916001016113e9565b50909695505050505050565b604051610160810167ffffffffffffffff8111828210171561144357634e487b7160e01b600052604160045260246000fd5b60405290565b8035801515811461133e57600080fd5b60008082840361018081121561146e57600080fd5b6101608082121561147e57600080fd5b611486611411565b915061149185611449565b825261149f60208601611449565b60208301526114b060408601611327565b6040830152606085013560608301526080850135608083015260a085013560a083015260c085013560c083015260e085013560e083015261010080860135818401525061012080860135818401525061014061150d818701611327565b90830152909593013593505050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b8381101561156b5781516001600160a01b031687529582019590820190600101611546565b509495945050505050565b60006101008a1515835260058a106115905761159061151c565b602083018a90526001600160a01b0389166040840152606083018190526115b981840189611532565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b85151581526000600486106115f8576115f861151c565b85602083015284604083015283606083015260a0608083015261161e60a0830184611532565b979650505050505050565b81511515815261016081016020830151611647602084018215159052565b50604083015161166260408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151610dcf828501826001600160a01b03169052565b634e487b7160e01b600052601160045260246000fd5b818103818111156106d6576106d66116c8565b80820281158282048414176106d6576106d66116c8565b634e487b7160e01b600052601260045260246000fd5b60008261172d5761172d611708565b500490565b808201808211156106d6576106d66116c8565b80516001600160501b038116811461133e57600080fd5b600080600080600060a0868803121561177457600080fd5b61177d86611745565b94506020860151935060408601519250606086015191506117a060808701611745565b90509295509295909350565b6000826117bb576117bb611708565b600160ff1b8214600019841416156117d5576117d56116c8565b500590565b80820260008212600160ff1b841416156117f6576117f66116c8565b81810583148215176106d6576106d66116c8565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561183257600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a264697066735822122052c63830535f5cf1b1d2e24b0c5b92f17a6c278967cd31b0b5dd0fd89a371b7064736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063bb91b76d116100c3578063da3791ca1161007c578063da3791ca1461040f578063dbd5768314610433578063dbf4281014610453578063e6bbeae514610466578063e6e9e05714610479578063f0d826e71461048c57600080fd5b8063bb91b76d146102d6578063c39179c214610367578063cd78fa4214610387578063d72bb87e1461039a578063d7992e5b146103c1578063d8f8e991146103e457600080fd5b80637aed53a6116101155780637aed53a61461026557806382bceea5146102825780638e15f4731461029557806392a6c8021461029d5780639e195b40146102b0578063afa6b963146102c357600080fd5b80631268612d146101525780631a1faa071461020b5780635f0f1f421461022c5780636191474c1461023f57806362f02abd14610252575b600080fd5b6101d6610160366004611343565b600090815260008051602061185a833981519152602090815260408083206001600160a01b03949094168352600584018252808320546006850183528184205460078601845282852054600887018552838620546009909701909452919093205460ff9384169591841694928416939092169190565b6040805195151586529315156020860152911515928401929092529015156060830152608082015260a0015b60405180910390f35b61021e61021936600461136d565b61049f565b604051908152602001610202565b61021e61023a36600461136d565b610505565b61021e61024d36600461136d565b610527565b61021e61026036600461136d565b6105ee565b61026d61062f565b60408051928352602083019190915201610202565b61021e610290366004611386565b610672565b61021e6106dc565b61021e6102ab36600461136d565b610a9e565b61021e6102be36600461136d565b610aeb565b61021e6102d1366004611386565b610b0d565b6103456102e4366004611343565b600090815260008051602061189a833981519152602090815260408083206001600160a01b03949094168352600484018252808320546005850183528184205460068601845282852054600790960190935292205460ff9092169390929190565b6040805194151585526020850193909352918301526060820152608001610202565b61037a6103753660046113b2565b610b6a565b60405161020291906113cd565b61021e610395366004611459565b610c1c565b6103ad6103a836600461136d565b610c64565b604051610202989796959493929190611576565b6103d46103cf366004611386565b610d3d565b6040519015158152602001610202565b6103f76103f236600461136d565b610dd7565b6040516001600160a01b039091168152602001610202565b61042261041d36600461136d565b610e33565b6040516102029594939291906115e1565b61044661044136600461136d565b610ee9565b6040516102029190611629565b61021e61046136600461136d565b611013565b61021e610474366004611386565b611191565b61021e61048736600461136d565b6111ea565b61021e61049a36600461136d565b61123d565b600081815260008051602061183a83398151915260205260408120600181015482906104cb90426116de565b90506104db816301e133806116f1565b82600301546104e986611013565b6104f3919061171e565b6104fd919061171e565b949350505050565b6000806105106106dc565b90506000670de0b6b3a76400006104f385846116f1565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a83398151915290925282208154600190610100900460ff1660048111156105775761057761151c565b14610586575060009392505050565b600081600701548360020154600185600401546105a391906116de565b84600501546105b291906116f1565b6105bc9190611732565b6105c69190611732565b9050804211156105db57506000949350505050565b6105e542826116de565b95945050505050565b600081815260008051602061185a833981519152602052604081206004810154601282015461061e906001611732565b61062891906116de565b9392505050565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89805460009182918290610665906001906116de565b9154919491935090915050565b600082815260008051602061183a833981519152602052604081206001810154829061069e90426116de565b90506106ae816301e133806116f1565b82600301546106bd8787610b0d565b6106c7919061171e565b6106d1919061171e565b925050505b92915050565b7f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec55460408051633fabe5a360e21b815290516000927f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec492849283926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f919061175c565b50509250925050816000146107dc5760405162461bcd60e51b815260206004820152600e60248201526d29b2b8bab2b731b2b9103237bbb760911b60448201526064015b60405180910390fd5b6107e681426116de565b8354111561082e5760405162461bcd60e51b8152602060048201526015602482015274053657175656e636572207374617274696e6720757605c1b60448201526064016107d3565b6000806000808660020160405161085290661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c9919061175c565b945094505093509350816000141580156108f55750836001600160501b0316816001600160501b031610155b80156109015750600083135b61094d5760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107d3565b6000806000808a60020160405161097290675553442f5553444360c01b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061175c565b94509450509350935081600014158015610a155750836001600160501b0316816001600160501b031610155b8015610a215750600083135b610a6d5760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107d3565b6000610a7984896117ac565b9050610a8d81670de0b6b3a76400006117da565b9c5050505050505050505050505090565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a83398151915290925282206002820154600483015460058301548592916105bc916116f1565b600080610af66106dc565b90506000816104f385670de0b6b3a76400006116f1565b600082815260008051602061183a83398151915260205260408120610b328484611191565b610b3b85611013565b6001600160a01b0385166000908152600884016020526040902054610b609190611732565b6104fd91906116de565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b6020908152604080832080548251818502810185019093528083526060947f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89949093929190830182828015610c0e57602002820191906000526020600020905b815481526020019060010190808311610bfa575b509398975050505050505050565b600080610c3b846101000151670de0b6b3a76400006102be91906116f1565b90506064838560c00151610c4f91906116de565b610c5990836116f1565b6104f39060966116f1565b600080806060818080808060008051602061185a83398151915260008b81526020918252604090819020805460028201546003830154600484015460128501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b0316979196918791830182828015610d1a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cfc575b505050505094509850985098509850985098509850985050919395975091939597565b600082815260008051602061185a8339815191526020908152604080832060008051602061189a83398151915283528184206001600160a01b0386168552600582019093529083205490919060ff16158015610db457506001600160a01b038416600090815260048201602052604090205460ff16155b15610dc4576001925050506106d6565b6000925050506106d6565b505092915050565b600081815260008051602061185a833981519152602052604081206004810154600180830191610e0791906116de565b81548110610e1757610e1761180a565b6000918252602090912001546001600160a01b03169392505050565b600080808060608160008051602061189a8339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff808516976101009095041695929491939092918391830182828015610ece57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610eb0575b50505050509050955095509550955095505091939590929450565b610f5c60405180610160016040528060001515815260200160001515815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b50600090815260008051602061187a8339815191526020908152604091829020825161016081018452815460ff808216151583526101008083049091161515948301949094526201000090046001600160a01b03908116948201949094526001820154606082015260028201546080820152600382015460a0820152600482015460c0820152600582015460e082015260068201549281019290925260078101546101208301526008015490911661014082015290565b600081815260008051602061183a8339815191526020908152604080832060068101805483518186028101860190945280845291938593849390929183018282801561108857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161106a575b505083519394506000925050505b818110156110f4578460080160008483815181106110b6576110b661180a565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054846110ea9190611732565b9350600101611096565b508360050160009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190611820565b846002015461117d91906116de565b6111879084611732565b9695505050505050565b600082815260008051602061183a8339815191526020908152604080832060008051602061189a833981519152835281842060038201546001600160a01b0387168652600582019094529184205490926106d19161171e565b600081815260008051602061187a83398151915260205260408120600381015460018201546112199190611732565b42106112285750600092915050565b428160030154826001015461061e9190611732565b600081815260008051602061185a8339815191526020908152604080832060008051602061187a833981519152909252822060048201546012830154849190611287906001611732565b61129191906116de565b90506000306001600160a01b0316639e195b408460060154670de0b6b3a76400006112bc91906116f1565b6040518263ffffffff1660e01b81526004016112da91815260200190565b602060405180830381865afa1580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b9190611820565b905061118781836116f1565b80356001600160a01b038116811461133e57600080fd5b919050565b6000806040838503121561135657600080fd5b61135f83611327565b946020939093013593505050565b60006020828403121561137f57600080fd5b5035919050565b6000806040838503121561139957600080fd5b823591506113a960208401611327565b90509250929050565b6000602082840312156113c457600080fd5b61062882611327565b6020808252825182820181905260009190848201906040850190845b81811015611405578351835292840192918401916001016113e9565b50909695505050505050565b604051610160810167ffffffffffffffff8111828210171561144357634e487b7160e01b600052604160045260246000fd5b60405290565b8035801515811461133e57600080fd5b60008082840361018081121561146e57600080fd5b6101608082121561147e57600080fd5b611486611411565b915061149185611449565b825261149f60208601611449565b60208301526114b060408601611327565b6040830152606085013560608301526080850135608083015260a085013560a083015260c085013560c083015260e085013560e083015261010080860135818401525061012080860135818401525061014061150d818701611327565b90830152909593013593505050565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b8381101561156b5781516001600160a01b031687529582019590820190600101611546565b509495945050505050565b60006101008a1515835260058a106115905761159061151c565b602083018a90526001600160a01b0389166040840152606083018190526115b981840189611532565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b85151581526000600486106115f8576115f861151c565b85602083015284604083015283606083015260a0608083015261161e60a0830184611532565b979650505050505050565b81511515815261016081016020830151611647602084018215159052565b50604083015161166260408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151610dcf828501826001600160a01b03169052565b634e487b7160e01b600052601160045260246000fd5b818103818111156106d6576106d66116c8565b80820281158282048414176106d6576106d66116c8565b634e487b7160e01b600052601260045260246000fd5b60008261172d5761172d611708565b500490565b808201808211156106d6576106d66116c8565b80516001600160501b038116811461133e57600080fd5b600080600080600060a0868803121561177457600080fd5b61177d86611745565b94506020860151935060408601519250606086015191506117a060808701611745565b90509295509295909350565b6000826117bb576117bb611708565b600160ff1b8214600019841416156117d5576117d56116c8565b500590565b80820260008212600160ff1b841416156117f6576117f66116c8565b81810583148215176106d6576106d66116c8565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561183257600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a264697066735822122052c63830535f5cf1b1d2e24b0c5b92f17a6c278967cd31b0b5dd0fd89a371b7064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit"
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "isCollateralMember, collateralMembersBank, collateralPaymentBank"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, totalAmountOfCycles, fundEnd"
        }
      },
      "getLatestPrice()": {
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool"
        }
      },
      "getParticipantTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "the term ids the participant is part of"
        }
      },
      "getRemainingContributionPeriod(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the remaining contribution period"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term struct"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToEthConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "USDAmount": "The amount in USD"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToUSDConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "minCollateralToDeposit((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5",
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPR(uint256)": {
        "params": {
          "termId": "The term id for which the APR is being calculated"
        },
        "returns": {
          "_0": "The APR for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPR(uint256,address)": {
        "params": {
          "termId": "The term id for which the APR is being calculated",
          "user": "The user for which the APR is being calculated"
        },
        "returns": {
          "_0": "The APR for the user"
        }
      },
      "userYieldGenerated(uint256,address)": {
        "params": {
          "termId": "The term id for which the yield is being calculated",
          "user": "The user for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the user"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      },
      "yieldDistributionRatio(uint256,address)": {
        "params": {
          "termId": "The term id for which the ratio is being calculated",
          "user": "The user for which the ratio is being calculated"
        },
        "returns": {
          "_0": "The yield distribution ratio for the user"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the current beneficiary"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getRemainingContributionPeriod(uint256)": {
        "notice": "Gets the remaining contribution period of a term"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getToEthConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToUSDConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "minCollateralToDeposit((bool,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPR(uint256)": {
        "notice": "This function is used to get a term APR"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPR(uint256,address)": {
        "notice": "This function is used to get a user APR"
      },
      "userYieldGenerated(uint256,address)": {
        "notice": "This function is used to get the total yield generated for a user"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      },
      "yieldDistributionRatio(uint256,address)": {
        "notice": "This function is used to get the yield distribution ratio for a user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}