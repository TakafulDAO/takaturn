{
  "address": "0x80fCd683DC69f569cD924Ae8701c73A2c755B7Dc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnWithdrawnBalanceRestored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldCompensated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldReimbursed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnYieldTermUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "termIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "originalWithdrawals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "originalShares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "rescueStuckYields",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "termIds",
          "type": "uint256[]"
        }
      ],
      "name": "restoreYieldBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleYieldLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateProviderAddressOnTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateYieldProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaaa830c64f3dfbb8792d443f5ec3fe00b541807dea0a9d53f89bad0220e0cb8f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x80fCd683DC69f569cD924Ae8701c73A2c755B7Dc",
    "transactionIndex": 0,
    "gasUsed": "1586493",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9f7765f7557730934ef3f91e68dc3be17866fe9cde94102bc5e848fccc236857",
    "transactionHash": "0xaaa830c64f3dfbb8792d443f5ec3fe00b541807dea0a9d53f89bad0220e0cb8f",
    "logs": [],
    "blockNumber": 175144209,
    "cumulativeGasUsed": "1586493",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "454842cabf73bffc3d94a352b049b499",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawnBalanceRestored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldReimbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnYieldTermUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"termIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"originalWithdrawals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"originalShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"rescueStuckYields\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"termIds\",\"type\":\"uint256[]\"}],\"name\":\"restoreYieldBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleYieldLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateProviderAddressOnTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateYieldProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"details\":\"for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\",\"params\":{\"receiver\":\"The address of the user who will receive the yield\",\"termId\":\"The term id for which the yield is being claimed\"}},\"rescueStuckYields(uint256[],uint256[],uint256[],address[])\":{\"params\":{\"originalShares\":\"The original calculated shares amounts of each bad transaction\",\"originalWithdrawals\":\"The original ETH withdrawal amounts of each bad transaction\",\"termIds\":\"The term ids for which the yield is being rescued\",\"users\":\"The users to be reimbursed\"}},\"restoreYieldBalance(uint256[])\":{\"params\":{\"termIds\":\"The term ids for which the yield balance is to be restored\"}},\"toggleOptInYG(uint256)\":{\"details\":\"only allowed before the term starts\",\"params\":{\"termId\":\"The term id for which the yield is being claimed\"}},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\",\"termId\":\"The term id for which the yield is being claimed\"}},\"updateYieldProvider(string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"rescueStuckYields(uint256[],uint256[],uint256[],address[])\":{\"notice\":\"To be used in case of emergency, when yield got stuck in the vaultThe position of each array is used as a set in the calculation\"},\"restoreYieldBalance(uint256[])\":{\"notice\":\"To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\"},\"toggleOptInYG(uint256)\":{\"notice\":\"This function allows a user to toggle their yield generation\"},\"toggleYieldLock()\":{\"notice\":\"This function allows the owner to disable the yield generation feature in case of emergency\"},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"notice\":\"To be used in case of emergency, when the provider needs to change the zap or the vault\"},\"updateYieldProvider(string,address)\":{\"notice\":\"This function allows the owner to update the global variable for new yield provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\n\\r\\ncontract YGFacetZaynFi is IYGFacetZaynFi {\\r\\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\\r\\n    event OnYieldClaimed(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    ); // Emits when a user claims their yield\\r\\n    event OnYieldReimbursed(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnYieldCompensated(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnWithdrawnBalanceRestored(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        uint indexed amount\\r\\n    );\\r\\n    event OnYieldTermUpdated(uint indexed termId);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param receiver The address of the user who will receive the yield\\r\\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\\r\\n    function claimAvailableYield(uint termId, address receiver) external {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n\\r\\n        address[] memory participants = fund.beneficiariesOrder;\\r\\n        uint participantsLength = participants.length;\\r\\n        bool canCall;\\r\\n\\r\\n        for (uint i; i < participantsLength; ) {\\r\\n            if (participants[i] == msg.sender) {\\r\\n                canCall = true;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(canCall, \\\"The caller must be a participant\\\");\\r\\n\\r\\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to toggle their yield generation\\r\\n    /// @dev only allowed before the term starts\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    function toggleOptInYG(uint termId) external {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        require(\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\r\\n            \\\"Too late to change YG opt in\\\"\\r\\n        );\\r\\n        require(\\r\\n            collateral.isCollateralMember[msg.sender],\\r\\n            \\\"Pay the collateral security deposit first\\\"\\r\\n        );\\r\\n\\r\\n        bool optIn = !yield.hasOptedIn[msg.sender];\\r\\n        yield.hasOptedIn[msg.sender] = optIn;\\r\\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateYieldProvider(\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external onlyOwner {\\r\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\r\\n            ._yieldProviders();\\r\\n\\r\\n        yieldProvider.providerAddresses[providerString] = providerAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\r\\n    function toggleYieldLock() external onlyOwner returns (bool) {\\r\\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\\r\\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\\r\\n\\r\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\r\\n    }\\r\\n\\r\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateProviderAddressOnTerms(\\r\\n        uint termId,\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external onlyOwner {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        require(LibFundStorage._fundExists(termId), \\\"Fund does not exist\\\");\\r\\n        require(providerAddress != address(0), \\\"Invalid provider address\\\");\\r\\n        require(\\r\\n            yield.providerAddresses[providerString] != providerAddress,\\r\\n            \\\"Same provider address\\\"\\r\\n        );\\r\\n\\r\\n        yield.providerAddresses[providerString] = providerAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\\r\\n    /// @notice The position of each array is used as a set in the calculation\\r\\n    /// @param termIds The term ids for which the yield is being rescued\\r\\n    /// @param originalWithdrawals The original ETH withdrawal amounts of each bad transaction\\r\\n    /// @param originalShares The original calculated shares amounts of each bad transaction\\r\\n    /// @param users The users to be reimbursed\\r\\n    function rescueStuckYields(\\r\\n        uint[] memory termIds,\\r\\n        uint[] memory originalWithdrawals,\\r\\n        uint[] memory originalShares,\\r\\n        address[] memory users\\r\\n    ) external payable {\\r\\n        // Start with validating the lengths of the arrays\\r\\n        uint length = termIds.length;\\r\\n        require(\\r\\n            length == originalWithdrawals.length &&\\r\\n                length == originalShares.length &&\\r\\n                length == users.length,\\r\\n            \\\"Arrays don't match\\\"\\r\\n        );\\r\\n\\r\\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\\r\\n\\r\\n        // Start looping through each combination\\r\\n        for (uint i; i < length; ) {\\r\\n            uint termId = termIds[i];\\r\\n            address user = users[i];\\r\\n\\r\\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n                ._yieldStorage()\\r\\n                .yields[termId];\\r\\n\\r\\n            // Make sure user is part of this term and has enabled yield generation\\r\\n            require(yield.hasOptedIn[user], \\\"User not part of yield generation\\\");\\r\\n\\r\\n            // Zaynfi's addresses\\r\\n            address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n            address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n\\r\\n            // Calculate what each user is owed\\r\\n            int reimbursement = _calculateReimbursement(\\r\\n                originalWithdrawals[i],\\r\\n                originalShares[i],\\r\\n                yield\\r\\n            );\\r\\n\\r\\n            if (reimbursement > 0) {\\r\\n                // Reimbursement is positive, this means the user withdrew less shares than he was supposed to\\r\\n                uint neededShares = uint(reimbursement);\\r\\n\\r\\n                // Code copied from _withdrawYG, get the amount of shares back and give it to the user\\r\\n                uint withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n                    vaultAddress,\\r\\n                    neededShares,\\r\\n                    termId\\r\\n                );\\r\\n\\r\\n                yield.withdrawnYield[user] += withdrawnYield;\\r\\n                yield.availableYield[user] += withdrawnYield;\\r\\n\\r\\n                // Claim the yield right away and send it to the user\\r\\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\\r\\n\\r\\n                emit OnYieldReimbursed(termId, user, withdrawnYield);\\r\\n            } else if (reimbursement < 0) {\\r\\n                // When there is a negative reimbursement, we compensate the pool by adding back the exact amount of shares that were lost\\r\\n                uint neededShares = uint(reimbursement * -1);\\r\\n\\r\\n                // Calculate the amount of eth we need to deposit to get the desired shares\\r\\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\\r\\n\\r\\n                uint neededEth = (15 * neededShares * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\\r\\n                uint sharesBefore = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n\\r\\n                // Make sure we have enough eth\\r\\n                require(neededEth + usedValue <= msg.value, \\\"Not enough ETH value sent\\\");\\r\\n\\r\\n                // Deposit the amount of shares we lost\\r\\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\\r\\n\\r\\n                // Increment the used value so far\\r\\n                usedValue += neededEth;\\r\\n\\r\\n                // Validate the amount of shares deposited\\r\\n                uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n\\r\\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\\r\\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n                    vaultAddress,\\r\\n                    sharesAfter - sharesBefore - neededShares,\\r\\n                    termId\\r\\n                );\\r\\n\\r\\n                // Give the extra eth back to msg.sender\\r\\n                usedValue -= withdrawnExtraEth;\\r\\n\\r\\n                emit OnYieldCompensated(termId, user, neededEth);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Reimburse the leftover eth that the msg.sender sent\\r\\n        if (usedValue < msg.value) {\\r\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send leftover ETH back\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\\r\\n    /// @param termIds The term ids for which the yield balance is to be restored\\r\\n    function restoreYieldBalance(uint[] memory termIds) external payable onlyOwner {\\r\\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\\r\\n        // Start looping through each term id\\r\\n        for (uint i; i < termIds.length; ) {\\r\\n            uint termId = termIds[i];\\r\\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n                ._yieldStorage()\\r\\n                .yields[termId];\\r\\n\\r\\n            // Zaynfi's addresses\\r\\n            address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n            address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n\\r\\n            // Deal with the case where the user has withdrawn too much eth from yield\\r\\n            // The user did not actually withdraw more ETH to his wallet, just that it was withdrawn back to the smart contract\\r\\n            // So no ETH was lost\\r\\n            address[] memory users = yield.yieldUsers;\\r\\n            uint withdrawnTooMuch;\\r\\n            for (uint j; j < users.length; ) {\\r\\n                address user = users[j];\\r\\n                uint withdraw = yield.withdrawnCollateral[user];\\r\\n                uint deposit = yield.depositedCollateralByUser[user];\\r\\n                if (withdraw > deposit) {\\r\\n                    withdrawnTooMuch += (withdraw - deposit);\\r\\n\\r\\n                    // Restore the withdrawnCollateral amount of the user to what it's supposed to be\\r\\n                    yield.withdrawnCollateral[user] = deposit;\\r\\n\\r\\n                    emit OnWithdrawnBalanceRestored(termId, user, deposit);\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Safety check but most likely the case\\r\\n            require(withdrawnTooMuch > 0, \\\"termId does not have too much withdrawn ETH\\\");\\r\\n\\r\\n            // Restore currentTotalDeposit to what it's supposed to be\\r\\n            yield.currentTotalDeposit += withdrawnTooMuch;\\r\\n\\r\\n            // We calculate the current shares we actually need in total for this term\\r\\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\\r\\n                yield.totalDeposit;\\r\\n\\r\\n            // withdrawnTooMuch was withdrawn back to the smart contract, we must send it back to the yield vault\\r\\n            IZaynZapV2TakaDAO(zapAddress).zapInEth{value: withdrawnTooMuch}(vaultAddress, termId);\\r\\n\\r\\n            // Get the shares after\\r\\n            uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n\\r\\n            require(sharesAfter <= neededShares, \\\"Too many shares for deposit!\\\");\\r\\n            if (neededShares > sharesAfter) {\\r\\n                // If we still need more shares (which is most likely the case), we compensate by putting the missing amount into the vault\\r\\n                // Calculate the amount of eth we need to deposit to get the desired shares\\r\\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\\r\\n\\r\\n                uint neededEth = (15 * (neededShares - sharesAfter) * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\\r\\n\\r\\n                // Make sure we have enough eth\\r\\n                require(neededEth + usedValue <= msg.value, \\\"Not enough ETH value sent\\\");\\r\\n\\r\\n                // Deposit the amount of shares we lost\\r\\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\\r\\n\\r\\n                // Increment the used value so far\\r\\n                usedValue += neededEth;\\r\\n\\r\\n                // Validate the amount of shares deposited\\r\\n                sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n\\r\\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\\r\\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n                    vaultAddress,\\r\\n                    sharesAfter - neededShares,\\r\\n                    termId\\r\\n                );\\r\\n\\r\\n                // Give the extra eth back to msg.sender\\r\\n                usedValue -= withdrawnExtraEth;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n\\r\\n            emit OnYieldTermUpdated(termId);\\r\\n        }\\r\\n\\r\\n        // Reimburse the leftover eth that the msg.sender sent\\r\\n        if (usedValue < msg.value) {\\r\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send leftover ETH back\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\\r\\n    /// @notice The position of each array is used as a set in the calculation\\r\\n    /// @param originalWithdrawal The original ETH withdrawal amount\\r\\n    /// @param originalShares The original calculated shares amount\\r\\n    /// @param yield the reference to the yield\\r\\n    function _calculateReimbursement(\\r\\n        uint originalWithdrawal,\\r\\n        uint originalShares,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield\\r\\n    ) internal view returns (int) {\\r\\n        uint correctedShares = (originalWithdrawal * yield.totalShares) / yield.totalDeposit;\\r\\n\\r\\n        if (correctedShares > originalShares) {\\r\\n            return int(correctedShares - originalShares);\\r\\n        } else if (correctedShares < originalShares) {\\r\\n            return int(originalShares - correctedShares) * -1;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0eb245450c98e3c571a1ef3e8970c0b5b062431c4f139938a16378768eda10e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param receiver The address of the user who will receive the yield\\r\\n    function claimAvailableYield(uint termId, address receiver) external;\\r\\n\\r\\n    /// @notice This function allows a user to toggle their yield generation\\r\\n    /// @dev only allowed before the term starts\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n\\r\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n\\r\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\r\\n    function toggleYieldLock() external returns (bool);\\r\\n\\r\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateProviderAddressOnTerms(\\r\\n        uint termId,\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5d55165eeec8910a05551e52ca1d4b9c4fec7fdb7f4858c7afef90f746cfde4f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external view returns (address);\\r\\n\\r\\n    function balance() external view returns (uint256);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external view returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x78699e5f3347a796b59482d2d5ad459c68125c87223e0d4634188f3e1339cf7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n\\r\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d0cdf796501fc604bc1c83c28ff89fefe49ea1b994677c60dc62312af143c94\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd4f3ddd4b3ea2531cb93494be6ee8433464221d6f0563eecabbf0d8d0c03ed01\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa92b912c45c29b3022b2a98c0606f1d9cd6d9305576c3195bd6a226ece6966f6\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermStorage {\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d12e51a175c821d32aa12da41bf3158a8aa1ec0a377232800cd6cfd21e81a2b\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    event OnYieldClaimed(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    ); // Emits when a user claims their yield\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param _termId The term id for which the collateral is being deposited\\r\\n    /// @param _ethAmount The amount of collateral being deposited\\r\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        yield.totalDeposit = _ethAmount;\\r\\n        yield.currentTotalDeposit = _ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\r\\n            vaultAddress,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param _termId The term id for which the collateral is being withdrawn\\r\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\r\\n    /// @param _user The user address that is withdrawing the collateral\\r\\n    function _withdrawYG(\\r\\n        uint _termId,\\r\\n        uint256 _collateralAmount,\\r\\n        address _user\\r\\n    ) internal returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint _collateralToWithdraw;\\r\\n\\r\\n        if (_collateralAmount > yield.currentTotalDeposit) {\\r\\n            _collateralToWithdraw = yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            _collateralToWithdraw = _collateralAmount;\\r\\n        }\\r\\n\\r\\n        uint neededShares = _neededShares(\\r\\n            _collateralToWithdraw,\\r\\n            yield.totalShares,\\r\\n            yield.totalDeposit\\r\\n        );\\r\\n\\r\\n        yield.withdrawnCollateral[_user] += _collateralToWithdraw;\\r\\n\\r\\n        yield.currentTotalDeposit -= _collateralToWithdraw;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        if (withdrawnAmount < _collateralAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint withdrawnYield = withdrawnAmount - _collateralToWithdraw;\\r\\n            yield.withdrawnYield[_user] += withdrawnYield;\\r\\n            yield.availableYield[_user] += withdrawnYield;\\r\\n\\r\\n            return withdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from shares to eth\\r\\n    /// @param _termId The term id\\r\\n    /// @param _yield The yield generation struct\\r\\n    function _sharesToEth(\\r\\n        uint _termId,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\r\\n    ) internal view returns (uint) {\\r\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        return (termBalance * pricePerShare) / 10 ** 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from eth to shares\\r\\n    /// @param _collateralAmount The amount of collateral to withdraw\\r\\n    /// @param _totalShares The total shares in the yield from the term\\r\\n    /// @param _totalDeposit The total deposit in the yield from the term\\r\\n    function _neededShares(\\r\\n        uint _collateralAmount,\\r\\n        uint _totalShares,\\r\\n        uint _totalDeposit\\r\\n    ) internal pure returns (uint) {\\r\\n        if (_totalDeposit == 0) return 0;\\r\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current total yield generated for a term\\r\\n    /// @param _termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the yield distribution ratio for a user\\r\\n    /// @param _termId The term id for which the ratio is being calculated\\r\\n    /// @param _user The user for which the ratio is being calculated\\r\\n    /// @return The yield distribution ratio for the user\\r\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        if (yield.currentTotalDeposit == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\r\\n                    10 ** 18) / yield.totalDeposit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a user\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @param user The user for which the yield is being calculated\\r\\n    /// @return The total yield generated for the user\\r\\n    function _unwithdrawnUserYieldGenerated(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) internal view returns (uint) {\\r\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\r\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\r\\n\\r\\n        return yieldDistributed;\\r\\n    }\\r\\n\\r\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint availableYield = yield.availableYield[_user];\\r\\n\\r\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\r\\n\\r\\n        yield.availableYield[_user] = 0;\\r\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bec58b8302da0d220c3b417dcd20e0343b71efeb1ae9942a154f63fb6d1a139\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGenerationStorage {\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    struct YieldLock {\\r\\n        bool yieldLock;\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n        mapping(address => uint256) depositedCollateralByUser;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\r\\n        bytes32 position = YIELD_LOCK_POSITION;\\r\\n        assembly {\\r\\n            yieldLock.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaeed5248c171a073c6cdf849d6bc3d840a5f9d5d6ef514b462c06f83c886a042\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bbc806100206000396000f3fe6080604052600436106100705760003560e01c8063c8eeb5781161004e578063c8eeb578146100ca578063efbb9761146100f3578063f6a40d2a14610113578063f741e19e1461013357600080fd5b806327ff9f351461007557806383da1d761461009757806383de6e99146100b7575b600080fd5b34801561008157600080fd5b506100956100903660046116c0565b610146565b005b3480156100a357600080fd5b506100956100b23660046117ac565b6102c5565b6100956100c5366004611889565b610335565b3480156100d657600080fd5b506100df610a68565b604051901515815260200160405180910390f35b3480156100ff57600080fd5b5061009561010e366004611990565b610aab565b34801561011f57600080fd5b5061009561012e3660046119e7565b610c56565b610095610141366004611a0a565b610d8f565b6000818152600080516020611b67833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff1660038111156101a9576101a9611a47565b146101fb5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff1661026e5760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b60648201526084016101f2565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b6102cd611496565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b89779082908290610301908690611a5d565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b83518351811480156103475750825181145b80156103535750815181145b6103945760405162461bcd60e51b8152602060048201526012602482015271082e4e4c2f2e640c8dedc4ee840dac2e8c6d60731b60448201526064016101f2565b6000805b828110156109b65760008782815181106103b4576103b4611a8c565b6020026020010151905060008583815181106103d2576103d2611a8c565b6020026020010151905060006103f3600080516020611b6783398151915290565b6000848152602091825260408082206001600160a01b03861683526007810190935290205490915060ff166104745760405162461bcd60e51b815260206004820152602160248201527f55736572206e6f742070617274206f66207969656c642067656e65726174696f6044820152603760f91b60648201526084016101f2565b600081600101604051610496906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316915060009060018401906104d0906605a61796e5a61760cc1b815260070190565b908152602001604051809103902060009054906101000a90046001600160a01b0316905060006105338c888151811061050b5761050b611a8c565b60200260200101518c898151811061052557610525611a8c565b60200260200101518661151f565b9050600081131561066a576040516316d5e29b60e11b81526001600160a01b03848116600483015260248201839052604482018890528291600091851690632dabc536906064016020604051808303816000875af1158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd9190611aa2565b6001600160a01b03881660009081526008880160205260408120805492935083929091906105ec908490611ad1565b90915550506001600160a01b0387166000908152600a870160205260408120805483929061061b908490611ad1565b9091555061062c9050888880611588565b80876001600160a01b0316897e94f0db15b32d9d12a13c5a2c4be5153bda7550fd0cbf0abc3fc6a5d0d41d7a60405160405180910390a450506109a5565b60008112156109a557600061068182600019611aea565b90506000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e79190611aa2565b90506000678ac7230489e800008261070085600f611b1a565b61070a9190611b1a565b6107149190611b31565b604051631398fee160e31b8152600481018b90529091506000906001600160a01b03881690639cc7f70890602401602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190611aa2565b9050346107908d84611ad1565b11156107da5760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b60448201526064016101f2565b604051632af34be360e11b81526001600160a01b038881166004830152602482018c90528716906355e697c69084906044016000604051808303818588803b15801561082557600080fd5b505af1158015610839573d6000803e3d6000fd5b5050505050818c61084a9190611ad1565b604051631398fee160e31b8152600481018c9052909c506000906001600160a01b03891690639cc7f70890602401602060405180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b99190611aa2565b905060006001600160a01b038816632dabc5368a886108d88787611b53565b6108e29190611b53565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604481018f90526064016020604051808303816000875af1158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611aa2565b9050610964818f611b53565b9d50838b6001600160a01b03168d7fb661b35109646d6776b783a742f7e50d155cebc74454b6b8ab6dec5cf6f0a2e860405160405180910390a45050505050505b866001019650505050505050610398565b5034811015610a60576000336109cc8334611b53565b604051600081818185875af1925050503d8060008114610a08576040519150601f19603f3d011682016040523d82523d6000602084013e610a0d565b606091505b5050905080610a5e5760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b60448201526064016101f2565b505b505050505050565b6000610a72611496565b507f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f3805460ff19811660ff918216159081179092551690565b610ab3611496565b6000838152600080516020611b67833981519152602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9092529091205460ff16610b3e5760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016101f2565b6001600160a01b038216610b945760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f76696465722061646472657373000000000000000060448201526064016101f2565b816001600160a01b03168160010184604051610bb09190611a5d565b908152604051908190036020019020546001600160a01b031603610c0e5760405162461bcd60e51b815260206004820152601560248201527453616d652070726f7669646572206164647265737360581b60448201526064016101f2565b818160010184604051610c219190611a5d565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050565b60008281527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c60209081526040808320600181018054835181860281018601909452808452919493909190830182828015610cda57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cbc575b505050505090506000815190506000805b82811015610d3657336001600160a01b0316848281518110610d0f57610d0f611a8c565b60200260200101516001600160a01b031603610d2e5760019150610d36565b600101610ceb565b5080610d845760405162461bcd60e51b815260206004820181905260248201527f5468652063616c6c6572206d7573742062652061207061727469636970616e7460448201526064016101f2565b610a60863387611588565b610d97611496565b6000805b82518110156113e8576000838281518110610db857610db8611a8c565b602002602001015190506000610dd9600080516020611b6783398151915290565b60008381526020918252604080822081516816985e5b95985d5b1d60ba1b815260018201600982018190528351918290036029018220546605a61796e5a61760cc1b83526007830191909152835191829003602701822054600684018054808902850189019096528584529397506001600160a01b03918216969116949391929190830182828015610e9457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e76575b505050505090506000805b8251811015610f64576000838281518110610ebc57610ebc611a8c565b6020908102919091018101516001600160a01b038116600090815260098a018352604080822054600b8c0190945290205490925080821115610f5657610f028183611b53565b610f0c9086611ad1565b6001600160a01b038416600081815260098c0160205260408082208590555192975083928d917fc12f54eeeae0f5ca9f6561845a215b9d282ff63875074a39ac0679eb904bd80491a45b836001019350505050610e9f565b5060008111610fc95760405162461bcd60e51b815260206004820152602b60248201527f7465726d496420646f6573206e6f74206861766520746f6f206d75636820776960448201526a0e8d0c8e4c2eedc408aa8960ab1b60648201526084016101f2565b80856004016000828254610fdd9190611ad1565b909155505060038501546005860154600487015460009291610ffe91611b1a565b6110089190611b31565b604051632af34be360e11b81526001600160a01b038781166004830152602482018a9052919250908516906355e697c69084906044016000604051808303818588803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018b9052600093506001600160a01b0389169250639cc7f7089150602401602060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190611aa2565b90508181111561112e5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206d616e792073686172657320666f72206465706f736974210000000060448201526064016101f2565b808211156113aa576000866001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190611aa2565b90506000678ac7230489e80000826111b28587611b53565b6111bd90600f611b1a565b6111c79190611b1a565b6111d19190611b31565b9050346111de8d83611ad1565b11156112285760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b60448201526064016101f2565b604051632af34be360e11b81526001600160a01b038981166004830152602482018c90528816906355e697c69083906044016000604051808303818588803b15801561127357600080fd5b505af1158015611287573d6000803e3d6000fd5b5050505050808c6112989190611ad1565b604051631398fee160e31b8152600481018c9052909c506001600160a01b03891690639cc7f70890602401602060405180830381865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113049190611aa2565b925060006001600160a01b038816632dabc5368a6113228888611b53565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604481018e90526064016020604051808303816000875af1158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190611aa2565b90506113a4818e611b53565b9c505050505b60405160019099019888907f8dab6229cedadb02e768ce539e22f5fcdd8f33d86329faf12a4c8cd63f22b3a490600090a25050505050505050610d9b565b5034811015611492576000336113fe8334611b53565b604051600081818185875af1925050503d806000811461143a576040519150601f19603f3d011682016040523d82523d6000602084013e61143f565b606091505b50509050806114905760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b60448201526064016101f2565b505b5050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461151d5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016101f2565b565b60008082600301548360050154866115379190611b1a565b6115419190611b31565b90508381111561155d576115558482611b53565b915050611581565b8381101561157b5761156f8185611b53565b61155590600019611aea565b60009150505b9392505050565b6000838152600080516020611b67833981519152602090815260408083206001600160a01b0386168452600a810190925290912054806116015760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b60448201526064016101f2565b6001600160a01b038481166000908152600a8401602052604080822082905551909185169083908381818185875af1925050503d8060008114611660576040519150601f19603f3d011682016040523d82523d6000602084013e611665565b606091505b505090508061167357600080fd5b6040516001600160a01b03858116825283919087169088907fdb2460ca9a22614b8fe3f598b727569022250e691340edbbaf8ff069969155f09060200160405180910390a4505050505050565b6000602082840312156116d257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611718576117186116d9565b604052919050565b600082601f83011261173157600080fd5b813567ffffffffffffffff81111561174b5761174b6116d9565b61175e601f8201601f19166020016116ef565b81815284602083860101111561177357600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b03811681146117a757600080fd5b919050565b600080604083850312156117bf57600080fd5b823567ffffffffffffffff8111156117d657600080fd5b6117e285828601611720565b9250506117f160208401611790565b90509250929050565b600067ffffffffffffffff821115611814576118146116d9565b5060051b60200190565b600082601f83011261182f57600080fd5b8135602061184461183f836117fa565b6116ef565b82815260059290921b8401810191818101908684111561186357600080fd5b8286015b8481101561187e5780358352918301918301611867565b509695505050505050565b6000806000806080858703121561189f57600080fd5b843567ffffffffffffffff808211156118b757600080fd5b6118c38883890161181e565b95506020915081870135818111156118da57600080fd5b6118e689828a0161181e565b9550506040870135818111156118fb57600080fd5b61190789828a0161181e565b94505060608701358181111561191c57600080fd5b87019050601f8101881361192f57600080fd5b803561193d61183f826117fa565b81815260059190911b8201830190838101908a83111561195c57600080fd5b928401925b828410156119815761197284611790565b82529284019290840190611961565b979a9699509497505050505050565b6000806000606084860312156119a557600080fd5b83359250602084013567ffffffffffffffff8111156119c357600080fd5b6119cf86828701611720565b9250506119de60408501611790565b90509250925092565b600080604083850312156119fa57600080fd5b823591506117f160208401611790565b600060208284031215611a1c57600080fd5b813567ffffffffffffffff811115611a3357600080fd5b611a3f8482850161181e565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6000825160005b81811015611a7e5760208186018101518583015201611a64565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611ab457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ae457611ae4611abb565b92915050565b80820260008212600160ff1b84141615611b0657611b06611abb565b8181058314821517611ae457611ae4611abb565b8082028115828204841417611ae457611ae4611abb565b600082611b4e57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611ae457611ae4611abb56fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a2646970667358221220d1ba015917b1f8589f67e5753c77fdd027eae079498e0c76d109d5bd5e288a9364736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "details": "for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral",
        "params": {
          "receiver": "The address of the user who will receive the yield",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "rescueStuckYields(uint256[],uint256[],uint256[],address[])": {
        "params": {
          "originalShares": "The original calculated shares amounts of each bad transaction",
          "originalWithdrawals": "The original ETH withdrawal amounts of each bad transaction",
          "termIds": "The term ids for which the yield is being rescued",
          "users": "The users to be reimbursed"
        }
      },
      "restoreYieldBalance(uint256[])": {
        "params": {
          "termIds": "The term ids for which the yield balance is to be restored"
        }
      },
      "toggleOptInYG(uint256)": {
        "details": "only allowed before the term starts",
        "params": {
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateYieldProvider(string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "rescueStuckYields(uint256[],uint256[],uint256[],address[])": {
        "notice": "To be used in case of emergency, when yield got stuck in the vaultThe position of each array is used as a set in the calculation"
      },
      "restoreYieldBalance(uint256[])": {
        "notice": "To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract"
      },
      "toggleOptInYG(uint256)": {
        "notice": "This function allows a user to toggle their yield generation"
      },
      "toggleYieldLock()": {
        "notice": "This function allows the owner to disable the yield generation feature in case of emergency"
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "notice": "To be used in case of emergency, when the provider needs to change the zap or the vault"
      },
      "updateYieldProvider(string,address)": {
        "notice": "This function allows the owner to update the global variable for new yield provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}