{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/facets/YGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\r\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\r\n\r\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\r\n\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\n\r\ncontract YGFacetZaynFi is IYGFacetZaynFi {\r\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\r\n    event OnYieldClaimed(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a user claims their yield\r\n    event OnYieldReimbursed(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnYieldCompensated(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnWithdrawnBalanceRestored(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        uint indexed amount\r\n    );\r\n    event OnYieldTermUpdated(uint indexed termId);\r\n\r\n    modifier onlyOwner() {\r\n        LibDiamond.enforceIsContractOwner();\r\n        _;\r\n    }\r\n\r\n    /// @notice This function allows a user to claim the current available yield\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param receiver The address of the user who will receive the yield\r\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\r\n    function claimAvailableYield(uint termId, address receiver) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        address[] memory participants = fund.beneficiariesOrder;\r\n        uint participantsLength = participants.length;\r\n        bool canCall;\r\n\r\n        for (uint i; i < participantsLength; ) {\r\n            if (participants[i] == msg.sender) {\r\n                canCall = true;\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        require(canCall, \"The caller must be a participant\");\r\n\r\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\r\n    }\r\n\r\n    /// @notice This function allows a user to toggle their yield generation\r\n    /// @dev only allowed before the term starts\r\n    /// @param termId The term id for which the yield is being claimed\r\n    function toggleOptInYG(uint termId) external {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        require(\r\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\r\n            \"Too late to change YG opt in\"\r\n        );\r\n        require(\r\n            collateral.isCollateralMember[msg.sender],\r\n            \"Pay the collateral security deposit first\"\r\n        );\r\n\r\n        bool optIn = !yield.hasOptedIn[msg.sender];\r\n        yield.hasOptedIn[msg.sender] = optIn;\r\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\r\n    }\r\n\r\n    /// @notice This function allows the owner to update the global variable for new yield provider\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateYieldProvider(\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external onlyOwner {\r\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\r\n            ._yieldProviders();\r\n\r\n        yieldProvider.providerAddresses[providerString] = providerAddress;\r\n    }\r\n\r\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\r\n    function toggleYieldLock() external onlyOwner returns (bool) {\r\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\r\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\r\n\r\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\r\n    }\r\n\r\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateProviderAddressOnTerms(\r\n        uint termId,\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external onlyOwner {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        require(LibFundStorage._fundExists(termId), \"Fund does not exist\");\r\n        require(providerAddress != address(0), \"Invalid provider address\");\r\n        require(\r\n            yield.providerAddresses[providerString] != providerAddress,\r\n            \"Same provider address\"\r\n        );\r\n\r\n        yield.providerAddresses[providerString] = providerAddress;\r\n    }\r\n\r\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\r\n    /// @notice The position of each array is used as a set in the calculation\r\n    /// @param termIds The term ids for which the yield is being rescued\r\n    /// @param originalWithdrawals The original ETH withdrawal amounts of each bad transaction\r\n    /// @param originalShares The original calculated shares amounts of each bad transaction\r\n    /// @param users The users to be reimbursed\r\n    function rescueStuckYields(\r\n        uint[] memory termIds,\r\n        uint[] memory originalWithdrawals,\r\n        uint[] memory originalShares,\r\n        address[] memory users\r\n    ) external payable {\r\n        // Start with validating the lengths of the arrays\r\n        uint length = termIds.length;\r\n        require(\r\n            length == originalWithdrawals.length &&\r\n                length == originalShares.length &&\r\n                length == users.length,\r\n            \"Arrays don't match\"\r\n        );\r\n\r\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\r\n\r\n        // Start looping through each combination\r\n        for (uint i; i < length; ) {\r\n            uint termId = termIds[i];\r\n            address user = users[i];\r\n\r\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n                ._yieldStorage()\r\n                .yields[termId];\r\n\r\n            // Make sure user is part of this term and has enabled yield generation\r\n            require(yield.hasOptedIn[user], \"User not part of yield generation\");\r\n\r\n            // Zaynfi's addresses\r\n            address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n            address zapAddress = yield.providerAddresses[\"ZaynZap\"];\r\n\r\n            // Calculate what each user is owed\r\n            int reimbursement = _calculateReimbursement(\r\n                originalWithdrawals[i],\r\n                originalShares[i],\r\n                yield\r\n            );\r\n\r\n            if (reimbursement > 0) {\r\n                // Reimbursement is positive, this means the user withdrew less shares than he was supposed to\r\n                uint neededShares = uint(reimbursement);\r\n\r\n                // Code copied from _withdrawYG, get the amount of shares back and give it to the user\r\n                uint withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\r\n                    vaultAddress,\r\n                    neededShares,\r\n                    termId\r\n                );\r\n\r\n                yield.withdrawnYield[user] += withdrawnYield;\r\n                yield.availableYield[user] += withdrawnYield;\r\n\r\n                // Claim the yield right away and send it to the user\r\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\r\n\r\n                emit OnYieldReimbursed(termId, user, withdrawnYield);\r\n            } else if (reimbursement < 0) {\r\n                // When there is a negative reimbursement, we compensate the pool by adding back the exact amount of shares that were lost\r\n                uint neededShares = uint(reimbursement * -1);\r\n\r\n                // Calculate the amount of eth we need to deposit to get the desired shares\r\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\r\n\r\n                uint neededEth = (15 * neededShares * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\r\n                uint sharesBefore = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\r\n\r\n                // Make sure we have enough eth\r\n                require(neededEth + usedValue <= msg.value, \"Not enough ETH value sent\");\r\n\r\n                // Deposit the amount of shares we lost\r\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\r\n\r\n                // Increment the used value so far\r\n                usedValue += neededEth;\r\n\r\n                // Validate the amount of shares deposited\r\n                uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\r\n\r\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\r\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\r\n                    vaultAddress,\r\n                    sharesAfter - sharesBefore - neededShares,\r\n                    termId\r\n                );\r\n\r\n                // Give the extra eth back to msg.sender\r\n                usedValue -= withdrawnExtraEth;\r\n\r\n                emit OnYieldCompensated(termId, user, neededEth);\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Reimburse the leftover eth that the msg.sender sent\r\n        if (usedValue < msg.value) {\r\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\"\");\r\n            require(success, \"Failed to send leftover ETH back\");\r\n        }\r\n    }\r\n\r\n    /// @notice To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\r\n    /// @param termIds The term ids for which the yield balance is to be restored\r\n    function restoreYieldBalance(uint[] memory termIds) external payable onlyOwner {\r\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\r\n        // Start looping through each term id\r\n        for (uint i; i < termIds.length; ) {\r\n            uint termId = termIds[i];\r\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n                ._yieldStorage()\r\n                .yields[termId];\r\n\r\n            // Zaynfi's addresses\r\n            address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n            address zapAddress = yield.providerAddresses[\"ZaynZap\"];\r\n\r\n            // Deal with the case where the user has withdrawn too much eth from yield\r\n            // The user did not actually withdraw more ETH to his wallet, just that it was withdrawn back to the smart contract\r\n            // So no ETH was lost\r\n            address[] memory users = yield.yieldUsers;\r\n            uint withdrawnTooMuch;\r\n            for (uint j; j < users.length; ) {\r\n                address user = users[j];\r\n                uint withdraw = yield.withdrawnCollateral[user];\r\n                uint deposit = yield.depositedCollateralByUser[user];\r\n                if (withdraw > deposit) {\r\n                    withdrawnTooMuch += (withdraw - deposit);\r\n\r\n                    // Restore the withdrawnCollateral amount of the user to what it's supposed to be\r\n                    yield.withdrawnCollateral[user] = deposit;\r\n\r\n                    emit OnWithdrawnBalanceRestored(termId, user, deposit);\r\n                }\r\n\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            // Safety check but most likely the case\r\n            require(withdrawnTooMuch > 0, \"termId does not have too much withdrawn ETH\");\r\n\r\n            // Restore currentTotalDeposit to what it's supposed to be\r\n            yield.currentTotalDeposit += withdrawnTooMuch;\r\n\r\n            // We calculate the current shares we actually need in total for this term\r\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\r\n                yield.totalDeposit;\r\n\r\n            // withdrawnTooMuch was withdrawn back to the smart contract, we must send it back to the yield vault\r\n            IZaynZapV2TakaDAO(zapAddress).zapInEth{value: withdrawnTooMuch}(vaultAddress, termId);\r\n\r\n            // Get the shares after\r\n            uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\r\n\r\n            require(sharesAfter <= neededShares, \"Too many shares for deposit!\");\r\n            if (neededShares > sharesAfter) {\r\n                // If we still need more shares (which is most likely the case), we compensate by putting the missing amount into the vault\r\n                // Calculate the amount of eth we need to deposit to get the desired shares\r\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\r\n\r\n                uint neededEth = (15 * (neededShares - sharesAfter) * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\r\n\r\n                // Make sure we have enough eth\r\n                require(neededEth + usedValue <= msg.value, \"Not enough ETH value sent\");\r\n\r\n                // Deposit the amount of shares we lost\r\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\r\n\r\n                // Increment the used value so far\r\n                usedValue += neededEth;\r\n\r\n                // Validate the amount of shares deposited\r\n                sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\r\n\r\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\r\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\r\n                    vaultAddress,\r\n                    sharesAfter - neededShares,\r\n                    termId\r\n                );\r\n\r\n                // Give the extra eth back to msg.sender\r\n                usedValue -= withdrawnExtraEth;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n            emit OnYieldTermUpdated(termId);\r\n        }\r\n\r\n        // Reimburse the leftover eth that the msg.sender sent\r\n        if (usedValue < msg.value) {\r\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\"\");\r\n            require(success, \"Failed to send leftover ETH back\");\r\n        }\r\n    }\r\n\r\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\r\n    /// @notice The position of each array is used as a set in the calculation\r\n    /// @param originalWithdrawal The original ETH withdrawal amount\r\n    /// @param originalShares The original calculated shares amount\r\n    /// @param yield the reference to the yield\r\n    function _calculateReimbursement(\r\n        uint originalWithdrawal,\r\n        uint originalShares,\r\n        LibYieldGenerationStorage.YieldGeneration storage yield\r\n    ) internal view returns (int) {\r\n        uint correctedShares = (originalWithdrawal * yield.totalShares) / yield.totalDeposit;\r\n\r\n        if (correctedShares > originalShares) {\r\n            return int(correctedShares - originalShares);\r\n        } else if (correctedShares < originalShares) {\r\n            return int(originalShares - correctedShares) * -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IYGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\n\r\ninterface IYGFacetZaynFi {\r\n    /// @notice This function allows a user to claim the current available yield\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param receiver The address of the user who will receive the yield\r\n    function claimAvailableYield(uint termId, address receiver) external;\r\n\r\n    /// @notice This function allows a user to toggle their yield generation\r\n    /// @dev only allowed before the term starts\r\n    /// @param termId The term id for which the yield is being claimed\r\n    function toggleOptInYG(uint termId) external;\r\n\r\n    /// @notice This function allows the owner to update the global variable for new yield provider\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\r\n\r\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\r\n    function toggleYieldLock() external returns (bool);\r\n\r\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateProviderAddressOnTerms(\r\n        uint termId,\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IZaynVaultV2TakaDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynVaultV2TakaDao {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function depositZap(uint256 _amount, uint256 _term) external;\r\n\r\n    function withdrawZap(uint256 _shares, uint256 _term) external;\r\n\r\n    function want() external view returns (address);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    function balanceOf(uint256 term) external view returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IZaynZapV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynZapV2TakaDAO {\r\n    function zapInEth(address vault, uint256 termID) external payable;\r\n\r\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\r\n\r\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\r\n}\r\n"
    },
    "contracts/libraries/LibCollateralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibCollateralStorage {\r\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\r\n\r\n    enum CollateralStates {\r\n        AcceptingCollateral, // Initial state where collateral are deposited\r\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\r\n        ReleasingCollateral, // Triggered when the fund closes\r\n        Closed // Triggered when all depositors withdraw their collaterals\r\n    }\r\n\r\n    struct DefaulterState {\r\n        bool payWithCollateral;\r\n        bool payWithFrozenPool;\r\n        bool gettingExpelled;\r\n        bool isBeneficiary;\r\n    }\r\n\r\n    struct Collateral {\r\n        bool initialized;\r\n        CollateralStates state;\r\n        uint firstDepositTime;\r\n        uint counterMembers;\r\n        address[] depositors;\r\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\r\n        mapping(address => uint) collateralMembersBank; // Users main balance\r\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\r\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\r\n    }\r\n\r\n    struct CollateralStorage {\r\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\r\n    }\r\n\r\n    function _collateralExists(uint termId) internal view returns (bool) {\r\n        return _collateralStorage().collaterals[termId].initialized;\r\n    }\r\n\r\n    function _collateralStorage()\r\n        internal\r\n        pure\r\n        returns (CollateralStorage storage collateralStorage)\r\n    {\r\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\r\n        assembly {\r\n            collateralStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibFundStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nlibrary LibFundStorage {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\r\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\r\n\r\n    enum FundStates {\r\n        InitializingFund, // Time before the first cycle has started\r\n        AcceptingContributions, // Triggers at the start of a cycle\r\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\r\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\r\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\r\n    }\r\n\r\n    struct PayExemption {\r\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\r\n    }\r\n\r\n    struct Fund {\r\n        bool initialized;\r\n        FundStates currentState; // Variable to keep track of the different FundStates\r\n        IERC20 stableToken; // Instance of the stable token\r\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\r\n        uint fundStart; // Timestamp of the start of the fund\r\n        uint fundEnd; // Timestamp of the end of the fund\r\n        uint currentCycle; // Index of current cycle\r\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\r\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\r\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\r\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\r\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\r\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\r\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\r\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\r\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\r\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\r\n        uint totalAmountOfCycles;\r\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\r\n    }\r\n\r\n    struct FundStorage {\r\n        mapping(uint => Fund) funds; // termId => Fund struct\r\n    }\r\n\r\n    function _fundExists(uint termId) internal view returns (bool) {\r\n        return _fundStorage().funds[termId].initialized;\r\n    }\r\n\r\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\r\n        bytes32 position = FUND_STORAGE_POSITION;\r\n        assembly {\r\n            fundStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibTermStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibTermStorage {\r\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\r\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\r\n\r\n    enum TermStates {\r\n        InitializingTerm,\r\n        ActiveTerm,\r\n        ExpiredTerm,\r\n        ClosedTerm\r\n    }\r\n\r\n    struct TermConsts {\r\n        mapping(string => address) aggregatorsAddresses; // \"ETH/USD\" => address , \"USDC/USD\" => address\r\n    }\r\n\r\n    struct Term {\r\n        bool initialized;\r\n        TermStates state;\r\n        address termOwner;\r\n        uint creationTime;\r\n        uint termId;\r\n        uint registrationPeriod; // Time for registration (seconds)\r\n        uint totalParticipants; // Max number of participants\r\n        uint cycleTime; // Time for single cycle (seconds)\r\n        uint contributionAmount; // Amount user must pay per cycle (USD)\r\n        uint contributionPeriod; // The portion of cycle user must make payment\r\n        address stableTokenAddress;\r\n    }\r\n\r\n    struct TermStorage {\r\n        uint nextTermId;\r\n        mapping(uint => Term) terms; // termId => Term struct\r\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\r\n    }\r\n\r\n    function _termExists(uint termId) internal view returns (bool) {\r\n        return _termStorage().terms[termId].initialized;\r\n    }\r\n\r\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\r\n        bytes32 position = TERM_CONSTS_POSITION;\r\n        assembly {\r\n            termConsts.slot := position\r\n        }\r\n    }\r\n\r\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\r\n        bytes32 position = TERM_STORAGE_POSITION;\r\n        assembly {\r\n            termStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibYieldGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\r\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\r\n\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\n\r\nlibrary LibYieldGeneration {\r\n    event OnYieldClaimed(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a user claims their yield\r\n\r\n    /// @notice This function is used to deposit collateral for yield generation\r\n    /// @param _termId The term id for which the collateral is being deposited\r\n    /// @param _ethAmount The amount of collateral being deposited\r\n    function _depositYG(uint _termId, uint _ethAmount) internal {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        yield.totalDeposit = _ethAmount;\r\n        yield.currentTotalDeposit = _ethAmount;\r\n\r\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n\r\n        IZaynZapV2TakaDAO(yield.providerAddresses[\"ZaynZap\"]).zapInEth{value: _ethAmount}(\r\n            vaultAddress,\r\n            _termId\r\n        );\r\n\r\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\r\n    }\r\n\r\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\r\n    /// @param _termId The term id for which the collateral is being withdrawn\r\n    /// @param _collateralAmount The amount of collateral being withdrawn\r\n    /// @param _user The user address that is withdrawing the collateral\r\n    function _withdrawYG(\r\n        uint _termId,\r\n        uint256 _collateralAmount,\r\n        address _user\r\n    ) internal returns (uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint _collateralToWithdraw;\r\n\r\n        if (_collateralAmount > yield.currentTotalDeposit) {\r\n            _collateralToWithdraw = yield.currentTotalDeposit;\r\n        } else {\r\n            _collateralToWithdraw = _collateralAmount;\r\n        }\r\n\r\n        uint neededShares = _neededShares(\r\n            _collateralToWithdraw,\r\n            yield.totalShares,\r\n            yield.totalDeposit\r\n        );\r\n\r\n        yield.withdrawnCollateral[_user] += _collateralToWithdraw;\r\n\r\n        yield.currentTotalDeposit -= _collateralToWithdraw;\r\n\r\n        address zapAddress = yield.providerAddresses[\"ZaynZap\"];\r\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n\r\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\r\n            vaultAddress,\r\n            neededShares,\r\n            _termId\r\n        );\r\n\r\n        if (withdrawnAmount < _collateralAmount) {\r\n            return 0;\r\n        } else {\r\n            uint withdrawnYield = withdrawnAmount - _collateralToWithdraw;\r\n            yield.withdrawnYield[_user] += withdrawnYield;\r\n            yield.availableYield[_user] += withdrawnYield;\r\n\r\n            return withdrawnYield;\r\n        }\r\n    }\r\n\r\n    /// @notice Conversion from shares to eth\r\n    /// @param _termId The term id\r\n    /// @param _yield The yield generation struct\r\n    function _sharesToEth(\r\n        uint _termId,\r\n        LibYieldGenerationStorage.YieldGeneration storage _yield\r\n    ) internal view returns (uint) {\r\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"]).balanceOf(\r\n            _termId\r\n        );\r\n\r\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\r\n            .getPricePerFullShare();\r\n\r\n        return (termBalance * pricePerShare) / 10 ** 18;\r\n    }\r\n\r\n    /// @notice Conversion from eth to shares\r\n    /// @param _collateralAmount The amount of collateral to withdraw\r\n    /// @param _totalShares The total shares in the yield from the term\r\n    /// @param _totalDeposit The total deposit in the yield from the term\r\n    function _neededShares(\r\n        uint _collateralAmount,\r\n        uint _totalShares,\r\n        uint _totalDeposit\r\n    ) internal pure returns (uint) {\r\n        if (_totalDeposit == 0) return 0;\r\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\r\n    }\r\n\r\n    /// @notice This function is used to get the current total yield generated for a term\r\n    /// @param _termId The term id for which the yield is being calculated\r\n    /// @return The total yield generated for the term\r\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"]).balanceOf(\r\n            _termId\r\n        );\r\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"])\r\n            .getPricePerFullShare();\r\n\r\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\r\n        if (sharesInEth > yield.currentTotalDeposit) {\r\n            return sharesInEth - yield.currentTotalDeposit;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @notice This function is used to get the yield distribution ratio for a user\r\n    /// @param _termId The term id for which the ratio is being calculated\r\n    /// @param _user The user for which the ratio is being calculated\r\n    /// @return The yield distribution ratio for the user\r\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        if (yield.currentTotalDeposit == 0) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\r\n                    10 ** 18) / yield.totalDeposit;\r\n        }\r\n    }\r\n\r\n    /// @notice This function is used to get the total yield generated for a user\r\n    /// @param termId The term id for which the yield is being calculated\r\n    /// @param user The user for which the yield is being calculated\r\n    /// @return The total yield generated for the user\r\n    function _unwithdrawnUserYieldGenerated(\r\n        uint termId,\r\n        address user\r\n    ) internal view returns (uint) {\r\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\r\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\r\n\r\n        return yieldDistributed;\r\n    }\r\n\r\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint availableYield = yield.availableYield[_user];\r\n\r\n        require(availableYield > 0, \"No yield to withdraw\");\r\n\r\n        yield.availableYield[_user] = 0;\r\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\"\");\r\n        require(success);\r\n\r\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibYieldGenerationStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibYieldGenerationStorage {\r\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\"diamond.standard.yield.providers\");\r\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\"diamond.standard.yield.storage\");\r\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\"diamond.standard.yield.lock\");\r\n\r\n    enum YGProviders {\r\n        InHouse,\r\n        ZaynFi\r\n    }\r\n\r\n    struct YieldLock {\r\n        bool yieldLock;\r\n    }\r\n\r\n    // Both index 0 are reserved for ZaynFi\r\n    struct YieldProviders {\r\n        mapping(string => address) providerAddresses;\r\n    }\r\n\r\n    struct YieldGeneration {\r\n        bool initialized;\r\n        YGProviders provider;\r\n        mapping(string => address) providerAddresses;\r\n        uint startTimeStamp;\r\n        uint totalDeposit;\r\n        uint currentTotalDeposit;\r\n        uint totalShares;\r\n        address[] yieldUsers;\r\n        mapping(address => bool) hasOptedIn;\r\n        mapping(address => uint256) withdrawnYield;\r\n        mapping(address => uint256) withdrawnCollateral;\r\n        mapping(address => uint256) availableYield;\r\n        mapping(address => uint256) depositedCollateralByUser;\r\n    }\r\n\r\n    struct YieldStorage {\r\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\r\n    }\r\n\r\n    function _yieldExists(uint termId) internal view returns (bool) {\r\n        return _yieldStorage().yields[termId].initialized;\r\n    }\r\n\r\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\r\n        bytes32 position = YIELD_LOCK_POSITION;\r\n        assembly {\r\n            yieldLock.slot := position\r\n        }\r\n    }\r\n\r\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\r\n        bytes32 position = YIELD_PROVIDERS_POSITION;\r\n        assembly {\r\n            yieldProviders.slot := position\r\n        }\r\n    }\r\n\r\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\r\n        bytes32 position = YIELD_STORAGE_POSITION;\r\n        assembly {\r\n            yieldStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}