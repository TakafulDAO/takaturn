{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/mocks/MockSequencer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract MockSequencer is AggregatorV3Interface {\r\n    int256 price;\r\n    uint8 numDecimals;\r\n    int256 sequencerAnswer;\r\n    uint256 time;\r\n\r\n    constructor(uint8 _numDecimals, int256 _price) {\r\n        price = _price;\r\n        numDecimals = _numDecimals;\r\n        sequencerAnswer = 0;\r\n        time = block.timestamp;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return numDecimals;\r\n    }\r\n\r\n    function description() external pure override returns (string memory) {\r\n        return \"Mock Sequencer Uptime Feed\";\r\n    }\r\n\r\n    function version() external pure override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function setSequencerAnswer() public returns (int256) {\r\n        if (sequencerAnswer == 0) {\r\n            sequencerAnswer = 1;\r\n        } else {\r\n            sequencerAnswer = 0;\r\n            time = block.timestamp;\r\n        }\r\n        return sequencerAnswer;\r\n    }\r\n\r\n    function setPrice(int256 _price) public {\r\n        price = _price;\r\n    }\r\n\r\n    function setDecimals(uint8 _decimals) public {\r\n        numDecimals = _decimals;\r\n    }\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = _roundId;\r\n        answer = sequencerAnswer;\r\n        startedAt = time;\r\n        updatedAt = time;\r\n        answeredInRound = 0;\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = 0;\r\n        answer = sequencerAnswer;\r\n        startedAt = time;\r\n        updatedAt = time;\r\n        answeredInRound = 0;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract MockV3Aggregator is AggregatorV3Interface {\r\n    int256 price;\r\n    uint8 numDecimals;\r\n    uint256 age;\r\n\r\n    constructor(uint8 _numDecimals, int256 _price) {\r\n        price = _price;\r\n        numDecimals = _numDecimals;\r\n        age = 30;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return numDecimals;\r\n    }\r\n\r\n    function description() external pure override returns (string memory) {\r\n        return \"Mock Chainlink Oracle Feed\";\r\n    }\r\n\r\n    function version() external pure override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function setPrice(int256 _price) public {\r\n        price = _price;\r\n    }\r\n\r\n    function setDecimals(uint8 _decimals) public {\r\n        numDecimals = _decimals;\r\n    }\r\n\r\n    function setAge(uint256 _age) public {\r\n        age = _age;\r\n    }\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = _roundId;\r\n        answer = price;\r\n        startedAt = block.timestamp - age;\r\n        updatedAt = block.timestamp - age;\r\n        answeredInRound = 0;\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = 0;\r\n        answer = price;\r\n        startedAt = block.timestamp - age;\r\n        updatedAt = block.timestamp - age;\r\n        answeredInRound = 0;\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/access/TermOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that starts a new term. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract TermOwnable is Context {\r\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyTermOwner(uint termId) {\r\n        _checkTermOwner(termId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function _termOwner(uint termId) internal view virtual returns (address) {\r\n        return LibTerm._termStorage().terms[termId].termOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkTermOwner(uint termId) internal view virtual {\r\n        require(_termOwner(termId) == _msgSender(), \"TermOwnable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyTermOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\r\n        _transferTermOwnership(termId, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    // function transferTermOwnership(\r\n    //     uint termId,\r\n    //     address newTermOwner\r\n    // ) internal virtual onlyTermOwner(termId) {\r\n    //     require(newTermOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    //     _transferTermOwnership(termId, newTermOwner);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferTermOwnership(\r\n        uint termId,\r\n        address newTermOwner\r\n    ) internal virtual onlyTermOwner(termId) {\r\n        require(newTermOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n        address oldOwner = term.termOwner;\r\n        term.termOwner = newTermOwner;\r\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTerm} from \"./libraries/LibTerm.sol\";\r\n\r\ncontract DiamondInit {\r\n    function init(address _sequencerUptimeFeedAddress) external {\r\n        LibTerm.TermConsts storage termConsts = LibTerm._termConsts();\r\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\r\n        termConsts.sequencerUptimeFeedAddress = _sequencerUptimeFeedAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/facets/CollateralFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IFund} from \"../interfaces/IFund.sol\";\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\n\r\nimport {TermOwnable} from \"../access/TermOwnable.sol\";\r\n\r\n/// @title Takaturn Collateral\r\n/// @author Aisha El Allam\r\n/// @notice This is used to operate the Takaturn collateral\r\n/// @dev v3.0 (Diamond)\r\ncontract CollateralFacet is ICollateral, TermOwnable {\r\n    event OnCollateralStateChanged(\r\n        uint indexed termId,\r\n        LibCollateral.CollateralStates indexed oldState,\r\n        LibCollateral.CollateralStates indexed newState\r\n    );\r\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnCollateralWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\r\n\r\n    /// @param id term id\r\n    /// @param _state collateral state\r\n    modifier atState(uint id, LibCollateral.CollateralStates _state) {\r\n        LibCollateral.CollateralStates state = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id]\r\n            .state;\r\n        if (state != _state) revert FunctionInvalidAtThisState();\r\n        _;\r\n    }\r\n\r\n    /// @param id term id\r\n    /// @param newState collateral state\r\n    function setStateOwner(\r\n        uint id,\r\n        LibCollateral.CollateralStates newState\r\n    ) external /*onlyTermOwner(id)*/ {\r\n        _setState(id, newState);\r\n    }\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param id term id\r\n    /// @param beneficiary Address that was randomly selected for the current cycle\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    /// @return expellants array of addresses that were expelled\r\n    // TODO: Recheck this function, it was refactorized on internal functions because the stack was too deep and the EVM can not access variables\r\n    function requestContribution(\r\n        uint id,\r\n        address beneficiary,\r\n        address[] calldata defaulters\r\n    ) external atState(id, LibCollateral.CollateralStates.CycleOngoing) returns (address[] memory) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\r\n\r\n        (uint share, address[] memory expellants) = _whoExpelled(\r\n            collateral,\r\n            term,\r\n            beneficiary,\r\n            defaulters\r\n        );\r\n\r\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _liquidateCollateral(\r\n            collateral,\r\n            term\r\n        );\r\n\r\n        // Finally, divide the share equally among non-beneficiaries\r\n        if (nonBeneficiaryCounter > 0) {\r\n            // This case can only happen when what?\r\n            share = share / nonBeneficiaryCounter;\r\n            for (uint i = 0; i < nonBeneficiaryCounter; i++) {\r\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += share;\r\n            }\r\n        }\r\n        return (expellants);\r\n    }\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param id term id\r\n    function withdrawCollateral(\r\n        uint id\r\n    ) external atState(id, LibCollateral.CollateralStates.ReleasingCollateral) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        uint amount = collateral.collateralMembersBank[msg.sender] +\r\n            collateral.collateralPaymentBank[msg.sender];\r\n        require(amount > 0, \"Nothing to claim\");\r\n\r\n        collateral.collateralMembersBank[msg.sender] = 0;\r\n        collateral.collateralPaymentBank[msg.sender] = 0;\r\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(success);\r\n\r\n        emit OnCollateralWithdrawn(id, msg.sender, amount);\r\n\r\n        --collateral.counterMembers;\r\n        // If last person withdraws, then change state to EOL\r\n        if (collateral.counterMembers == 0) {\r\n            _setState(id, LibCollateral.CollateralStates.Closed);\r\n        }\r\n    }\r\n\r\n    /// @param id term id\r\n    /// @param depositor Address of the depositor\r\n    function withdrawReimbursement(uint id, address depositor) external {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        require(LibFund._fundExists(id), \"Fund does not exists\");\r\n        uint amount = collateral.collateralPaymentBank[depositor];\r\n        require(amount > 0, \"Nothing to claim\");\r\n\r\n        collateral.collateralPaymentBank[depositor] = 0;\r\n\r\n        (bool success, ) = payable(depositor).call{value: amount}(\"\");\r\n        require(success);\r\n\r\n        emit OnReimbursementWithdrawn(id, depositor, amount);\r\n    }\r\n\r\n    /// @param id term id\r\n    function releaseCollateral(uint id) external {\r\n        require(LibFund._fundExists(id), \"Fund does not exists\");\r\n        _setState(id, LibCollateral.CollateralStates.ReleasingCollateral);\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param id The term id\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint id, address member) external view returns (bool) {\r\n        return _isUnderCollaterized(id, member);\r\n    }\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    /// @param id The term id\r\n    function emptyCollateralAfterEnd(\r\n        uint id\r\n    ) external onlyTermOwner(id) atState(id, LibCollateral.CollateralStates.ReleasingCollateral) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        (, , , , , , , , , uint fundEnd) = IGetters(address(this)).getFundSummary(id);\r\n        require(block.timestamp > fundEnd + 180 days, \"Can't empty yet\");\r\n\r\n        uint depositorsLength = collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; i++) {\r\n            address depositor = collateral.depositors[i];\r\n            collateral.collateralMembersBank[depositor] = 0;\r\n            collateral.collateralPaymentBank[depositor] = 0;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        _setState(id, LibCollateral.CollateralStates.Closed);\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @notice Gets latest ETH / USD price\r\n    /// @param id The term id\r\n    /// @return uint latest price in Wei Note: 18 decimals\r\n    function getLatestPrice(uint id) public view returns (uint) {\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\r\n        LibTerm.TermConsts storage termConsts = LibTerm._termConsts();\r\n        (\r\n            ,\r\n            /*uint80 roundID*/ int256 answer,\r\n            uint256 startedAt /*uint256 updatedAt*/ /*uint80 answeredInRound*/,\r\n            ,\r\n\r\n        ) = AggregatorV3Interface(termConsts.sequencerUptimeFeedAddress).latestRoundData(); //8 decimals\r\n\r\n        // Answer == 0: Sequencer is up\r\n        // Answer == 1: Sequencer is down\r\n        require(answer == 0, \"Sequencer down\");\r\n\r\n        //We must wait at least an hour after the sequencer started up\r\n        require(\r\n            termConsts.sequencerStartupTime <= block.timestamp - startedAt,\r\n            \"Sequencer starting up\"\r\n        );\r\n\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(term.aggregatorAddress).latestRoundData(); //8 decimals\r\n\r\n        // Check if chainlink data is not stale or incorrect\r\n        require(\r\n            timeStamp != 0 && answeredInRound >= roundID && price > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        return uint(price * 10 ** 10); //18 decimals\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in USD to ETH\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param id The term id\r\n    /// @param USDAmount The amount in USD\r\n    /// @return uint converted amount in wei\r\n    function getToEthConversionRate(uint id, uint USDAmount) public view returns (uint) {\r\n        uint ethPrice = getLatestPrice(id);\r\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice; //* 10 ** 18;\r\n        return USDAmountInEth;\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in ETH to USD\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param id The term id\r\n    /// @param ethAmount The amount in ETH\r\n    /// @return uint converted amount in USD correct to 18 decimals\r\n    function getToUSDConversionRate(uint id, uint ethAmount) public view returns (uint) {\r\n        // NOTE: This will be made internal\r\n        uint ethPrice = getLatestPrice(id);\r\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\r\n        return ethAmountInUSD;\r\n    }\r\n\r\n    /// @param _id term id\r\n    /// @param _newState collateral state\r\n    function _setState(uint _id, LibCollateral.CollateralStates _newState) internal {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n        LibCollateral.CollateralStates oldState = collateral.state;\r\n        collateral.state = _newState;\r\n        emit OnCollateralStateChanged(_id, oldState, _newState);\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param _id The fund id\r\n    /// @param _member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function _isUnderCollaterized(uint _id, address _member) internal view returns (bool) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n\r\n        uint collateralLimit;\r\n        uint memberCollateralUSD;\r\n        (, , , uint currentCycle, , , , , , ) = IGetters(address(this)).getFundSummary(_id);\r\n        // todo: check this if statement. fund will always esist\r\n        if (!LibFund._fundExists(_id)) {\r\n            collateralLimit = term.totalParticipants * term.contributionAmount * 10 ** 18;\r\n        } else {\r\n            uint remainingCycles = 1 + collateral.counterMembers - currentCycle;\r\n\r\n            collateralLimit = remainingCycles * term.contributionAmount * 10 ** 18; // 18 decimals\r\n        }\r\n\r\n        memberCollateralUSD = getToUSDConversionRate(\r\n            _id,\r\n            collateral.collateralMembersBank[_member]\r\n        );\r\n        // todo: check memberCollateralUSD is not in wei (18 decimals) collateralLimit is in wei (18 decimals)\r\n        return (memberCollateralUSD < collateralLimit);\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _term Term storage\r\n    /// @param _beneficiary Address that was randomly selected for the current cycle\r\n    /// @param _defaulters Address that was randomly selected for the current cycle\r\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return expellants array of addresses that were expelled\r\n    function _whoExpelled(\r\n        LibCollateral.Collateral storage _collateral,\r\n        LibTerm.Term storage _term,\r\n        address _beneficiary,\r\n        address[] calldata _defaulters\r\n    ) internal returns (uint, address[] memory) {\r\n        require(_defaulters.length > 0, \"No defaulters\");\r\n\r\n        bool wasBeneficiary;\r\n        uint8 totalExpellants;\r\n        address[] memory expellants = new address[](_defaulters.length);\r\n        uint share;\r\n        uint currentDefaulterBank;\r\n        uint contributionAmountWei = getToEthConversionRate(\r\n            _term.termId,\r\n            _term.contributionAmount * 10 ** 18\r\n        );\r\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\r\n        for (uint i; i < _defaulters.length; ) {\r\n            wasBeneficiary = IFund(address(this)).isBeneficiary(_term.termId, _defaulters[i]);\r\n            currentDefaulterBank = _collateral.collateralMembersBank[_defaulters[i]];\r\n            if (_defaulters[i] == _beneficiary) {\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n                continue;\r\n            } // Avoid expelling graced defaulter\r\n\r\n            if (\r\n                (wasBeneficiary && _isUnderCollaterized(_term.termId, _defaulters[i])) ||\r\n                (currentDefaulterBank < contributionAmountWei)\r\n            ) {\r\n                _collateral.isCollateralMember[_defaulters[i]] = false; // Expelled!\r\n                expellants[i] = _defaulters[i];\r\n                share += currentDefaulterBank;\r\n                _collateral.collateralMembersBank[_defaulters[i]] = 0;\r\n                ++totalExpellants;\r\n\r\n                emit OnCollateralLiquidated(\r\n                    _term.termId,\r\n                    address(_defaulters[i]),\r\n                    currentDefaulterBank\r\n                );\r\n            } else {\r\n                // Subtract contribution from defaulter and add to beneficiary.\r\n                // todo: check if this is correct\r\n                _collateral.collateralMembersBank[_defaulters[i]] -= contributionAmountWei;\r\n                _collateral.collateralPaymentBank[_beneficiary] += contributionAmountWei;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _term.totalParticipants = _term.totalParticipants - totalExpellants;\r\n        return (share, expellants);\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _term Term storage\r\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return nonBeneficiaries array of addresses that were expelled\r\n    function _liquidateCollateral(\r\n        LibCollateral.Collateral storage _collateral,\r\n        LibTerm.Term storage _term\r\n    ) internal view returns (uint, address[] memory) {\r\n        address currentDepositor;\r\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\r\n\r\n        uint nonBeneficiaryCounter;\r\n\r\n        // Divide and Liquidate\r\n        uint depositorsLength = _collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            currentDepositor = _collateral.depositors[i];\r\n            if (\r\n                !IFund(address(this)).isBeneficiary(_term.termId, currentDepositor) &&\r\n                _collateral.isCollateralMember[currentDepositor]\r\n            ) {\r\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\r\n                nonBeneficiaryCounter++;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return (nonBeneficiaryCounter, nonBeneficiaries);\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/facets/FundFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IFund} from \"../interfaces/IFund.sol\";\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\n\r\nimport {TermOwnable} from \"../access/TermOwnable.sol\";\r\n\r\n/// @title Takaturn Fund\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to operate the Takaturn fund\r\n/// @dev v3.0 (Diamond)\r\ncontract FundFacet is IFund, TermOwnable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint public constant FUND_VERSION = 2; // The version of the contract\r\n\r\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\r\n    event OnFundStateChanged(uint indexed termId, LibFund.FundStates indexed newState); // Emits when state has updated\r\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\r\n    event OnBeneficiarySelected(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\r\n    event OnFundWithdrawn(uint indexed termId, address indexed claimant, uint indexed amount); // Emits when a chosen beneficiary claims their fund\r\n    event OnParticipantDefaulted(uint indexed termId, address indexed defaulter); // Emits when a participant didn't pay this cycle's contribution\r\n    event OnParticipantUndefaulted(uint indexed termId, address indexed undefaulter); // Emits when a participant was a defaulter before but started paying on time again for this cycle\r\n    event OnDefaulterExpelled(uint indexed termId, address indexed expellant); // Emits when a defaulter can't compensate with the collateral\r\n    event OnTotalParticipantsUpdated(uint indexed termId, uint indexed newLength); // Emits when the total participants lengths has changed from its initial value\r\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\r\n\r\n    /// Insufficient balance for transfer. Needed `required` but only\r\n    /// `available` available.\r\n    /// @param available balance available.\r\n    /// @param required requested amount to transfer.\r\n    error InsufficientBalance(uint available, uint required);\r\n\r\n    /// @notice called by the term to init the fund\r\n    /// @param termId the id of the term\r\n    function initFund(uint termId) external {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\r\n        // Set and track participants\r\n        for (uint i; i < participantsArrayLength; ) {\r\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\r\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Starts the first cycle\r\n        _startNewCycle(termId);\r\n\r\n        // Set timestamp of deployment, which will be used to determine cycle times\r\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\r\n        fund.fundStart = block.timestamp;\r\n        //emit LibFund.OnTermStart(termId);\r\n        emit OnTermStart(termId);\r\n    }\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    /// @param id the id of the term\r\n    function startNewCycle(uint id) external onlyTermOwner(id) {\r\n        _startNewCycle(id);\r\n    }\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    /// @param id the id of the term\r\n    function closeFundingPeriod(uint id) external onlyTermOwner(id) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\r\n        require(\r\n            block.timestamp >\r\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\r\n            \"Still time to contribute\"\r\n        );\r\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \"Wrong state\");\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        _autoPay(id);\r\n\r\n        // Only then start choosing beneficiary\r\n        _setState(id, LibFund.FundStates.ChoosingBeneficiary);\r\n\r\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\r\n        // To maintain the order and to properly push defaulters to the back based on that same order\r\n        // And we make sure that existing defaulters are ignored\r\n        address[] memory currentParticipants = fund.beneficiariesOrder;\r\n\r\n        uint currentParticipantsLength = currentParticipants.length;\r\n\r\n        for (uint i; i < currentParticipantsLength; ) {\r\n            address p = currentParticipants[i];\r\n            if (fund.paidThisCycle[p]) {\r\n                // check where to restore the defaulter to, participants or beneficiaries\r\n                if (fund.isBeneficiary[p]) {\r\n                    EnumerableSet.add(fund._beneficiaries, p);\r\n                } else {\r\n                    EnumerableSet.add(fund._participants, p);\r\n                }\r\n\r\n                if (EnumerableSet.remove(fund._defaulters, p)) {\r\n                    emit OnParticipantUndefaulted(id, p);\r\n                }\r\n            } else if (!EnumerableSet.contains(fund._defaulters, p)) {\r\n                _defaultParticipant(id, p);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Once we decided who defaulted and who paid, we can select the beneficiary for this cycle\r\n\r\n        _selectBeneficiary(id);\r\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\r\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\r\n            _closeFund(id);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\r\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\r\n    /// @param id the id of the term\r\n    function selectBeneficiary(uint id) external onlyTermOwner(id) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(fund.currentState == LibFund.FundStates.ChoosingBeneficiary, \"Wrong state\");\r\n        _selectBeneficiary(id);\r\n    }\r\n\r\n    /// @notice called by the owner to close the fund for emergency reasons.\r\n    /// @param id the id of the term\r\n    function closeFund(uint id) external onlyTermOwner(id) {\r\n        //require (!(currentCycle < totalAmountOfCycles), \"Not all cycles have happened yet\");\r\n        _closeFund(id);\r\n    }\r\n\r\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    ///         and prevent the fund to be stuck in limbo\r\n    /// @param id the id of the term\r\n    function emptyFundAfterEnd(uint id) external onlyTermOwner(id) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(\r\n            fund.currentState == LibFund.FundStates.FundClosed &&\r\n                block.timestamp > fund.fundEnd + 180 days,\r\n            \"Can't empty yet\"\r\n        );\r\n\r\n        uint balance = fund.stableToken.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            bool success = fund.stableToken.transfer(msg.sender, balance);\r\n            require(success, \"Transfer failed\");\r\n        }\r\n    }\r\n\r\n    /// @notice function to enable/disable autopay\r\n    /// @param id the id of the term\r\n    function toggleAutoPay(uint id) external {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\r\n        bool enabled = !fund.autoPayEnabled[msg.sender];\r\n        fund.autoPayEnabled[msg.sender] = enabled;\r\n\r\n        emit OnAutoPayToggled(id, msg.sender, enabled);\r\n    }\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    /// @param id the id of the term\r\n    function payContribution(uint id) external {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \"Wrong state\");\r\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\r\n        require(!fund.paidThisCycle[msg.sender], \"Already paid for cycle\");\r\n        _payContribution(id, msg.sender, msg.sender);\r\n    }\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param id the id of the term\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint id, address participant) external {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \"Wrong state\");\r\n        require(fund.isParticipant[participant], \"Not a participant\");\r\n        require(!fund.paidThisCycle[participant], \"Already paid for cycle\");\r\n        _payContribution(id, msg.sender, participant);\r\n    }\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param id the id of the term\r\n    function withdrawFund(uint id) external {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        require(\r\n            fund.currentState == LibFund.FundStates.FundClosed || fund.paidThisCycle[msg.sender],\r\n            \"You must pay your cycle before withdrawing\"\r\n        );\r\n\r\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\r\n        (, , uint collateralPool) = IGetters(address(this)).getDepositorCollateralSummary(\r\n            msg.sender,\r\n            id\r\n        );\r\n        bool hasCollateralPool = collateralPool > 0;\r\n        require(hasFundPool || hasCollateralPool, \"Nothing to withdraw\");\r\n\r\n        if (hasFundPool) {\r\n            // Get the amount this beneficiary can withdraw\r\n            uint transferAmount = fund.beneficiariesPool[msg.sender];\r\n            uint contractBalance = fund.stableToken.balanceOf(address(this));\r\n            if (contractBalance < transferAmount) {\r\n                revert InsufficientBalance({available: contractBalance, required: transferAmount});\r\n            } else {\r\n                fund.beneficiariesPool[msg.sender] = 0;\r\n                bool success = fund.stableToken.transfer(msg.sender, transferAmount);\r\n                require(success, \"Transfer failed\");\r\n            }\r\n            emit OnFundWithdrawn(id, msg.sender, transferAmount);\r\n        }\r\n\r\n        if (hasCollateralPool) {\r\n            ICollateral(address(this)).withdrawReimbursement(id, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @param id the id of the term\r\n    /// @param beneficiary the address of the participant to check\r\n    /// @return true if the participant is a beneficiary\r\n    function isBeneficiary(uint id, address beneficiary) external view returns (bool) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        return fund.isBeneficiary[beneficiary];\r\n    }\r\n\r\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\r\n    /// @param _id The id of the term\r\n    /// @param _newState The new state of the fund\r\n    function _setState(uint _id, LibFund.FundStates _newState) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        require(fund.currentState != LibFund.FundStates.FundClosed, \"Fund closed\");\r\n        fund.currentState = _newState;\r\n        emit OnFundStateChanged(_id, _newState);\r\n    }\r\n\r\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\r\n    /// @param _id The id of the term\r\n    function _startNewCycle(uint _id) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n        // currentCycle is 0 when this is called for the first time\r\n        require(\r\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\r\n            \"Too early to start new cycle\"\r\n        );\r\n        require(\r\n            fund.currentState == LibFund.FundStates.InitializingFund ||\r\n                fund.currentState == LibFund.FundStates.CycleOngoing,\r\n            \"Wrong state\"\r\n        );\r\n\r\n        ++fund.currentCycle;\r\n        uint length = fund.beneficiariesOrder.length;\r\n        for (uint i; i < length; ) {\r\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _setState(_id, LibFund.FundStates.AcceptingContributions);\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        _autoPay(_id);\r\n    }\r\n\r\n    /// @notice function to attempt to make autopayers pay their contribution\r\n    /// @param _id the id of the term\r\n    function _autoPay(uint _id) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\r\n        uint length = autoPayers.length;\r\n        for (uint i; i < length; ) {\r\n            if (fund.autoPayEnabled[autoPayers[i]] && !fund.paidThisCycle[autoPayers[i]]) {\r\n                _payContributionSafe(_id, autoPayers[i], autoPayers[i]);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\r\n    /// @param _id the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContributionSafe(uint _id, address _payer, address _participant) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6;\r\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\r\n            if (success) {\r\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n                fund.paidThisCycle[_participant] = true;\r\n                emit OnPaidContribution(_id, _participant, fund.currentCycle);\r\n            }\r\n        } catch {}\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle\r\n    /// @param _id the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContribution(uint _id, address _payer, address _participant) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6;\r\n\r\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\r\n        require(success, \"Contribution failed, did you approve stable token?\");\r\n\r\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n        fund.paidThisCycle[_participant] = true;\r\n        emit OnPaidContribution(_id, _participant, fund.currentCycle);\r\n    }\r\n\r\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\r\n    /// @param _id The id of the term\r\n    /// @param _defaulter The participant to default\r\n    function _defaultParticipant(uint _id, address _defaulter) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        // Try removing from participants first\r\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\r\n\r\n        // If that fails, we try removing from beneficiaries\r\n        if (!success) {\r\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\r\n        }\r\n\r\n        require(success, \"Can't remove defaulter\");\r\n        EnumerableSet.add(fund._defaulters, _defaulter);\r\n\r\n        emit OnParticipantDefaulted(_id, _defaulter);\r\n    }\r\n\r\n    /// @notice The beneficiary will be selected here based on the beneficiariesOrder array.\r\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\r\n    /// @param _id The id of the term\r\n    function _selectBeneficiary(uint _id) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n        // check if there are any participants left, else use the defaulters\r\n        address selectedBeneficiary; // By default initialization is address(0)\r\n        address[] memory arrayToCheck = fund.beneficiariesOrder;\r\n        uint arrayToCheckLength = arrayToCheck.length;\r\n        uint beneficiaryIndex; // By default uint initialization is 0;\r\n\r\n        for (uint i; i < arrayToCheckLength; ) {\r\n            address b = arrayToCheck[i];\r\n            if (!fund.isBeneficiary[b]) {\r\n                selectedBeneficiary = b;\r\n                beneficiaryIndex = i;\r\n                break;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // If the defaulter didn't pay this cycle, we move the first elligible beneficiary forward and everyone in between forward\r\n        if (!fund.paidThisCycle[selectedBeneficiary]) {\r\n            // Find the index of the beneficiary to move to the end\r\n            for (uint i = beneficiaryIndex; i < arrayToCheckLength; ) {\r\n                address b = arrayToCheck[i];\r\n                // Find the first eligible beneficiary\r\n                if (fund.paidThisCycle[b]) {\r\n                    selectedBeneficiary = b;\r\n                    address[] memory newOrder = fund.beneficiariesOrder;\r\n                    // Move each defaulter between current beneficiary and new beneficiary 1 position forward\r\n                    for (uint j = beneficiaryIndex; j < i; ) {\r\n                        newOrder[j + 1] = arrayToCheck[j];\r\n                        unchecked {\r\n                            ++j;\r\n                        }\r\n                    }\r\n                    // Move new beneficiary to original beneficiary's position\r\n                    newOrder[beneficiaryIndex] = selectedBeneficiary;\r\n                    fund.beneficiariesOrder = newOrder;\r\n                    break;\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Request contribution from the collateral for those who haven't paid this cycle\r\n        if (EnumerableSet.length(fund._defaulters) > 0) {\r\n            address[] memory expellants = ICollateral(address(this)).requestContribution(\r\n                _id,\r\n                selectedBeneficiary,\r\n                EnumerableSet.values(fund._defaulters)\r\n            );\r\n\r\n            uint expellantsLength = expellants.length;\r\n            for (uint i; i < expellantsLength; ) {\r\n                if (expellants[i] == address(0)) {\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                    continue;\r\n                }\r\n                _expelDefaulter(_id, expellants[i]);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove participant from participants set..\r\n        if (EnumerableSet.remove(fund._participants, selectedBeneficiary)) {\r\n            // ..Then add them to the benificiaries set\r\n            EnumerableSet.add(fund._beneficiaries, selectedBeneficiary);\r\n        } // If this if-statement fails, this means we're dealing with a graced defaulter\r\n\r\n        // Update the mapping to track who's been beneficiary\r\n        fund.isBeneficiary[selectedBeneficiary] = true;\r\n\r\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\r\n        uint paidCount;\r\n        address[] memory allParticipants = fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\r\n        for (uint i = 0; i < allParticipants.length; i++) {\r\n            if (fund.paidThisCycle[allParticipants[i]]) {\r\n                paidCount++;\r\n            }\r\n        }\r\n\r\n        // Award the beneficiary with the pool and update the lastBeneficiary\r\n        // todo: check if this is correct\r\n        fund.beneficiariesPool[selectedBeneficiary] = term.contributionAmount * paidCount * 10 ** 6;\r\n        fund.lastBeneficiary = selectedBeneficiary;\r\n\r\n        emit OnBeneficiarySelected(_id, selectedBeneficiary);\r\n        _setState(_id, LibFund.FundStates.CycleOngoing);\r\n    }\r\n\r\n    /// @notice Called internally to move a defaulter in the beneficiariesOrder to the end, so that people who have paid get chosen first as beneficiary\r\n    /// @param _id The id of the term\r\n    /// @param _beneficiary The defaulter that could have been beneficiary\r\n    function _removeBeneficiaryFromOrder(uint _id, address _beneficiary) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        address[] memory arrayToCheck = fund.beneficiariesOrder;\r\n        uint arrayToCheckLength = arrayToCheck.length;\r\n        address[] memory newArray = new address[](arrayToCheck.length - 1);\r\n        uint j;\r\n        for (uint i; i < arrayToCheckLength; ) {\r\n            address b = arrayToCheck[i];\r\n            if (b != _beneficiary) {\r\n                newArray[j] = b;\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        fund.beneficiariesOrder = newArray;\r\n    }\r\n\r\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\r\n    /// @param _id The id of the term\r\n    /// @param _expellant The address of the defaulter that will be expelled\r\n    function _expelDefaulter(uint _id, address _expellant) internal {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_id];\r\n        //require(msg.sender == address(collateral), \"Caller is not collateral\");\r\n        require(\r\n            fund.isParticipant[_expellant] && EnumerableSet.remove(fund._defaulters, _expellant),\r\n            \"Expellant not found\"\r\n        );\r\n\r\n        // Expellants should only be in the defauters set so no need to touch the other sets\r\n        //require(EnumerableSet.remove(_defaulters, expellant), \"Expellant not found\");\r\n\r\n        // Remove expellant from beneficiaries order\r\n        // Remove expellants from participants tracker and emit that they've been expelled\r\n        // Update the defaulters array\r\n        _removeBeneficiaryFromOrder(_id, _expellant);\r\n\r\n        fund.isParticipant[_expellant] = false;\r\n        emit OnDefaulterExpelled(_id, _expellant);\r\n\r\n        // If the participant is expelled before becoming beneficiary, we lose a cycle, the one which this expellant is becoming beneficiary\r\n        if (!fund.isBeneficiary[_expellant]) {\r\n            fund.totalAmountOfCycles--;\r\n        }\r\n\r\n        // Lastly, lower the amount of participants with the amount expelled\r\n        uint newLength = term.totalParticipants - 1;\r\n        term.totalParticipants = newLength;\r\n        collateral.isCollateralMember[_expellant] = false;\r\n        ++fund.expelledParticipants;\r\n\r\n        emit OnTotalParticipantsUpdated(_id, newLength);\r\n    }\r\n\r\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\r\n    /// @param _id The id of the term\r\n    function _closeFund(uint _id) internal {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_id];\r\n        fund.fundEnd = block.timestamp;\r\n        _setState(_id, LibFund.FundStates.FundClosed);\r\n        ICollateral(address(this)).releaseCollateral(_id);\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/facets/GettersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\n\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\ncontract GettersFacet is IGetters {\r\n    // TERM GETTERS\r\n    /// @return the current term id\r\n    /// @return the next term id\r\n    function getTermsId() external view returns (uint, uint) {\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        uint lastTermId = termStorage.nextTermId - 1;\r\n        uint nextTermId = termStorage.nextTermId;\r\n        return (lastTermId, nextTermId);\r\n    }\r\n\r\n    /// @param id the term id\r\n    /// @return the term struct\r\n    function getTermSummary(uint id) external view returns (LibTerm.Term memory) {\r\n        return (LibTerm._termStorage().terms[id]);\r\n    }\r\n\r\n    /// @param id the term id\r\n    /// @return remaining time in the current cycle\r\n    function getRemainingCycleTime(uint id) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\r\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\r\n        if (block.timestamp > cycleEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return cycleEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @param depositor the depositor address\r\n    /// @param id the collateral id\r\n    /// @return isCollateralMember, collateralMembersBank, collateralPaymentBank\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint id\r\n    ) external view returns (bool, uint, uint) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        return (\r\n            collateral.isCollateralMember[depositor],\r\n            collateral.collateralMembersBank[depositor],\r\n            collateral.collateralPaymentBank[depositor]\r\n        );\r\n    }\r\n\r\n    /// @param id the collateral id\r\n    /// @return collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\r\n    function getCollateralSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory, uint)\r\n    {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        return (\r\n            collateral.initialized,\r\n            collateral.state, // Current state of Collateral\r\n            collateral.firstDepositTime, // Time when the first deposit was made\r\n            collateral.counterMembers, // Current member count\r\n            collateral.depositors, // List of depositors\r\n            collateral.collateralDeposit // Collateral\r\n        );\r\n    }\r\n\r\n    // FUND GETTERS\r\n\r\n    /// @notice function to get the cycle information in one go\r\n    /// @param id the fund id\r\n    /// @return initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, lastBeneficiary, totalAmountOfCycles, fundEnd\r\n    function getFundSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            LibFund.FundStates,\r\n            IERC20,\r\n            uint,\r\n            address[] memory,\r\n            uint,\r\n            uint,\r\n            address,\r\n            uint,\r\n            uint\r\n        )\r\n    {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        return (\r\n            fund.initialized,\r\n            fund.currentState,\r\n            fund.stableToken,\r\n            fund.currentCycle,\r\n            fund.beneficiariesOrder,\r\n            fund.fundStart,\r\n            fund.currentCycle,\r\n            fund.lastBeneficiary,\r\n            fund.totalAmountOfCycles,\r\n            fund.fundEnd\r\n        );\r\n    }\r\n\r\n    /// @notice function to get cycle information of a specific participant\r\n    /// @param participant the user to get the info from\r\n    /// @param id the fund id\r\n    /// @return isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint id\r\n    ) external view returns (bool, bool, bool, bool, uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        return (\r\n            fund.isParticipant[participant],\r\n            fund.isBeneficiary[participant],\r\n            fund.paidThisCycle[participant],\r\n            fund.autoPayEnabled[participant],\r\n            fund.beneficiariesPool[participant]\r\n        );\r\n    }\r\n\r\n    /// @notice returns the time left to contribute for this cycle\r\n    /// @param id the fund id\r\n    /// @return the time left to contribute\r\n    function getRemainingContributionTime(uint id) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[id];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[id];\r\n        if (fund.currentState != LibFund.FundStates.AcceptingContributions) {\r\n            return 0;\r\n        }\r\n\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\r\n        uint contributionEndTimestamp = term.cycleTime *\r\n            (fund.currentCycle - 1) +\r\n            fund.fundStart +\r\n            term.contributionPeriod;\r\n        if (block.timestamp > contributionEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return contributionEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/facets/TermFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IFund} from \"../interfaces/IFund.sol\";\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {ITerm} from \"../interfaces/ITerm.sol\";\r\n\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\n\r\n/// @title Takaturn Term\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to deploy the collateral & fund contracts\r\n/// @dev v3.0 (Diamond)\r\ncontract TermFacet is ITerm {\r\n    uint public constant TERM_VERSION = 1;\r\n\r\n    event OnCollateralDeposited(uint indexed termId, address indexed user);\r\n\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint cycleTime,\r\n        uint contributionAmount,\r\n        uint contributionPeriod,\r\n        uint fixedCollateralEth,\r\n        uint collateralAmount,\r\n        address stableTokenAddress,\r\n        address aggregatorAddress\r\n    ) external returns (uint) {\r\n        return\r\n            _createTerm(\r\n                totalParticipants,\r\n                cycleTime,\r\n                contributionAmount,\r\n                contributionPeriod,\r\n                fixedCollateralEth,\r\n                collateralAmount,\r\n                stableTokenAddress,\r\n                aggregatorAddress\r\n            );\r\n    }\r\n\r\n    function joinTerm(uint termId) external payable {\r\n        _joinTerm(termId);\r\n    }\r\n\r\n    function startTerm(uint termId) external {\r\n        _startTerm(termId);\r\n    }\r\n\r\n    function _createTerm(\r\n        uint _totalParticipants,\r\n        uint _cycleTime,\r\n        uint _contributionAmount,\r\n        uint _contributionPeriod,\r\n        uint _fixedCollateralEth,\r\n        uint _collateralAmount,\r\n        address _stableTokenAddress,\r\n        address _aggregatorAddress\r\n    ) internal returns (uint) {\r\n        require(\r\n            _cycleTime != 0 &&\r\n                _contributionAmount != 0 &&\r\n                _contributionPeriod != 0 &&\r\n                _totalParticipants != 0 &&\r\n                _contributionPeriod < _cycleTime &&\r\n                _collateralAmount != 0 &&\r\n                _stableTokenAddress != address(0) &&\r\n                _aggregatorAddress != address(0),\r\n            \"Invalid inputs\"\r\n        );\r\n\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        uint termId = termStorage.nextTermId;\r\n\r\n        //require(!termStorage.terms[termId].initialized, \"Term already exists\");\r\n\r\n        LibTerm.Term memory newTerm;\r\n\r\n        newTerm.termId = termId;\r\n        newTerm.totalParticipants = _totalParticipants;\r\n        newTerm.cycleTime = _cycleTime;\r\n        newTerm.contributionAmount = _contributionAmount;\r\n        newTerm.contributionPeriod = _contributionPeriod;\r\n        newTerm.fixedCollateralEth = _fixedCollateralEth;\r\n        newTerm.stableTokenAddress = _stableTokenAddress;\r\n        newTerm.aggregatorAddress = _aggregatorAddress;\r\n        newTerm.termOwner = msg.sender;\r\n        newTerm.creationTime = block.timestamp;\r\n        newTerm.initialized = true;\r\n\r\n        termStorage.terms[termId] = newTerm;\r\n        termStorage.nextTermId++;\r\n\r\n        _createCollateral(termId, _totalParticipants, _collateralAmount);\r\n\r\n        return termId;\r\n    }\r\n\r\n    function _joinTerm(uint termId) internal {\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        LibTerm.Term memory term = termStorage.terms[termId];\r\n\r\n        LibCollateral.CollateralStorage storage collateralStorage = LibCollateral\r\n            ._collateralStorage();\r\n        LibCollateral.Collateral storage collateral = collateralStorage.collaterals[termId];\r\n        require(LibTerm._termExists(termId) && LibCollateral._collateralExists(termId));\r\n\r\n        require(collateral.counterMembers < term.totalParticipants, \"No space\");\r\n\r\n        require(!collateral.isCollateralMember[msg.sender], \"Reentry\");\r\n        require(msg.value >= term.fixedCollateralEth, \"Eth payment too low\");\r\n\r\n        collateral.collateralMembersBank[msg.sender] += msg.value;\r\n        collateral.isCollateralMember[msg.sender] = true;\r\n\r\n        uint depositorsLength = collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            if (collateral.depositors[i] == address(0)) {\r\n                collateral.depositors[i] = msg.sender;\r\n                collateral.counterMembers++;\r\n                emit OnCollateralDeposited(termId, msg.sender);\r\n                if (collateral.counterMembers == 1) {\r\n                    collateral.firstDepositTime = block.timestamp;\r\n                }\r\n                break;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        // If all the spots are filled, change the collateral\r\n        if (collateral.counterMembers == term.totalParticipants) {\r\n            collateral.state = LibCollateral.CollateralStates.CycleOngoing;\r\n        }\r\n    }\r\n\r\n    function _startTerm(uint termId) internal {\r\n        require(LibTerm._termExists(termId) && LibCollateral._collateralExists(termId));\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        LibTerm.Term memory term = termStorage.terms[termId];\r\n\r\n        LibCollateral.CollateralStorage storage collateralStorage = LibCollateral\r\n            ._collateralStorage();\r\n        LibCollateral.Collateral storage collateral = collateralStorage.collaterals[termId];\r\n\r\n        address[] memory depositors = collateral.depositors;\r\n\r\n        uint depositorsArrayLength = depositors.length;\r\n\r\n        require(collateral.counterMembers == term.totalParticipants);\r\n\r\n        // Need to check each user because they can have different collateral amounts\r\n        for (uint i; i < depositorsArrayLength; ) {\r\n            require(\r\n                !ICollateral(address(this)).isUnderCollaterized(termId, depositors[i]),\r\n                \"Eth prices dropped\"\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Actually create and initialize the fund\r\n        _createFund(termId);\r\n\r\n        // Tell the collateral that the term has started\r\n        ICollateral(address(this)).setStateOwner(\r\n            termId,\r\n            LibCollateral.CollateralStates.CycleOngoing\r\n        );\r\n    }\r\n\r\n    function _createCollateral(\r\n        uint termId,\r\n        uint _totalParticipants,\r\n        uint _collateralAmount\r\n    ) internal {\r\n        //require(!LibCollateral._collateralExists(termId), \"Collateral already exists\");\r\n        LibCollateral.Collateral storage newCollateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        newCollateral.initialized = true;\r\n        newCollateral.state = LibCollateral.CollateralStates.AcceptingCollateral;\r\n        newCollateral.depositors = new address[](_totalParticipants);\r\n        newCollateral.collateralDeposit = _collateralAmount * 10 ** 18; // Convert to Wei; // TODO: This is the correct value?\r\n    }\r\n\r\n    function _createFund(uint termId) internal {\r\n        require(!LibFund._fundExists(termId), \"Fund already exists\");\r\n        LibFund.Fund storage newFund = LibFund._fundStorage().funds[termId];\r\n        LibTerm.Term memory term = LibTerm._termStorage().terms[termId];\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        newFund.stableToken = IERC20(term.stableTokenAddress);\r\n        newFund.beneficiariesOrder = collateral.depositors;\r\n        newFund.initialized = true;\r\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\r\n\r\n        IFund(address(this)).initFund(termId);\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Collateral Interface\r\n/// @author Aisha EL Allam\r\n/// @notice This is used to allow fund to easily communicate with collateral\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\n\r\ninterface ICollateral {\r\n    // Function cannot be called at this time.\r\n    error FunctionInvalidAtThisState();\r\n\r\n    function setStateOwner(uint id, LibCollateral.CollateralStates newState) external;\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param beneficiary Address that was randomly selected for the current cycle\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    function requestContribution(\r\n        uint id,\r\n        address beneficiary,\r\n        address[] calldata defaulters\r\n    ) external returns (address[] memory);\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    function withdrawCollateral(uint id) external;\r\n\r\n    function withdrawReimbursement(uint id, address participant) external;\r\n\r\n    function releaseCollateral(uint id) external;\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    function emptyCollateralAfterEnd(uint id) external;\r\n\r\n    // function getDepositorSummary(\r\n    //     uint id,\r\n    //     address participant\r\n    // ) external view returns (uint, uint, bool);\r\n}\r\n"
    },
    "contracts/version-1/interfaces/IFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Fund Interface\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to allow collateral to easily communicate with fund\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\ninterface IFund {\r\n    function initFund(uint termId) external;\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    function startNewCycle(uint termId) external;\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    function closeFundingPeriod(uint termId) external;\r\n\r\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\r\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\r\n    function selectBeneficiary(uint termId) external;\r\n\r\n    /// @notice called by the owner to close the fund for emergency reasons.\r\n    function closeFund(uint termId) external;\r\n\r\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    //         and prevent the fund to be stuck in limbo\r\n    function emptyFundAfterEnd(uint termId) external;\r\n\r\n    /// @notice function to enable/disable autopay\r\n    function toggleAutoPay(uint termId) external;\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    function payContribution(uint termId) external;\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint termId, address participant) external;\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    function withdrawFund(uint termId) external;\r\n\r\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\r\n}\r\n"
    },
    "contracts/version-1/interfaces/IGetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\ninterface IGetters {\r\n    function getTermsId() external view returns (uint, uint);\r\n\r\n    function getTermSummary(uint id) external view returns (LibTerm.Term memory);\r\n\r\n    function getRemainingCycleTime(uint id) external view returns (uint);\r\n\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint id\r\n    ) external view returns (bool, uint, uint);\r\n\r\n    function getCollateralSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory, uint);\r\n\r\n    function getFundSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            LibFund.FundStates,\r\n            IERC20,\r\n            uint,\r\n            address[] memory,\r\n            uint,\r\n            uint,\r\n            address,\r\n            uint,\r\n            uint\r\n        );\r\n\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint id\r\n    ) external view returns (bool, bool, bool, bool, uint);\r\n\r\n    function getRemainingContributionTime(uint id) external view returns (uint);\r\n}\r\n"
    },
    "contracts/version-1/interfaces/ITerm.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface ITerm {\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint cycleTime,\r\n        uint contributionAmount,\r\n        uint contributionPeriod,\r\n        uint fixedCollateralEth,\r\n        uint collateralAmount,\r\n        address stableTokenAddress,\r\n        address aggregatorAddress\r\n    ) external returns (uint);\r\n\r\n    function joinTerm(uint termId) external payable;\r\n\r\n    function startTerm(uint termId) external;\r\n}\r\n"
    },
    "contracts/version-1/libraries/LibCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibCollateral {\r\n    uint public constant COLLATERAL_VERSION = 1;\r\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\r\n\r\n    enum CollateralStates {\r\n        AcceptingCollateral, // Initial state where collateral are deposited\r\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\r\n        ReleasingCollateral, // Triggered when the fund closes\r\n        Closed // Triggered when all depositors withdraw their collaterals\r\n    }\r\n\r\n    struct Collateral {\r\n        bool initialized;\r\n        CollateralStates state;\r\n        uint firstDepositTime;\r\n        uint counterMembers;\r\n        address[] depositors;\r\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\r\n        mapping(address => uint) collateralMembersBank; // Users main balance\r\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\r\n        uint collateralDeposit; // Total value of collateral in USD (1.5x of total fund)\r\n    }\r\n\r\n    struct CollateralStorage {\r\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\r\n    }\r\n\r\n    function _collateralExists(uint termId) internal view returns (bool) {\r\n        return _collateralStorage().collaterals[termId].initialized;\r\n    }\r\n\r\n    function _collateralStorage()\r\n        internal\r\n        pure\r\n        returns (CollateralStorage storage collateralStorage)\r\n    {\r\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\r\n        assembly {\r\n            collateralStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/libraries/LibFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\n\r\nlibrary LibFund {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint public constant FUND_VERSION = 1;\r\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\r\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\r\n\r\n    enum FundStates {\r\n        InitializingFund, // Time before the first cycle has started\r\n        AcceptingContributions, // Triggers at the start of a cycle\r\n        ChoosingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\r\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\r\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\r\n    }\r\n\r\n    struct Fund {\r\n        bool initialized;\r\n        FundStates currentState; // Variable to keep track of the different FundStates\r\n        IERC20 stableToken; // Instance of the stable token\r\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\r\n        uint fundStart; // Timestamp of the start of the fund\r\n        uint fundEnd; // Timestamp of the end of the fund\r\n        uint currentCycle; // Index of current cycle\r\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\r\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\r\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\r\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\r\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\r\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\r\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\r\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\r\n        uint totalAmountOfCycles;\r\n    }\r\n\r\n    struct FundStorage {\r\n        mapping(uint => Fund) funds; // termId => Fund struct\r\n    }\r\n\r\n    function _fundExists(uint termId) internal view returns (bool) {\r\n        return _fundStorage().funds[termId].initialized;\r\n    }\r\n\r\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\r\n        bytes32 position = FUND_STORAGE_POSITION;\r\n        assembly {\r\n            fundStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-1/libraries/LibTerm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibTerm {\r\n    uint public constant TERM_VERSION = 1;\r\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\r\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\r\n\r\n    struct TermConsts {\r\n        uint sequencerStartupTime;\r\n        address sequencerUptimeFeedAddress;\r\n    }\r\n\r\n    struct Term {\r\n        bool initialized;\r\n        address termOwner;\r\n        uint creationTime;\r\n        uint termId;\r\n        uint totalParticipants; // Max number of participants\r\n        uint cycleTime; // Time for single cycle (seconds)\r\n        uint contributionAmount; // Amount user must pay per cycle (USD)\r\n        uint contributionPeriod; // The portion of cycle user must make payment\r\n        uint fixedCollateralEth;\r\n        address stableTokenAddress;\r\n        address aggregatorAddress;\r\n    }\r\n\r\n    struct TermStorage {\r\n        uint nextTermId;\r\n        mapping(uint => Term) terms; // termId => Term struct\r\n    }\r\n\r\n    function _termExists(uint termId) internal view returns (bool) {\r\n        return _termStorage().terms[termId].initialized;\r\n    }\r\n\r\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\r\n        bytes32 position = TERM_CONSTS_POSITION;\r\n        assembly {\r\n            termConsts.slot := position\r\n        }\r\n    }\r\n\r\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\r\n        bytes32 position = TERM_STORAGE_POSITION;\r\n        assembly {\r\n            termStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/DiamondInitV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTermV2} from \"./libraries/LibTermV2.sol\";\r\n\r\ncontract DiamondInitV2 {\r\n    function init(address _aggregatorAddress, address _sequencerUptimeFeedAddress) external {\r\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\r\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\r\n        termConsts.aggregatorAddress = _aggregatorAddress;\r\n        termConsts.sequencerUptimeFeedAddress = _sequencerUptimeFeedAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/facets/CollateralFacetV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IFundV2} from \"../interfaces/IFundV2.sol\";\r\nimport {ICollateralV2} from \"../interfaces/ICollateralV2.sol\";\r\nimport {IGettersV2} from \"../interfaces/IGettersV2.sol\";\r\n\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\nimport {LibTermV2} from \"../libraries/LibTermV2.sol\";\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\n\r\nimport {TermOwnable} from \"../../version-1/access/TermOwnable.sol\";\r\n\r\n/// @title Takaturn Collateral\r\n/// @author Aisha El Allam\r\n/// @notice This is used to operate the Takaturn collateral\r\n/// @dev v3.0 (Diamond)\r\ncontract CollateralFacetV2 is ICollateralV2, TermOwnable {\r\n    event OnCollateralStateChanged(\r\n        uint indexed termId,\r\n        LibCollateralV2.CollateralStates indexed oldState,\r\n        LibCollateralV2.CollateralStates indexed newState\r\n    );\r\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnCollateralWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\r\n\r\n    /// @param id term id\r\n    /// @param _state collateral state\r\n    modifier atState(uint id, LibCollateralV2.CollateralStates _state) {\r\n        LibCollateralV2.CollateralStates state = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id]\r\n            .state;\r\n        if (state != _state) revert FunctionInvalidAtThisState();\r\n        _;\r\n    }\r\n\r\n    /// @param id term id\r\n    /// @param newState collateral state\r\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external {\r\n        _setState(id, newState);\r\n    }\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param id term id\r\n    /// @param beneficiary Address that will be receiving the cycle pot\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    /// @return expellants array of addresses that were expelled\r\n    function requestContribution(\r\n        uint id,\r\n        address beneficiary,\r\n        address[] calldata defaulters\r\n    )\r\n        external\r\n        atState(id, LibCollateralV2.CollateralStates.CycleOngoing)\r\n        returns (address[] memory)\r\n    {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n\r\n        address[] memory actualDefaulters = _actualDefaulters(\r\n            fund,\r\n            collateral,\r\n            beneficiary,\r\n            defaulters\r\n        );\r\n\r\n        (uint share, address[] memory expellants) = _whoExpelled(\r\n            collateral,\r\n            term,\r\n            beneficiary,\r\n            actualDefaulters\r\n        );\r\n\r\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _liquidateCollateral(\r\n            collateral,\r\n            term\r\n        );\r\n\r\n        // Finally, divide the share equally among non-beneficiaries\r\n        if (nonBeneficiaryCounter > 0) {\r\n            // This case can only happen when what?\r\n            share = share / nonBeneficiaryCounter;\r\n            for (uint i = 0; i < nonBeneficiaryCounter; i++) {\r\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += share;\r\n            }\r\n        }\r\n        return (expellants);\r\n    }\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param id term id\r\n    function withdrawCollateral(\r\n        uint id\r\n    ) external atState(id, LibCollateralV2.CollateralStates.ReleasingCollateral) {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\r\n        require(fund.paidThisCycle[msg.sender], \"You have not paid this cycle\");\r\n        require(fund.currentState == LibFundV2.FundStates.CycleOngoing, \"Wrong state\");\r\n\r\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\r\n\r\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\r\n            term.contributionAmount * 10 ** 18\r\n        );\r\n        uint remainingContribution = contributionAmountWei * remainingCycles;\r\n\r\n        uint userSecurity = collateral.collateralDepositByUser[msg.sender]; // todo: or collateralMembersBank?\r\n\r\n        uint allowedWithdraw = ((userSecurity - remainingContribution) / remainingCycles) +\r\n            contributionAmountWei;\r\n\r\n        if (allowedWithdraw <= collateral.collateralPaymentBank[msg.sender]) {\r\n            collateral.collateralPaymentBank[msg.sender] -= allowedWithdraw;\r\n            (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\"\");\r\n            require(success);\r\n        } else {\r\n            uint neededAmount = allowedWithdraw - collateral.collateralPaymentBank[msg.sender];\r\n            if (neededAmount <= collateral.collateralMembersBank[msg.sender]) {\r\n                collateral.collateralPaymentBank[msg.sender] -= 0;\r\n                collateral.collateralMembersBank[msg.sender] -= neededAmount;\r\n                (bool success, ) = payable(msg.sender).call{value: allowedWithdraw}(\"\");\r\n                require(success);\r\n            } else {\r\n                uint amount = collateral.collateralMembersBank[msg.sender] +\r\n                    collateral.collateralPaymentBank[msg.sender];\r\n                collateral.collateralMembersBank[msg.sender] = 0;\r\n                collateral.collateralPaymentBank[msg.sender] = 0;\r\n                (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n                require(success);\r\n                --collateral.counterMembers;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @param id term id\r\n    /// @param depositor Address of the depositor\r\n    function withdrawReimbursement(uint id, address depositor) external {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        require(LibFundV2._fundExists(id), \"Fund does not exists\");\r\n        uint amount = collateral.collateralPaymentBank[depositor];\r\n        require(amount > 0, \"Nothing to claim\");\r\n\r\n        collateral.collateralPaymentBank[depositor] = 0;\r\n\r\n        (bool success, ) = payable(depositor).call{value: amount}(\"\");\r\n        require(success);\r\n\r\n        emit OnReimbursementWithdrawn(id, depositor, amount);\r\n    }\r\n\r\n    /// @param id term id\r\n    function releaseCollateral(uint id) external {\r\n        require(LibFundV2._fundExists(id), \"Fund does not exists\");\r\n        _setState(id, LibCollateralV2.CollateralStates.ReleasingCollateral);\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param id The term id\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint id, address member) external view returns (bool) {\r\n        return _isUnderCollaterized(id, member);\r\n    }\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    /// @param id The term id\r\n    function emptyCollateralAfterEnd(\r\n        uint id\r\n    ) external onlyTermOwner(id) atState(id, LibCollateralV2.CollateralStates.ReleasingCollateral) {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        (, , , , , uint fundEnd, , , ) = IGettersV2(address(this)).getFundSummary(id);\r\n        require(block.timestamp > fundEnd + 180 days, \"Can't empty yet\");\r\n\r\n        uint depositorsLength = collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; i++) {\r\n            address depositor = collateral.depositors[i];\r\n            collateral.collateralMembersBank[depositor] = 0;\r\n            collateral.collateralPaymentBank[depositor] = 0;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        _setState(id, LibCollateralV2.CollateralStates.Closed);\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @param _id term id\r\n    /// @param _newState collateral state\r\n    function _setState(uint _id, LibCollateralV2.CollateralStates _newState) internal {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n        LibCollateralV2.CollateralStates oldState = collateral.state;\r\n        collateral.state = _newState;\r\n        emit OnCollateralStateChanged(_id, oldState, _newState);\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param _id The fund id\r\n    /// @param _member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function _isUnderCollaterized(uint _id, address _member) internal view returns (bool) {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\r\n\r\n        uint collateralLimit;\r\n        uint memberCollateralUSD;\r\n        (, , , , , , uint currentCycle, , uint totalAmountOfCycles) = IGettersV2(address(this))\r\n            .getFundSummary(_id);\r\n\r\n        if (!LibFundV2._fundExists(_id)) {\r\n            // Only check here when starting the term\r\n            (, , , collateralLimit) = IGettersV2(address(this)).getDepositorCollateralSummary(\r\n                _member,\r\n                _id\r\n            );\r\n        } else {\r\n            uint remainingCycles = 1 + totalAmountOfCycles - currentCycle;\r\n\r\n            collateralLimit = remainingCycles * term.contributionAmount * 10 ** 18; // 18 decimals\r\n        }\r\n\r\n        memberCollateralUSD = IGettersV2(address(this)).getToUSDConversionRate(\r\n            collateral.collateralMembersBank[_member]\r\n        );\r\n        return (memberCollateralUSD < collateralLimit);\r\n    }\r\n\r\n    /// @notice Called to get the defaulters\r\n    /// @dev Beneficiary is never considered a defaulter\r\n    /// @dev If the beneficiary was previously expelled, then we only consider previous beneficiaries\r\n    /// @param _fund Fund storage\r\n    /// @param _collateral Collateral storage\r\n    /// @param _beneficiary Address that will be receiving the cycle pot\r\n    /// @param _defaulters Complete defaulters array that will be filtered\r\n    /// @return actualDefaulters array of addresses that we will consider as defaulters for the current cycle\r\n    function _actualDefaulters(\r\n        LibFundV2.Fund storage _fund,\r\n        LibCollateralV2.Collateral storage _collateral,\r\n        address _beneficiary,\r\n        address[] calldata _defaulters\r\n    ) internal view returns (address[] memory) {\r\n        address[] memory actualDefaulters = new address[](_defaulters.length);\r\n        address[] memory beneficiariesOrder = _fund.beneficiariesOrder; // We check on the beneficiariesOrder array\r\n\r\n        uint256 beneficiariesLength = beneficiariesOrder.length;\r\n        uint256 defaultersLength = _defaulters.length;\r\n\r\n        // If the beneficiary is not a participant neither a collateral member he is expelled\r\n        bool expelledBeneficiary = !_fund.isParticipant[_beneficiary] &&\r\n            !_collateral.isCollateralMember[_beneficiary];\r\n\r\n        if (expelledBeneficiary) {\r\n            for (uint i; i < beneficiariesLength; ++i) {\r\n                // When we find the first non beneficiary we exit the loop. The first one must be the beneficiary\r\n                if (!_fund.isBeneficiary[beneficiariesOrder[i]]) {\r\n                    break;\r\n                }\r\n                for (uint j; j < defaultersLength; ++j) {\r\n                    // We check if the previous beneficiary is on the defaulter array\r\n                    if (beneficiariesOrder[i] == _defaulters[j]) {\r\n                        actualDefaulters[i] = _defaulters[j];\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // We don't consider the beneficiary a defaulter\r\n            for (uint i; i < defaultersLength; ++i) {\r\n                if (_defaulters[i] == _beneficiary) {\r\n                    continue;\r\n                }\r\n                actualDefaulters[i] = _defaulters[i];\r\n            }\r\n        }\r\n\r\n        return actualDefaulters;\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _term Term storage\r\n    /// @param _beneficiary Address that will be receiving the cycle pot\r\n    /// @param _defaulters Defaulters array\r\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return expellants array of addresses that were expelled\r\n    function _whoExpelled(\r\n        LibCollateralV2.Collateral storage _collateral,\r\n        LibTermV2.Term storage _term,\r\n        address _beneficiary,\r\n        address[] memory _defaulters\r\n    ) internal returns (uint, address[] memory) {\r\n        // require(_defaulters.length > 0, \"No defaulters\"); // todo: needed? only call this function when there are defaulters\r\n\r\n        bool wasBeneficiary;\r\n        uint8 totalExpellants;\r\n        address[] memory expellants = new address[](_defaulters.length);\r\n        uint share;\r\n        uint currentDefaulterBank;\r\n        uint contributionAmountWei = IGettersV2(address(this)).getToEthConversionRate(\r\n            _term.contributionAmount * 10 ** 18\r\n        );\r\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\r\n        for (uint i; i < _defaulters.length; ) {\r\n            wasBeneficiary = IFundV2(address(this)).isBeneficiary(_term.termId, _defaulters[i]);\r\n            currentDefaulterBank = _collateral.collateralMembersBank[_defaulters[i]];\r\n            // Avoid expelling graced defaulter\r\n\r\n            if (\r\n                (wasBeneficiary && _isUnderCollaterized(_term.termId, _defaulters[i])) ||\r\n                (currentDefaulterBank < contributionAmountWei)\r\n            ) {\r\n                // If enter this statement through the second condition, then the defaulter may not be a beneficiary\r\n                // In that case\r\n                if (!wasBeneficiary) {\r\n                    // Nothing to share, reimburse all the securities left\r\n                    // share = 0;\r\n                    uint amount = _collateral.collateralMembersBank[_defaulters[i]];\r\n                    _collateral.collateralPaymentBank[_defaulters[i]] += amount;\r\n                } else {\r\n                    share += currentDefaulterBank;\r\n                }\r\n\r\n                _collateral.isCollateralMember[_defaulters[i]] = false; // Expelled!\r\n                expellants[i] = _defaulters[i];\r\n                _collateral.collateralMembersBank[_defaulters[i]] = 0;\r\n                ++totalExpellants;\r\n\r\n                emit OnCollateralLiquidated(\r\n                    _term.termId,\r\n                    address(_defaulters[i]),\r\n                    currentDefaulterBank\r\n                );\r\n            } else {\r\n                // Subtract contribution from defaulter and add to beneficiary.\r\n                _collateral.collateralMembersBank[_defaulters[i]] -= contributionAmountWei;\r\n                _collateral.collateralPaymentBank[_beneficiary] += contributionAmountWei;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _term.totalParticipants = _term.totalParticipants - totalExpellants;\r\n        return (share, expellants);\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _term Term storage\r\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return nonBeneficiaries array of addresses that were expelled\r\n    function _liquidateCollateral(\r\n        LibCollateralV2.Collateral storage _collateral,\r\n        LibTermV2.Term storage _term\r\n    ) internal view returns (uint, address[] memory) {\r\n        address currentDepositor;\r\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\r\n\r\n        uint nonBeneficiaryCounter;\r\n\r\n        // Divide and Liquidate\r\n        uint depositorsLength = _collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            currentDepositor = _collateral.depositors[i];\r\n            if (\r\n                !IFundV2(address(this)).isBeneficiary(_term.termId, currentDepositor) &&\r\n                _collateral.isCollateralMember[currentDepositor]\r\n            ) {\r\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\r\n                nonBeneficiaryCounter++;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return (nonBeneficiaryCounter, nonBeneficiaries);\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/facets/FundFacetV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IFundV2} from \"../interfaces/IFundV2.sol\";\r\nimport {ICollateralV2} from \"../interfaces/ICollateralV2.sol\";\r\nimport {IGettersV2} from \"../interfaces/IGettersV2.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\nimport {LibTermV2} from \"../libraries/LibTermV2.sol\";\r\n\r\nimport {TermOwnable} from \"../../version-1/access/TermOwnable.sol\";\r\n\r\n/// @title Takaturn Fund\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to operate the Takaturn fund\r\n/// @dev v3.0 (Diamond)\r\ncontract FundFacetV2 is IFundV2, TermOwnable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint public constant FUND_VERSION = 2; // The version of the contract\r\n\r\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\r\n    event OnFundStateChanged(uint indexed termId, LibFundV2.FundStates indexed newState); // Emits when state has updated\r\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\r\n    event OnBeneficiarySelected(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\r\n    event OnFundWithdrawn(uint indexed termId, address indexed claimant, uint indexed amount); // Emits when a chosen beneficiary claims their fund\r\n    event OnParticipantDefaulted(uint indexed termId, address indexed defaulter); // Emits when a participant didn't pay this cycle's contribution\r\n    event OnParticipantUndefaulted(uint indexed termId, address indexed undefaulter); // Emits when a participant was a defaulter before but started paying on time again for this cycle\r\n    event OnDefaulterExpelled(uint indexed termId, address indexed expellant); // Emits when a defaulter can't compensate with the collateral\r\n    event OnTotalParticipantsUpdated(uint indexed termId, uint indexed newLength); // Emits when the total participants lengths has changed from its initial value\r\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\r\n\r\n    /// Insufficient balance for transfer. Needed `required` but only\r\n    /// `available` available.\r\n    /// @param available balance available.\r\n    /// @param required requested amount to transfer.\r\n    error InsufficientBalance(uint available, uint required);\r\n\r\n    /// @notice called by the term to init the fund\r\n    /// @param termId the id of the term\r\n    function initFund(uint termId) external {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\r\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\r\n        // Set and track participants\r\n        for (uint i; i < participantsArrayLength; ) {\r\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\r\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Starts the first cycle\r\n        _startNewCycle(termId);\r\n\r\n        // Set timestamp of deployment, which will be used to determine cycle times\r\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\r\n        fund.fundStart = block.timestamp;\r\n        //emit LibFundV2.OnTermStart(termId);\r\n        emit OnTermStart(termId);\r\n    }\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    /// @param id the id of the term\r\n    function startNewCycle(uint id) external /*onlyTermOwner(id)*/ {\r\n        _startNewCycle(id);\r\n    }\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    /// @param id the id of the term\r\n    function closeFundingPeriod(uint id) external /*onlyTermOwner(id)*/ {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\r\n        require(\r\n            block.timestamp >\r\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\r\n            \"Still time to contribute\"\r\n        );\r\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \"Wrong state\");\r\n\r\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        _autoPay(id);\r\n\r\n        // Only then start choosing beneficiary\r\n        _setState(id, LibFundV2.FundStates.AwardingBeneficiary);\r\n\r\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\r\n        address[] memory currentParticipants = fund.beneficiariesOrder;\r\n\r\n        uint currentParticipantsLength = currentParticipants.length;\r\n\r\n        for (uint i; i < currentParticipantsLength; ) {\r\n            address p = currentParticipants[i];\r\n\r\n            // The current beneficiary doesn't pay neither get defaulted\r\n            if (p == currentBeneficiary) {\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (fund.paidThisCycle[p]) {\r\n                // check where to restore the defaulter to, participants or beneficiaries\r\n                if (fund.isBeneficiary[p]) {\r\n                    EnumerableSet.add(fund._beneficiaries, p);\r\n                } else {\r\n                    EnumerableSet.add(fund._participants, p);\r\n                }\r\n\r\n                if (EnumerableSet.remove(fund._defaulters, p)) {\r\n                    emit OnParticipantUndefaulted(id, p);\r\n                }\r\n            } else if (!EnumerableSet.contains(fund._defaulters, p)) {\r\n                // And we make sure that existing defaulters are ignored\r\n                // If the current beneficiary is an expelled participant, only previous beneficiaries pays, other participants are ignored\r\n                if (\r\n                    !fund.isParticipant[currentBeneficiary] &&\r\n                    !collateral.isCollateralMember[currentBeneficiary]\r\n                ) {\r\n                    if (fund.isBeneficiary[p]) {\r\n                        _defaultParticipant(id, p);\r\n                    }\r\n                } else {\r\n                    _defaultParticipant(id, p);\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\r\n        _awardBeneficiary(id);\r\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\r\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\r\n            _closeFund(id);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\r\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\r\n    /// @param id the id of the term\r\n    function awardBeneficiary(uint id) external onlyTermOwner(id) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        require(fund.currentState == LibFundV2.FundStates.AwardingBeneficiary, \"Wrong state\");\r\n        _awardBeneficiary(id);\r\n    }\r\n\r\n    /// @notice called by the owner to close the fund for emergency reasons.\r\n    /// @param id the id of the term\r\n    function closeFund(uint id) external onlyTermOwner(id) {\r\n        //require (!(currentCycle < totalAmountOfCycles), \"Not all cycles have happened yet\");\r\n        _closeFund(id);\r\n    }\r\n\r\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    ///         and prevent the fund to be stuck in limbo\r\n    /// @param id the id of the term\r\n    function emptyFundAfterEnd(uint id) external onlyTermOwner(id) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        require(\r\n            fund.currentState == LibFundV2.FundStates.FundClosed &&\r\n                block.timestamp > fund.fundEnd + 180 days,\r\n            \"Can't empty yet\"\r\n        );\r\n\r\n        uint balance = fund.stableToken.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            bool success = fund.stableToken.transfer(msg.sender, balance);\r\n            require(success, \"Transfer failed\");\r\n        }\r\n    }\r\n\r\n    /// @notice function to enable/disable autopay\r\n    /// @param id the id of the term\r\n    function toggleAutoPay(uint id) external {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\r\n        bool enabled = !fund.autoPayEnabled[msg.sender];\r\n        fund.autoPayEnabled[msg.sender] = enabled;\r\n\r\n        emit OnAutoPayToggled(id, msg.sender, enabled);\r\n    }\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    /// @param id the id of the term\r\n    function payContribution(uint id) external {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n\r\n        // Get the beneficiary for this cycle\r\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\r\n\r\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \"Wrong state\");\r\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\r\n        require(currentBeneficiary != msg.sender, \"Beneficiary doesn't pay\");\r\n        require(!fund.paidThisCycle[msg.sender], \"Already paid for cycle\");\r\n\r\n        // If he is not participant neither a collateral member, means he is expelled\r\n        if (\r\n            !fund.isParticipant[currentBeneficiary] &&\r\n            !collateral.isCollateralMember[currentBeneficiary]\r\n        ) {\r\n            // The only ones that pays are the ones that were beneficiaries\r\n            require(fund.isBeneficiary[msg.sender], \"Only previous beneficiaries pays this cycle\");\r\n            _payContribution(id, msg.sender, msg.sender);\r\n        } else {\r\n            // Otherwise, everyone pays\r\n            _payContribution(id, msg.sender, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param id the id of the term\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint id, address participant) external {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n\r\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\r\n\r\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \"Wrong state\");\r\n        require(fund.isParticipant[participant], \"Not a participant\");\r\n        require(currentBeneficiary != participant, \"Beneficiary doesn't pay\");\r\n        require(!fund.paidThisCycle[participant], \"Already paid for cycle\");\r\n\r\n        if (\r\n            !fund.isParticipant[currentBeneficiary] &&\r\n            !collateral.isCollateralMember[currentBeneficiary]\r\n        ) {\r\n            require(fund.isBeneficiary[msg.sender], \"Only previous beneficiaries pays this cycle\");\r\n            _payContribution(id, msg.sender, participant);\r\n        } else {\r\n            _payContribution(id, msg.sender, participant);\r\n        }\r\n    }\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param id the id of the term\r\n    function withdrawFund(uint id) external {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\r\n        // any of the past cycles.\r\n\r\n        require(\r\n            fund.currentState == LibFundV2.FundStates.FundClosed || fund.isBeneficiary[msg.sender],\r\n            \"You must be a beneficiary\"\r\n        );\r\n\r\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\r\n        (, , uint collateralPool, ) = IGettersV2(address(this)).getDepositorCollateralSummary(\r\n            msg.sender,\r\n            id\r\n        );\r\n        bool hasCollateralPool = collateralPool > 0;\r\n        require(hasFundPool || hasCollateralPool, \"Nothing to withdraw\");\r\n\r\n        if (hasFundPool) {\r\n            // Get the amount this beneficiary can withdraw\r\n            uint transferAmount = fund.beneficiariesPool[msg.sender];\r\n            uint contractBalance = fund.stableToken.balanceOf(address(this));\r\n            if (contractBalance < transferAmount) {\r\n                revert InsufficientBalance({available: contractBalance, required: transferAmount});\r\n            } else {\r\n                fund.beneficiariesPool[msg.sender] = 0;\r\n                bool success = fund.stableToken.transfer(msg.sender, transferAmount);\r\n                require(success, \"Transfer failed\");\r\n            }\r\n            emit OnFundWithdrawn(id, msg.sender, transferAmount);\r\n        }\r\n\r\n        if (hasCollateralPool) {\r\n            ICollateralV2(address(this)).withdrawReimbursement(id, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @param id the id of the term\r\n    /// @param beneficiary the address of the participant to check\r\n    /// @return true if the participant is a beneficiary\r\n    function isBeneficiary(uint id, address beneficiary) external view returns (bool) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        return fund.isBeneficiary[beneficiary];\r\n    }\r\n\r\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\r\n    /// @param _id The id of the term\r\n    /// @param _newState The new state of the fund\r\n    function _setState(uint _id, LibFundV2.FundStates _newState) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        require(fund.currentState != LibFundV2.FundStates.FundClosed, \"Fund closed\");\r\n        fund.currentState = _newState;\r\n        emit OnFundStateChanged(_id, _newState);\r\n    }\r\n\r\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\r\n    /// @param _id The id of the term\r\n    function _startNewCycle(uint _id) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\r\n        // currentCycle is 0 when this is called for the first time\r\n        require(\r\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\r\n            \"Too early to start new cycle\"\r\n        );\r\n        require(\r\n            fund.currentState == LibFundV2.FundStates.InitializingFund ||\r\n                fund.currentState == LibFundV2.FundStates.CycleOngoing,\r\n            \"Wrong state\"\r\n        );\r\n\r\n        ++fund.currentCycle;\r\n        uint length = fund.beneficiariesOrder.length;\r\n        for (uint i; i < length; ) {\r\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _setState(_id, LibFundV2.FundStates.AcceptingContributions);\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        _autoPay(_id);\r\n    }\r\n\r\n    /// @notice function to attempt to make autopayers pay their contribution\r\n    /// @param _id the id of the term\r\n    function _autoPay(uint _id) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_id];\r\n\r\n        // Get the beneficiary for this cycle\r\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(_id);\r\n\r\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\r\n        uint autoPayersArray = autoPayers.length;\r\n\r\n        // If the beneficiary is not a participant neither a collateral member, means he is expelled\r\n        if (\r\n            !fund.isParticipant[currentBeneficiary] &&\r\n            !collateral.isCollateralMember[currentBeneficiary]\r\n        ) {\r\n            for (uint i; i < autoPayersArray; ) {\r\n                if (\r\n                    fund.autoPayEnabled[autoPayers[i]] &&\r\n                    !fund.paidThisCycle[autoPayers[i]] &&\r\n                    fund.isBeneficiary[autoPayers[i]]\r\n                ) {\r\n                    _payContributionSafe(_id, autoPayers[i], autoPayers[i]);\r\n                }\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            for (uint i; i < autoPayersArray; ) {\r\n                // The beneficiary doesn't pay\r\n                if (currentBeneficiary == autoPayers[i]) {\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (fund.autoPayEnabled[autoPayers[i]] && !fund.paidThisCycle[autoPayers[i]]) {\r\n                    _payContributionSafe(_id, autoPayers[i], autoPayers[i]);\r\n                }\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\r\n    /// @param _id the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContributionSafe(uint _id, address _payer, address _participant) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6;\r\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\r\n            if (success) {\r\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n                fund.paidThisCycle[_participant] = true;\r\n                emit OnPaidContribution(_id, _participant, fund.currentCycle);\r\n            }\r\n        } catch {}\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle\r\n    /// @param _id the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContribution(uint _id, address _payer, address _participant) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6;\r\n\r\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\r\n        require(success, \"Contribution failed, did you approve stable token?\");\r\n\r\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n        fund.paidThisCycle[_participant] = true;\r\n        emit OnPaidContribution(_id, _participant, fund.currentCycle);\r\n    }\r\n\r\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\r\n    /// @param _id The id of the term\r\n    /// @param _defaulter The participant to default\r\n    function _defaultParticipant(uint _id, address _defaulter) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        // Try removing from participants first\r\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\r\n\r\n        // If that fails, we try removing from beneficiaries\r\n        if (!success) {\r\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\r\n        }\r\n\r\n        require(success, \"Can't remove defaulter\");\r\n        EnumerableSet.add(fund._defaulters, _defaulter);\r\n\r\n        emit OnParticipantDefaulted(_id, _defaulter);\r\n    }\r\n\r\n    /// @notice The beneficiary will be selected here based on the beneficiariesOrder array.\r\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\r\n    /// @param _id The id of the term\r\n    function _awardBeneficiary(uint _id) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\r\n\r\n        address beneficiary = IGettersV2(address(this)).getCurrentBeneficiary(_id);\r\n\r\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\r\n        if (EnumerableSet.length(fund._defaulters) > 0) {\r\n            address[] memory expellants = ICollateralV2(address(this)).requestContribution(\r\n                _id,\r\n                beneficiary,\r\n                EnumerableSet.values(fund._defaulters)\r\n            );\r\n\r\n            uint expellantsLength = expellants.length;\r\n            for (uint i; i < expellantsLength; ) {\r\n                if (expellants[i] == address(0)) {\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                    continue;\r\n                }\r\n                _expelDefaulter(fund, term, expellants[i]);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove participant from participants set..\r\n        if (EnumerableSet.remove(fund._participants, beneficiary)) {\r\n            // ..Then add them to the benificiaries set\r\n            EnumerableSet.add(fund._beneficiaries, beneficiary);\r\n        } // If this if-statement fails, this means we're dealing with a graced defaulter\r\n\r\n        // Update the mapping to track who's been beneficiary\r\n        fund.isBeneficiary[beneficiary] = true;\r\n\r\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\r\n        uint paidCount;\r\n        address[] memory allParticipants = fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\r\n        for (uint i = 0; i < allParticipants.length; i++) {\r\n            if (fund.paidThisCycle[allParticipants[i]]) {\r\n                paidCount++;\r\n            }\r\n        }\r\n\r\n        // Award the beneficiary with the pool and update the lastBeneficiary\r\n        fund.beneficiariesPool[beneficiary] = term.contributionAmount * paidCount * 10 ** 6;\r\n        fund.lastBeneficiary = beneficiary;\r\n\r\n        emit OnBeneficiarySelected(_id, beneficiary);\r\n        _setState(_id, LibFundV2.FundStates.CycleOngoing);\r\n    }\r\n\r\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\r\n    /// @param _expellant The address of the defaulter that will be expelled\r\n    function _expelDefaulter(\r\n        LibFundV2.Fund storage _fund,\r\n        LibTermV2.Term storage _term,\r\n        address _expellant\r\n    ) internal {\r\n        // Expellants should only be in the defauters set so no need to touch the other sets\r\n        require(\r\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\r\n            \"Expellant not found\"\r\n        );\r\n\r\n        _fund.isParticipant[_expellant] = false;\r\n        emit OnDefaulterExpelled(_term.termId, _expellant);\r\n\r\n        // Lastly, lower the amount of participants\r\n        --_term.totalParticipants;\r\n        // collateral.isCollateralMember[_expellant] = false; // todo: needed? it is set also on whoExpelled\r\n        ++_fund.expelledParticipants;\r\n\r\n        emit OnTotalParticipantsUpdated(_term.termId, _term.totalParticipants);\r\n    }\r\n\r\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\r\n    /// @param _id The id of the term\r\n    function _closeFund(uint _id) internal {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\r\n        fund.fundEnd = block.timestamp;\r\n        _setState(_id, LibFundV2.FundStates.FundClosed);\r\n        ICollateralV2(address(this)).releaseCollateral(_id);\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/facets/GettersFacetV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport {IGettersV2} from \"../interfaces/IGettersV2.sol\";\r\n\r\nimport {LibTermV2} from \"../libraries/LibTermV2.sol\";\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\n\r\ncontract GettersFacetV2 is IGettersV2 {\r\n    // TERM GETTERS\r\n    /// @return the current term id\r\n    /// @return the next term id\r\n    function getTermsId() external view returns (uint, uint) {\r\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\r\n        uint lastTermId = termStorage.nextTermId - 1;\r\n        uint nextTermId = termStorage.nextTermId;\r\n        return (lastTermId, nextTermId);\r\n    }\r\n\r\n    /// @param id the term id\r\n    /// @return the term struct\r\n    function getTermSummary(uint id) external view returns (LibTermV2.Term memory) {\r\n        return (LibTermV2._termStorage().terms[id]);\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @return the term ids the participant is part of\r\n    function getParticipantTerms(address participant) external view returns (uint[] memory) {\r\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\r\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\r\n        return participantTermIds;\r\n    }\r\n\r\n    /// @param id the term id\r\n    /// @return remaining time in the current cycle\r\n    function getRemainingCycleTime(uint id) external view returns (uint) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\r\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\r\n        if (block.timestamp > cycleEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return cycleEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @param depositor the depositor address\r\n    /// @param id the collateral id\r\n    /// @return isCollateralMember, collateralMembersBank, collateralPaymentBank\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint id\r\n    ) external view returns (bool, uint, uint, uint) {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        return (\r\n            collateral.isCollateralMember[depositor],\r\n            collateral.collateralMembersBank[depositor],\r\n            collateral.collateralPaymentBank[depositor],\r\n            collateral.collateralDepositByUser[depositor]\r\n        );\r\n    }\r\n\r\n    /// @param id the collateral id\r\n    /// @return collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\r\n    function getCollateralSummary(\r\n        uint id\r\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory) {\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[id];\r\n        return (\r\n            collateral.initialized,\r\n            collateral.state, // Current state of Collateral\r\n            collateral.firstDepositTime, // Time when the first deposit was made\r\n            collateral.counterMembers, // Current member count\r\n            collateral.depositors // List of depositors\r\n        );\r\n    }\r\n\r\n    /// @notice Called to check the minimum collateral amount to deposit in wei\r\n    /// @return amount the minimum collateral amount to deposit in wei\r\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\r\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\r\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\r\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\r\n    function minCollateralToDeposit(\r\n        LibTermV2.Term memory term,\r\n        uint depositorIndex\r\n    ) external view returns (uint amount) {\r\n        uint contributionAmountInWei = getToEthConversionRate(term.contributionAmount * 10 ** 18);\r\n\r\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\r\n    }\r\n\r\n    // FUND GETTERS\r\n\r\n    /// @notice function to get the cycle information in one go\r\n    /// @param id the fund id\r\n    /// @return initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, lastBeneficiary, totalAmountOfCycles, fundEnd\r\n    function getFundSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            LibFundV2.FundStates,\r\n            IERC20,\r\n            address[] memory,\r\n            uint,\r\n            uint,\r\n            uint,\r\n            address,\r\n            uint\r\n        )\r\n    {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        return (\r\n            fund.initialized,\r\n            fund.currentState,\r\n            fund.stableToken,\r\n            fund.beneficiariesOrder,\r\n            fund.fundStart,\r\n            fund.fundEnd,\r\n            fund.currentCycle,\r\n            fund.lastBeneficiary,\r\n            fund.totalAmountOfCycles\r\n        );\r\n    }\r\n\r\n    /// @notice function to get the current beneficiary\r\n    /// @param id the fund id\r\n    /// @return the current beneficiary\r\n    function getCurrentBeneficiary(uint id) external view returns (address) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\r\n    }\r\n\r\n    /// @notice function to get cycle information of a specific participant\r\n    /// @param participant the user to get the info from\r\n    /// @param id the fund id\r\n    /// @return isParticipant, isBeneficiary, paidThisCycle, autoPayEnabled, beneficiariesPool\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint id\r\n    ) external view returns (bool, bool, bool, bool, uint) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        return (\r\n            fund.isParticipant[participant],\r\n            fund.isBeneficiary[participant],\r\n            fund.paidThisCycle[participant],\r\n            fund.autoPayEnabled[participant],\r\n            fund.beneficiariesPool[participant]\r\n        );\r\n    }\r\n\r\n    /// @notice returns the time left to contribute for this cycle\r\n    /// @param id the fund id\r\n    /// @return the time left to contribute\r\n    function getRemainingContributionTime(uint id) external view returns (uint) {\r\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\r\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\r\n        if (fund.currentState != LibFundV2.FundStates.AcceptingContributions) {\r\n            return 0;\r\n        }\r\n\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\r\n        uint contributionEndTimestamp = term.cycleTime *\r\n            (fund.currentCycle - 1) +\r\n            fund.fundStart +\r\n            term.contributionPeriod;\r\n        if (block.timestamp > contributionEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return contributionEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // CONVERSION GETTERS\r\n\r\n    /// @notice Gets latest ETH / USD price\r\n    /// @return uint latest price in Wei Note: 18 decimals\r\n    function getLatestPrice() public view returns (uint) {\r\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\r\n        (\r\n            ,\r\n            /*uint80 roundID*/ int256 answer,\r\n            uint256 startedAt /*uint256 updatedAt*/ /*uint80 answeredInRound*/,\r\n            ,\r\n\r\n        ) = AggregatorV3Interface(termConsts.sequencerUptimeFeedAddress).latestRoundData(); //8 decimals\r\n\r\n        // Answer == 0: Sequencer is up\r\n        // Answer == 1: Sequencer is down\r\n        require(answer == 0, \"Sequencer down\");\r\n\r\n        //We must wait at least an hour after the sequencer started up\r\n        require(\r\n            termConsts.sequencerStartupTime <= block.timestamp - startedAt,\r\n            \"Sequencer starting up\"\r\n        );\r\n\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(termConsts.aggregatorAddress).latestRoundData(); //8 decimals\r\n\r\n        // Check if chainlink data is not stale or incorrect\r\n        require(\r\n            timeStamp != 0 && answeredInRound >= roundID && price > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        return uint(price * 10 ** 10); //18 decimals\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in USD to ETH\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param USDAmount The amount in USD\r\n    /// @return uint converted amount in wei\r\n    function getToEthConversionRate(uint USDAmount) public view returns (uint) {\r\n        uint ethPrice = getLatestPrice();\r\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\r\n        return USDAmountInEth;\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in ETH to USD\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param ethAmount The amount in ETH\r\n    /// @return uint converted amount in USD correct to 18 decimals\r\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint) {\r\n        // NOTE: This will be made internal\r\n        uint ethPrice = getLatestPrice();\r\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/facets/TermFacetV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IFundV2} from \"../interfaces/IFundV2.sol\";\r\nimport {ICollateralV2} from \"../interfaces/ICollateralV2.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {ITermV2} from \"../interfaces/ITermV2.sol\";\r\nimport {IGettersV2} from \"../interfaces/IGettersV2.sol\";\r\n\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\nimport {LibTermV2} from \"../libraries/LibTermV2.sol\";\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\n\r\n/// @title Takaturn Term\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to deploy the collateral & fund contracts\r\n/// @dev v3.0 (Diamond)\r\ncontract TermFacetV2 is ITermV2 {\r\n    uint public constant TERM_VERSION = 2;\r\n\r\n    event OnCollateralDeposited(uint indexed termId, address indexed user);\r\n\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint cycleTime,\r\n        uint contributionAmount,\r\n        uint contributionPeriod,\r\n        address stableTokenAddress\r\n    ) external returns (uint) {\r\n        return\r\n            _createTerm(\r\n                totalParticipants,\r\n                cycleTime,\r\n                contributionAmount,\r\n                contributionPeriod,\r\n                stableTokenAddress\r\n            );\r\n    }\r\n\r\n    function joinTerm(uint termId) external payable {\r\n        _joinTerm(termId);\r\n    }\r\n\r\n    function startTerm(uint termId) external {\r\n        _startTerm(termId);\r\n    }\r\n\r\n    function _createTerm(\r\n        uint _totalParticipants,\r\n        uint _cycleTime,\r\n        uint _contributionAmount,\r\n        uint _contributionPeriod,\r\n        address _stableTokenAddress\r\n    ) internal returns (uint) {\r\n        require(\r\n            _cycleTime != 0 &&\r\n                _contributionAmount != 0 &&\r\n                _contributionPeriod != 0 &&\r\n                _totalParticipants != 0 &&\r\n                _contributionPeriod < _cycleTime &&\r\n                _stableTokenAddress != address(0),\r\n            \"Invalid inputs\"\r\n        );\r\n\r\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\r\n        uint termId = termStorage.nextTermId;\r\n\r\n        //require(!termStorage.terms[termId].initialized, \"Term already exists\");\r\n\r\n        LibTermV2.Term memory newTerm;\r\n\r\n        newTerm.termId = termId;\r\n        newTerm.totalParticipants = _totalParticipants;\r\n        newTerm.cycleTime = _cycleTime;\r\n        newTerm.contributionAmount = _contributionAmount;\r\n        newTerm.contributionPeriod = _contributionPeriod;\r\n        newTerm.stableTokenAddress = _stableTokenAddress;\r\n        newTerm.termOwner = msg.sender;\r\n        newTerm.creationTime = block.timestamp;\r\n        newTerm.initialized = true;\r\n\r\n        termStorage.terms[termId] = newTerm;\r\n        termStorage.nextTermId++;\r\n\r\n        _createCollateral(termId, _totalParticipants);\r\n\r\n        return termId;\r\n    }\r\n\r\n    function _joinTerm(uint _termId) internal {\r\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\r\n        LibTermV2.Term memory term = termStorage.terms[_termId];\r\n\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        require(LibTermV2._termExists(_termId) && LibCollateralV2._collateralExists(_termId));\r\n\r\n        require(collateral.counterMembers < term.totalParticipants, \"No space\");\r\n\r\n        require(!collateral.isCollateralMember[msg.sender], \"Reentry\");\r\n\r\n        uint depositorsLength = collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            if (collateral.depositors[i] == address(0)) {\r\n                uint amount = IGettersV2(address(this)).minCollateralToDeposit(term, i);\r\n\r\n                require(msg.value >= amount, \"Eth payment too low\");\r\n\r\n                collateral.collateralMembersBank[msg.sender] += msg.value;\r\n                collateral.isCollateralMember[msg.sender] = true;\r\n                collateral.depositors[i] = msg.sender;\r\n                collateral.counterMembers++;\r\n                collateral.collateralDepositByUser[msg.sender] += msg.value;\r\n\r\n                termStorage.participantToTermId[msg.sender].push(_termId);\r\n\r\n                emit OnCollateralDeposited(_termId, msg.sender);\r\n\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (collateral.counterMembers == 1) {\r\n            collateral.firstDepositTime = block.timestamp;\r\n        }\r\n\r\n        // If all the spots are filled, change the collateral\r\n        if (collateral.counterMembers == term.totalParticipants) {\r\n            collateral.state = LibCollateralV2.CollateralStates.CycleOngoing;\r\n        }\r\n    }\r\n\r\n    function _startTerm(uint termId) internal {\r\n        require(LibTermV2._termExists(termId) && LibCollateralV2._collateralExists(termId));\r\n        LibTermV2.Term memory term = LibTermV2._termStorage().terms[termId];\r\n\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        address[] memory depositors = collateral.depositors;\r\n\r\n        uint depositorsArrayLength = depositors.length;\r\n\r\n        require(collateral.counterMembers == term.totalParticipants);\r\n\r\n        // Need to check each user because they can have different collateral amounts\r\n        for (uint i; i < depositorsArrayLength; ) {\r\n            require(\r\n                !ICollateralV2(address(this)).isUnderCollaterized(termId, depositors[i]),\r\n                \"Eth prices dropped\"\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Actually create and initialize the fund\r\n        _createFund(term);\r\n\r\n        // Tell the collateral that the term has started\r\n        ICollateralV2(address(this)).setStateOwner(\r\n            termId,\r\n            LibCollateralV2.CollateralStates.CycleOngoing\r\n        );\r\n    }\r\n\r\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\r\n        //require(!LibCollateralV2._collateralExists(termId), \"Collateral already exists\");\r\n        LibCollateralV2.Collateral storage newCollateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        newCollateral.initialized = true;\r\n        newCollateral.state = LibCollateralV2.CollateralStates.AcceptingCollateral;\r\n        newCollateral.depositors = new address[](_totalParticipants);\r\n    }\r\n\r\n    function _createFund(LibTermV2.Term memory _term) internal {\r\n        require(!LibFundV2._fundExists(_term.termId), \"Fund already exists\");\r\n        LibFundV2.Fund storage newFund = LibFundV2._fundStorage().funds[_term.termId];\r\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\r\n            ._collateralStorage()\r\n            .collaterals[_term.termId];\r\n\r\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\r\n        newFund.beneficiariesOrder = collateral.depositors;\r\n        newFund.initialized = true;\r\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\r\n\r\n        IFundV2(address(this)).initFund(_term.termId);\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/interfaces/ICollateralV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Collateral Interface\r\n/// @author Aisha EL Allam\r\n/// @notice This is used to allow fund to easily communicate with collateral\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\n\r\ninterface ICollateralV2 {\r\n    // Function cannot be called at this time.\r\n    error FunctionInvalidAtThisState();\r\n\r\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external;\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param beneficiary Address that was randomly selected for the current cycle\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    function requestContribution(\r\n        uint id,\r\n        address beneficiary,\r\n        address[] calldata defaulters\r\n    ) external returns (address[] memory);\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    function withdrawCollateral(uint id) external;\r\n\r\n    function withdrawReimbursement(uint id, address participant) external;\r\n\r\n    function releaseCollateral(uint id) external;\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    function emptyCollateralAfterEnd(uint id) external;\r\n\r\n    // function getDepositorSummary(\r\n    //     uint id,\r\n    //     address participant\r\n    // ) external view returns (uint, uint, bool);\r\n}\r\n"
    },
    "contracts/version-2/interfaces/IFundV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Fund Interface\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to allow collateral to easily communicate with fund\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\n\r\ninterface IFundV2 {\r\n    function initFund(uint termId) external;\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    function startNewCycle(uint termId) external;\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    function closeFundingPeriod(uint termId) external;\r\n\r\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\r\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\r\n    function awardBeneficiary(uint termId) external;\r\n\r\n    /// @notice called by the owner to close the fund for emergency reasons.\r\n    function closeFund(uint termId) external;\r\n\r\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    //         and prevent the fund to be stuck in limbo\r\n    function emptyFundAfterEnd(uint termId) external;\r\n\r\n    /// @notice function to enable/disable autopay\r\n    function toggleAutoPay(uint termId) external;\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    function payContribution(uint termId) external;\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint termId, address participant) external;\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    function withdrawFund(uint termId) external;\r\n\r\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\r\n}\r\n"
    },
    "contracts/version-2/interfaces/IGettersV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {LibTermV2} from \"../libraries/LibTermV2.sol\";\r\nimport {LibCollateralV2} from \"../libraries/LibCollateralV2.sol\";\r\nimport {LibFundV2} from \"../libraries/LibFundV2.sol\";\r\n\r\ninterface IGettersV2 {\r\n    function getTermsId() external view returns (uint, uint);\r\n\r\n    function getTermSummary(uint id) external view returns (LibTermV2.Term memory);\r\n\r\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\r\n\r\n    function getRemainingCycleTime(uint id) external view returns (uint);\r\n\r\n    function minCollateralToDeposit(\r\n        LibTermV2.Term memory term,\r\n        uint depositorIndex\r\n    ) external view returns (uint);\r\n\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint id\r\n    ) external view returns (bool, uint, uint, uint);\r\n\r\n    function getCollateralSummary(\r\n        uint id\r\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\r\n\r\n    function getFundSummary(\r\n        uint id\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            LibFundV2.FundStates,\r\n            IERC20,\r\n            address[] memory,\r\n            uint,\r\n            uint,\r\n            uint,\r\n            address,\r\n            uint\r\n        );\r\n\r\n    function getCurrentBeneficiary(uint id) external view returns (address);\r\n\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint id\r\n    ) external view returns (bool, bool, bool, bool, uint);\r\n\r\n    function getRemainingContributionTime(uint id) external view returns (uint);\r\n\r\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\r\n\r\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\r\n}\r\n"
    },
    "contracts/version-2/interfaces/ITermV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface ITermV2 {\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint cycleTime,\r\n        uint contributionAmount,\r\n        uint contributionPeriod,\r\n        address stableTokenAddress\r\n    ) external returns (uint);\r\n\r\n    function joinTerm(uint termId) external payable;\r\n\r\n    function startTerm(uint termId) external;\r\n}\r\n"
    },
    "contracts/version-2/libraries/LibCollateralV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibCollateralV2 {\r\n    uint public constant COLLATERAL_VERSION = 1;\r\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\r\n\r\n    enum CollateralStates {\r\n        AcceptingCollateral, // Initial state where collateral are deposited\r\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\r\n        ReleasingCollateral, // Triggered when the fund closes\r\n        Closed // Triggered when all depositors withdraw their collaterals\r\n    }\r\n\r\n    struct Collateral {\r\n        bool initialized;\r\n        CollateralStates state;\r\n        uint firstDepositTime;\r\n        uint counterMembers;\r\n        address[] depositors;\r\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\r\n        mapping(address => uint) collateralMembersBank; // Users main balance\r\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\r\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\r\n    }\r\n\r\n    struct CollateralStorage {\r\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\r\n    }\r\n\r\n    function _collateralExists(uint termId) internal view returns (bool) {\r\n        return _collateralStorage().collaterals[termId].initialized;\r\n    }\r\n\r\n    function _collateralStorage()\r\n        internal\r\n        pure\r\n        returns (CollateralStorage storage collateralStorage)\r\n    {\r\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\r\n        assembly {\r\n            collateralStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/libraries/LibFundV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {ICollateralV2} from \"../interfaces/ICollateralV2.sol\";\r\n\r\nlibrary LibFundV2 {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint public constant FUND_VERSION = 1;\r\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\r\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\r\n\r\n    enum FundStates {\r\n        InitializingFund, // Time before the first cycle has started\r\n        AcceptingContributions, // Triggers at the start of a cycle\r\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\r\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\r\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\r\n    }\r\n\r\n    struct Fund {\r\n        bool initialized;\r\n        FundStates currentState; // Variable to keep track of the different FundStates\r\n        IERC20 stableToken; // Instance of the stable token\r\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\r\n        uint fundStart; // Timestamp of the start of the fund\r\n        uint fundEnd; // Timestamp of the end of the fund\r\n        uint currentCycle; // Index of current cycle\r\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\r\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\r\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\r\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\r\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\r\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\r\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\r\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\r\n        uint totalAmountOfCycles;\r\n    }\r\n\r\n    struct FundStorage {\r\n        mapping(uint => Fund) funds; // termId => Fund struct\r\n    }\r\n\r\n    function _fundExists(uint termId) internal view returns (bool) {\r\n        return _fundStorage().funds[termId].initialized;\r\n    }\r\n\r\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\r\n        bytes32 position = FUND_STORAGE_POSITION;\r\n        assembly {\r\n            fundStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/version-2/libraries/LibTermV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibTermV2 {\r\n    uint public constant TERM_VERSION = 2;\r\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\r\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\r\n\r\n    struct TermConsts {\r\n        uint sequencerStartupTime;\r\n        address sequencerUptimeFeedAddress;\r\n        address aggregatorAddress;\r\n    }\r\n\r\n    struct Term {\r\n        bool initialized;\r\n        address termOwner;\r\n        uint creationTime;\r\n        uint termId;\r\n        uint totalParticipants; // Max number of participants\r\n        uint cycleTime; // Time for single cycle (seconds)\r\n        uint contributionAmount; // Amount user must pay per cycle (USD)\r\n        uint contributionPeriod; // The portion of cycle user must make payment\r\n        address stableTokenAddress;\r\n    }\r\n\r\n    struct TermStorage {\r\n        uint nextTermId;\r\n        mapping(uint => Term) terms; // termId => Term struct\r\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\r\n    }\r\n\r\n    function _termExists(uint termId) internal view returns (bool) {\r\n        return _termStorage().terms[termId].initialized;\r\n    }\r\n\r\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\r\n        bytes32 position = TERM_CONSTS_POSITION;\r\n        assembly {\r\n            termConsts.slot := position\r\n        }\r\n    }\r\n\r\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\r\n        bytes32 position = TERM_STORAGE_POSITION;\r\n        assembly {\r\n            termStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}