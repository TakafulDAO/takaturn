{
  "address": "0x91F284BAe071cb101351409cc1fbDA52819f082D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "OnAutoPayToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "OnBeneficiaryAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "expellant",
          "type": "address"
        }
      ],
      "name": "OnDefaulterExpelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibFund.FundStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnFundStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnFundWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        }
      ],
      "name": "OnPaidContribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "defaulter",
          "type": "address"
        }
      ],
      "name": "OnParticipantDefaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermStart",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "awardBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "closeFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "closeFundingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "emptyFundAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "initFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "payContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "payContributionOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startNewCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleAutoPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "withdrawFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c8e10b4bdebe54bff46be4d74d5471a611f5db81a4034f401a996eeafda31bd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2308105",
    "logsBloom": "0x
    "blockHash": "0x5f9d7c6d7c6cd600b846d7bd9fd8910007fb89569a57d6f81a67b9106d46000c",
    "transactionHash": "0x4c8e10b4bdebe54bff46be4d74d5471a611f5db81a4034f401a996eeafda31bd",
    "logs": [],
    "blockNumber": 104233352,
    "cumulativeGasUsed": "2308105",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "558ae44198447ca35a1a584b0519f28f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OnAutoPayToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"OnBeneficiaryAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expellant\",\"type\":\"address\"}],\"name\":\"OnDefaulterExpelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibFund.FundStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnFundStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnFundWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"}],\"name\":\"OnPaidContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"defaulter\",\"type\":\"address\"}],\"name\":\"OnParticipantDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"awardBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"closeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"closeFundingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"emptyFundAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"initFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"payContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"payContributionOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startNewCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleAutoPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"errors\":{\"InsufficientBalance(uint256,uint256)\":[{\"params\":{\"available\":\"balance available.\",\"required\":\"requested amount to transfer.\"}}]},\"kind\":\"dev\",\"methods\":{\"awardBeneficiary(uint256)\":{\"details\":\"This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\",\"params\":{\"termId\":\"the id of the term\"}},\"closeFund(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"closeFundingPeriod(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"emptyFundAfterEnd(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"initFund(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"payContribution(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"payContributionOnBehalfOf(uint256,address)\":{\"params\":{\"participant\":\"the address the msg.sender is paying for, the address must be part of the fund\",\"termId\":\"the id of the term\"}},\"startNewCycle(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"toggleAutoPay(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"withdrawFund(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"termId\":\"the id of the term\"}}},\"title\":\"Takaturn Fund\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Insufficient balance for transfer. Needed `required` but only `available` available.\"}]},\"kind\":\"user\",\"methods\":{\"awardBeneficiary(uint256)\":{\"notice\":\"Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\"},\"closeFund(uint256)\":{\"notice\":\"called by the owner to close the fund for emergency reasons.\"},\"closeFundingPeriod(uint256)\":{\"notice\":\"Must be called at the end of the contribution period after the time has passed by the owner\"},\"emptyFundAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the fund if there's any excess fund left after 180 days,         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,         and prevent the fund to be stuck in limbo\"},\"initFund(uint256)\":{\"notice\":\"called by the term to init the fund\"},\"payContribution(uint256)\":{\"notice\":\"This is the function participants call to pay the contribution\"},\"payContributionOnBehalfOf(uint256,address)\":{\"notice\":\"This function is here to give the possibility to pay using a different wallet\"},\"startNewCycle(uint256)\":{\"notice\":\"starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\"},\"toggleAutoPay(uint256)\":{\"notice\":\"function to enable/disable autopay\"},\"withdrawFund(uint256)\":{\"notice\":\"Called by the beneficiary to withdraw the fund\"}},\"notice\":\"This is used to operate the Takaturn fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/FundFacet.sol\":\"FundFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/FundFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibTermOwnership} from \\\"../libraries/LibTermOwnership.sol\\\";\\r\\n\\r\\n/// @title Takaturn Fund\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to operate the Takaturn fund\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract FundFacet is IFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 2; // The version of the contract\\r\\n\\r\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\r\\n    event OnFundStateChanged(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        LibFund.FundStates indexed newState\\r\\n    ); // Emits when state has updated\\r\\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\\r\\n    event OnBeneficiaryAwarded(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\\r\\n    event OnFundWithdrawn(uint indexed termId, address indexed claimant, uint indexed amount); // Emits when a chosen beneficiary claims their fund\\r\\n    event OnParticipantDefaulted(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        address indexed defaulter\\r\\n    ); // Emits when a participant didn't pay this cycle's contribution\\r\\n    event OnDefaulterExpelled(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        address indexed expellant\\r\\n    ); // Emits when a defaulter can't compensate with the collateral\\r\\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\\r\\n\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        LibTermOwnership._ensureTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// Insufficient balance for transfer. Needed `required` but only\\r\\n    /// `available` available.\\r\\n    /// @param available balance available.\\r\\n    /// @param required requested amount to transfer.\\r\\n    error InsufficientBalance(uint available, uint required);\\r\\n\\r\\n    /// @notice called by the term to init the fund\\r\\n    /// @param termId the id of the term\\r\\n    function initFund(uint termId) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\\r\\n        // Set and track participants\\r\\n        for (uint i; i < participantsArrayLength; ) {\\r\\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\\r\\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Starts the first cycle\\r\\n        _startNewCycle(termId);\\r\\n\\r\\n        // Set timestamp of deployment, which will be used to determine cycle times\\r\\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\\r\\n        fund.fundStart = block.timestamp;\\r\\n        //emit LibFund.OnTermStart(termId);\\r\\n        emit OnTermStart(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    /// @param termId the id of the term\\r\\n    function startNewCycle(uint termId) external {\\r\\n        _startNewCycle(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    /// @param termId the id of the term\\r\\n    function closeFundingPeriod(uint termId) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\\r\\n        require(\\r\\n            block.timestamp >\\r\\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\\r\\n            \\\"Still time to contribute\\\"\\r\\n        );\\r\\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n\\r\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\\r\\n\\r\\n        // We attempt to make the autopayers pay their contribution right away\\r\\n        _autoPay(termId);\\r\\n\\r\\n        // Only then award the beneficiary\\r\\n        _setState(termId, LibFund.FundStates.AwardingBeneficiary);\\r\\n\\r\\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\\r\\n        address[] memory participants = fund.beneficiariesOrder;\\r\\n\\r\\n        uint participantsLength = participants.length;\\r\\n        uint currentCycle = fund.currentCycle;\\r\\n        for (uint i; i < participantsLength; ) {\\r\\n            address p = participants[i];\\r\\n\\r\\n            // The current beneficiary or someone who is exempt doesn't pay neither gets defaulted\\r\\n            if (p == currentBeneficiary || fund.isExemptedOnCycle[currentCycle].exempted[p]) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (fund.paidThisCycle[p]) {\\r\\n                // check where to restore the defaulter to, participants or beneficiaries\\r\\n                if (fund.isBeneficiary[p]) {\\r\\n                    EnumerableSet.add(fund._beneficiaries, p);\\r\\n                } else {\\r\\n                    EnumerableSet.add(fund._participants, p);\\r\\n                }\\r\\n\\r\\n                EnumerableSet.remove(fund._defaulters, p);\\r\\n            } else if (!EnumerableSet.contains(fund._defaulters, p)) {\\r\\n                // And we make sure that existing defaulters are ignored\\r\\n                // If the current beneficiary is an expelled participant, only check previous beneficiaries\\r\\n                if (IGetters(address(this)).wasExpelled(termId, currentBeneficiary)) {\\r\\n                    if (fund.isBeneficiary[p]) {\\r\\n                        _defaultParticipant(termId, p);\\r\\n                    }\\r\\n                } else {\\r\\n                    _defaultParticipant(termId, p);\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\\r\\n        _awardBeneficiary(fund, term);\\r\\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\\r\\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\\r\\n            _closeFund(termId);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    /// @param termId the id of the term\\r\\n    function awardBeneficiary(uint termId) external onlyTermOwner(termId) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        require(fund.currentState == LibFund.FundStates.AwardingBeneficiary, \\\"Wrong state\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n\\r\\n        _awardBeneficiary(fund, term);\\r\\n    }\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    /// @param termId the id of the term\\r\\n    function closeFund(uint termId) external onlyTermOwner(termId) {\\r\\n        //require (!(currentCycle < totalAmountOfCycles), \\\"Not all cycles have happened yet\\\");\\r\\n        _closeFund(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    ///         and prevent the fund to be stuck in limbo\\r\\n    /// @param termId the id of the term\\r\\n    function emptyFundAfterEnd(uint termId) external onlyTermOwner(termId) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        require(\\r\\n            fund.currentState == LibFund.FundStates.FundClosed &&\\r\\n                block.timestamp > fund.fundEnd + 180 days,\\r\\n            \\\"Can't empty yet\\\"\\r\\n        );\\r\\n\\r\\n        uint balance = fund.stableToken.balanceOf(address(this));\\r\\n        if (balance > 0) {\\r\\n            bool success = fund.stableToken.transfer(msg.sender, balance);\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    /// @param termId the id of the term\\r\\n    function toggleAutoPay(uint termId) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        require(fund.isParticipant[msg.sender], \\\"Not a participant\\\");\\r\\n        bool enabled = !fund.autoPayEnabled[msg.sender];\\r\\n        fund.autoPayEnabled[msg.sender] = enabled;\\r\\n\\r\\n        emit OnAutoPayToggled(termId, msg.sender, enabled);\\r\\n    }\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    /// @param termId the id of the term\\r\\n    function payContribution(uint termId) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n\\r\\n        // Get the beneficiary for this cycle\\r\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\\r\\n\\r\\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n        require(fund.isParticipant[msg.sender], \\\"Not a participant\\\");\\r\\n        require(currentBeneficiary != msg.sender, \\\"Beneficiary doesn't pay\\\");\\r\\n        require(!fund.paidThisCycle[msg.sender], \\\"Already paid for cycle\\\");\\r\\n        require(\\r\\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[msg.sender],\\r\\n            \\\"Participant is exempted this cycle\\\"\\r\\n        );\\r\\n\\r\\n        _payContribution(termId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param termId the id of the term\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n\\r\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\\r\\n\\r\\n        require(fund.currentState == LibFund.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n        require(fund.isParticipant[participant], \\\"Not a participant\\\");\\r\\n        require(currentBeneficiary != participant, \\\"Beneficiary doesn't pay\\\");\\r\\n        require(!fund.paidThisCycle[participant], \\\"Already paid for cycle\\\");\\r\\n        require(\\r\\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[participant],\\r\\n            \\\"Participant is exempted this cycle\\\"\\r\\n        );\\r\\n\\r\\n        _payContribution(termId, msg.sender, participant);\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId the id of the term\\r\\n    function withdrawFund(uint termId) external {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\\r\\n        // any of the past cycles.\\r\\n\\r\\n        require(\\r\\n            fund.currentState == LibFund.FundStates.FundClosed || fund.isBeneficiary[msg.sender],\\r\\n            \\\"You must be a beneficiary\\\"\\r\\n        );\\r\\n\\r\\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\\r\\n        bool hasFrozenPool = fund.beneficiariesFrozenPool[msg.sender];\\r\\n        bool hasCollateralPool = collateral.collateralPaymentBank[msg.sender] > 0;\\r\\n\\r\\n        require(hasFundPool || hasFrozenPool || hasCollateralPool, \\\"Nothing to withdraw\\\");\\r\\n\\r\\n        if (hasFundPool) {\\r\\n            _transferPoolToBeneficiary(termId, msg.sender);\\r\\n        }\\r\\n\\r\\n        if (hasCollateralPool) {\\r\\n            ICollateral(address(this)).withdrawReimbursement(termId, msg.sender);\\r\\n        }\\r\\n\\r\\n        if (hasFrozenPool) {\\r\\n            bool freeze = _freezePot(LibTerm._termStorage().terms[termId], fund, msg.sender);\\r\\n\\r\\n            require(!freeze, \\\"Need at least 1.1RCC collateral to unfreeze your fund\\\");\\r\\n\\r\\n            _transferPoolToBeneficiary(termId, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\\r\\n        return fund.isBeneficiary[beneficiary];\\r\\n    }\\r\\n\\r\\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\\r\\n    /// @param _termId The id of the term\\r\\n    /// @param _newState The new state of the fund\\r\\n    function _setState(uint _termId, LibFund.FundStates _newState) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        require(fund.currentState != LibFund.FundStates.FundClosed, \\\"Fund closed\\\");\\r\\n        fund.currentState = _newState;\\r\\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\\r\\n    /// @param _termId The id of the term\\r\\n    function _startNewCycle(uint _termId) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_termId];\\r\\n        // currentCycle is 0 when this is called for the first time\\r\\n        require(\\r\\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\\r\\n            \\\"Too early to start new cycle\\\"\\r\\n        );\\r\\n        require(\\r\\n            fund.currentState == LibFund.FundStates.InitializingFund ||\\r\\n                fund.currentState == LibFund.FundStates.CycleOngoing,\\r\\n            \\\"Wrong state\\\"\\r\\n        );\\r\\n\\r\\n        ++fund.currentCycle;\\r\\n        uint length = fund.beneficiariesOrder.length;\\r\\n        for (uint i; i < length; ) {\\r\\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _setState(_termId, LibFund.FundStates.AcceptingContributions);\\r\\n\\r\\n        // We attempt to make the autopayers pay their contribution right away\\r\\n        _autoPay(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice function to attempt to make autopayers pay their contribution\\r\\n    /// @param _termId the id of the term\\r\\n    function _autoPay(uint _termId) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n\\r\\n        // Get the beneficiary for this cycle\\r\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\\r\\n\\r\\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\\r\\n        uint autoPayersArray = autoPayers.length;\\r\\n\\r\\n        for (uint i; i < autoPayersArray; ) {\\r\\n            address autoPayer = autoPayers[i];\\r\\n            // The beneficiary doesn't pay\\r\\n            if (currentBeneficiary == autoPayer) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                fund.autoPayEnabled[autoPayer] &&\\r\\n                !fund.paidThisCycle[autoPayer] &&\\r\\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\\r\\n            ) {\\r\\n                _payContributionSafe(_termId, autoPayer, autoPayer);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\\r\\n    /// @param _termId the id of the term\\r\\n    /// @param _payer the address that's paying\\r\\n    /// @param _participant the (participant) address that's being paid for\\r\\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_termId];\\r\\n\\r\\n        // Get the amount and do the actual transfer\\r\\n        // This will only succeed if the sender approved this contract address beforehand\\r\\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\\r\\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\\r\\n            if (success) {\\r\\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\r\\n                fund.paidThisCycle[_participant] = true;\\r\\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\\r\\n            }\\r\\n        } catch {}\\r\\n    }\\r\\n\\r\\n    /// @notice function to pay the actual contribution for the cycle\\r\\n    /// @param _termId the id of the term\\r\\n    /// @param _payer the address that's paying\\r\\n    /// @param _participant the (participant) address that's being paid for\\r\\n    function _payContribution(uint _termId, address _payer, address _participant) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_termId];\\r\\n\\r\\n        // Get the amount and do the actual transfer\\r\\n        // This will only succeed if the sender approved this contract address beforehand\\r\\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\\r\\n\\r\\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\\r\\n        require(success, \\\"Contribution failed, did you approve stable token?\\\");\\r\\n\\r\\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\r\\n        fund.paidThisCycle[_participant] = true;\\r\\n        emit OnPaidContribution(_termId, _participant, fund.currentCycle);\\r\\n    }\\r\\n\\r\\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\\r\\n    /// @param _termId The id of the term\\r\\n    /// @param _defaulter The participant to default\\r\\n    function _defaultParticipant(uint _termId, address _defaulter) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        // Try removing from participants first\\r\\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\\r\\n\\r\\n        // If that fails, we try removing from beneficiaries\\r\\n        if (!success) {\\r\\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\\r\\n        }\\r\\n\\r\\n        require(success, \\\"Can't remove defaulter\\\");\\r\\n        EnumerableSet.add(fund._defaulters, _defaulter);\\r\\n\\r\\n        emit OnParticipantDefaulted(_termId, fund.currentCycle, _defaulter);\\r\\n    }\\r\\n\\r\\n    /// @notice The beneficiary will be awarded here based on the beneficiariesOrder array.\\r\\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\\r\\n    function _awardBeneficiary(LibFund.Fund storage _fund, LibTerm.Term storage _term) internal {\\r\\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\\r\\n\\r\\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\\r\\n        if (EnumerableSet.length(_fund._defaulters) > 0) {\\r\\n            address[] memory expellants = ICollateral(address(this)).requestContribution(\\r\\n                _term,\\r\\n                EnumerableSet.values(_fund._defaulters)\\r\\n            );\\r\\n\\r\\n            uint expellantsLength = expellants.length;\\r\\n            for (uint i; i < expellantsLength; ) {\\r\\n                if (expellants[i] == address(0)) {\\r\\n                    unchecked {\\r\\n                        ++i;\\r\\n                    }\\r\\n                    continue;\\r\\n                }\\r\\n                _expelDefaulter(_fund, _term, expellants[i]);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove participant from participants set..\\r\\n        if (EnumerableSet.remove(_fund._participants, beneficiary)) {\\r\\n            // ..Then add them to the benificiaries set\\r\\n            EnumerableSet.add(_fund._beneficiaries, beneficiary);\\r\\n        } // If this if-statement fails, this means we're dealing with a graced defaulter\\r\\n\\r\\n        // Update the mapping to track who's been beneficiary\\r\\n        _fund.isBeneficiary[beneficiary] = true;\\r\\n\\r\\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\\r\\n        uint paidCount;\\r\\n        address[] memory participants = _fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\\r\\n        uint participantsLength = participants.length;\\r\\n        for (uint i; i < participantsLength; ) {\\r\\n            if (_fund.paidThisCycle[participants[i]]) {\\r\\n                paidCount++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Award the beneficiary with the pool or freeze the pot\\r\\n        _freezePot(_term, _fund, beneficiary);\\r\\n\\r\\n        _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * paidCount * 10 ** 6; // Six decimals\\r\\n\\r\\n        emit OnBeneficiaryAwarded(_term.termId, beneficiary);\\r\\n        _setState(_term.termId, LibFund.FundStates.CycleOngoing);\\r\\n    }\\r\\n\\r\\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\\r\\n    /// @param _expellant The address of the defaulter that will be expelled\\r\\n    function _expelDefaulter(\\r\\n        LibFund.Fund storage _fund,\\r\\n        LibTerm.Term storage _term,\\r\\n        address _expellant\\r\\n    ) internal {\\r\\n        // Expellants should only be in the defauters set so no need to touch the other sets\\r\\n        require(\\r\\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\\r\\n            \\\"Expellant not found\\\"\\r\\n        );\\r\\n\\r\\n        _fund.isParticipant[_expellant] = false;\\r\\n\\r\\n        // Lastly, lower the amount of participants\\r\\n        --_term.totalParticipants;\\r\\n        // collateral.isCollateralMember[_expellant] = false; // todo: needed? it is set also on whoExpelled\\r\\n        ++_fund.expelledParticipants;\\r\\n\\r\\n        emit OnDefaulterExpelled(_term.termId, _fund.currentCycle, _expellant);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\\r\\n    /// @param _termId The id of the term\\r\\n    function _closeFund(uint _termId) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_termId];\\r\\n        fund.fundEnd = block.timestamp;\\r\\n        term.state = LibTerm.TermStates.ClosedTerm;\\r\\n        _setState(_termId, LibFund.FundStates.FundClosed);\\r\\n        ICollateral(address(this)).releaseCollateral(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to transfer the pool to the beneficiary\\r\\n    /// @param _termId The id of the term\\r\\n    /// @param _beneficiary The address of the beneficiary\\r\\n    function _transferPoolToBeneficiary(uint _termId, address _beneficiary) internal {\\r\\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[_termId];\\r\\n\\r\\n        // Get the amount this beneficiary can withdraw\\r\\n        uint transferAmount = fund.beneficiariesPool[msg.sender];\\r\\n        uint contractBalance = fund.stableToken.balanceOf(address(this));\\r\\n        if (contractBalance < transferAmount) {\\r\\n            revert InsufficientBalance({available: contractBalance, required: transferAmount});\\r\\n        } else {\\r\\n            fund.beneficiariesPool[msg.sender] = 0;\\r\\n            bool success = fund.stableToken.transfer(msg.sender, transferAmount);\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n        emit OnFundWithdrawn(_termId, _beneficiary, transferAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to freeze the pot for the beneficiary\\r\\n    function _freezePot(\\r\\n        LibTerm.Term memory _term,\\r\\n        LibFund.Fund storage _fund,\\r\\n        address _user\\r\\n    ) internal returns (bool) {\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_term.termId];\\r\\n\\r\\n        uint remainingCyclesContribution = IGetters(address(this))\\r\\n            .getRemainingCyclesContributionWei(_term.termId);\\r\\n\\r\\n        uint neededCollateral = (110 * remainingCyclesContribution) / 100; // 1.1 x RCC\\r\\n\\r\\n        if (collateral.collateralMembersBank[_user] < neededCollateral) {\\r\\n            _fund.beneficiariesFrozenPool[_user] = true;\\r\\n        } else {\\r\\n            _fund.beneficiariesFrozenPool[_user] = false;\\r\\n        }\\r\\n\\r\\n        return _fund.beneficiariesFrozenPool[_user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4d7e39cad61f873ee04662955644100a5a209224e62220ac1a403109c28b55c1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint termId, LibCollateral.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param term the term object\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTerm.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId The term id\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    /// @param participant The participant address\\r\\n    function withdrawReimbursement(uint termId, address participant) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe2f6892b54f7149e19f61377ab45cfbb2ac24d5987d2209dc4dd016792a9b31a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IFund {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x5225d5e670d3206823b73549548533c75e87ebfd2529e271a47306c13b5df29a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    /// @notice Gets the current and next term id\\r\\n    /// @return current termID\\r\\n    /// @return next termID\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Must return 0 before starting the fund\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining registration time in seconds\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get current information of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return Term Struct, see LibTerm.sol\\r\\n    function getTermSummary(uint termId) external view returns (LibTerm.Term memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\r\\n    /// @param participant address\\r\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\r\\n    /// @return List of termIDs\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTerm.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user was previously expelled from\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateral.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the required minimum collateral deposit based on the position\\r\\n    /// @param termId the term id\\r\\n    /// @param depositorIndex the index of the depositor\\r\\n    /// @return required minimum in wei\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    // FUND GETTERS\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFund.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the current beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets a user information of in a fund\\r\\n    /// @param participant address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the fund/term\\r\\n    /// @return if the user was beneficiary in the past\\r\\n    /// @return if the user paid for the current cycle\\r\\n    /// @return if the user has autopay enabled\\r\\n    /// @return users money pot balance\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function userAPY(uint termId, address user) external returns (uint256);\\r\\n\\r\\n    function termAPY(uint termId) external returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xb511d424cdb2e9ead44e9fb4ac1c6f27447770d5d7476659d0e6294e0a55595a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2bc1acb1a4156ea22c631cb0a3149c5945f9c345275712c005ac0db5b190607\",\"license\":\"MIT\"},\"contracts/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd58fe1d73e9c6f36129a5f18652c4d68f8959c429b91557a5e8fbab9c66a9a07\",\"license\":\"MIT\"},\"contracts/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x451ae8fd0b3a0c1d688bce4302caa4af45bd4068d14b3840b3588ce497fc4276\",\"license\":\"MIT\"},\"contracts/libraries/LibTermOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\nlibrary LibTermOwnership {\\r\\n    bytes32 constant TERM_OWNER_HELPER = keccak256(\\\"diamond.standard.term.owner.helper\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the term owner.\\r\\n     * @dev Used for internal calls\\r\\n     */\\r\\n    function _ensureTermOwner(uint termId) internal view {\\r\\n        require(\\r\\n            LibTerm._termStorage().terms[termId].termOwner == msg.sender,\\r\\n            \\\"TermOwnable: caller is not the owner\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ce913f30a5fcc8ee17343b1b8a9aa7cdffc2e4a07aff83ecf1b6238debb9e7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128b6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638443162911610071578063844316291461012d578063bd241d2014610140578063e412c44d14610153578063e9783e6014610166578063ea28b9bb1461018e578063f7af18f6146101a157600080fd5b80630cee1725146100b95780632009844b146100ce5780634b5c9c80146100e157806358733dec146100f4578063609a4970146101075780637be2ecea1461011a575b600080fd5b6100cc6100c7366004612414565b6101b7565b005b6100cc6100dc366004612414565b6104df565b6100cc6100ef366004612414565b6106cd565b6100cc610102366004612414565b6108a8565b6100cc610115366004612414565b610c69565b6100cc610128366004612414565b610c80565b6100cc61013b366004612442565b610c8c565b6100cc61014e366004612414565b610e99565b6100cc610161366004612414565b610f94565b610179610174366004612442565b611019565b60405190151581526020015b60405180910390f35b6100cc61019c366004612414565b611056565b6101a9600281565b604051908152602001610185565b6000818152600080516020612841833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092529091208154600490610100900460ff168181111561021957610219612472565b1480610236575033600090815260068301602052604090205460ff165b6102875760405162461bcd60e51b815260206004820152601960248201527f596f75206d75737420626520612062656e65666963696172790000000000000060448201526064015b60405180910390fd5b336000908152600983016020908152604080832054600a8601835281842054600686019093529220549115159160ff90911690151582806102c55750815b806102cd5750805b61030f5760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015260640161027e565b821561031f5761031f86336110f7565b801561037d5760405163ae483d0760e01b815260048101879052336024820152309063ae483d0790604401600060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b505050505b81156104d75760008681526000805160206128618339815191526020908152604080832081516101608101909252805460ff8082161515845261045d9484019161010090041660038111156103d4576103d4612472565b60038111156103e5576103e5612472565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015287336112d7565b905080156104cb5760405162461bcd60e51b815260206004820152603560248201527f4e656564206174206c6561737420312e3152434320636f6c6c61746572616c206044820152741d1bc81d5b999c99595e99481e5bdd5c88199d5b99605a1b606482015260840161027e565b6104d587336110f7565b505b505050505050565b600060008051602061284183398151915260008381526020919091526040808220905163d8f8e99160e01b815260048101859052909250309063d8f8e99190602401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190612498565b905060018254610100900460ff16600481111561058157610581612472565b1461059e5760405162461bcd60e51b815260040161027e906124b5565b33600090815260058301602052604090205460ff166105cf5760405162461bcd60e51b815260040161027e906124da565b336001600160a01b038216036106215760405162461bcd60e51b815260206004820152601760248201527642656e656669636961727920646f65736e27742070617960481b604482015260640161027e565b33600090815260078301602052604090205460ff161561067c5760405162461bcd60e51b8152602060048201526016602482015275416c7265616479207061696420666f72206379636c6560501b604482015260640161027e565b60048201546000908152600c83016020908152604080832033845290915290205460ff16156106bd5760405162461bcd60e51b815260040161027e90612505565b6106c8833333611427565b505050565b806106d7816115c1565b6000828152600080516020612841833981519152602052604090208054600490610100900460ff168181111561070f5761070f612472565b14801561072c575060038101546107299062ed4e0061255d565b42115b61076a5760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b604482015260640161027e565b80546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190612570565b905080156108a257815460405163a9059cbb60e01b8152336004820152602481018390526000916201000090046001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190612589565b9050806108a05760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161027e565b505b50505050565b6000818152600080516020612841833981519152602090815260408083206000805160206128618339815191529092529091206007810154600283015460048401546108f6906001906125ab565b836005015461090591906125be565b61090f919061255d565b610919919061255d565b42116109675760405162461bcd60e51b815260206004820152601860248201527f5374696c6c2074696d6520746f20636f6e747269627574650000000000000000604482015260640161027e565b60018254610100900460ff16600481111561098457610984612472565b146109a15760405162461bcd60e51b815260040161027e906124b5565b60405163d8f8e99160e01b815260048101849052600090309063d8f8e99190602401602060405180830381865afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190612498565b9050610a0f84611647565b610a1a846002611810565b600083600101805480602002602001604051908101604052809291908181526020018280548015610a7457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a56575b50508351600489015494955093925060009150505b82811015610c46576000848281518110610aa557610aa56125d5565b60200260200101519050856001600160a01b0316816001600160a01b03161480610af357506000838152600c8901602090815260408083206001600160a01b038516845290915290205460ff165b15610b015750600101610a89565b6001600160a01b038116600090815260078901602052604090205460ff1615610b7c576001600160a01b038116600090815260068901602052604090205460ff1615610b5a57610b5488600f01826118ef565b50610b69565b610b6788600d01826118ef565b505b610b76886011018261190b565b50610c3d565b610b898860110182611920565b610c3d5760405163d7992e5b60e01b8152600481018a90526001600160a01b0387166024820152309063d7992e5b90604401602060405180830381865afa158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfc9190612589565b15610c33576001600160a01b038116600090815260068901602052604090205460ff1615610c2e57610c2e8982611942565b610c3d565b610c3d8982611942565b50600101610a89565b50610c518686611a18565b85601401548660040154106104d5576104d587611df4565b80610c73816115c1565b610c7c82611df4565b5050565b610c8981611e92565b50565b600060008051602061284183398151915260008481526020919091526040808220905163d8f8e99160e01b815260048101869052909250309063d8f8e99190602401602060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190612498565b905060018254610100900460ff166004811115610d2e57610d2e612472565b14610d4b5760405162461bcd60e51b815260040161027e906124b5565b6001600160a01b038316600090815260058301602052604090205460ff16610d855760405162461bcd60e51b815260040161027e906124da565b826001600160a01b0316816001600160a01b031603610de05760405162461bcd60e51b815260206004820152601760248201527642656e656669636961727920646f65736e27742070617960481b604482015260640161027e565b6001600160a01b038316600090815260078301602052604090205460ff1615610e445760405162461bcd60e51b8152602060048201526016602482015275416c7265616479207061696420666f72206379636c6560501b604482015260640161027e565b60048201546000908152600c8301602090815260408083206001600160a01b038716845290915290205460ff1615610e8e5760405162461bcd60e51b815260040161027e90612505565b6108a2843385611427565b600081815260008051602061284183398151915260205260408120600181015490915b81811015610f5457610efa83600d01846001018381548110610ee057610ee06125d5565b6000918252602090912001546001600160a01b03166118ef565b506001836005016000856001018481548110610f1857610f186125d5565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101610ebc565b50610f5e83611e92565b42600283015560405183907fc3bfb99b88687651f8e660492ae2ee62a50d40e4131ace07f88ed4639b3a4bc390600090a2505050565b80610f9e816115c1565b6000828152600080516020612841833981519152602052604090208054600290610100900460ff166004811115610fd757610fd7612472565b14610ff45760405162461bcd60e51b815260040161027e906124b5565b6000838152600080516020612861833981519152602052604090206108a28282611a18565b6000828152600080516020612841833981519152602090815260408083206001600160a01b038516845260060190915290205460ff165b92915050565b600081815260008051602061284183398151915260209081526040808320338452600581019092529091205460ff166110a15760405162461bcd60e51b815260040161027e906124da565b336000818152600883016020526040808220805460ff81161560ff199091168117909155905190928392909186917f8bd3cffd2d87eca262a8e2d638c1ff3d3b61c604208115af6295b089acaf72b991a4505050565b60006000805160206128418339815191526000848152602091825260408082203383526009810190935280822054835491516370a0823160e01b815230600482015293945092620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111989190612570565b9050818110156111c55760405163cf47918160e01b8152600481018290526024810183905260440161027e565b3360008181526009850160205260408082208290558554905163a9059cbb60e01b81526004810193909352602483018590529091620100009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190612589565b9050806112975760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161027e565b5081846001600160a01b0316867f31b332de0dccb2d0ed351b3d65a9e10b099b3e3c63f4a6f5ea1810b4d757795c60405160405180910390a45050505050565b60808301805160009081527f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288860205260408082209251905163f0d826e760e01b815260048101919091529091908290309063f0d826e790602401602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190612570565b90506000606461138383606e6125be565b61138d91906125eb565b6001600160a01b03861660009081526005850160205260409020549091508111156113dc576001600160a01b0385166000908152600a870160205260409020805460ff191660011790556113ff565b6001600160a01b0385166000908152600a870160205260409020805460ff191690555b505050506001600160a01b03166000908152600a91909101602052604090205460ff16919050565b600083815260008051602061284183398151915260209081526040808320600080516020612861833981519152909252822060068101549192909161146f90620f42406125be565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935060009262010000909204909116906323b872dd906064016020604051808303816000875af11580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f89190612589565b9050806115625760405162461bcd60e51b815260206004820152603260248201527f436f6e747269627574696f6e206661696c65642c2064696420796f7520617070604482015271726f766520737461626c6520746f6b656e3f60701b606482015260840161027e565b6001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b600081815260008051602061286183398151915260205260409020546001600160a01b0362010000909104163314610c895760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b606482015260840161027e565b600060008051602061284183398151915260008381526020919091526040808220905163d8f8e99160e01b815260048101859052909250309063d8f8e99190602401602060405180830381865afa1580156116a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ca9190612498565b905060008260010180548060200260200160405190810160405280929190818152602001828054801561172657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611708575b505083519394506000925050505b818110156104d7576000838281518110611750576117506125d5565b60200260200101519050806001600160a01b0316856001600160a01b03160361177c5750600101611734565b6001600160a01b038116600090815260088701602052604090205460ff1680156117c157506001600160a01b038116600090815260078701602052604090205460ff16155b80156117f7575060048601546000908152600c8701602090815260408083206001600160a01b038516845290915290205460ff16155b1561180757611807878283612028565b50600101611734565b6000828152600080516020612841833981519152602052604090208054600490610100900460ff168181111561184857611848612472565b036118835760405162461bcd60e51b815260206004820152600b60248201526a119d5b990818db1bdcd95960aa1b604482015260640161027e565b80548290829061ff0019166101008360048111156118a3576118a3612472565b02179055508160048111156118ba576118ba612472565b600482015460405185907fe515107ce875160b9ed93bfd1367820d3ffbf412cd63d05140f6bc5535b51de390600090a4505050565b6000611904836001600160a01b038416612158565b9392505050565b6000611904836001600160a01b0384166121a7565b6001600160a01b03811660009081526001830160205260408120541515611904565b6000828152600080516020612841833981519152602052604081209061196b600d83018461190b565b9050806119825761197f82600f018461190b565b90505b806119c85760405162461bcd60e51b815260206004820152601660248201527521b0b713ba103932b6b7bb32903232b330bab63a32b960511b604482015260640161027e565b6119d582601101846118ef565b50826001600160a01b03168260040154857f482c1cb26174abc97f4629d6f41ab133dbda268210ea1ced6c07c27857469a0360405160405180910390a450505050565b600281015460405163d8f8e99160e01b8152600091309163d8f8e99191611a459160040190815260200190565b602060405180830381865afa158015611a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a869190612498565b90506000611a968460110161229a565b1115611b9057600030632081c1af84611ab1601188016122a4565b6040518363ffffffff1660e01b8152600401611ace929190612673565b6000604051808303816000875af1158015611aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b159190810190612735565b805190915060005b81811015611b8c5760006001600160a01b0316838281518110611b4257611b426125d5565b60200260200101516001600160a01b031603611b6057600101611b1d565b611b848686858481518110611b7757611b776125d5565b60200260200101516122b1565b600101611b1d565b5050505b611b9d83600d018261190b565b15611bb157611baf83600f01826118ef565b505b6001600160a01b03811660009081526006840160209081526040808320805460ff19166001908117909155860180548251818502810185019093528083528493830182828015611c2a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c0c575b505083519394506000925050505b81811015611c9a57866007016000848381518110611c5857611c586125d5565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611c925783611c8e816127fa565b9450505b600101611c38565b50604080516101608101909152855460ff80821615158352611d5e9291889160208401916101009004166003811115611cd557611cd5612472565b6003811115611ce657611ce6612472565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015287866112d7565b50828560060154611d6f91906125be565b611d7c90620f42406125be565b6001600160a01b038516600090815260098801602052604081208054909190611da690849061255d565b909155505060028501546040516001600160a01b03861691907f1f2267669c1e46109302869b7cd09b21fd5ac4d2da01a6bbc086c1fe7b997fa390600090a36104d785600201546003611810565b600081815260008051602061284183398151915260209081526040808320600080516020612861833981519152909252909120426003830155805461ff001916610300178155611e45836004611810565b6040516339007b7760e01b81526004810184905230906339007b7790602401600060405180830381600087803b158015611e7e57600080fd5b505af11580156104d5573d6000803e3d6000fd5b600081815260008051602061284183398151915260209081526040808320600080516020612861833981519152909252909120600282015460048301546005830154611ede91906125be565b611ee8919061255d565b4211611f365760405162461bcd60e51b815260206004820152601c60248201527f546f6f206561726c7920746f207374617274206e6577206379636c6500000000604482015260640161027e565b60008254610100900460ff166004811115611f5357611f53612472565b1480611f79575060038254610100900460ff166004811115611f7757611f77612472565b145b611f955760405162461bcd60e51b815260040161027e906124b5565b8160040160008154611fa6906127fa565b90915550600182015460005b81811015612013576000846007016000866001018481548110611fd757611fd76125d5565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611fb2565b5061201f846001611810565b6108a284611647565b600083815260008051602061284183398151915260209081526040808320600080516020612861833981519152909252822060068101549192909161207090620f42406125be565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935062010000909104909116906323b872dd906064016020604051808303816000875af19250505080156120ee575060408051601f3d908101601f191682019092526120eb91810190612589565b60015b156104d75780156104d5576001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b600081815260018301602052604081205461219f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611050565b506000611050565b600081815260018301602052604081205480156122905760006121cb6001836125ab565b85549091506000906121df906001906125ab565b90508181146122445760008660000182815481106121ff576121ff6125d5565b9060005260206000200154905080876000018481548110612222576122226125d5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061225557612255612813565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611050565b6000915050611050565b6000611050825490565b60606000611904836123b8565b6001600160a01b038116600090815260058401602052604090205460ff1680156122e357506122e3836011018261190b565b6123255760405162461bcd60e51b8152602060048201526013602482015272115e1c195b1b185b9d081b9bdd08199bdd5b99606a1b604482015260640161027e565b6001600160a01b03811660009081526005840160205260408120805460ff1916905560048301805490919061235990612829565b9091555060138301805460009061236f906127fa565b90915550600483015460028301546040516001600160a01b0384169291907f75072bae902443c91c7fe516bbb4da2a101e088aa10737ec2ecb7aa3beb023d190600090a4505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561240857602002820191906000526020600020905b8154815260200190600101908083116123f4575b50505050509050919050565b60006020828403121561242657600080fd5b5035919050565b6001600160a01b0381168114610c8957600080fd5b6000806040838503121561245557600080fd5b8235915060208301356124678161242d565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b80516124938161242d565b919050565b6000602082840312156124aa57600080fd5b81516119048161242d565b6020808252600b908201526a57726f6e6720737461746560a81b604082015260600190565b602080825260119082015270139bdd0818481c185c9d1a58da5c185b9d607a1b604082015260600190565b60208082526022908201527f5061727469636970616e74206973206578656d707465642074686973206379636040820152616c6560f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561105057611050612547565b60006020828403121561258257600080fd5b5051919050565b60006020828403121561259b57600080fd5b8151801515811461190457600080fd5b8181038181111561105057611050612547565b808202811582820484141761105057611050612547565b634e487b7160e01b600052603260045260246000fd5b60008261260857634e487b7160e01b600052601260045260246000fd5b500490565b6004811061262b57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b838110156126685781516001600160a01b031687529582019590820190600101612643565b509495945050505050565b600061018084546126888460ff831615159052565b61269b6020850160ff8360081c1661260d565b60101c6001600160a01b0390811660408501526001860154606085015260028601546080850152600386015460a0850152600486015460c0850152600586015460e08501526006860154610100850152600786015461012085015260088601541661014084015261016083018190526127168184018561262f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561274857600080fd5b825167ffffffffffffffff8082111561276057600080fd5b818501915085601f83011261277457600080fd5b8151818111156127865761278661271f565b8060051b604051601f19603f830116810181811085821117156127ab576127ab61271f565b6040529182528482019250838101850191888311156127c957600080fd5b938501935b828510156127ee576127df85612488565b845293850193928501926127ce565b98975050505050505050565b60006001820161280c5761280c612547565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008161283857612838612547565b50600019019056fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8aa264697066735822122064530f871528c5496cc0f82a797e8fa923ee167b04fb7675099508750843c68664736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "errors": {
      "InsufficientBalance(uint256,uint256)": [
        {
          "params": {
            "available": "balance available.",
            "required": "requested amount to transfer."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "awardBeneficiary(uint256)": {
        "details": "This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future",
        "params": {
          "termId": "the id of the term"
        }
      },
      "closeFund(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "closeFundingPeriod(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "emptyFundAfterEnd(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "initFund(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "payContribution(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "payContributionOnBehalfOf(uint256,address)": {
        "params": {
          "participant": "the address the msg.sender is paying for, the address must be part of the fund",
          "termId": "the id of the term"
        }
      },
      "startNewCycle(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "toggleAutoPay(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "withdrawFund(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "termId": "the id of the term"
        }
      }
    },
    "title": "Takaturn Fund",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientBalance(uint256,uint256)": [
        {
          "notice": "Insufficient balance for transfer. Needed `required` but only `available` available."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "awardBeneficiary(uint256)": {
        "notice": "Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually"
      },
      "closeFund(uint256)": {
        "notice": "called by the owner to close the fund for emergency reasons."
      },
      "closeFundingPeriod(uint256)": {
        "notice": "Must be called at the end of the contribution period after the time has passed by the owner"
      },
      "emptyFundAfterEnd(uint256)": {
        "notice": "allow the owner to empty the fund if there's any excess fund left after 180 days,         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,         and prevent the fund to be stuck in limbo"
      },
      "initFund(uint256)": {
        "notice": "called by the term to init the fund"
      },
      "payContribution(uint256)": {
        "notice": "This is the function participants call to pay the contribution"
      },
      "payContributionOnBehalfOf(uint256,address)": {
        "notice": "This function is here to give the possibility to pay using a different wallet"
      },
      "startNewCycle(uint256)": {
        "notice": "starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy"
      },
      "toggleAutoPay(uint256)": {
        "notice": "function to enable/disable autopay"
      },
      "withdrawFund(uint256)": {
        "notice": "Called by the beneficiary to withdraw the fund"
      }
    },
    "notice": "This is used to operate the Takaturn fund",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}