{
  "address": "0x5a702b1cB6DE814909Fc919223C92400EAFcEFcf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "OnAutoPayToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "OnBeneficiaryAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "expellant",
          "type": "address"
        }
      ],
      "name": "OnDefaulterExpelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibFundV2.FundStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnFundStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnFundWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        }
      ],
      "name": "OnPaidContribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentCycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "defaulter",
          "type": "address"
        }
      ],
      "name": "OnParticipantDefaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLength",
          "type": "uint256"
        }
      ],
      "name": "OnTotalParticipantsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTermOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTermOwner",
          "type": "address"
        }
      ],
      "name": "TermOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "awardBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "closeFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "closeFundingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "emptyFundAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "initFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "payContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "payContributionOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "startNewCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "toggleAutoPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdrawFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38cad8a27c4fb76fc727591506c7c9b70bd2c295d2bce1f23b8718573494868f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2564201",
    "logsBloom": "0x
    "blockHash": "0x2065b7087ff06f0b07f49eb062ab440161172e9c26e097c9bbfec50bef0f6e15",
    "transactionHash": "0x38cad8a27c4fb76fc727591506c7c9b70bd2c295d2bce1f23b8718573494868f",
    "logs": [],
    "blockNumber": 37281305,
    "cumulativeGasUsed": "2564201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "170280041a9111201cdb7b99d57489f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OnAutoPayToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"OnBeneficiaryAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expellant\",\"type\":\"address\"}],\"name\":\"OnDefaulterExpelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibFundV2.FundStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnFundStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnFundWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"}],\"name\":\"OnPaidContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentCycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"defaulter\",\"type\":\"address\"}],\"name\":\"OnParticipantDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLength\",\"type\":\"uint256\"}],\"name\":\"OnTotalParticipantsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTermOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTermOwner\",\"type\":\"address\"}],\"name\":\"TermOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"awardBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"closeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"closeFundingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emptyFundAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"initFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"payContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"payContributionOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startNewCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"toggleAutoPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"errors\":{\"InsufficientBalance(uint256,uint256)\":[{\"params\":{\"available\":\"balance available.\",\"required\":\"requested amount to transfer.\"}}]},\"kind\":\"dev\",\"methods\":{\"awardBeneficiary(uint256)\":{\"details\":\"This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\",\"params\":{\"id\":\"the id of the term\"}},\"closeFund(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"closeFundingPeriod(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"emptyFundAfterEnd(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"initFund(uint256)\":{\"params\":{\"termId\":\"the id of the term\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"id\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"payContribution(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"payContributionOnBehalfOf(uint256,address)\":{\"params\":{\"id\":\"the id of the term\",\"participant\":\"the address the msg.sender is paying for, the address must be part of the fund\"}},\"startNewCycle(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"toggleAutoPay(uint256)\":{\"params\":{\"id\":\"the id of the term\"}},\"withdrawFund(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"id\":\"the id of the term\"}}},\"title\":\"Takaturn Fund\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Insufficient balance for transfer. Needed `required` but only `available` available.\"}]},\"kind\":\"user\",\"methods\":{\"awardBeneficiary(uint256)\":{\"notice\":\"Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\"},\"closeFund(uint256)\":{\"notice\":\"called by the owner to close the fund for emergency reasons.\"},\"closeFundingPeriod(uint256)\":{\"notice\":\"Must be called at the end of the contribution period after the time has passed by the owner\"},\"emptyFundAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the fund if there's any excess fund left after 180 days,         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,         and prevent the fund to be stuck in limbo\"},\"initFund(uint256)\":{\"notice\":\"called by the term to init the fund\"},\"payContribution(uint256)\":{\"notice\":\"This is the function participants call to pay the contribution\"},\"payContributionOnBehalfOf(uint256,address)\":{\"notice\":\"This function is here to give the possibility to pay using a different wallet\"},\"startNewCycle(uint256)\":{\"notice\":\"starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\"},\"toggleAutoPay(uint256)\":{\"notice\":\"function to enable/disable autopay\"},\"withdrawFund(uint256)\":{\"notice\":\"Called by the beneficiary to withdraw the fund\"}},\"notice\":\"This is used to operate the Takaturn fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/FundFacetV2.sol\":\"FundFacetV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-1/access/TermOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that starts a new term. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract TermOwnable is Context {\\r\\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        _checkTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function _termOwner(uint termId) internal view virtual returns (address) {\\r\\n        return LibTerm._termStorage().terms[termId].termOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkTermOwner(uint termId) internal view virtual {\\r\\n        require(_termOwner(termId) == _msgSender(), \\\"TermOwnable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyTermOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\\r\\n        _transferTermOwnership(termId, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    // function transferTermOwnership(\\r\\n    //     uint termId,\\r\\n    //     address newTermOwner\\r\\n    // ) internal virtual onlyTermOwner(termId) {\\r\\n    //     require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    //     _transferTermOwnership(termId, newTermOwner);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferTermOwnership(\\r\\n        uint termId,\\r\\n        address newTermOwner\\r\\n    ) internal virtual onlyTermOwner(termId) {\\r\\n        require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        address oldOwner = term.termOwner;\\r\\n        term.termOwner = newTermOwner;\\r\\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c6005fcd387d8c93c9f6fe1d0d2e3593895a5a97221259c771a7c59deb796e6\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"},\"contracts/version-2/facets/FundFacetV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IFundV2} from \\\"../interfaces/IFundV2.sol\\\";\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\nimport {IGettersV2} from \\\"../interfaces/IGettersV2.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\nimport {TermOwnable} from \\\"../../version-1/access/TermOwnable.sol\\\";\\r\\n\\r\\n/// @title Takaturn Fund\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to operate the Takaturn fund\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract FundFacetV2 is IFundV2, TermOwnable {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 2; // The version of the contract\\r\\n\\r\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\r\\n    event OnFundStateChanged(uint indexed termId, LibFundV2.FundStates indexed newState); // Emits when state has updated\\r\\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\\r\\n    event OnBeneficiaryAwarded(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\\r\\n    event OnFundWithdrawn(uint indexed termId, address indexed claimant, uint indexed amount); // Emits when a chosen beneficiary claims their fund\\r\\n    event OnParticipantDefaulted(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        address indexed defaulter\\r\\n    ); // Emits when a participant didn't pay this cycle's contribution\\r\\n    event OnDefaulterExpelled(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        address indexed expellant\\r\\n    ); // Emits when a defaulter can't compensate with the collateral\\r\\n    event OnTotalParticipantsUpdated(uint indexed termId, uint indexed newLength); // Emits when the total participants lengths has changed from its initial value\\r\\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\\r\\n\\r\\n    /// Insufficient balance for transfer. Needed `required` but only\\r\\n    /// `available` available.\\r\\n    /// @param available balance available.\\r\\n    /// @param required requested amount to transfer.\\r\\n    error InsufficientBalance(uint available, uint required);\\r\\n\\r\\n    /// @notice called by the term to init the fund\\r\\n    /// @param termId the id of the term\\r\\n    function initFund(uint termId) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[termId];\\r\\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\\r\\n        // Set and track participants\\r\\n        for (uint i; i < participantsArrayLength; ) {\\r\\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\\r\\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Starts the first cycle\\r\\n        _startNewCycle(termId);\\r\\n\\r\\n        // Set timestamp of deployment, which will be used to determine cycle times\\r\\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\\r\\n        fund.fundStart = block.timestamp;\\r\\n        //emit LibFundV2.OnTermStart(termId);\\r\\n        emit OnTermStart(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    /// @param id the id of the term\\r\\n    function startNewCycle(uint id) external /*onlyTermOwner(id)*/ {\\r\\n        _startNewCycle(id);\\r\\n    }\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    /// @param id the id of the term\\r\\n    function closeFundingPeriod(uint id) external /*onlyTermOwner(id)*/ {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\\r\\n        require(\\r\\n            block.timestamp >\\r\\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\\r\\n            \\\"Still time to contribute\\\"\\r\\n        );\\r\\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n\\r\\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\\r\\n\\r\\n        // We attempt to make the autopayers pay their contribution right away\\r\\n        _autoPay(id);\\r\\n\\r\\n        // Only then award the beneficiary\\r\\n        _setState(id, LibFundV2.FundStates.AwardingBeneficiary);\\r\\n\\r\\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\\r\\n        address[] memory participants = fund.beneficiariesOrder;\\r\\n\\r\\n        uint participantsLength = participants.length;\\r\\n\\r\\n        for (uint i; i < participantsLength; ) {\\r\\n            address p = participants[i];\\r\\n\\r\\n            // The current beneficiary doesn't pay neither get defaulted\\r\\n            if (p == currentBeneficiary) {\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (fund.paidThisCycle[p]) {\\r\\n                // check where to restore the defaulter to, participants or beneficiaries\\r\\n                if (fund.isBeneficiary[p]) {\\r\\n                    EnumerableSet.add(fund._beneficiaries, p);\\r\\n                } else {\\r\\n                    EnumerableSet.add(fund._participants, p);\\r\\n                }\\r\\n\\r\\n                EnumerableSet.remove(fund._defaulters, p);\\r\\n            } else if (!EnumerableSet.contains(fund._defaulters, p)) {\\r\\n                // And we make sure that existing defaulters are ignored\\r\\n                // If the current beneficiary is an expelled participant, only check previous beneficiaries\\r\\n                if (IGettersV2(address(this)).wasExpelled(id, currentBeneficiary)) {\\r\\n                    if (fund.isBeneficiary[p]) {\\r\\n                        _defaultParticipant(id, p);\\r\\n                    }\\r\\n                } else {\\r\\n                    _defaultParticipant(id, p);\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\\r\\n        _awardBeneficiary(fund, term);\\r\\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\\r\\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\\r\\n            _closeFund(id);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    /// @param id the id of the term\\r\\n    function awardBeneficiary(uint id) external onlyTermOwner(id) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        require(fund.currentState == LibFundV2.FundStates.AwardingBeneficiary, \\\"Wrong state\\\");\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[id];\\r\\n\\r\\n        _awardBeneficiary(fund, term);\\r\\n    }\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    /// @param id the id of the term\\r\\n    function closeFund(uint id) external onlyTermOwner(id) {\\r\\n        //require (!(currentCycle < totalAmountOfCycles), \\\"Not all cycles have happened yet\\\");\\r\\n        _closeFund(id);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    ///         and prevent the fund to be stuck in limbo\\r\\n    /// @param id the id of the term\\r\\n    function emptyFundAfterEnd(uint id) external onlyTermOwner(id) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        require(\\r\\n            fund.currentState == LibFundV2.FundStates.FundClosed &&\\r\\n                block.timestamp > fund.fundEnd + 180 days,\\r\\n            \\\"Can't empty yet\\\"\\r\\n        );\\r\\n\\r\\n        uint balance = fund.stableToken.balanceOf(address(this));\\r\\n        if (balance > 0) {\\r\\n            bool success = fund.stableToken.transfer(msg.sender, balance);\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    /// @param id the id of the term\\r\\n    function toggleAutoPay(uint id) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        require(fund.isParticipant[msg.sender], \\\"Not a participant\\\");\\r\\n        bool enabled = !fund.autoPayEnabled[msg.sender];\\r\\n        fund.autoPayEnabled[msg.sender] = enabled;\\r\\n\\r\\n        emit OnAutoPayToggled(id, msg.sender, enabled);\\r\\n    }\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    /// @param id the id of the term\\r\\n    function payContribution(uint id) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n\\r\\n        // Get the beneficiary for this cycle\\r\\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\\r\\n\\r\\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n        require(fund.isParticipant[msg.sender], \\\"Not a participant\\\");\\r\\n        require(currentBeneficiary != msg.sender, \\\"Beneficiary doesn't pay\\\");\\r\\n        require(!fund.paidThisCycle[msg.sender], \\\"Already paid for cycle\\\");\\r\\n\\r\\n        // If he is not participant neither a collateral member, means he is expelled\\r\\n        if (IGettersV2(address(this)).wasExpelled(id, currentBeneficiary)) {\\r\\n            // The only ones that pays are the ones that were beneficiaries\\r\\n            require(fund.isBeneficiary[msg.sender], \\\"Only previous beneficiaries pays this cycle\\\");\\r\\n            _payContribution(id, msg.sender, msg.sender);\\r\\n        } else {\\r\\n            // Otherwise, everyone pays\\r\\n            _payContribution(id, msg.sender, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param id the id of the term\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint id, address participant) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n\\r\\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(id);\\r\\n\\r\\n        require(fund.currentState == LibFundV2.FundStates.AcceptingContributions, \\\"Wrong state\\\");\\r\\n        require(fund.isParticipant[participant], \\\"Not a participant\\\");\\r\\n        require(currentBeneficiary != participant, \\\"Beneficiary doesn't pay\\\");\\r\\n        require(!fund.paidThisCycle[participant], \\\"Already paid for cycle\\\");\\r\\n\\r\\n        if (IGettersV2(address(this)).wasExpelled(id, currentBeneficiary)) {\\r\\n            require(fund.isBeneficiary[participant], \\\"Only previous beneficiaries pays this cycle\\\");\\r\\n            _payContribution(id, msg.sender, participant);\\r\\n        } else {\\r\\n            _payContribution(id, msg.sender, participant);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param id the id of the term\\r\\n    function withdrawFund(uint id) external {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[id];\\r\\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\\r\\n        // any of the past cycles.\\r\\n\\r\\n        require(\\r\\n            fund.currentState == LibFundV2.FundStates.FundClosed || fund.isBeneficiary[msg.sender],\\r\\n            \\\"You must be a beneficiary\\\"\\r\\n        );\\r\\n\\r\\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\\r\\n        bool hasFrozenPool = fund.beneficiariesFrozenPool[msg.sender];\\r\\n        bool hasCollateralPool = collateral.collateralPaymentBank[msg.sender] > 0;\\r\\n\\r\\n        require(hasFundPool || hasFrozenPool || hasCollateralPool, \\\"Nothing to withdraw\\\");\\r\\n\\r\\n        if (hasFundPool) {\\r\\n            _transferPoolToBeneficiary(id, msg.sender);\\r\\n        }\\r\\n\\r\\n        if (hasCollateralPool) {\\r\\n            ICollateralV2(address(this)).withdrawReimbursement(id, msg.sender);\\r\\n        }\\r\\n\\r\\n        if (hasFrozenPool) {\\r\\n            bool freeze = _freezePot(LibTermV2._termStorage().terms[id], fund, msg.sender);\\r\\n\\r\\n            require(!freeze, \\\"Need at least 1.1RCC collateral to unfroze your fund\\\");\\r\\n\\r\\n            _transferPoolToBeneficiary(id, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param id the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint id, address beneficiary) external view returns (bool) {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[id];\\r\\n        return fund.isBeneficiary[beneficiary];\\r\\n    }\\r\\n\\r\\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\\r\\n    /// @param _id The id of the term\\r\\n    /// @param _newState The new state of the fund\\r\\n    function _setState(uint _id, LibFundV2.FundStates _newState) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        require(fund.currentState != LibFundV2.FundStates.FundClosed, \\\"Fund closed\\\");\\r\\n        fund.currentState = _newState;\\r\\n        emit OnFundStateChanged(_id, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\\r\\n    /// @param _id The id of the term\\r\\n    function _startNewCycle(uint _id) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\\r\\n        // currentCycle is 0 when this is called for the first time\\r\\n        require(\\r\\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\\r\\n            \\\"Too early to start new cycle\\\"\\r\\n        );\\r\\n        require(\\r\\n            fund.currentState == LibFundV2.FundStates.InitializingFund ||\\r\\n                fund.currentState == LibFundV2.FundStates.CycleOngoing,\\r\\n            \\\"Wrong state\\\"\\r\\n        );\\r\\n\\r\\n        ++fund.currentCycle;\\r\\n        uint length = fund.beneficiariesOrder.length;\\r\\n        for (uint i; i < length; ) {\\r\\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _setState(_id, LibFundV2.FundStates.AcceptingContributions);\\r\\n\\r\\n        // We attempt to make the autopayers pay their contribution right away\\r\\n        _autoPay(_id);\\r\\n    }\\r\\n\\r\\n    /// @notice function to attempt to make autopayers pay their contribution\\r\\n    /// @param _id the id of the term\\r\\n    function _autoPay(uint _id) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_id];\\r\\n\\r\\n        // Get the beneficiary for this cycle\\r\\n        address currentBeneficiary = IGettersV2(address(this)).getCurrentBeneficiary(_id);\\r\\n\\r\\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\\r\\n        uint autoPayersArray = autoPayers.length;\\r\\n\\r\\n        // If the beneficiary is not a participant neither a collateral member, means he is expelled\\r\\n        if (\\r\\n            !fund.isParticipant[currentBeneficiary] &&\\r\\n            !collateral.isCollateralMember[currentBeneficiary]\\r\\n        ) {\\r\\n            for (uint i; i < autoPayersArray; ) {\\r\\n                if (\\r\\n                    fund.autoPayEnabled[autoPayers[i]] &&\\r\\n                    !fund.paidThisCycle[autoPayers[i]] &&\\r\\n                    fund.isBeneficiary[autoPayers[i]]\\r\\n                ) {\\r\\n                    _payContributionSafe(_id, autoPayers[i], autoPayers[i]);\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            for (uint i; i < autoPayersArray; ) {\\r\\n                // The beneficiary doesn't pay\\r\\n                if (currentBeneficiary == autoPayers[i]) {\\r\\n                    unchecked {\\r\\n                        ++i;\\r\\n                    }\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (fund.autoPayEnabled[autoPayers[i]] && !fund.paidThisCycle[autoPayers[i]]) {\\r\\n                    _payContributionSafe(_id, autoPayers[i], autoPayers[i]);\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\\r\\n    /// @param _id the id of the term\\r\\n    /// @param _payer the address that's paying\\r\\n    /// @param _participant the (participant) address that's being paid for\\r\\n    function _payContributionSafe(uint _id, address _payer, address _participant) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\\r\\n\\r\\n        // Get the amount and do the actual transfer\\r\\n        // This will only succeed if the sender approved this contract address beforehand\\r\\n        uint amount = term.contributionAmount * 10 ** 6;\\r\\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\\r\\n            if (success) {\\r\\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\r\\n                fund.paidThisCycle[_participant] = true;\\r\\n                emit OnPaidContribution(_id, _participant, fund.currentCycle);\\r\\n            }\\r\\n        } catch {}\\r\\n    }\\r\\n\\r\\n    /// @notice function to pay the actual contribution for the cycle\\r\\n    /// @param _id the id of the term\\r\\n    /// @param _payer the address that's paying\\r\\n    /// @param _participant the (participant) address that's being paid for\\r\\n    function _payContribution(uint _id, address _payer, address _participant) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_id];\\r\\n\\r\\n        // Get the amount and do the actual transfer\\r\\n        // This will only succeed if the sender approved this contract address beforehand\\r\\n        uint amount = term.contributionAmount * 10 ** 6;\\r\\n\\r\\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\\r\\n        require(success, \\\"Contribution failed, did you approve stable token?\\\");\\r\\n\\r\\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\r\\n        fund.paidThisCycle[_participant] = true;\\r\\n        emit OnPaidContribution(_id, _participant, fund.currentCycle);\\r\\n    }\\r\\n\\r\\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\\r\\n    /// @param _id The id of the term\\r\\n    /// @param _defaulter The participant to default\\r\\n    function _defaultParticipant(uint _id, address _defaulter) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        // Try removing from participants first\\r\\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\\r\\n\\r\\n        // If that fails, we try removing from beneficiaries\\r\\n        if (!success) {\\r\\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\\r\\n        }\\r\\n\\r\\n        require(success, \\\"Can't remove defaulter\\\");\\r\\n        EnumerableSet.add(fund._defaulters, _defaulter);\\r\\n\\r\\n        emit OnParticipantDefaulted(_id, fund.currentCycle, _defaulter);\\r\\n    }\\r\\n\\r\\n    /// @notice The beneficiary will be awarded here based on the beneficiariesOrder array.\\r\\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\\r\\n    function _awardBeneficiary(\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        LibTermV2.Term storage _term\\r\\n    ) internal {\\r\\n        address beneficiary = IGettersV2(address(this)).getCurrentBeneficiary(_term.termId);\\r\\n        _fund.lastBeneficiary = beneficiary;\\r\\n\\r\\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\\r\\n        if (EnumerableSet.length(_fund._defaulters) > 0) {\\r\\n            address[] memory actualDefaulters = _actualDefaulters(\\r\\n                _fund,\\r\\n                _term,\\r\\n                EnumerableSet.values(_fund._defaulters)\\r\\n            );\\r\\n\\r\\n            address[] memory expellants = ICollateralV2(address(this)).requestContribution(\\r\\n                _term,\\r\\n                actualDefaulters\\r\\n            );\\r\\n\\r\\n            uint expellantsLength = expellants.length;\\r\\n            for (uint i; i < expellantsLength; ) {\\r\\n                if (expellants[i] == address(0)) {\\r\\n                    unchecked {\\r\\n                        ++i;\\r\\n                    }\\r\\n                    continue;\\r\\n                }\\r\\n                _expelDefaulter(_fund, _term, expellants[i]);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove participant from participants set..\\r\\n        if (EnumerableSet.remove(_fund._participants, beneficiary)) {\\r\\n            // ..Then add them to the benificiaries set\\r\\n            EnumerableSet.add(_fund._beneficiaries, beneficiary);\\r\\n        } // If this if-statement fails, this means we're dealing with a graced defaulter\\r\\n\\r\\n        // Update the mapping to track who's been beneficiary\\r\\n        _fund.isBeneficiary[beneficiary] = true;\\r\\n\\r\\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\\r\\n        uint paidCount;\\r\\n        address[] memory participants = _fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\\r\\n        uint participantsLength = participants.length;\\r\\n        for (uint i; i < participantsLength; ) {\\r\\n            if (_fund.paidThisCycle[participants[i]]) {\\r\\n                paidCount++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Award the beneficiary with the pool or freeze the pot\\r\\n\\r\\n        _freezePot(_term, _fund, beneficiary);\\r\\n\\r\\n        _fund.beneficiariesPool[beneficiary] = _term.contributionAmount * paidCount * 10 ** 6;\\r\\n\\r\\n        emit OnBeneficiaryAwarded(_term.termId, beneficiary);\\r\\n        _setState(_term.termId, LibFundV2.FundStates.CycleOngoing);\\r\\n    }\\r\\n\\r\\n    /// @notice Called to get the defaulters\\r\\n    /// @dev Beneficiary is never considered a defaulter\\r\\n    /// @dev If the beneficiary was previously expelled, then we only consider previous beneficiaries\\r\\n    /// @param _fund Fund storage\\r\\n    /// @param _defaulters Complete defaulters array that will be filtered\\r\\n    /// @return actualDefaulters array of addresses that we will consider as defaulters for the current cycle\\r\\n    function _actualDefaulters(\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        LibTermV2.Term storage _term,\\r\\n        address[] memory _defaulters\\r\\n    ) internal view returns (address[] memory) {\\r\\n        address[] memory actualDefaulters;\\r\\n        address[] memory beneficiariesOrder = _fund.beneficiariesOrder; // We check on the beneficiariesOrder array\\r\\n\\r\\n        address beneficiary = _fund.lastBeneficiary;\\r\\n        uint beneficiariesLength = beneficiariesOrder.length;\\r\\n        uint defaultersLength = _defaulters.length;\\r\\n        uint defaultersCounter;\\r\\n\\r\\n        if (IGettersV2(address(this)).wasExpelled(_term.termId, beneficiary)) {\\r\\n            for (uint i; i < beneficiariesLength; ) {\\r\\n                // When we find the first non beneficiary we exit the loop. The first one must be the beneficiary\\r\\n                if (!_fund.isBeneficiary[beneficiariesOrder[i]]) {\\r\\n                    break;\\r\\n                }\\r\\n                for (uint j; j < defaultersLength; ) {\\r\\n                    // We check if the previous beneficiary is on the defaulter array\\r\\n                    if (beneficiariesOrder[i] == _defaulters[j]) {\\r\\n                        actualDefaulters[defaultersCounter] = _defaulters[j];\\r\\n                        ++defaultersCounter;\\r\\n                    }\\r\\n                    unchecked {\\r\\n                        ++j;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // We don't consider the beneficiary a defaulter\\r\\n            for (uint i; i < defaultersLength; ) {\\r\\n                if (_defaulters[i] == beneficiary) {\\r\\n                    unchecked {\\r\\n                        ++i;\\r\\n                    }\\r\\n                    continue;\\r\\n                }\\r\\n                actualDefaulters[defaultersCounter] = _defaulters[i];\\r\\n                unchecked {\\r\\n                    ++defaultersCounter;\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return actualDefaulters;\\r\\n    }\\r\\n\\r\\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\\r\\n    /// @param _expellant The address of the defaulter that will be expelled\\r\\n    function _expelDefaulter(\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        LibTermV2.Term storage _term,\\r\\n        address _expellant\\r\\n    ) internal {\\r\\n        // Expellants should only be in the defauters set so no need to touch the other sets\\r\\n        require(\\r\\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\\r\\n            \\\"Expellant not found\\\"\\r\\n        );\\r\\n\\r\\n        _fund.isParticipant[_expellant] = false;\\r\\n        emit OnDefaulterExpelled(_term.termId, _fund.currentCycle, _expellant);\\r\\n\\r\\n        // Lastly, lower the amount of participants\\r\\n        --_term.totalParticipants;\\r\\n        // collateral.isCollateralMember[_expellant] = false; // todo: needed? it is set also on whoExpelled\\r\\n        ++_fund.expelledParticipants;\\r\\n\\r\\n        emit OnTotalParticipantsUpdated(_term.termId, _term.totalParticipants);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\\r\\n    /// @param _id The id of the term\\r\\n    function _closeFund(uint _id) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n        fund.fundEnd = block.timestamp;\\r\\n        _setState(_id, LibFundV2.FundStates.FundClosed);\\r\\n        ICollateralV2(address(this)).releaseCollateral(_id);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to transfer the pool to the beneficiary\\r\\n    /// @param _id The id of the term\\r\\n    /// @param _beneficiary The address of the beneficiary\\r\\n    function _transferPoolToBeneficiary(uint _id, address _beneficiary) internal {\\r\\n        LibFundV2.Fund storage fund = LibFundV2._fundStorage().funds[_id];\\r\\n\\r\\n        // Get the amount this beneficiary can withdraw\\r\\n        uint transferAmount = fund.beneficiariesPool[msg.sender];\\r\\n        uint contractBalance = fund.stableToken.balanceOf(address(this));\\r\\n        if (contractBalance < transferAmount) {\\r\\n            revert InsufficientBalance({available: contractBalance, required: transferAmount});\\r\\n        } else {\\r\\n            fund.beneficiariesPool[msg.sender] = 0;\\r\\n            bool success = fund.stableToken.transfer(msg.sender, transferAmount);\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        }\\r\\n        emit OnFundWithdrawn(_id, _beneficiary, transferAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to freeze the pot for the beneficiary\\r\\n    function _freezePot(\\r\\n        LibTermV2.Term memory _term,\\r\\n        LibFundV2.Fund storage _fund,\\r\\n        address _user\\r\\n    ) internal returns (bool) {\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_term.termId];\\r\\n\\r\\n        uint remainingCyclesContribution = IGettersV2(address(this))\\r\\n            .getRemainingCyclesContributionWei(_term.termId);\\r\\n\\r\\n        uint neededCollateral = (110 * remainingCyclesContribution) / 100; // 1.1 x RCC\\r\\n\\r\\n        if (collateral.collateralMembersBank[_user] < neededCollateral) {\\r\\n            _fund.beneficiariesFrozenPool[_user] = true;\\r\\n        } else {\\r\\n            _fund.beneficiariesFrozenPool[_user] = false;\\r\\n        }\\r\\n\\r\\n        return _fund.beneficiariesFrozenPool[_user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4279732098de3594c69fc686590a353b32cd1493fea8d77fd0cb25bf36419949\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ICollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface ICollateralV2 {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTermV2.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca5cfdacc36bb64f4a1b4c700749f95ce00f9d1966170f5a6ff7339c04f08e6b\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IFundV2 {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7f1511cf096ba3a24f2a20843e77a2e01057f7b6d5b13a5622615043dda5509\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IGettersV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IGettersV2 {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getRemainingContributionPeriod(uint termId) external view returns (uint);\\r\\n\\r\\n    function getTermSummary(uint id) external view returns (LibTermV2.Term memory);\\r\\n\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    function getRemainingCycles(uint id) external view returns (uint);\\r\\n\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint);\\r\\n\\r\\n    function getRemainingCyclesContributionWei(uint id) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFundV2.FundStates,\\r\\n            IERC20,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint\\r\\n        );\\r\\n\\r\\n    function getCurrentBeneficiary(uint id) external view returns (address);\\r\\n\\r\\n    function wasExpelled(uint id, address user) external view returns (bool);\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userAPR(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPR(uint termId) external view returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x498cf2d6cc1902723847e1e53f2114ec4f1773a5dd7c0d92c0a9be430cfa5800\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\n\\r\\nlibrary LibFundV2 {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        // todo: add another one to freeze collateral?\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.5RCC\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x264263a749824368b7b7186645dccf501a47ee3e7d84c2b619ac10bf16b51175\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d58806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638443162911610071578063844316291461012d578063bd241d2014610140578063e412c44d14610153578063e9783e6014610166578063ea28b9bb1461018e578063f7af18f6146101a157600080fd5b80630cee1725146100b95780632009844b146100ce5780634b5c9c80146100e157806358733dec146100f4578063609a4970146101075780637be2ecea1461011a575b600080fd5b6100cc6100c73660046128ce565b6101b7565b005b6100cc6100dc3660046128ce565b6104bf565b6100cc6100ef3660046128ce565b610711565b6100cc6101023660046128ce565b6108ec565b6100cc6101153660046128ce565b610c76565b6100cc6101283660046128ce565b610c8d565b6100cc61013b3660046128fc565b610c99565b6100cc61014e3660046128ce565b610f1a565b6100cc6101613660046128ce565b611015565b6101796101743660046128fc565b61109a565b60405190151581526020015b60405180910390f35b6100cc61019c3660046128ce565b6110d7565b6101a9600281565b604051908152602001610185565b6000818152600080516020612ce3833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092529091208154600490610100900460ff16818111156102195761021961292c565b1480610236575033600090815260068301602052604090205460ff165b6102875760405162461bcd60e51b815260206004820152601960248201527f596f75206d75737420626520612062656e65666963696172790000000000000060448201526064015b60405180910390fd5b336000908152600983016020908152604080832054600a8601835281842054600686019093529220549115159160ff90911690151582806102c55750815b806102cd5750805b61030f5760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015260640161027e565b821561031f5761031f8633611178565b801561037d5760405163ae483d0760e01b815260048101879052336024820152309063ae483d0790604401600060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b505050505b81156104b7576000868152600080516020612d0383398151915260209081526040808320815161016081018352815460ff808216151583526101008083049091161515958301959095526201000090046001600160a01b03908116938201939093526001820154606082015260028201546080820152600382015460a0820152600482015460c0820152600582015460e08201526006820154938101939093526007810154610120840152600801541661014082015261043e908733611358565b905080156104ab5760405162461bcd60e51b815260206004820152603460248201527f4e656564206174206c6561737420312e3152434320636f6c6c61746572616c206044820152731d1bc81d5b999c9bde99481e5bdd5c88199d5b9960621b606482015260840161027e565b6104b58733611178565b505b505050505050565b6000600080516020612ce383398151915260008381526020919091526040808220905163d8f8e99160e01b815260048101859052909250309063d8f8e99190602401602060405180830381865afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190612952565b905060018254610100900460ff1660048111156105615761056161292c565b1461057e5760405162461bcd60e51b815260040161027e9061296f565b33600090815260058301602052604090205460ff166105af5760405162461bcd60e51b815260040161027e90612994565b336001600160a01b038216036106015760405162461bcd60e51b815260206004820152601760248201527642656e656669636961727920646f65736e27742070617960481b604482015260640161027e565b33600090815260078301602052604090205460ff161561065c5760405162461bcd60e51b8152602060048201526016602482015275416c7265616479207061696420666f72206379636c6560501b604482015260640161027e565b60405163d7992e5b60e01b8152600481018490526001600160a01b0382166024820152309063d7992e5b90604401602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb91906129bf565b156107015733600090815260068301602052604090205460ff166107015760405162461bcd60e51b815260040161027e906129e1565b61070c8333336114a8565b505050565b8061071b81611642565b6000828152600080516020612ce3833981519152602052604090208054600490610100900460ff16818111156107535761075361292c565b1480156107705750600381015461076d9062ed4e00612a42565b42115b6107ae5760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b604482015260640161027e565b80546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612a55565b905080156108e657815460405163a9059cbb60e01b8152336004820152602481018390526000916201000090046001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a391906129bf565b9050806108e45760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161027e565b505b50505050565b6000818152600080516020612ce383398151915260209081526040808320600080516020612d0383398151915290925290912060078101546002830154600484015461093a90600190612a6e565b83600501546109499190612a81565b6109539190612a42565b61095d9190612a42565b42116109ab5760405162461bcd60e51b815260206004820152601860248201527f5374696c6c2074696d6520746f20636f6e747269627574650000000000000000604482015260640161027e565b60018254610100900460ff1660048111156109c8576109c861292c565b146109e55760405162461bcd60e51b815260040161027e9061296f565b60405163d8f8e99160e01b815260048101849052600090309063d8f8e99190602401602060405180830381865afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190612952565b9050610a53846116c7565b610a5e846002611a40565b600083600101805480602002602001604051908101604052809291908181526020018280548015610ab857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a9a575b505083519394506000925050505b81811015610c53576000838281518110610ae257610ae2612a98565b60200260200101519050846001600160a01b0316816001600160a01b031603610b0e5750600101610ac6565b6001600160a01b038116600090815260078801602052604090205460ff1615610b89576001600160a01b038116600090815260068801602052604090205460ff1615610b6757610b6187600d0182611b1a565b50610b76565b610b7487600b0182611b1a565b505b610b8387600f0182611b36565b50610c4a565b610b9687600f0182611b4b565b610c4a5760405163d7992e5b60e01b8152600481018990526001600160a01b0386166024820152309063d7992e5b90604401602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0991906129bf565b15610c40576001600160a01b038116600090815260068801602052604090205460ff1615610c3b57610c3b8882611b6d565b610c4a565b610c4a8882611b6d565b50600101610ac6565b50610c5e8585611c43565b84601301548560040154106104b7576104b78661200d565b80610c8081611642565b610c898261200d565b5050565b610c9681612086565b50565b6000600080516020612ce383398151915260008481526020919091526040808220905163d8f8e99160e01b815260048101869052909250309063d8f8e99190602401602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190612952565b905060018254610100900460ff166004811115610d3b57610d3b61292c565b14610d585760405162461bcd60e51b815260040161027e9061296f565b6001600160a01b038316600090815260058301602052604090205460ff16610d925760405162461bcd60e51b815260040161027e90612994565b826001600160a01b0316816001600160a01b031603610ded5760405162461bcd60e51b815260206004820152601760248201527642656e656669636961727920646f65736e27742070617960481b604482015260640161027e565b6001600160a01b038316600090815260078301602052604090205460ff1615610e515760405162461bcd60e51b8152602060048201526016602482015275416c7265616479207061696420666f72206379636c6560501b604482015260640161027e565b60405163d7992e5b60e01b8152600481018590526001600160a01b0382166024820152309063d7992e5b90604401602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec091906129bf565b15610f0f576001600160a01b038316600090815260068301602052604090205460ff16610eff5760405162461bcd60e51b815260040161027e906129e1565b610f0a8433856114a8565b6108e6565b6108e68433856114a8565b6000818152600080516020612ce383398151915260205260408120600181015490915b81811015610fd557610f7b83600b01846001018381548110610f6157610f61612a98565b6000918252602090912001546001600160a01b0316611b1a565b506001836005016000856001018481548110610f9957610f99612a98565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101610f3d565b50610fdf83612086565b42600283015560405183907fc3bfb99b88687651f8e660492ae2ee62a50d40e4131ace07f88ed4639b3a4bc390600090a2505050565b8061101f81611642565b6000828152600080516020612ce3833981519152602052604090208054600290610100900460ff1660048111156110585761105861292c565b146110755760405162461bcd60e51b815260040161027e9061296f565b6000838152600080516020612d03833981519152602052604090206108e68282611c43565b6000828152600080516020612ce3833981519152602090815260408083206001600160a01b038516845260060190915290205460ff165b92915050565b6000818152600080516020612ce383398151915260209081526040808320338452600581019092529091205460ff166111225760405162461bcd60e51b815260040161027e90612994565b336000818152600883016020526040808220805460ff81161560ff199091168117909155905190928392909186917f8bd3cffd2d87eca262a8e2d638c1ff3d3b61c604208115af6295b089acaf72b991a4505050565b6000600080516020612ce38339815191526000848152602091825260408082203383526009810190935280822054835491516370a0823160e01b815230600482015293945092620100009091046001600160a01b0316906370a0823190602401602060405180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112199190612a55565b9050818110156112465760405163cf47918160e01b8152600481018290526024810183905260440161027e565b3360008181526009850160205260408082208290558554905163a9059cbb60e01b81526004810193909352602483018590529091620100009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906129bf565b9050806113185760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161027e565b5081846001600160a01b0316867f31b332de0dccb2d0ed351b3d65a9e10b099b3e3c63f4a6f5ea1810b4d757795c60405160405180910390a45050505050565b60808301805160009081527f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288860205260408082209251905163f0d826e760e01b815260048101919091529091908290309063f0d826e790602401602060405180830381865afa1580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190612a55565b90506000606461140483606e612a81565b61140e9190612aae565b6001600160a01b038616600090815260058501602052604090205490915081111561145d576001600160a01b0385166000908152600a870160205260409020805460ff19166001179055611480565b6001600160a01b0385166000908152600a870160205260409020805460ff191690555b505050506001600160a01b03166000908152600a91909101602052604090205460ff16919050565b6000838152600080516020612ce383398151915260209081526040808320600080516020612d0383398151915290925282206006810154919290916114f090620f4240612a81565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935060009262010000909204909116906323b872dd906064016020604051808303816000875af1158015611555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157991906129bf565b9050806115e35760405162461bcd60e51b815260206004820152603260248201527f436f6e747269627574696f6e206661696c65642c2064696420796f7520617070604482015271726f766520737461626c6520746f6b656e3f60701b606482015260840161027e565b6001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b6000818152600080516020612d0383398151915260205260409020546001600160a01b03610100909104163314610c965760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b606482015260840161027e565b6000818152600080516020612ce3833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628888352818420825163d8f8e99160e01b8152600481018790529251919490939092309263d8f8e991926024808401939192918290030181865afa158015611750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117749190612952565b90506000836001018054806020026020016040519081016040528092919081815260200182805480156117d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117b2575b505083516001600160a01b038716600090815260058a0160205260409020549495509360ff16159250508115905061182357506001600160a01b038316600090815260048501602052604090205460ff16155b156119515760005b8181101561194b5785600801600084838151811061184b5761184b612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1680156118ba575085600701600084838151811061189157611891612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b801561190157508560060160008483815181106118d9576118d9612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff165b15611943576119438784838151811061191c5761191c612a98565b602002602001015185848151811061193657611936612a98565b602002602001015161221c565b60010161182b565b506104b7565b60005b818110156104b55782818151811061196e5761196e612a98565b60200260200101516001600160a01b0316846001600160a01b03160361199657600101611954565b8560080160008483815181106119ae576119ae612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff168015611a1d57508560070160008483815181106119f4576119f4612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15611a3857611a388784838151811061191c5761191c612a98565b600101611954565b6000828152600080516020612ce3833981519152602052604090208054600490610100900460ff1681811115611a7857611a7861292c565b03611ab35760405162461bcd60e51b815260206004820152600b60248201526a119d5b990818db1bdcd95960aa1b604482015260640161027e565b80548290829061ff001916610100836004811115611ad357611ad361292c565b0217905550816004811115611aea57611aea61292c565b60405184907fecc339a9dbd454a10bb48d74b40c6ef6e3b22dfc541fc7c16d6114e5763a562890600090a3505050565b6000611b2f836001600160a01b03841661234c565b9392505050565b6000611b2f836001600160a01b03841661239b565b6001600160a01b03811660009081526001830160205260408120541515611b2f565b6000828152600080516020612ce38339815191526020526040812090611b96600b830184611b36565b905080611bad57611baa82600d0184611b36565b90505b80611bf35760405162461bcd60e51b815260206004820152601660248201527521b0b713ba103932b6b7bb32903232b330bab63a32b960511b604482015260640161027e565b611c0082600f0184611b1a565b50826001600160a01b03168260040154857f482c1cb26174abc97f4629d6f41ab133dbda268210ea1ced6c07c27857469a0360405160405180910390a450505050565b600281015460405163d8f8e99160e01b8152600091309163d8f8e99191611c709160040190815260200190565b602060405180830381865afa158015611c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb19190612952565b6012840180546001600160a01b0319166001600160a01b03831617905590506000611cde600f850161248e565b1115611dea576000611cfc8484611cf787600f01612498565b6124a5565b6040516319738c7f60e31b8152909150600090309063cb9c63f890611d279087908690600401612b14565b6000604051808303816000875af1158015611d46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6e9190810190612bd7565b805190915060005b81811015611de55760006001600160a01b0316838281518110611d9b57611d9b612a98565b60200260200101516001600160a01b031603611db957600101611d76565b611ddd8787858481518110611dd057611dd0612a98565b6020026020010151612747565b600101611d76565b505050505b611df783600b0182611b36565b15611e0b57611e0983600d0182611b1a565b505b6001600160a01b03811660009081526006840160209081526040808320805460ff19166001908117909155860180548251818502810185019093528083528493830182828015611e8457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e66575b505083519394506000925050505b81811015611ef457866007016000848381518110611eb257611eb2612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611eec5783611ee881612c9c565b9450505b600101611e92565b506040805161016081018252865460ff8082161515835261010080830490911615156020840152620100009091046001600160a01b03908116938301939093526001880154606083015260028801546080830152600388015460a0830152600488015460c0830152600588015460e083015260068801549082015260078701546101208201526008870154909116610140820152611f93908786611358565b50828560060154611fa49190612a81565b611fb190620f4240612a81565b6001600160a01b038516600081815260098901602052604080822093909355600288015492519192917f1f2267669c1e46109302869b7cd09b21fd5ac4d2da01a6bbc086c1fe7b997fa39190a36104b785600201546003611a40565b6000818152600080516020612ce383398151915260205260409020426003820155612039826004611a40565b6040516339007b7760e01b81526004810183905230906339007b7790602401600060405180830381600087803b15801561207257600080fd5b505af11580156104b7573d6000803e3d6000fd5b6000818152600080516020612ce383398151915260209081526040808320600080516020612d038339815191529092529091206002820154600483015460058301546120d29190612a81565b6120dc9190612a42565b421161212a5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206561726c7920746f207374617274206e6577206379636c6500000000604482015260640161027e565b60008254610100900460ff1660048111156121475761214761292c565b148061216d575060038254610100900460ff16600481111561216b5761216b61292c565b145b6121895760405162461bcd60e51b815260040161027e9061296f565b816004016000815461219a90612c9c565b90915550600182015460005b818110156122075760008460070160008660010184815481106121cb576121cb612a98565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556001016121a6565b50612213846001611a40565b6108e6846116c7565b6000838152600080516020612ce383398151915260209081526040808320600080516020612d03833981519152909252822060068101549192909161226490620f4240612a81565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935062010000909104909116906323b872dd906064016020604051808303816000875af19250505080156122e2575060408051601f3d908101601f191682019092526122df918101906129bf565b60015b156104b75780156104b5576001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b6000818152600183016020526040812054612393575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556110d1565b5060006110d1565b600081815260018301602052604081205480156124845760006123bf600183612a6e565b85549091506000906123d390600190612a6e565b90508181146124385760008660000182815481106123f3576123f3612a98565b906000526020600020015490508087600001848154811061241657612416612a98565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061244957612449612cb5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506110d1565b60009150506110d1565b60006110d1825490565b60606000611b2f83612872565b60608060008560010180548060200260200160405190810160405280929190818152602001828054801561250257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116124e4575b5050505060128801548251875160028a015460405163d7992e5b60e01b815260048101919091526001600160a01b039093166024840181905294955090925090600090309063d7992e5b90604401602060405180830381865afa15801561256d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259191906129bf565b156126a25760005b8381101561269c578a60060160008783815181106125b9576125b9612a98565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561269c5760005b838110156126935789818151811061260257612602612a98565b60200260200101516001600160a01b031687838151811061262557612625612a98565b60200260200101516001600160a01b03160361268b5789818151811061264d5761264d612a98565b602002602001015188848151811061266757612667612a98565b6001600160a01b039092166020928302919091019091015261268883612c9c565b92505b6001016125e8565b50600101612599565b50612739565b60005b8281101561273757846001600160a01b03168982815181106126c9576126c9612a98565b60200260200101516001600160a01b0316036126e7576001016126a5565b8881815181106126f9576126f9612a98565b602002602001015187838151811061271357612713612a98565b6001600160a01b0390921660209283029190910190910152600191820191016126a5565b505b509398975050505050505050565b6001600160a01b038116600090815260058401602052604090205460ff168015612779575061277983600f0182611b36565b6127bb5760405162461bcd60e51b8152602060048201526013602482015272115e1c195b1b185b9d081b9bdd08199bdd5b99606a1b604482015260640161027e565b6001600160a01b0381166000818152600585016020526040808220805460ff1916905560048601546002860154915190927f75072bae902443c91c7fe516bbb4da2a101e088aa10737ec2ecb7aa3beb023d191a4816004016000815461282090612ccb565b9091555060118301805460009061283690612c9c565b90915550600482015460028301546040517fe817db35ffcfd7ab4de59cd38a99d674f761815667cbc3241bebf20e7da1b6e890600090a3505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156128c257602002820191906000526020600020905b8154815260200190600101908083116128ae575b50505050509050919050565b6000602082840312156128e057600080fd5b5035919050565b6001600160a01b0381168114610c9657600080fd5b6000806040838503121561290f57600080fd5b823591506020830135612921816128e7565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b805161294d816128e7565b919050565b60006020828403121561296457600080fd5b8151611b2f816128e7565b6020808252600b908201526a57726f6e6720737461746560a81b604082015260600190565b602080825260119082015270139bdd0818481c185c9d1a58da5c185b9d607a1b604082015260600190565b6000602082840312156129d157600080fd5b81518015158114611b2f57600080fd5b6020808252602b908201527f4f6e6c792070726576696f75732062656e65666963696172696573207061797360408201526a2074686973206379636c6560a81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156110d1576110d1612a2c565b600060208284031215612a6757600080fd5b5051919050565b818103818111156110d1576110d1612a2c565b80820281158282048414176110d1576110d1612a2c565b634e487b7160e01b600052603260045260246000fd5b600082612acb57634e487b7160e01b600052601260045260246000fd5b500490565b600081518084526020808501945080840160005b83811015612b095781516001600160a01b031687529582019590820190600101612ae4565b509495945050505050565b60006101808454612b298460ff831615159052565b612b3d6020850160ff8360081c1615159052565b60101c6001600160a01b0390811660408501526001860154606085015260028601546080850152600386015460a0850152600486015460c0850152600586015460e0850152600686015461010085015260078601546101208501526008860154166101408401526101608301819052612bb881840185612ad0565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612bea57600080fd5b825167ffffffffffffffff80821115612c0257600080fd5b818501915085601f830112612c1657600080fd5b815181811115612c2857612c28612bc1565b8060051b604051601f19603f83011681018181108582111715612c4d57612c4d612bc1565b604052918252848201925083810185019188831115612c6b57600080fd5b938501935b82851015612c9057612c8185612942565b84529385019392850192612c70565b98975050505050505050565b600060018201612cae57612cae612a2c565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600081612cda57612cda612a2c565b50600019019056fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8aa26469706673582212203378ae4fb5c2b41dcfc1996e31e186402e03c37a080e86ccdb645aec27b5a5ab64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "errors": {
      "InsufficientBalance(uint256,uint256)": [
        {
          "params": {
            "available": "balance available.",
            "required": "requested amount to transfer."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "awardBeneficiary(uint256)": {
        "details": "This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future",
        "params": {
          "id": "the id of the term"
        }
      },
      "closeFund(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "closeFundingPeriod(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "emptyFundAfterEnd(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "initFund(uint256)": {
        "params": {
          "termId": "the id of the term"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "id": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "payContribution(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "payContributionOnBehalfOf(uint256,address)": {
        "params": {
          "id": "the id of the term",
          "participant": "the address the msg.sender is paying for, the address must be part of the fund"
        }
      },
      "startNewCycle(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "toggleAutoPay(uint256)": {
        "params": {
          "id": "the id of the term"
        }
      },
      "withdrawFund(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "id": "the id of the term"
        }
      }
    },
    "title": "Takaturn Fund",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientBalance(uint256,uint256)": [
        {
          "notice": "Insufficient balance for transfer. Needed `required` but only `available` available."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "awardBeneficiary(uint256)": {
        "notice": "Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually"
      },
      "closeFund(uint256)": {
        "notice": "called by the owner to close the fund for emergency reasons."
      },
      "closeFundingPeriod(uint256)": {
        "notice": "Must be called at the end of the contribution period after the time has passed by the owner"
      },
      "emptyFundAfterEnd(uint256)": {
        "notice": "allow the owner to empty the fund if there's any excess fund left after 180 days,         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,         and prevent the fund to be stuck in limbo"
      },
      "initFund(uint256)": {
        "notice": "called by the term to init the fund"
      },
      "payContribution(uint256)": {
        "notice": "This is the function participants call to pay the contribution"
      },
      "payContributionOnBehalfOf(uint256,address)": {
        "notice": "This function is here to give the possibility to pay using a different wallet"
      },
      "startNewCycle(uint256)": {
        "notice": "starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy"
      },
      "toggleAutoPay(uint256)": {
        "notice": "function to enable/disable autopay"
      },
      "withdrawFund(uint256)": {
        "notice": "Called by the beneficiary to withdraw the fund"
      }
    },
    "notice": "This is used to operate the Takaturn fund",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}