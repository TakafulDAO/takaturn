{
  "address": "0x197243647351d6375f7E7aa35EC027FFE8ff0f33",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "termOwner",
          "type": "address"
        }
      ],
      "name": "OnTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermFilled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TERM_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registrationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "expireTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x701159333e32926a391954214adadb8e46a3c8304841e49b2be824b071cca89b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "1283067",
    "logsBloom": "0x
    "blockHash": "0xefe11b294d64898068e3a2e22f0c1d448042857f99c9309891a9b42576014075",
    "transactionHash": "0x701159333e32926a391954214adadb8e46a3c8304841e49b2be824b071cca89b",
    "logs": [],
    "blockNumber": 37281309,
    "cumulativeGasUsed": "1988546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "170280041a9111201cdb7b99d57489f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"}],\"name\":\"OnTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermFilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TERM_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"expireTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Takaturn Term\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is used to deploy the collateral & fund contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/TermFacetV2.sol\":\"TermFacetV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/version-2/facets/TermFacetV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFundV2} from \\\"../interfaces/IFundV2.sol\\\";\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ITermV2} from \\\"../interfaces/ITermV2.sol\\\";\\r\\nimport {IGettersV2} from \\\"../interfaces/IGettersV2.sol\\\";\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\n\\r\\n/// @title Takaturn Term\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to deploy the collateral & fund contracts\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract TermFacetV2 is ITermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n\\r\\n    event OnTermCreated(uint indexed termId, address indexed termOwner);\\r\\n    event OnCollateralDeposited(uint indexed termId, address indexed user, uint amount);\\r\\n    event OnTermFilled(uint indexed termId);\\r\\n    event OnTermExpired(uint indexed termId);\\r\\n\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint) {\\r\\n        return\\r\\n            _createTerm(\\r\\n                totalParticipants,\\r\\n                registrationPeriod,\\r\\n                cycleTime,\\r\\n                contributionAmount,\\r\\n                contributionPeriod,\\r\\n                stableTokenAddress\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function joinTerm(uint termId) external payable {\\r\\n        _joinTerm(termId);\\r\\n    }\\r\\n\\r\\n    function startTerm(uint termId) external {\\r\\n        _startTerm(termId);\\r\\n    }\\r\\n\\r\\n    function expireTerm(uint termId) external {\\r\\n        _expireTerm(termId);\\r\\n    }\\r\\n\\r\\n    function _createTerm(\\r\\n        uint _totalParticipants,\\r\\n        uint _registrationPeriod,\\r\\n        uint _cycleTime,\\r\\n        uint _contributionAmount,\\r\\n        uint _contributionPeriod,\\r\\n        address _stableTokenAddress\\r\\n    ) internal returns (uint) {\\r\\n        require(\\r\\n            _cycleTime != 0 &&\\r\\n                _contributionAmount != 0 &&\\r\\n                _contributionPeriod != 0 &&\\r\\n                _totalParticipants != 0 &&\\r\\n                _registrationPeriod != 0 &&\\r\\n                _contributionPeriod < _cycleTime &&\\r\\n                _stableTokenAddress != address(0),\\r\\n            \\\"Invalid inputs\\\"\\r\\n        );\\r\\n\\r\\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\\r\\n        uint termId = termStorage.nextTermId;\\r\\n\\r\\n        //require(!termStorage.terms[termId].initialized, \\\"Term already exists\\\");\\r\\n\\r\\n        LibTermV2.Term memory newTerm;\\r\\n\\r\\n        newTerm.termId = termId;\\r\\n        newTerm.totalParticipants = _totalParticipants;\\r\\n        newTerm.registrationPeriod = _registrationPeriod;\\r\\n        newTerm.cycleTime = _cycleTime;\\r\\n        newTerm.contributionAmount = _contributionAmount;\\r\\n        newTerm.contributionPeriod = _contributionPeriod;\\r\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\r\\n        newTerm.termOwner = msg.sender;\\r\\n        newTerm.creationTime = block.timestamp;\\r\\n        newTerm.initialized = true;\\r\\n\\r\\n        termStorage.terms[termId] = newTerm;\\r\\n        termStorage.nextTermId++;\\r\\n\\r\\n        _createCollateral(termId, _totalParticipants);\\r\\n\\r\\n        emit OnTermCreated(termId, msg.sender);\\r\\n\\r\\n        return termId;\\r\\n    }\\r\\n\\r\\n    function _joinTerm(uint _termId) internal {\\r\\n        LibTermV2.TermStorage storage termStorage = LibTermV2._termStorage();\\r\\n        LibTermV2.Term memory term = termStorage.terms[_termId];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(LibTermV2._termExists(_termId) && LibCollateralV2._collateralExists(_termId));\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp <= term.creationTime + term.registrationPeriod,\\r\\n            \\\"Registration period ended\\\"\\r\\n        );\\r\\n\\r\\n        require(!collateral.isCollateralMember[msg.sender], \\\"Reentry\\\");\\r\\n\\r\\n        uint ethSended = msg.value;\\r\\n\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            if (collateral.depositors[i] == address(0)) {\\r\\n                uint amount = IGettersV2(address(this)).minCollateralToDeposit(term, i);\\r\\n\\r\\n                require(ethSended >= amount, \\\"Eth payment too low\\\");\\r\\n\\r\\n                collateral.collateralMembersBank[msg.sender] += ethSended;\\r\\n                collateral.isCollateralMember[msg.sender] = true;\\r\\n                collateral.depositors[i] = msg.sender;\\r\\n                collateral.counterMembers++;\\r\\n                collateral.collateralDepositByUser[msg.sender] += ethSended;\\r\\n\\r\\n                termStorage.participantToTermId[msg.sender].push(_termId);\\r\\n\\r\\n                emit OnCollateralDeposited(_termId, msg.sender, ethSended);\\r\\n\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (collateral.counterMembers == 1) {\\r\\n            collateral.firstDepositTime = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // If all the spots are filled, change the collateral\\r\\n        if (collateral.counterMembers == term.totalParticipants) {\\r\\n            emit OnTermFilled(_termId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _startTerm(uint _termId) internal {\\r\\n        LibTermV2.Term memory term = LibTermV2._termStorage().terms[_termId];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        address[] memory depositors = collateral.depositors;\\r\\n\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        require(\\r\\n            block.timestamp > term.creationTime + term.registrationPeriod,\\r\\n            \\\"Term not ready to start\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers == term.totalParticipants, \\\"All spots are not filled\\\");\\r\\n\\r\\n        // Need to check each user because they can have different collateral amounts\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            require(\\r\\n                !ICollateralV2(address(this)).isUnderCollaterized(term.termId, depositors[i]),\\r\\n                \\\"Eth prices dropped\\\"\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Actually create and initialize the fund\\r\\n        _createFund(term, collateral);\\r\\n\\r\\n        _createYieldGenerator(term, collateral);\\r\\n\\r\\n        // Tell the collateral that the term has started\\r\\n        ICollateralV2(address(this)).setStateOwner(\\r\\n            term.termId,\\r\\n            LibCollateralV2.CollateralStates.CycleOngoing\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\\r\\n        //require(!LibCollateralV2._collateralExists(termId), \\\"Collateral already exists\\\");\\r\\n        LibCollateralV2.Collateral storage newCollateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        newCollateral.initialized = true;\\r\\n        newCollateral.state = LibCollateralV2.CollateralStates.AcceptingCollateral;\\r\\n        newCollateral.depositors = new address[](_totalParticipants);\\r\\n    }\\r\\n\\r\\n    function _createFund(\\r\\n        LibTermV2.Term memory _term,\\r\\n        LibCollateralV2.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        require(!LibFundV2._fundExists(_term.termId), \\\"Fund already exists\\\");\\r\\n        LibFundV2.Fund storage newFund = LibFundV2._fundStorage().funds[_term.termId];\\r\\n\\r\\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\\r\\n        newFund.beneficiariesOrder = _collateral.depositors;\\r\\n        newFund.initialized = true;\\r\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\r\\n\\r\\n        IFundV2(address(this)).initFund(_term.termId);\\r\\n    }\\r\\n\\r\\n    function _expireTerm(uint _termId) internal {\\r\\n        LibTermV2.Term storage term = LibTermV2._termStorage().terms[_termId];\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(LibTermV2._termExists(_termId) && LibCollateralV2._collateralExists(_termId));\\r\\n\\r\\n        require(\\r\\n            block.timestamp > term.creationTime + term.registrationPeriod,\\r\\n            \\\"Registration period not ended\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            collateral.counterMembers < term.totalParticipants,\\r\\n            \\\"All spots are filled, can't expire\\\"\\r\\n        );\\r\\n\\r\\n        require(!term.expired, \\\"Term already expired\\\");\\r\\n\\r\\n        uint depositorsArrayLength = collateral.depositors.length;\\r\\n\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n\\r\\n            if (depositor != address(0)) {\\r\\n                uint amount = collateral.collateralMembersBank[depositor];\\r\\n\\r\\n                collateral.collateralPaymentBank[depositor] += amount;\\r\\n                collateral.collateralMembersBank[depositor] = 0;\\r\\n                collateral.isCollateralMember[depositor] = false;\\r\\n                collateral.depositors[i] = address(0);\\r\\n                --collateral.counterMembers;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        term.expired = true;\\r\\n        collateral.initialized = false;\\r\\n        collateral.state = LibCollateralV2.CollateralStates.Closed;\\r\\n\\r\\n        emit OnTermExpired(_termId);\\r\\n    }\\r\\n\\r\\n    function _createYieldGenerator(\\r\\n        LibTermV2.Term memory _term,\\r\\n        LibCollateralV2.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[_term.termId];\\r\\n\\r\\n        uint amountDeposited;\\r\\n\\r\\n        address[] memory depositors = _collateral.depositors;\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            if (yield.hasOptedIn[depositors[i]]) {\\r\\n                yield.yieldUsers.push(depositors[i]);\\r\\n                amountDeposited += _collateral.collateralMembersBank[depositors[i]];\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        yield.startTimeStamp = block.timestamp;\\r\\n        yield.initialized = true;\\r\\n\\r\\n        IYGFacetZaynFi(address(this)).depositYG(_term.termId, amountDeposited);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3d6bac8fa2bcb33555931a40b742e6e47f137344eb1931003b155a3817a6ad5e\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ICollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface ICollateralV2 {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint id, LibCollateralV2.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTermV2.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawCollateral(uint id) external;\\r\\n\\r\\n    function withdrawReimbursement(uint id, address participant) external;\\r\\n\\r\\n    function releaseCollateral(uint id) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint id, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint id) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca5cfdacc36bb64f4a1b4c700749f95ce00f9d1966170f5a6ff7339c04f08e6b\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IFundV2 {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7f1511cf096ba3a24f2a20843e77a2e01057f7b6d5b13a5622615043dda5509\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IGettersV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibFundV2} from \\\"../libraries/LibFundV2.sol\\\";\\r\\n\\r\\ninterface IGettersV2 {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    function getRemainingContributionPeriod(uint termId) external view returns (uint);\\r\\n\\r\\n    function getTermSummary(uint id) external view returns (LibTermV2.Term memory);\\r\\n\\r\\n    function getParticipantTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    function getRemainingCycles(uint id) external view returns (uint);\\r\\n\\r\\n    function getRemainingCycleTime(uint id) external view returns (uint);\\r\\n\\r\\n    function getRemainingCyclesContributionWei(uint id) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint id\\r\\n    ) external view returns (bool, uint, uint, uint);\\r\\n\\r\\n    function getCollateralSummary(\\r\\n        uint id\\r\\n    ) external view returns (bool, LibCollateralV2.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    function minCollateralToDeposit(\\r\\n        LibTermV2.Term memory term,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    function getFundSummary(\\r\\n        uint id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            LibFundV2.FundStates,\\r\\n            IERC20,\\r\\n            address[] memory,\\r\\n            uint,\\r\\n            uint,\\r\\n            uint,\\r\\n            address,\\r\\n            uint\\r\\n        );\\r\\n\\r\\n    function getCurrentBeneficiary(uint id) external view returns (address);\\r\\n\\r\\n    function wasExpelled(uint id, address user) external view returns (bool);\\r\\n\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint id\\r\\n    ) external view returns (bool, bool, bool, bool, uint);\\r\\n\\r\\n    function getRemainingContributionTime(uint id) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToEthConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToUSDConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userAPR(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPR(uint termId) external view returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x498cf2d6cc1902723847e1e53f2114ec4f1773a5dd7c0d92c0a9be430cfa5800\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/ITermV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITermV2 {\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint);\\r\\n\\r\\n    function joinTerm(uint termId) external payable;\\r\\n\\r\\n    function startTerm(uint termId) external;\\r\\n\\r\\n    function expireTerm(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0b63aef027ce80f464b6dedcf0972d2b44c9c28a0c9f2e0e8bc4c0fbbafde65a\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(uint termId, address user, uint256 ethAmount) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x916cd38cb81f706628cb91ee4c262d2ee01fbb5132c1933c68e064adf0e1f72d\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibFundV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateralV2} from \\\"../interfaces/ICollateralV2.sol\\\";\\r\\n\\r\\nlibrary LibFundV2 {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim\\r\\n        // todo: add another one to freeze collateral?\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.5RCC\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        address lastBeneficiary; // The last selected beneficiary, updates with every cycle\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x264263a749824368b7b7186645dccf501a47ee3e7d84c2b619ac10bf16b51175\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        address[] yieldProviders; // index 0 zap, index 1 vault\\r\\n        address[] yieldUsers;\\r\\n        uint startTimeStamp;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x14847b1a96e3a1502408682c7da3c2f10e999bf3062fda08b4cfe2cb81c5be6c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611637806100206000396000f3fe60806040526004361061004a5760003560e01c806336f6f6b51461004f5780633e4986cd14610076578063485fd0761461008b578063aa31ef32146100ab578063b1705fa2146100cb575b600080fd5b34801561005b57600080fd5b50610064600281565b60405190815260200160405180910390f35b6100896100843660046113b9565b6100eb565b005b34801561009757600080fd5b506100896100a63660046113b9565b6100f7565b3480156100b757600080fd5b506100646100c63660046113d2565b610100565b3480156100d757600080fd5b506100896100e63660046113b9565b61011b565b6100f481610124565b50565b6100f4816105b2565b6000610110878787878787610910565b979650505050505050565b6100f481610c0f565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60208181526040808420815161016081018352815460ff80821680151584526101008084049092161515848801526001600160a01b03620100009093048316848701526001850154606085015260028501546080850152600385015460a0850152600485015460c0850152600585015460e08501526006850154918401919091526007840154610120840152600890930154166101408201528686526000805160206115e2833981519152845291909420929091527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89929091908015610234575061023484610ee7565b61023d57600080fd5b8160c001518160020154106102845760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064015b60405180910390fd5b8160a0015182606001516102989190611449565b4211156102e75760405162461bcd60e51b815260206004820152601960248201527f526567697374726174696f6e20706572696f6420656e64656400000000000000604482015260640161027b565b33600090815260048201602052604090205460ff16156103335760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b604482015260640161027b565b6003810154349060005b8181101561055b5760006001600160a01b031684600301828154811061036557610365611462565b6000918252602090912001546001600160a01b031603610553576040516366bc7d2160e11b8152600090309063cd78fa42906103a79089908690600401611478565b602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611527565b9050808410156104305760405162461bcd60e51b8152602060048201526013602482015272457468207061796d656e7420746f6f206c6f7760681b604482015260640161027b565b33600090815260058601602052604081208054869290610451908490611449565b90915550503360008181526004870160205260409020805460ff191660011790556003860180548490811061048857610488611462565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155600286018054916104c183611540565b9091555050336000908152600786016020526040812080548692906104e7908490611449565b90915550503360008181526002890160209081526040808320805460018101825590845291909220018a90555189907f6e0a2371131a7d423998fa7e71296a76f74b9c658d0b210b3f8e70eff0e536d8906105459088815260200190565b60405180910390a35061055b565b60010161033d565b50826002015460010361056f574260018401555b8360c001518360020154036105aa5760405186907fcb9c59095b121bb2ee6f91e996d96e8937149675a0dd11c12b5d08ec2cc7abba90600090a25b505050505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60209081526040808320815161016081018352815460ff808216151583526101008083049091161515838701526001600160a01b0362010000909204821683860152600184015460608401526002840154608084015260038085015460a0850152600485015460c0850152600585015460e08501526006850154918401919091526007840154610120840152600890930154166101408201528585526000805160206115e283398151915284528285209182018054845181870281018701909552808552919592949293929091908301828280156106df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106c1575b505050505090506000815190508360a0015184606001516107009190611449565b421161074e5760405162461bcd60e51b815260206004820152601760248201527f5465726d206e6f7420726561647920746f207374617274000000000000000000604482015260640161027b565b8360c001518360020154146107a55760405162461bcd60e51b815260206004820152601860248201527f416c6c2073706f747320617265206e6f742066696c6c65640000000000000000604482015260640161027b565b60005b8181101561089857306001600160a01b031663c177f09186608001518584815181106107d6576107d6611462565b60200260200101516040518363ffffffff1660e01b815260040161080d9291909182526001600160a01b0316602082015260400190565b602060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190611559565b156108905760405162461bcd60e51b8152602060048201526012602482015271115d1a081c1c9a58d95cc8191c9bdc1c195960721b604482015260640161027b565b6001016107a8565b506108a38484610f0d565b6108ad8484611044565b60808401516040516302c1ed1f60e01b815230916302c1ed1f916108d79190600190600401611582565b600060405180830381600087803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b505050505050505050565b6000841580159061092057508315155b801561092b57508215155b801561093657508615155b801561094157508515155b801561094c57508483105b801561096057506001600160a01b03821615155b61099d5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e7075747360901b604482015260640161027b565b60007f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8980546040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091529192509081816080018181525050898160c0018181525050888160a0018181525050878160e001818152505086816101000181815250508581610120018181525050848161014001906001600160a01b031690816001600160a01b0316815250503381604001906001600160a01b031690816001600160a01b0316815250504281606001818152505060018160000190151590811515815250508083600101600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155610100820151816006015561012082015181600701556101408201518160080160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050826000016000815480929190610bc690611540565b9190505550610bd5828b611251565b604051339083907f3bff48239db8f29891497cd2efd85d201f5723830e7c8cfaef44cc50a4bc024c90600090a35098975050505050505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a602081815260408084206000805160206115e283398151915283529320919052815460ff168015610c6a5750610c6a83610ee7565b610c7357600080fd5b81600301548260010154610c879190611449565b4211610cd55760405162461bcd60e51b815260206004820152601d60248201527f526567697374726174696f6e20706572696f64206e6f7420656e646564000000604482015260640161027b565b8160040154816002015410610d375760405162461bcd60e51b815260206004820152602260248201527f416c6c2073706f7473206172652066696c6c65642c2063616e27742065787069604482015261726560f01b606482015260840161027b565b8154610100900460ff1615610d855760405162461bcd60e51b815260206004820152601460248201527315195c9b48185b1c9958591e48195e1c1a5c995960621b604482015260640161027b565b600381015460005b81811015610e9b576000836003018281548110610dac57610dac611462565b6000918252602090912001546001600160a01b031690508015610e92576001600160a01b0381166000908152600585016020908152604080832054600688019092528220805491928392610e01908490611449565b90915550506001600160a01b03821660009081526005860160209081526040808320839055600488019091528120805460ff1916905560038601805485908110610e4d57610e4d611462565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460020160008154610e8c906115b4565b90915550505b50600101610d8d565b50825461ff001916610100178355815461ffff191661030017825560405184907f9983062774b9b7f1b9071acd776af98f78c06bf9ad065553a83395178ef6243a90600090a250505050565b60006000805160206115e28339815191525b600092835260205250604090205460ff1690565b610f1a82608001516112d7565b15610f5d5760405162461bcd60e51b815260206004820152601360248201527246756e6420616c72656164792065786973747360681b604482015260640161027b565b608082015160009081527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c6020526040902061014083015181546001600160a01b03909116620100000262010000600160b01b0319909116178155600382018054610fcc9160018401916112ff565b50805460ff191660019081178255810154601382015560808301516040516305e920e960e51b8152309163bd241d209161100d919060040190815260200190565b600060405180830381600087803b15801561102757600080fd5b505af115801561103b573d6000803e3d6000fd5b50505050505050565b608082015160009081527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf960209081526040808320600385018054835181860281018601909452808452919493849392908301828280156110ce57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110b0575b505083519394506000925050505b818110156111d3578460040160008483815181106110fc576110fc611462565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156111cb578460020183828151811061113e5761113e611462565b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b03909216919091179055835160058801919085908490811061119457611194611462565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054846111c89190611449565b93505b6001016110dc565b50426003850155835460ff19166001178455608086015160405163625b293160e01b8152309163625b29319161121791908790600401918252602082015260400190565b600060405180830381600087803b15801561123157600080fd5b505af1158015611245573d6000803e3d6000fd5b50505050505050505050565b60008281526000805160206115e283398151915260205260409020805461ffff191660011781558167ffffffffffffffff811115611291576112916115cb565b6040519080825280602002602001820160405280156112ba578160200160208202803683370190505b5080516112d191600384019160209091019061134f565b50505050565b60007f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c610ef9565b82805482825590600052602060002090810192821561133f5760005260206000209182015b8281111561133f578254825591600101919060010190611324565b5061134b9291506113a4565b5090565b82805482825590600052602060002090810192821561133f579160200282015b8281111561133f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061136f565b5b8082111561134b57600081556001016113a5565b6000602082840312156113cb57600080fd5b5035919050565b60008060008060008060c087890312156113eb57600080fd5b863595506020870135945060408701359350606087013592506080870135915060a08701356001600160a01b038116811461142557600080fd5b809150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b8082018082111561145c5761145c611433565b92915050565b634e487b7160e01b600052603260045260246000fd5b82511515815261018081016020840151611496602084018215159052565b5060408401516114b160408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e083015261010080850151818401525061012080850151818401525061014080850151611517828501826001600160a01b03169052565b5050826101608301529392505050565b60006020828403121561153957600080fd5b5051919050565b60006001820161155257611552611433565b5060010190565b60006020828403121561156b57600080fd5b8151801515811461157b57600080fd5b9392505050565b82815260408101600483106115a757634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000816115c3576115c3611433565b506000190190565b634e487b7160e01b600052604160045260246000fdfe35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a2646970667358221220cf4ad7646a44f544d63e0b37a1120718be2e797467fb79535e209bdf324c806a64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {},
    "title": "Takaturn Term",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is used to deploy the collateral & fund contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}