{
  "address": "0x99F21F56c6b27c3A4b2Ae471bFF06a9d137d5762",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "termOwner",
          "type": "address"
        }
      ],
      "name": "OnTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermFilled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TERM_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registrationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "expireTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f35b7fac70e64e04aa5e4b57a762e7d44873aea4787efb4e423eab45cd9231f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "1320960",
    "logsBloom": "0x
    "blockHash": "0x03b5bd64030c6dced0d27184f0532762fbc00a89036a70e76bbe3cdc7d360ee6",
    "transactionHash": "0x7f35b7fac70e64e04aa5e4b57a762e7d44873aea4787efb4e423eab45cd9231f",
    "logs": [],
    "blockNumber": 41438486,
    "cumulativeGasUsed": "1567631",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "452ac918fbfb41adbfacf5db4c9de79f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"}],\"name\":\"OnTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermFilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TERM_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"expireTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Takaturn Term\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is used to deploy the collateral & fund contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TermFacet.sol\":\"TermFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/TermFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ITerm} from \\\"../interfaces/ITerm.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\n\\r\\n/// @title Takaturn Term\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to deploy the collateral & fund contracts\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract TermFacet is ITerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n\\r\\n    event OnTermCreated(uint indexed termId, address indexed termOwner);\\r\\n    event OnCollateralDeposited(uint indexed termId, address indexed user, uint amount);\\r\\n    event OnTermFilled(uint indexed termId);\\r\\n    event OnTermExpired(uint indexed termId);\\r\\n\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount, // in stable token, without decimals\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint) {\\r\\n        return\\r\\n            _createTerm(\\r\\n                totalParticipants,\\r\\n                registrationPeriod,\\r\\n                cycleTime,\\r\\n                contributionAmount,\\r\\n                contributionPeriod,\\r\\n                stableTokenAddress\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function joinTerm(uint termId, bool optYield) external payable {\\r\\n        _joinTerm(termId, optYield);\\r\\n    }\\r\\n\\r\\n    function startTerm(uint termId) external {\\r\\n        _startTerm(termId);\\r\\n    }\\r\\n\\r\\n    function expireTerm(uint termId) external {\\r\\n        _expireTerm(termId);\\r\\n    }\\r\\n\\r\\n    function _createTerm(\\r\\n        uint _totalParticipants,\\r\\n        uint _registrationPeriod,\\r\\n        uint _cycleTime,\\r\\n        uint _contributionAmount,\\r\\n        uint _contributionPeriod,\\r\\n        address _stableTokenAddress\\r\\n    ) internal returns (uint) {\\r\\n        require(\\r\\n            _cycleTime != 0 &&\\r\\n                _contributionAmount != 0 &&\\r\\n                _contributionPeriod != 0 &&\\r\\n                _totalParticipants != 0 &&\\r\\n                _registrationPeriod != 0 &&\\r\\n                _contributionPeriod < _cycleTime &&\\r\\n                _stableTokenAddress != address(0),\\r\\n            \\\"Invalid inputs\\\"\\r\\n        );\\r\\n\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        uint termId = termStorage.nextTermId;\\r\\n\\r\\n        LibTerm.Term memory newTerm;\\r\\n\\r\\n        newTerm.termId = termId;\\r\\n        newTerm.totalParticipants = _totalParticipants;\\r\\n        newTerm.registrationPeriod = _registrationPeriod;\\r\\n        newTerm.cycleTime = _cycleTime;\\r\\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\\r\\n        newTerm.contributionPeriod = _contributionPeriod;\\r\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\r\\n        newTerm.termOwner = msg.sender;\\r\\n        newTerm.creationTime = block.timestamp;\\r\\n        newTerm.initialized = true;\\r\\n        newTerm.state = LibTerm.TermStates.InitializingTerm;\\r\\n\\r\\n        termStorage.terms[termId] = newTerm;\\r\\n        termStorage.nextTermId++;\\r\\n\\r\\n        _createCollateral(termId, _totalParticipants);\\r\\n\\r\\n        emit OnTermCreated(termId, msg.sender);\\r\\n\\r\\n        return termId;\\r\\n    }\\r\\n\\r\\n    function _joinTerm(uint _termId, bool _optYield) internal {\\r\\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\\r\\n        LibTerm.Term memory term = termStorage.terms[_termId];\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(LibTerm._termExists(_termId) && LibCollateral._collateralExists(_termId));\\r\\n\\r\\n        require(collateral.state == LibCollateral.CollateralStates.AcceptingCollateral, \\\"Closed\\\");\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\r\\n\\r\\n        if (collateral.counterMembers >= 1) {\\r\\n            require(\\r\\n                block.timestamp <= collateral.firstDepositTime + term.registrationPeriod,\\r\\n                \\\"Registration period ended\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(!collateral.isCollateralMember[msg.sender], \\\"Reentry\\\");\\r\\n\\r\\n        uint memberIndex = collateral.counterMembers;\\r\\n\\r\\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, memberIndex);\\r\\n        require(msg.value >= minAmount, \\\"Eth payment too low\\\");\\r\\n\\r\\n        collateral.collateralMembersBank[msg.sender] += msg.value;\\r\\n        collateral.isCollateralMember[msg.sender] = true;\\r\\n        collateral.depositors[memberIndex] = msg.sender;\\r\\n        collateral.counterMembers++;\\r\\n        collateral.collateralDepositByUser[msg.sender] += msg.value;\\r\\n\\r\\n        termStorage.participantToTermId[msg.sender].push(_termId);\\r\\n\\r\\n        emit OnCollateralDeposited(_termId, msg.sender, msg.value);\\r\\n\\r\\n        if (collateral.counterMembers == 1) {\\r\\n            collateral.firstDepositTime = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // If all the spots are filled, change the collateral\\r\\n        if (collateral.counterMembers == term.totalParticipants) {\\r\\n            emit OnTermFilled(_termId);\\r\\n        }\\r\\n\\r\\n        IYGFacetZaynFi(address(this)).toggleOptInYG(_termId, msg.sender, _optYield);\\r\\n    }\\r\\n\\r\\n    function _startTerm(uint _termId) internal {\\r\\n        LibTerm.Term memory term = LibTerm._termStorage().terms[_termId];\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        address[] memory depositors = collateral.depositors;\\r\\n\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        require(\\r\\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\r\\n            \\\"Term not ready to start\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers == term.totalParticipants, \\\"All spots are not filled\\\");\\r\\n\\r\\n        // Need to check each user because they can have different collateral amounts\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            require(\\r\\n                !ICollateral(address(this)).isUnderCollaterized(term.termId, depositors[i]),\\r\\n                \\\"Eth prices dropped\\\"\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Actually create and initialize the fund\\r\\n        _createFund(term, collateral);\\r\\n\\r\\n        _createYieldGenerator(term, collateral);\\r\\n\\r\\n        // Tell the collateral that the term has started\\r\\n        ICollateral(address(this)).setStateOwner(\\r\\n            term.termId,\\r\\n            LibCollateral.CollateralStates.CycleOngoing\\r\\n        );\\r\\n\\r\\n        term.state = LibTerm.TermStates.ActiveTerm;\\r\\n    }\\r\\n\\r\\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\\r\\n        //require(!LibCollateral._collateralExists(termId), \\\"Collateral already exists\\\");\\r\\n        LibCollateral.Collateral storage newCollateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        newCollateral.initialized = true;\\r\\n        newCollateral.state = LibCollateral.CollateralStates.AcceptingCollateral;\\r\\n        newCollateral.depositors = new address[](_totalParticipants);\\r\\n    }\\r\\n\\r\\n    function _createFund(\\r\\n        LibTerm.Term memory _term,\\r\\n        LibCollateral.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        require(!LibFund._fundExists(_term.termId), \\\"Fund already exists\\\");\\r\\n        LibFund.Fund storage newFund = LibFund._fundStorage().funds[_term.termId];\\r\\n\\r\\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\\r\\n        newFund.beneficiariesOrder = _collateral.depositors;\\r\\n        newFund.initialized = true;\\r\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\r\\n        newFund.currentState = LibFund.FundStates.InitializingFund;\\r\\n\\r\\n        IFund(address(this)).initFund(_term.termId);\\r\\n    }\\r\\n\\r\\n    function _expireTerm(uint _termId) internal {\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[_termId];\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(LibTerm._termExists(_termId) && LibCollateral._collateralExists(_termId));\\r\\n\\r\\n        require(\\r\\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\r\\n            \\\"Registration period not ended\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            collateral.counterMembers < term.totalParticipants,\\r\\n            \\\"All spots are filled, can't expire\\\"\\r\\n        );\\r\\n\\r\\n        require(term.state != LibTerm.TermStates.ExpiredTerm, \\\"Term already expired\\\");\\r\\n\\r\\n        uint depositorsArrayLength = collateral.depositors.length;\\r\\n\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n\\r\\n            if (depositor != address(0)) {\\r\\n                uint amount = collateral.collateralMembersBank[depositor];\\r\\n\\r\\n                collateral.collateralPaymentBank[depositor] += amount;\\r\\n                collateral.collateralMembersBank[depositor] = 0;\\r\\n                collateral.isCollateralMember[depositor] = false;\\r\\n                collateral.depositors[i] = address(0);\\r\\n                --collateral.counterMembers;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        term.state = LibTerm.TermStates.ExpiredTerm;\\r\\n        collateral.initialized = false;\\r\\n        collateral.state = LibCollateral.CollateralStates.Closed;\\r\\n\\r\\n        emit OnTermExpired(_termId);\\r\\n    }\\r\\n\\r\\n    function _createYieldGenerator(\\r\\n        LibTerm.Term memory _term,\\r\\n        LibCollateral.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[_term.termId];\\r\\n        LibYieldGeneration.YieldProviders storage yieldProviders = LibYieldGeneration\\r\\n            ._yieldProviders();\\r\\n\\r\\n        uint amountDeposited;\\r\\n\\r\\n        address[] memory depositors = _collateral.depositors;\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            if (yield.hasOptedIn[depositors[i]]) {\\r\\n                yield.yieldUsers.push(depositors[i]);\\r\\n                amountDeposited += _collateral.collateralMembersBank[depositors[i]];\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amountDeposited > 0) {\\r\\n            yield.startTimeStamp = block.timestamp;\\r\\n            yield.initialized = true;\\r\\n            yield.providerAddresses[\\\"ZaynZap\\\"] = yieldProviders.providerAddresses[\\\"ZaynZap\\\"];\\r\\n            yield.providerAddresses[\\\"ZaynVault\\\"] = yieldProviders.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n            IYGFacetZaynFi(address(this)).depositYG(_term.termId, amountDeposited);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a19682f7a03068f0da9b5e0f0f035d33acdb123ba6de9bcf558a3f3f6aee761\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    function setStateOwner(uint termId, LibCollateral.CollateralStates newState) external;\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param term the term object\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTerm.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId The term id\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    /// @param participant The participant address\\r\\n    function withdrawReimbursement(uint termId, address participant) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe2f6892b54f7149e19f61377ab45cfbb2ac24d5987d2209dc4dd016792a9b31a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IFund {\\r\\n    function initFund(uint termId) external;\\r\\n\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice Fallback function, if the internal call fails somehow and the state gets stuck, allow owner to call the function again manually\\r\\n    /// @dev This shouldn't happen, but is here in case there's an edge-case we didn't take into account, can possibly be removed in the future\\r\\n    function awardBeneficiary(uint termId) external;\\r\\n\\r\\n    /// @notice called by the owner to close the fund for emergency reasons.\\r\\n    function closeFund(uint termId) external;\\r\\n\\r\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    //         and prevent the fund to be stuck in limbo\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x5225d5e670d3206823b73549548533c75e87ebfd2529e271a47306c13b5df29a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    /// @notice Gets the current and next term id\\r\\n    /// @return current termID\\r\\n    /// @return next termID\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Must return 0 before starting the fund\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining registration time in seconds\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get current information of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return Term Struct, see LibTerm.sol\\r\\n    function getTermSummary(uint termId) external view returns (LibTerm.Term memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\r\\n    /// @param participant address\\r\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\r\\n    /// @return List of termIDs\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTerm.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user was previously expelled from\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateral.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the required minimum collateral deposit based on the position\\r\\n    /// @param termId the term id\\r\\n    /// @param depositorIndex the index of the depositor\\r\\n    /// @return required minimum in wei\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    // FUND GETTERS\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFund.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the current beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets a user information of in a fund\\r\\n    /// @param participant address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the fund/term\\r\\n    /// @return if the user was beneficiary in the past\\r\\n    /// @return if the user paid for the current cycle\\r\\n    /// @return if the user has autopay enabled\\r\\n    /// @return users money pot balance\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function userAPY(uint termId, address user) external returns (uint256);\\r\\n\\r\\n    function termAPY(uint termId) external returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xdb3362644958929965e1f4662e03a1da9d70fe6a491b038fa130d587e983d959\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITerm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITerm {\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint);\\r\\n\\r\\n    function joinTerm(uint termId, bool optYield) external payable;\\r\\n\\r\\n    function startTerm(uint termId) external;\\r\\n\\r\\n    function expireTerm(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc2120ac16b0af3645656329d3c7d5dca101ae62e05b545ca39e86983a177eb1f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 ethAmount,\\r\\n        address user\\r\\n    ) external returns (uint neededShares);\\r\\n\\r\\n    function claimAvailableYield(uint termId) external;\\r\\n\\r\\n    function claimAvailableYield(uint termId, address user) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId, address user, bool optIn) external;\\r\\n\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8eb410fe8f2c974559d7fe706555b1008880da664e0cc76d0e1e6c9f6fb7bec5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2bc1acb1a4156ea22c631cb0a3149c5945f9c345275712c005ac0db5b190607\",\"license\":\"MIT\"},\"contracts/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd58fe1d73e9c6f36129a5f18652c4d68f8959c429b91557a5e8fbab9c66a9a07\",\"license\":\"MIT\"},\"contracts/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x451ae8fd0b3a0c1d688bce4302caa4af45bd4068d14b3840b3588ce497fc4276\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x791f2b17e49713c2057ac2975fc2d8a28e6dd042773867582b04f5f8d41aee4b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {},
    "title": "Takaturn Term",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is used to deploy the collateral & fund contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}