{
  "address": "0xc368Ad99Ad5E3e11B3E2584BF1c0826CC6a1c745",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optIn",
          "type": "bool"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateYieldProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawYG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c5035efd64456f874a006856b57fdabf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"depositYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optIn\",\"type\":\"bool\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateYieldProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawYG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAvailableYield(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being claimed\"}},\"claimAvailableYield(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the yield is being claimed\",\"user\":\"The user address that is claiming the yield\"}},\"depositYG(uint256,uint256)\":{\"params\":{\"ethAmount\":\"The amount of collateral being deposited\",\"termId\":\"The term id for which the collateral is being deposited\"}},\"withdrawYG(uint256,uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral being withdrawn\",\"termId\":\"The term id for which the collateral is being withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAvailableYield(uint256)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"claimAvailableYield(uint256,address)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"depositYG(uint256,uint256)\":{\"notice\":\"This function is used to deposit collateral for yield generation\"},\"withdrawYG(uint256,uint256,address)\":{\"notice\":\"This function is used to withdraw collateral from the yield generation protocol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\ncontract YGFacetZaynFi is IYGFacetZaynFi {\\r\\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\\r\\n    event OnYieldClaimed(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user claims their yield\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param termId The term id for which the collateral is being deposited\\r\\n    /// @param ethAmount The amount of collateral being deposited\\r\\n    function depositYG(uint termId, uint ethAmount) external {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        yield.totalDeposit = ethAmount;\\r\\n        yield.currentTotalDeposit = ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: ethAmount}(\\r\\n            vaultAddress,\\r\\n            termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param termId The term id for which the collateral is being withdrawn\\r\\n    /// @param collateralAmount The amount of collateral being withdrawn\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 collateralAmount,\\r\\n        address user\\r\\n    ) external returns (uint) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint neededShares = (collateralAmount * yield.totalShares) / yield.totalDeposit;\\r\\n\\r\\n        yield.withdrawnCollateral[user] += collateralAmount;\\r\\n        yield.currentTotalDeposit -= collateralAmount;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            termId\\r\\n        );\\r\\n\\r\\n        uint withdrawnYield = withdrawnAmount - collateralAmount;\\r\\n        yield.withdrawnYield[user] += withdrawnYield;\\r\\n        yield.availableYield[user] += withdrawnYield;\\r\\n\\r\\n        return withdrawnYield;\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    function claimAvailableYield(uint termId) external {\\r\\n        _claimAvailableYield(termId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param user The user address that is claiming the yield\\r\\n    function claimAvailableYield(uint termId, address user) external {\\r\\n        _claimAvailableYield(termId, user);\\r\\n    }\\r\\n\\r\\n    function toggleOptInYG(uint termId, bool optIn) external {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        LibCollateral.Collateral storage collateral = LibCollateral\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        require(\\r\\n            collateral.state == LibCollateral.CollateralStates.AcceptingCollateral,\\r\\n            \\\"Too late to change YG opt in\\\"\\r\\n        );\\r\\n\\r\\n        yield.hasOptedIn[msg.sender] = optIn;\\r\\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\\r\\n    }\\r\\n\\r\\n    function updateYieldProvider(\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external onlyOwner {\\r\\n        LibYieldGeneration.YieldProviders storage yieldProvider = LibYieldGeneration\\r\\n            ._yieldProviders();\\r\\n\\r\\n        yieldProvider.providerAddresses[providerString] = providerAddress;\\r\\n    }\\r\\n\\r\\n    function _claimAvailableYield(uint termId, address user) internal {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint availableYield = yield.availableYield[user];\\r\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\r\\n        (bool success, ) = payable(user).call{value: availableYield}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnYieldClaimed(termId, user, availableYield);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb2dc4645e495ec2c4305741d5666b64d6ab70fcfc6e52f8724787b99bf9227dc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 ethAmount,\\r\\n        address user\\r\\n    ) external returns (uint neededShares);\\r\\n\\r\\n    function claimAvailableYield(uint termId) external;\\r\\n\\r\\n    function claimAvailableYield(uint termId, address user) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId, bool optIn) external;\\r\\n\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0372668bb28aa3384e4c13d9f018a5a4ce37e7967d13f6f399b7d8697ff234ea\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external pure returns (address);\\r\\n\\r\\n    function balance() external pure returns (uint256);\\r\\n\\r\\n    function strategy() external pure returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71a2f69672c7ed466339c3c37b3c5774ce7779e976c4dd9766b96d37e0499619\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x594d735bbb0bd6f11fe1204209f5d6f2f8a1c4765a7f78f4c65ef4f4341df6a1\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2bc1acb1a4156ea22c631cb0a3149c5945f9c345275712c005ac0db5b190607\",\"license\":\"MIT\"},\"contracts/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x451ae8fd0b3a0c1d688bce4302caa4af45bd4068d14b3840b3588ce497fc4276\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x791f2b17e49713c2057ac2975fc2d8a28e6dd042773867582b04f5f8d41aee4b\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a47806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063625b2931146100675780636ccd44911461007c57806383da1d761461008f578063a7cce353146100a2578063c286b292146100c7578063f6a40d2a146100da575b600080fd5b61007a61007536600461075c565b6100ed565b005b61007a61008a36600461077e565b610249565b61007a61009d3660046107c9565b610256565b6100b56100b036600461088b565b6102c6565b60405190815260200160405180910390f35b61007a6100d53660046108c0565b6104a6565b61007a6100e83660046108f5565b6105ad565b60008281526000805160206109f2833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f708925060240190506020604051808303816000875af1158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610918565b826005018190555050505050565b61025381336105bb565b50565b61025e6106d3565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b89779082908290610292908690610931565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b60008381526000805160206109f283398151915260205260408120600381015460058201548391906102f89087610976565b6103029190610993565b6001600160a01b03851660009081526009840160205260408120805492935087929091906103319084906109b5565b925050819055508482600401600082825461034c91906109c8565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610918565b9050600061043589836109c8565b6001600160a01b03891660009081526008880160205260408120805492935083929091906104649084906109b5565b90915550506001600160a01b0388166000908152600a87016020526040812080548392906104939084906109b5565b90915550909a9950505050505050505050565b60008281526000805160206109f2833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff166003811115610509576105096109db565b1461055b5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b336000818152600784016020526040808220805460ff1916871515908117909155905190929187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef5669190a450505050565b6105b782826105bb565b5050565b60008281526000805160206109f2833981519152602090815260408083206001600160a01b0385168452600a810190925290912054806106345760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610552565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610681576040519150601f19603f3d011682016040523d82523d6000602084013e610686565b606091505b505090508061069457600080fd5b81846001600160a01b0316867f16879e095f1873a73d2185173cd45cb091d945760ca20e5b7c280a4e60cd00f060405160405180910390a45050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610552565b565b6000806040838503121561076f57600080fd5b50508035926020909101359150565b60006020828403121561079057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146107c457600080fd5b919050565b600080604083850312156107dc57600080fd5b823567ffffffffffffffff808211156107f457600080fd5b818501915085601f83011261080857600080fd5b81358181111561081a5761081a610797565b604051601f8201601f19908116603f0116810190838211818310171561084257610842610797565b8160405282815288602084870101111561085b57600080fd5b826020860160208301376000602084830101528096505050505050610882602084016107ad565b90509250929050565b6000806000606084860312156108a057600080fd5b83359250602084013591506108b7604085016107ad565b90509250925092565b600080604083850312156108d357600080fd5b82359150602083013580151581146108ea57600080fd5b809150509250929050565b6000806040838503121561090857600080fd5b82359150610882602084016107ad565b60006020828403121561092a57600080fd5b5051919050565b6000825160005b818110156109525760208186018101518583015201610938565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761098d5761098d610960565b92915050565b6000826109b057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561098d5761098d610960565b8181038181111561098d5761098d610960565b634e487b7160e01b600052602160045260246000fdfe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a264697066735822122028e21b31b6ff4140deab4e069d53cc56919604ea440a64590471d33c45106a8664736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063625b2931146100675780636ccd44911461007c57806383da1d761461008f578063a7cce353146100a2578063c286b292146100c7578063f6a40d2a146100da575b600080fd5b61007a61007536600461075c565b6100ed565b005b61007a61008a36600461077e565b610249565b61007a61009d3660046107c9565b610256565b6100b56100b036600461088b565b6102c6565b60405190815260200160405180910390f35b61007a6100d53660046108c0565b6104a6565b61007a6100e83660046108f5565b6105ad565b60008281526000805160206109f2833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f708925060240190506020604051808303816000875af1158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610918565b826005018190555050505050565b61025381336105bb565b50565b61025e6106d3565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b89779082908290610292908690610931565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b60008381526000805160206109f283398151915260205260408120600381015460058201548391906102f89087610976565b6103029190610993565b6001600160a01b03851660009081526009840160205260408120805492935087929091906103319084906109b5565b925050819055508482600401600082825461034c91906109c8565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610918565b9050600061043589836109c8565b6001600160a01b03891660009081526008880160205260408120805492935083929091906104649084906109b5565b90915550506001600160a01b0388166000908152600a87016020526040812080548392906104939084906109b5565b90915550909a9950505050505050505050565b60008281526000805160206109f2833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff166003811115610509576105096109db565b1461055b5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b336000818152600784016020526040808220805460ff1916871515908117909155905190929187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef5669190a450505050565b6105b782826105bb565b5050565b60008281526000805160206109f2833981519152602090815260408083206001600160a01b0385168452600a810190925290912054806106345760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610552565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610681576040519150601f19603f3d011682016040523d82523d6000602084013e610686565b606091505b505090508061069457600080fd5b81846001600160a01b0316867f16879e095f1873a73d2185173cd45cb091d945760ca20e5b7c280a4e60cd00f060405160405180910390a45050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461075a5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610552565b565b6000806040838503121561076f57600080fd5b50508035926020909101359150565b60006020828403121561079057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146107c457600080fd5b919050565b600080604083850312156107dc57600080fd5b823567ffffffffffffffff808211156107f457600080fd5b818501915085601f83011261080857600080fd5b81358181111561081a5761081a610797565b604051601f8201601f19908116603f0116810190838211818310171561084257610842610797565b8160405282815288602084870101111561085b57600080fd5b826020860160208301376000602084830101528096505050505050610882602084016107ad565b90509250929050565b6000806000606084860312156108a057600080fd5b83359250602084013591506108b7604085016107ad565b90509250925092565b600080604083850312156108d357600080fd5b82359150602083013580151581146108ea57600080fd5b809150509250929050565b6000806040838503121561090857600080fd5b82359150610882602084016107ad565b60006020828403121561092a57600080fd5b5051919050565b6000825160005b818110156109525760208186018101518583015201610938565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761098d5761098d610960565b92915050565b6000826109b057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561098d5761098d610960565b8181038181111561098d5761098d610960565b634e487b7160e01b600052602160045260246000fdfe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a264697066735822122028e21b31b6ff4140deab4e069d53cc56919604ea440a64590471d33c45106a8664736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAvailableYield(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "claimAvailableYield(uint256,address)": {
        "params": {
          "termId": "The term id for which the yield is being claimed",
          "user": "The user address that is claiming the yield"
        }
      },
      "depositYG(uint256,uint256)": {
        "params": {
          "ethAmount": "The amount of collateral being deposited",
          "termId": "The term id for which the collateral is being deposited"
        }
      },
      "withdrawYG(uint256,uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral being withdrawn",
          "termId": "The term id for which the collateral is being withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAvailableYield(uint256)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "claimAvailableYield(uint256,address)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "depositYG(uint256,uint256)": {
        "notice": "This function is used to deposit collateral for yield generation"
      },
      "withdrawYG(uint256,uint256,address)": {
        "notice": "This function is used to withdraw collateral from the yield generation protocol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}