{
  "address": "0x952381E7A0e8054bf8A07D9dA6b635ce871Cd18C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateYieldProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawYG",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6de37b353c68be9049ccbfd8e0f7f4b23121b131f09f4db684905b9b111b346a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "647920",
    "logsBloom": "0x
    "blockHash": "0x721e1e91cb6a6bc00b2f8896267261d1d80cc8461723f7808f5aeda635d5d828",
    "transactionHash": "0x6de37b353c68be9049ccbfd8e0f7f4b23121b131f09f4db684905b9b111b346a",
    "logs": [],
    "blockNumber": 45109584,
    "cumulativeGasUsed": "647920",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "d56c373fa6e3acb1f7b405801ddac8d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"depositYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateYieldProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawYG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAvailableYield(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being claimed\"}},\"claimAvailableYield(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the yield is being claimed\",\"user\":\"The user address that is claiming the yield\"}},\"depositYG(uint256,uint256)\":{\"params\":{\"ethAmount\":\"The amount of collateral being deposited\",\"termId\":\"The term id for which the collateral is being deposited\"}},\"withdrawYG(uint256,uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral being withdrawn\",\"termId\":\"The term id for which the collateral is being withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAvailableYield(uint256)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"claimAvailableYield(uint256,address)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"depositYG(uint256,uint256)\":{\"notice\":\"This function is used to deposit collateral for yield generation\"},\"withdrawYG(uint256,uint256,address)\":{\"notice\":\"This function is used to withdraw collateral from the yield generation protocol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\n\\r\\ncontract YGFacetZaynFi is IYGFacetZaynFi {\\r\\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\\r\\n    event OnYieldClaimed(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user claims their yield\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param termId The term id for which the collateral is being deposited\\r\\n    /// @param ethAmount The amount of collateral being deposited\\r\\n    function depositYG(uint termId, uint ethAmount) external {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        yield.totalDeposit = ethAmount;\\r\\n        yield.currentTotalDeposit = ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: ethAmount}(\\r\\n            vaultAddress,\\r\\n            termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param termId The term id for which the collateral is being withdrawn\\r\\n    /// @param collateralAmount The amount of collateral being withdrawn\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 collateralAmount,\\r\\n        address user\\r\\n    ) external returns (uint) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint neededShares = LibYieldGeneration._ethToShares(\\r\\n            collateralAmount,\\r\\n            yield.totalShares,\\r\\n            yield.totalDeposit\\r\\n        );\\r\\n\\r\\n        yield.withdrawnCollateral[user] += collateralAmount;\\r\\n        yield.currentTotalDeposit -= collateralAmount;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            termId\\r\\n        );\\r\\n\\r\\n        uint withdrawnYield = withdrawnAmount - collateralAmount;\\r\\n        yield.withdrawnYield[user] += withdrawnYield;\\r\\n        yield.availableYield[user] += withdrawnYield;\\r\\n\\r\\n        return withdrawnYield;\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    function claimAvailableYield(uint termId) external {\\r\\n        _claimAvailableYield(termId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param user The user address that is claiming the yield\\r\\n    function claimAvailableYield(uint termId, address user) external {\\r\\n        _claimAvailableYield(termId, user);\\r\\n    }\\r\\n\\r\\n    function toggleOptInYG(uint termId) external {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        require(LibYieldGeneration._yieldExists(termId));\\r\\n        require(\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\r\\n            \\\"Too late to change YG opt in\\\"\\r\\n        );\\r\\n        require(\\r\\n            collateral.isCollateralMember[msg.sender],\\r\\n            \\\"Pay the collateral security deposit first\\\"\\r\\n        );\\r\\n\\r\\n        bool optIn = !yield.hasOptedIn[msg.sender];\\r\\n        yield.hasOptedIn[msg.sender] = optIn;\\r\\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\\r\\n    }\\r\\n\\r\\n    function updateYieldProvider(\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external onlyOwner {\\r\\n        LibYieldGeneration.YieldProviders storage yieldProvider = LibYieldGeneration\\r\\n            ._yieldProviders();\\r\\n\\r\\n        yieldProvider.providerAddresses[providerString] = providerAddress;\\r\\n    }\\r\\n\\r\\n    function _claimAvailableYield(uint termId, address user) internal {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint availableYield = yield.availableYield[user];\\r\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\r\\n        yield.availableYield[user] = 0;\\r\\n        (bool success, ) = payable(user).call{value: availableYield}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnYieldClaimed(termId, user, availableYield);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7a85cf66f2052a7c0653a6aaad73c40a7f04c5c390d5888e372bc6a4e7b4e73\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 ethAmount,\\r\\n        address user\\r\\n    ) external returns (uint neededShares);\\r\\n\\r\\n    function claimAvailableYield(uint termId) external;\\r\\n\\r\\n    function claimAvailableYield(uint termId, address user) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x72eaefe85df56e1269d13228b75e1fb6847a8bbbe29f6c6f46dc64b8fb031260\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external pure returns (address);\\r\\n\\r\\n    function balance() external pure returns (uint256);\\r\\n\\r\\n    function strategy() external pure returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71a2f69672c7ed466339c3c37b3c5774ce7779e976c4dd9766b96d37e0499619\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x594d735bbb0bd6f11fe1204209f5d6f2f8a1c4765a7f78f4c65ef4f4341df6a1\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5533a3634ad11b156b9db4c2ffc1a114c2dbad0e6ca96b0239807b365b2d090e\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e573ed3954c974c93379f2624c66f11bfc5140bacae56e964f7940ef9ef9d51\",\"license\":\"MIT\"},\"contracts/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x451ae8fd0b3a0c1d688bce4302caa4af45bd4068d14b3840b3588ce497fc4276\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _sharesToEth(\\r\\n        uint _currentShares,\\r\\n        uint _totalDeposit,\\r\\n        uint _totalShares\\r\\n    ) internal pure returns (uint) {\\r\\n        return (_currentShares * _totalDeposit) / _totalShares;\\r\\n    }\\r\\n\\r\\n    function _ethToShares(\\r\\n        uint _collateralAmount,\\r\\n        uint _totalShares,\\r\\n        uint _totalDeposit\\r\\n    ) internal pure returns (uint) {\\r\\n        return (_collateralAmount * _totalShares) / _totalDeposit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38bfcad81689ed5586da67f0143099beb63ecabeb9db67adbc01995a327f9c2d\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610abd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806327ff9f3514610067578063625b29311461007c5780636ccd44911461008f57806383da1d76146100a2578063a7cce353146100b5578063f6a40d2a146100da575b600080fd5b61007a610075366004610807565b6100ed565b005b61007a61008a366004610820565b61027a565b61007a61009d366004610807565b6103d6565b61007a6100b0366004610874565b6103e3565b6100c86100c3366004610936565b610453565b60405190815260200160405180910390f35b61007a6100e836600461096b565b61062a565b6000818152600080516020610a68833981519152602081815260408084207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288883529320919052815460ff1661014157600080fd5b60008154610100900460ff16600381111561015e5761015e61098e565b146101b05760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102235760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b60648201526084016101a7565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b6000828152600080516020610a68833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b15801561034357600080fd5b505af1158015610357573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f708925060240190506020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c891906109a4565b826005018190555050505050565b6103e08133610638565b50565b6103eb61075f565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977908290829061041f9086906109bd565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b6000838152600080516020610a6883398151915260205260408120600581015460038201548391610486918791906107e8565b6001600160a01b03851660009081526009840160205260408120805492935087929091906104b5908490610a02565b92505081905550848260040160008282546104d09190610a1b565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906109a4565b905060006105b98983610a1b565b6001600160a01b03891660009081526008880160205260408120805492935083929091906105e8908490610a02565b90915550506001600160a01b0388166000908152600a8701602052604081208054839290610617908490610a02565b90915550909a9950505050505050505050565b6106348282610638565b5050565b6000828152600080516020610a68833981519152602090815260408083206001600160a01b0385168452600a810190925290912054806106b15760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b60448201526064016101a7565b6001600160a01b0383166000818152600a840160205260408082208290555190919083908381818185875af1925050503d806000811461070d576040519150601f19603f3d011682016040523d82523d6000602084013e610712565b606091505b505090508061072057600080fd5b81846001600160a01b0316867f16879e095f1873a73d2185173cd45cb091d945760ca20e5b7c280a4e60cd00f060405160405180910390a45050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146107e65760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016101a7565b565b6000816107f58486610a2e565b6107ff9190610a45565b949350505050565b60006020828403121561081957600080fd5b5035919050565b6000806040838503121561083357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461086f57600080fd5b919050565b6000806040838503121561088757600080fd5b823567ffffffffffffffff8082111561089f57600080fd5b818501915085601f8301126108b357600080fd5b8135818111156108c5576108c5610842565b604051601f8201601f19908116603f011681019083821181831017156108ed576108ed610842565b8160405282815288602084870101111561090657600080fd5b82602086016020830137600060208483010152809650505050505061092d60208401610858565b90509250929050565b60008060006060848603121561094b57600080fd5b833592506020840135915061096260408501610858565b90509250925092565b6000806040838503121561097e57600080fd5b8235915061092d60208401610858565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156109b657600080fd5b5051919050565b6000825160005b818110156109de57602081860181015185830152016109c4565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a1557610a156109ec565b92915050565b81810381811115610a1557610a156109ec565b8082028115828204841417610a1557610a156109ec565b600082610a6257634e487b7160e01b600052601260045260246000fd5b50049056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a2646970667358221220cbdd49b33fc62d7ba175038f7bed603771c967363cd968034994b4e98b3cf3a564736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806327ff9f3514610067578063625b29311461007c5780636ccd44911461008f57806383da1d76146100a2578063a7cce353146100b5578063f6a40d2a146100da575b600080fd5b61007a610075366004610807565b6100ed565b005b61007a61008a366004610820565b61027a565b61007a61009d366004610807565b6103d6565b61007a6100b0366004610874565b6103e3565b6100c86100c3366004610936565b610453565b60405190815260200160405180910390f35b61007a6100e836600461096b565b61062a565b6000818152600080516020610a68833981519152602081815260408084207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288883529320919052815460ff1661014157600080fd5b60008154610100900460ff16600381111561015e5761015e61098e565b146101b05760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102235760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b60648201526084016101a7565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b6000828152600080516020610a68833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b15801561034357600080fd5b505af1158015610357573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f708925060240190506020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c891906109a4565b826005018190555050505050565b6103e08133610638565b50565b6103eb61075f565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977908290829061041f9086906109bd565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b6000838152600080516020610a6883398151915260205260408120600581015460038201548391610486918791906107e8565b6001600160a01b03851660009081526009840160205260408120805492935087929091906104b5908490610a02565b92505081905550848260040160008282546104d09190610a1b565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906109a4565b905060006105b98983610a1b565b6001600160a01b03891660009081526008880160205260408120805492935083929091906105e8908490610a02565b90915550506001600160a01b0388166000908152600a8701602052604081208054839290610617908490610a02565b90915550909a9950505050505050505050565b6106348282610638565b5050565b6000828152600080516020610a68833981519152602090815260408083206001600160a01b0385168452600a810190925290912054806106b15760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b60448201526064016101a7565b6001600160a01b0383166000818152600a840160205260408082208290555190919083908381818185875af1925050503d806000811461070d576040519150601f19603f3d011682016040523d82523d6000602084013e610712565b606091505b505090508061072057600080fd5b81846001600160a01b0316867f16879e095f1873a73d2185173cd45cb091d945760ca20e5b7c280a4e60cd00f060405160405180910390a45050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146107e65760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016101a7565b565b6000816107f58486610a2e565b6107ff9190610a45565b949350505050565b60006020828403121561081957600080fd5b5035919050565b6000806040838503121561083357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461086f57600080fd5b919050565b6000806040838503121561088757600080fd5b823567ffffffffffffffff8082111561089f57600080fd5b818501915085601f8301126108b357600080fd5b8135818111156108c5576108c5610842565b604051601f8201601f19908116603f011681019083821181831017156108ed576108ed610842565b8160405282815288602084870101111561090657600080fd5b82602086016020830137600060208483010152809650505050505061092d60208401610858565b90509250929050565b60008060006060848603121561094b57600080fd5b833592506020840135915061096260408501610858565b90509250925092565b6000806040838503121561097e57600080fd5b8235915061092d60208401610858565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156109b657600080fd5b5051919050565b6000825160005b818110156109de57602081860181015185830152016109c4565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a1557610a156109ec565b92915050565b81810381811115610a1557610a156109ec565b8082028115828204841417610a1557610a156109ec565b600082610a6257634e487b7160e01b600052601260045260246000fd5b50049056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a2646970667358221220cbdd49b33fc62d7ba175038f7bed603771c967363cd968034994b4e98b3cf3a564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAvailableYield(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "claimAvailableYield(uint256,address)": {
        "params": {
          "termId": "The term id for which the yield is being claimed",
          "user": "The user address that is claiming the yield"
        }
      },
      "depositYG(uint256,uint256)": {
        "params": {
          "ethAmount": "The amount of collateral being deposited",
          "termId": "The term id for which the collateral is being deposited"
        }
      },
      "withdrawYG(uint256,uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral being withdrawn",
          "termId": "The term id for which the collateral is being withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAvailableYield(uint256)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "claimAvailableYield(uint256,address)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "depositYG(uint256,uint256)": {
        "notice": "This function is used to deposit collateral for yield generation"
      },
      "withdrawYG(uint256,uint256,address)": {
        "notice": "This function is used to withdraw collateral from the yield generation protocol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}