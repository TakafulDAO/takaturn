{
  "address": "0x2ec68c63bFf1a987d05a6Ad19448cd8Ab6Cc0FbD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTermOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTermOwner",
          "type": "address"
        }
      ],
      "name": "TermOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "addYieldProviders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6dea37f5fae6dd722736d6c8445921b248044068fdc0f080450c87186ae56e20",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "399153",
    "logsBloom": "0x
    "blockHash": "0x49c7212904e53cc78e9327b11de3313b5740123d6710655b4662286b180a786b",
    "transactionHash": "0x6dea37f5fae6dd722736d6c8445921b248044068fdc0f080450c87186ae56e20",
    "logs": [],
    "blockNumber": 37624164,
    "cumulativeGasUsed": "399153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7fd8a3dd9f976d40ffd25cccf6b1d82b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTermOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTermOwner\",\"type\":\"address\"}],\"name\":\"TermOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"addYieldProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"depositYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositYG(uint256,uint256)\":{\"params\":{\"ethAmount\":\"The amount of collateral being deposited\",\"termId\":\"The term id for which the collateral is being deposited\"}},\"withdrawYG(uint256,address,uint256)\":{\"params\":{\"ethAmount\":\"The amount of collateral being withdrawn\",\"termId\":\"The term id for which the collateral is being withdrawn\",\"user\":\"The user who is withdrawing the collateral\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositYG(uint256,uint256)\":{\"notice\":\"This function is used to deposit collateral for yield generation\"},\"withdrawYG(uint256,address,uint256)\":{\"notice\":\"This function is used to withdraw collateral from yield generation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/version-1/access/TermOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copied from OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that starts a new term. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyTermOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract TermOwnable is Context {\\r\\n    event TermOwnershipTransferred(address indexed previousTermOwner, address indexed newTermOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        _checkTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function _termOwner(uint termId) internal view virtual returns (address) {\\r\\n        return LibTerm._termStorage().terms[termId].termOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkTermOwner(uint termId) internal view virtual {\\r\\n        require(_termOwner(termId) == _msgSender(), \\\"TermOwnable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyTermOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function _renounceTermOwnership(uint termId) internal virtual onlyTermOwner(termId) {\\r\\n        _transferTermOwnership(termId, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    // function transferTermOwnership(\\r\\n    //     uint termId,\\r\\n    //     address newTermOwner\\r\\n    // ) internal virtual onlyTermOwner(termId) {\\r\\n    //     require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    //     _transferTermOwnership(termId, newTermOwner);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferTermOwnership(\\r\\n        uint termId,\\r\\n        address newTermOwner\\r\\n    ) internal virtual onlyTermOwner(termId) {\\r\\n        require(newTermOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\\r\\n        address oldOwner = term.termOwner;\\r\\n        term.termOwner = newTermOwner;\\r\\n        emit TermOwnershipTransferred(oldOwner, newTermOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c6005fcd387d8c93c9f6fe1d0d2e3593895a5a97221259c771a7c59deb796e6\",\"license\":\"MIT\"},\"contracts/version-1/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 1;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        uint fixedCollateralEth;\\r\\n        address stableTokenAddress;\\r\\n        address aggregatorAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb69fa8312f1d875ba838a9f1cc3af717cc5f5d4a229ccebe71ccfe41349146\",\"license\":\"MIT\"},\"contracts/version-2/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\n\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {LibCollateralV2} from \\\"../libraries/LibCollateralV2.sol\\\";\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nimport {TermOwnable} from \\\"../../version-1/access/TermOwnable.sol\\\";\\r\\n\\r\\ncontract YGFacetZaynFi is IYGFacetZaynFi, TermOwnable {\\r\\n    event OnYGOptInToggled(uint indexed termId, address indexed participant, bool indexed optedIn); // Emits when a participant succesfully toggles yield generation\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param termId The term id for which the collateral is being deposited\\r\\n    /// @param ethAmount The amount of collateral being deposited\\r\\n    function depositYG(uint termId, uint ethAmount) external /*onlyTermOwner(termId)*/ {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        yield.totalDeposit = ethAmount;\\r\\n        yield.currentTotalDeposit = ethAmount;\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.zap).zapInEth{value: ethAmount}(yield.vault, termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from yield generation\\r\\n    /// @param termId The term id for which the collateral is being withdrawn\\r\\n    /// @param user The user who is withdrawing the collateral\\r\\n    /// @param ethAmount The amount of collateral being withdrawn\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        address user,\\r\\n        uint256 ethAmount\\r\\n    ) external /*onlyTermOwner(termId)*/ {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        yield.currentTotalDeposit -= ethAmount;\\r\\n        yield.withdrawnYield[user] += ethAmount;\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.zap).zapOutETH(yield.vault, ethAmount, termId);\\r\\n\\r\\n        // (bool success, ) = payable(user).call{value: ethAmount}(\\\"\\\");\\r\\n        // require(success);\\r\\n    }\\r\\n\\r\\n    function toggleOptInYG(uint termId) external {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        LibCollateralV2.Collateral storage collateral = LibCollateralV2\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        require(\\r\\n            collateral.state == LibCollateralV2.CollateralStates.AcceptingCollateral,\\r\\n            \\\"Too late to change YG opt in\\\"\\r\\n        );\\r\\n        require(collateral.isCollateralMember[msg.sender], \\\"Not part of term\\\");\\r\\n\\r\\n        bool newDecision = !yield.hasOptedIn[msg.sender];\\r\\n\\r\\n        yield.hasOptedIn[msg.sender] = newDecision;\\r\\n        emit OnYGOptInToggled(termId, msg.sender, newDecision);\\r\\n    }\\r\\n\\r\\n    function addYieldProviders(address zap, address vault) external onlyOwner {\\r\\n        LibYieldGeneration.YieldProviders storage yieldProvider = LibYieldGeneration\\r\\n            ._yieldProviders();\\r\\n\\r\\n        yieldProvider.zaps.push(zap);\\r\\n        yieldProvider.vaults.push(vault);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3cf2701cd7adbeda8ed33d6e22ad2b2971295e88c55f3987cd6bdea1bfcc36d9\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"../libraries/LibTermV2.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(uint termId, address user, uint256 ethAmount) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x916cd38cb81f706628cb91ee4c262d2ee01fbb5132c1933c68e064adf0e1f72d\",\"license\":\"GPL-3.0\"},\"contracts/version-2/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3b3292fe56914118d35a404e6247d1d9395d5ed4d664693e72db6ec0ff721f3\",\"license\":\"GPL-3.0\"},\"contracts/version-2/libraries/LibCollateralV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralV2 {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5af5ea8b1351d64443776f7712a84b49fd36ac80c7c6c438756896a25d0c724\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        address[] zaps;\\r\\n        address[] vaults;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        address zap;\\r\\n        address vault;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x43636f87b823484826f26660cf6bfcac3c5c84e36ebb46483da19240da844608\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061063e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f01abab1461005157806327ff9f3514610066578063625b29311461007957806374635bf41461008c575b600080fd5b61006461005f36600461050d565b61009f565b005b610064610074366004610540565b61016d565b610064610087366004610559565b6102df565b61006461009a36600461057b565b610395565b6100a7610468565b7ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977805460018082019092557f54e8a8686ff29033917bc917388e94ee8b0e942325ab3b576948d3ffa3ebccb10180546001600160a01b039485166001600160a01b0319918216179091557ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8978805492830181556000527fe5591b53b1a2fd8dff683feb4bd68b5f3fa07da820c1872a04be039644835eda9091018054929093169116179055565b60008181527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff1660038111156101e2576101e26105b0565b146102345760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102885760405162461bcd60e51b815260206004820152601060248201526f4e6f742070617274206f66207465726d60801b604482015260640161022b565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b60008281527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96020526040808220600281018490556003810184905560048082015460058301548451632af34be360e11b81526001600160a01b039182169381019390935260248301889052935192949316926355e697c6928692604480820193929182900301818588803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b5050505050505050565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf960205260408120600381018054919284926103d79084906105dc565b90915550506001600160a01b0383166000908152600882016020526040812080548492906104069084906105f5565b909155505060048181015460058301546040516316d5e29b60e11b81526001600160a01b039182169381019390935260248301859052604483018790521690632dabc53690606401600060405180830381600087803b15801561037757600080fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146104ef5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840161022b565b565b80356001600160a01b038116811461050857600080fd5b919050565b6000806040838503121561052057600080fd5b610529836104f1565b9150610537602084016104f1565b90509250929050565b60006020828403121561055257600080fd5b5035919050565b6000806040838503121561056c57600080fd5b50508035926020909101359150565b60008060006060848603121561059057600080fd5b833592506105a0602085016104f1565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156105ef576105ef6105c6565b92915050565b808201808211156105ef576105ef6105c656fea2646970667358221220744ac61c68df50f3336fe6a65e13567a5c1c861f44b001bc2af7693b8571c36464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f01abab1461005157806327ff9f3514610066578063625b29311461007957806374635bf41461008c575b600080fd5b61006461005f36600461050d565b61009f565b005b610064610074366004610540565b61016d565b610064610087366004610559565b6102df565b61006461009a36600461057b565b610395565b6100a7610468565b7ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977805460018082019092557f54e8a8686ff29033917bc917388e94ee8b0e942325ab3b576948d3ffa3ebccb10180546001600160a01b039485166001600160a01b0319918216179091557ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8978805492830181556000527fe5591b53b1a2fd8dff683feb4bd68b5f3fa07da820c1872a04be039644835eda9091018054929093169116179055565b60008181527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff1660038111156101e2576101e26105b0565b146102345760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102885760405162461bcd60e51b815260206004820152601060248201526f4e6f742070617274206f66207465726d60801b604482015260640161022b565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b60008281527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96020526040808220600281018490556003810184905560048082015460058301548451632af34be360e11b81526001600160a01b039182169381019390935260248301889052935192949316926355e697c6928692604480820193929182900301818588803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b5050505050505050565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf960205260408120600381018054919284926103d79084906105dc565b90915550506001600160a01b0383166000908152600882016020526040812080548492906104069084906105f5565b909155505060048181015460058301546040516316d5e29b60e11b81526001600160a01b039182169381019390935260248301859052604483018790521690632dabc53690606401600060405180830381600087803b15801561037757600080fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146104ef5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b606482015260840161022b565b565b80356001600160a01b038116811461050857600080fd5b919050565b6000806040838503121561052057600080fd5b610529836104f1565b9150610537602084016104f1565b90509250929050565b60006020828403121561055257600080fd5b5035919050565b6000806040838503121561056c57600080fd5b50508035926020909101359150565b60008060006060848603121561059057600080fd5b833592506105a0602085016104f1565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156105ef576105ef6105c6565b92915050565b808201808211156105ef576105ef6105c656fea2646970667358221220744ac61c68df50f3336fe6a65e13567a5c1c861f44b001bc2af7693b8571c36464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositYG(uint256,uint256)": {
        "params": {
          "ethAmount": "The amount of collateral being deposited",
          "termId": "The term id for which the collateral is being deposited"
        }
      },
      "withdrawYG(uint256,address,uint256)": {
        "params": {
          "ethAmount": "The amount of collateral being withdrawn",
          "termId": "The term id for which the collateral is being withdrawn",
          "user": "The user who is withdrawing the collateral"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositYG(uint256,uint256)": {
        "notice": "This function is used to deposit collateral for yield generation"
      },
      "withdrawYG(uint256,address,uint256)": {
        "notice": "This function is used to withdraw collateral from yield generation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}