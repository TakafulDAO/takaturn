{
  "address": "0x5A5e3d1096996604b5b0342f8E8778ffDfF9D7be",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorAddressEthUsd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregatorAddressUsdUsdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sequencerUptimeFeedAddress",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4701224bf1d78d89d30bdca7f01858a371081b95fa04d82c9ea5c8e72566ff86",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "149064",
    "logsBloom": "0x
    "blockHash": "0x0d288ca9528d00a5d4dc357623bd860a7d734c6fee963b4491f9c75eac40689a",
    "transactionHash": "0x4701224bf1d78d89d30bdca7f01858a371081b95fa04d82c9ea5c8e72566ff86",
    "logs": [],
    "blockNumber": 37281329,
    "cumulativeGasUsed": "149064",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "170280041a9111201cdb7b99d57489f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddressEthUsd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorAddressUsdUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerUptimeFeedAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/version-2/DiamondInitV2.sol\":\"DiamondInitV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/version-2/DiamondInitV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermV2} from \\\"./libraries/LibTermV2.sol\\\";\\r\\n\\r\\n// todo: set zapAddress and vaultAddress\\r\\ncontract DiamondInitV2 {\\r\\n    function init(\\r\\n        address _aggregatorAddressEthUsd,\\r\\n        address _aggregatorAddressUsdUsdc,\\r\\n        address _sequencerUptimeFeedAddress\\r\\n    ) external {\\r\\n        LibTermV2.TermConsts storage termConsts = LibTermV2._termConsts();\\r\\n        termConsts.sequencerStartupTime = 3600; // The sequencer must be running for at least an hour before it's reliable\\r\\n        termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"] = _aggregatorAddressEthUsd;\\r\\n        termConsts.aggregatorsAddresses[\\\"USD/USDC\\\"] = _aggregatorAddressUsdUsdc;\\r\\n        termConsts.sequencerUptimeFeedAddress = _sequencerUptimeFeedAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83355b7523310cba5ade70fd2ed2ab2434349a49f58207672fa948674b82be0b\",\"license\":\"MIT\"},\"contracts/version-2/libraries/LibTermV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermV2 {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USD/USDC\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        bool expired;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa68e43ef3c17635d2e7cf4473b3ae4fc1541d5325b67508a3834a85fc000ef3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101b9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063184b955914610030575b600080fd5b61012261003e366004610140565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec45560408051661155120bd554d160ca1b81527f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec660078201819052825191829003602701822080546001600160a01b039788166001600160a01b031991821617909155675553442f5553444360c01b8352600883019190915291519081900360280190208054938516938216939093179092557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec58054919093169116179055565b005b80356001600160a01b038116811461013b57600080fd5b919050565b60008060006060848603121561015557600080fd5b61015e84610124565b925061016c60208501610124565b915061017a60408501610124565b9050925092509256fea264697066735822122067b1ad036995cd7b4c261749b5b70d94e696c1d7e3df684082acb8dc95173a5264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063184b955914610030575b600080fd5b61012261003e366004610140565b610e107f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec45560408051661155120bd554d160ca1b81527f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec660078201819052825191829003602701822080546001600160a01b039788166001600160a01b031991821617909155675553442f5553444360c01b8352600883019190915291519081900360280190208054938516938216939093179092557f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec58054919093169116179055565b005b80356001600160a01b038116811461013b57600080fd5b919050565b60008060006060848603121561015557600080fd5b61015e84610124565b925061016c60208501610124565b915061017a60408501610124565b9050925092509256fea264697066735822122067b1ad036995cd7b4c261749b5b70d94e696c1d7e3df684082acb8dc95173a5264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}