{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/facets/GettersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\r\n\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\n\r\ncontract GettersFacet is IGetters {\r\n    // TERM GETTERS\r\n    /// @return the current term id\r\n    /// @return the next term id\r\n    function getTermsId() external view returns (uint, uint) {\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        uint lastTermId = termStorage.nextTermId - 1;\r\n        uint nextTermId = termStorage.nextTermId;\r\n        return (lastTermId, nextTermId);\r\n    }\r\n\r\n    ///  @notice Gets the remaining registration period for a term\r\n    ///  @param termId the term id\r\n    ///  @return remaining contribution period\r\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        require(collateral.firstDepositTime != 0, \"Nobody has deposited yet\");\r\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\r\n            return 0;\r\n        } else {\r\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\r\n        }\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return the term struct\r\n    function getTermSummary(uint termId) external view returns (LibTerm.Term memory) {\r\n        return (LibTerm._termStorage().terms[termId]);\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @return the term ids the participant is part of\r\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\r\n        LibTerm.TermStorage storage termStorage = LibTerm._termStorage();\r\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\r\n        return participantTermIds;\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @param state the term state\r\n    /// @return the term ids the participant is part of, giving the state of the term\r\n    function getJoinedTermsByState(\r\n        address participant,\r\n        LibTerm.TermStates state\r\n    ) external view returns (uint[] memory) {\r\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\r\n        uint[] memory userTermsByState;\r\n        uint termscounter;\r\n        uint joinedTermsLength = joinedTerms.length;\r\n        for (uint i; i < joinedTermsLength; ) {\r\n            if (LibTerm._termStorage().terms[joinedTerms[i]].state == state) {\r\n                userTermsByState[termscounter] = i;\r\n                unchecked {\r\n                    ++termscounter;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return userTermsByState;\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @return the term ids the participant is part of, giving the state of the term\r\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\r\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\r\n        uint[] memory termsExpelled;\r\n        uint termscounter;\r\n        uint joinedTermsLength = joinedTerms.length;\r\n        for (uint i; i < joinedTermsLength; ) {\r\n            if (wasExpelled(joinedTerms[i], participant)) {\r\n                termsExpelled[termscounter] = i;\r\n                unchecked {\r\n                    ++termscounter;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return termsExpelled;\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining time in the current cycle\r\n    function getRemainingCycles(uint termId) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n\r\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining time in the current cycle\r\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\r\n        if (block.timestamp > cycleEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return cycleEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining cycles contribution\r\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n\r\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\r\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\r\n            term.contributionAmount * 10 ** 18\r\n        );\r\n\r\n        return remainingCycles * contributionAmountWei;\r\n    }\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @param depositor the depositor address\r\n    /// @param termId the collateral id\r\n    /// @return isCollateralMember, collateralMembersBank, collateralPaymentBank\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        return (\r\n            collateral.isCollateralMember[depositor],\r\n            collateral.collateralMembersBank[depositor],\r\n            collateral.collateralPaymentBank[depositor],\r\n            collateral.collateralDepositByUser[depositor]\r\n        );\r\n    }\r\n\r\n    /// @param termId the collateral id\r\n    /// @return collateral: initialized, state, firstDepositTime, counterMembers, depositors, collateralDeposit\r\n    function getCollateralSummary(\r\n        uint termId\r\n    ) external view returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        return (\r\n            collateral.initialized,\r\n            collateral.state, // Current state of Collateral\r\n            collateral.firstDepositTime, // Time when the first deposit was made\r\n            collateral.counterMembers, // Current member count\r\n            collateral.depositors // List of depositors\r\n        );\r\n    }\r\n\r\n    /// @notice Called to check the minimum collateral amount to deposit in wei\r\n    /// @return amount the minimum collateral amount to deposit in wei\r\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\r\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\r\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\r\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\r\n    function minCollateralToDeposit(\r\n        uint termId,\r\n        uint depositorIndex\r\n    ) external view returns (uint amount) {\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n\r\n        uint contributionAmountInWei = getToCollateralConversionRate(\r\n            term.contributionAmount * 10 ** 18\r\n        );\r\n\r\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\r\n    }\r\n\r\n    /// @notice Called to check how much collateral a user can withdraw\r\n    /// @param termId term id\r\n    /// @param user depositor address\r\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\r\n    function getWithdrawableUserBalance(\r\n        uint termId,\r\n        address user\r\n    ) external view returns (uint allowedWithdrawal) {\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint userCollateral = collateral.collateralMembersBank[user];\r\n        uint availableYield = yield.availableYield[user];\r\n\r\n        if (collateral.state == LibCollateral.CollateralStates.ReleasingCollateral) {\r\n            allowedWithdrawal = userCollateral + availableYield;\r\n        } else if (collateral.state == LibCollateral.CollateralStates.CycleOngoing) {\r\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\r\n            uint minRequiredCollateral = (IGetters(address(this)).getRemainingCyclesContributionWei(\r\n                termId\r\n            ) * 15) / 10; // 1.5 X RCC in wei\r\n\r\n            // Collateral must be higher than 1.5 X RCC\r\n            if (userCollateral > minRequiredCollateral) {\r\n                allowedWithdrawal = minRequiredCollateral - userCollateral + availableYield; // We allow to withdraw the positive difference\r\n            } else {\r\n                allowedWithdrawal = 0;\r\n            }\r\n        } else {\r\n            allowedWithdrawal = 0;\r\n        }\r\n    }\r\n\r\n    // FUND GETTERS\r\n\r\n    /// @notice function to get the cycle information in one go\r\n    /// @param termId the fund id\r\n    /// @return initialized, currentState, stableToken, currentCycle, beneficiariesOrder, fundStart, currentCycle, totalAmountOfCycles, fundEnd\r\n    function getFundSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibFund.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\r\n    {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        return (\r\n            fund.initialized,\r\n            fund.currentState,\r\n            fund.stableToken,\r\n            fund.beneficiariesOrder,\r\n            fund.fundStart,\r\n            fund.fundEnd,\r\n            fund.currentCycle,\r\n            fund.totalAmountOfCycles\r\n        );\r\n    }\r\n\r\n    /// @notice function to get the current beneficiary\r\n    /// @param termId the fund id\r\n    /// @return the current beneficiary\r\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\r\n    }\r\n\r\n    /// @notice function to know if a user was expelled before\r\n    /// @param termId the fund id\r\n    /// @param user the user to check\r\n    /// @return true if the user was expelled before\r\n    function wasExpelled(uint termId, address user) public view returns (bool) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @notice function to see if a user is exempted from paying a cycle\r\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        return fund.isExemptedOnCycle[cycle].exempted[user];\r\n    }\r\n\r\n    /// @notice function to get cycle information of a specific participant\r\n    /// @param participant the user to get the info from\r\n    /// @param termId the fund id\r\n    /// @return isParticipant, true if is participant\r\n    /// @return isBeneficiary, true if has been beneficiary\r\n    /// @return paidThisCycle, true if has paid the current cycle\r\n    /// @return autoPayEnabled, true if auto pay is enabled\r\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\r\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint termId\r\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        return (\r\n            fund.isParticipant[participant],\r\n            fund.isBeneficiary[participant],\r\n            fund.paidThisCycle[participant],\r\n            fund.autoPayEnabled[participant],\r\n            fund.beneficiariesPool[participant],\r\n            fund.beneficiariesFrozenPool[participant]\r\n        );\r\n    }\r\n\r\n    /// @notice returns the time left to contribute for this cycle\r\n    /// @param termId the fund id\r\n    /// @return the time left to contribute\r\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\r\n        LibFund.Fund storage fund = LibFund._fundStorage().funds[termId];\r\n        LibTerm.Term storage term = LibTerm._termStorage().terms[termId];\r\n        if (fund.currentState != LibFund.FundStates.AcceptingContributions) {\r\n            return 0;\r\n        }\r\n\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\r\n        uint contributionEndTimestamp = term.cycleTime *\r\n            (fund.currentCycle - 1) +\r\n            fund.fundStart +\r\n            term.contributionPeriod;\r\n        if (block.timestamp > contributionEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return contributionEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // CONVERSION GETTERS\r\n\r\n    /// @notice Gets latest ETH / USD price\r\n    /// @return uint latest price in Wei Note: 18 decimals\r\n    function getLatestPrice() public view returns (uint) {\r\n        LibTerm.TermConsts storage termConsts = LibTerm._termConsts();\r\n        // (\r\n        //     ,\r\n        //     /*uint80 roundID*/ int256 answer,\r\n        //     uint256 startedAt /*uint256 updatedAt*/ /*uint80 answeredInRound*/,\r\n        //     ,\r\n\r\n        // ) = AggregatorV3Interface(termConsts.sequencerUptimeFeedAddress).latestRoundData(); //8 decimals\r\n\r\n        // // Answer == 0: Sequencer is up\r\n        // // Answer == 1: Sequencer is down\r\n        // require(answer == 0, \"Sequencer down\");\r\n\r\n        // //We must wait at least an hour after the sequencer started up\r\n        // require(\r\n        //     termConsts.sequencerStartupTime <= block.timestamp - startedAt,\r\n        //     \"Sequencer starting up\"\r\n        // );\r\n\r\n        (\r\n            uint80 roundID_ethUSD,\r\n            int256 price_ethUSD,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\r\n            uint80 answeredInRound_ethUSD\r\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"ETH/USD\"]).latestRoundData(); //8 decimals\r\n\r\n        // Check if chainlink data is not stale or incorrect\r\n        require(\r\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        (\r\n            uint80 roundID_usdUSDC,\r\n            int256 price_usdUSDC,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\r\n            uint80 answeredInRound_usdUSDC\r\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"USDC/USD\"]).latestRoundData(); //8 decimals\r\n\r\n        require(\r\n            timeStamp_usdUSDC != 0 &&\r\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\r\n                price_usdUSDC > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\r\n\r\n        return uint(ethUSDC * 10 ** 18); //18 decimals\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in USD to ETH\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param USDAmount The amount in USD\r\n    /// @return uint converted amount in wei\r\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\r\n        uint ethPrice = getLatestPrice();\r\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\r\n        return USDAmountInEth;\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in ETH to USD\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param ethAmount The amount in ETH\r\n    /// @return uint converted amount in USD correct to 18 decimals\r\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\r\n        // NOTE: This will be made internal\r\n        uint ethPrice = getLatestPrice();\r\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\r\n        return ethAmountInUSD;\r\n    }\r\n\r\n    // YIELD GENERATION GETTERS\r\n\r\n    /// @notice This function is used to check if a user has opted in for yield generation\r\n    /// @param termId The term id for which the check is being made\r\n    /// @param user The user for which the check is being made\r\n    /// @return True if the user has opted in\r\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        return yield.hasOptedIn[user];\r\n    }\r\n\r\n    /// @notice This function is used to get a user APY\r\n    /// @param termId The term id for which the APY is being calculated\r\n    /// @param user The user for which the APY is being calculated\r\n    /// @return The APY for the user\r\n    function userAPY(uint termId, address user) external returns (uint256) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\r\n\r\n        return\r\n            (userYieldGenerated(termId, user) / yield.currentTotalDeposit) /\r\n            (elaspedTime * 365 days);\r\n    }\r\n\r\n    /// @notice This function is used to get a term APY\r\n    /// @param termId The term id for which the APY is being calculated\r\n    /// @return The APY for the term\r\n    function termAPY(uint termId) external returns (uint256) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\r\n\r\n        return (totalYieldGenerated(termId) / yield.currentTotalDeposit) / (elaspedTime * 365 days);\r\n    }\r\n\r\n    /// @notice This function is used to get the yield distribution ratio for a user\r\n    /// @param termId The term id for which the ratio is being calculated\r\n    /// @param user The user for which the ratio is being calculated\r\n    /// @return The yield distribution ratio for the user\r\n    function yieldDistributionRatio(uint termId, address user) public view returns (uint256) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n        LibCollateral.Collateral storage collateral = LibCollateral\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        return collateral.collateralMembersBank[user] / yield.currentTotalDeposit;\r\n    }\r\n\r\n    /// @notice This function is used to get the total yield generated for a term\r\n    /// @param termId The term id for which the yield is being calculated\r\n    /// @return The total yield generated for the term\r\n    function totalYieldGenerated(uint termId) public returns (uint) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint totalWithdrawnYield;\r\n\r\n        address[] memory arrayToCheck = yield.yieldUsers;\r\n        uint arrayLength = arrayToCheck.length;\r\n\r\n        for (uint i; i < arrayLength; ) {\r\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return\r\n            totalWithdrawnYield +\r\n            (yield.totalDeposit -\r\n                IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"]).balanceOf(termId));\r\n    }\r\n\r\n    /// @notice This function is used to get the total yield generated for a user\r\n    /// @param termId The term id for which the yield is being calculated\r\n    /// @param user The user for which the yield is being calculated\r\n    /// @return The total yield generated for the user\r\n    function userYieldGenerated(uint termId, address user) public returns (uint) {\r\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        return\r\n            yield.withdrawnYield[user] +\r\n            totalYieldGenerated(termId) *\r\n            yieldDistributionRatio(termId, user);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Collateral Interface\r\n/// @author Aisha EL Allam\r\n/// @notice This is used to allow fund to easily communicate with collateral\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\n\r\ninterface ICollateral {\r\n    // Function cannot be called at this time.\r\n    error FunctionInvalidAtThisState();\r\n\r\n    function setStateOwner(uint termId, LibCollateral.CollateralStates newState) external;\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param term the term object\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    function requestContribution(\r\n        LibTerm.Term memory term,\r\n        address[] calldata defaulters\r\n    ) external returns (address[] memory);\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId The term id\r\n    function withdrawCollateral(uint termId) external;\r\n\r\n    /// @param termId The term id\r\n    /// @param participant The participant address\r\n    function withdrawReimbursement(uint termId, address participant) external;\r\n\r\n    /// @param termId The term id\r\n    function releaseCollateral(uint termId) external;\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param termId The term id\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    function emptyCollateralAfterEnd(uint termId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IGetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {LibTerm} from \"../libraries/LibTerm.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\ninterface IGetters {\r\n    // TERM GETTERS\r\n\r\n    /// @notice Gets the current and next term id\r\n    /// @return current termID\r\n    /// @return next termID\r\n    function getTermsId() external view returns (uint, uint);\r\n\r\n    /// @notice Must return 0 before starting the fund\r\n    /// @param termId the id of the term\r\n    /// @return remaining registration time in seconds\r\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\r\n\r\n    /// @notice Get current information of a term\r\n    /// @param termId the id of the term\r\n    /// @return Term Struct, see LibTerm.sol\r\n    function getTermSummary(uint termId) external view returns (LibTerm.Term memory);\r\n\r\n    /// @notice Gets all terms a user has previously joined\r\n    /// @param participant address\r\n    /// @return List of termIDs\r\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\r\n    /// @param participant address\r\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\r\n    /// @return List of termIDs\r\n    function getJoinedTermsByState(\r\n        address participant,\r\n        LibTerm.TermStates state\r\n    ) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all terms a user was previously expelled from\r\n    /// @param participant address\r\n    /// @return List of termIDs\r\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all remaining cycles of a term\r\n    /// @param termId the id of the term\r\n    /// @return remaining cycles\r\n    function getRemainingCycles(uint termId) external view returns (uint);\r\n\r\n    /// @notice Must be 0 before starting a new cycle\r\n    /// @param termId the id of the term\r\n    /// @return remaining cycle time in seconds\r\n    function getRemainingCycleTime(uint termId) external view returns (uint);\r\n\r\n    /// @notice Gets the expected remaining contribution amount for users in a term\r\n    /// @param termId the id of the term\r\n    /// @return total remaining contribution in wei\r\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @notice Gets a users collateral summary\r\n    /// @param depositor address\r\n    /// @param termId the id of the term\r\n    /// @return if the user is a true member of the term\r\n    /// @return current users locked collateral balance in wei\r\n    /// @return current users unlocked collateral balance in wei\r\n    /// @return initial users deposit in wei\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint);\r\n\r\n    /// @notice Gets the collateral summary of a term\r\n    /// @param termId the id of the term\r\n    /// @return if collateral is initialized\r\n    /// @return current state of the collateral, see States struct in LibCollateral.sol\r\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\r\n    /// @return current member count\r\n    /// @return list of depositors\r\n    function getCollateralSummary(\r\n        uint termId\r\n    ) external view returns (bool, LibCollateral.CollateralStates, uint, uint, address[] memory);\r\n\r\n    /// @notice Gets the required minimum collateral deposit based on the position\r\n    /// @param termId the term id\r\n    /// @param depositorIndex the index of the depositor\r\n    /// @return required minimum in wei\r\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\r\n\r\n    /// @notice Called to check how much collateral a user can withdraw\r\n    /// @param termId term id\r\n    /// @param user depositor address\r\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\r\n    function getWithdrawableUserBalance(\r\n        uint termId,\r\n        address user\r\n    ) external view returns (uint allowedWithdrawal);\r\n\r\n    // FUND GETTERS\r\n    /// @notice Gets the fund summary of a term\r\n    /// @param termId the id of the term\r\n    /// @return if fund is initialized\r\n    /// @return current state of the fund, see States struct in LibFund.sol\r\n    /// @return stablecoin address used\r\n    /// @return list for order of beneficiaries\r\n    /// @return when the fund started in seconds\r\n    /// @return when the fund ended in seconds, 0 otherwise\r\n    /// @return current cycle of fund\r\n    /// @return total amount of cycles in this fund/term\r\n    function getFundSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibFund.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\r\n\r\n    /// @notice Gets the current beneficiary of a term\r\n    /// @param termId the id of the term\r\n    /// @return user address\r\n    function getCurrentBeneficiary(uint termId) external view returns (address);\r\n\r\n    /// @notice Gets if a user is expelled from a specefic term\r\n    /// @param termId the id of the term\r\n    /// @param user address\r\n    /// @return true or false\r\n    function wasExpelled(uint termId, address user) external view returns (bool);\r\n\r\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\r\n    /// @param termId the id of the term\r\n    /// @param cycle number\r\n    /// @param user address\r\n    /// @return true or false\r\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\r\n\r\n    /// @notice Gets a user information of in a fund\r\n    /// @param participant address\r\n    /// @param termId the id of the term\r\n    /// @return if the user is a true member of the fund/term\r\n    /// @return if the user was beneficiary in the past\r\n    /// @return if the user paid for the current cycle\r\n    /// @return if the user has autopay enabled\r\n    /// @return users money pot balance\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint termId\r\n    ) external view returns (bool, bool, bool, bool, uint, bool);\r\n\r\n    /// @notice Must return 0 before closing a contribution period\r\n    /// @param termId the id of the term\r\n    /// @return remaining contribution time in seconds\r\n    function getRemainingContributionTime(uint termId) external view returns (uint);\r\n\r\n    // CONVERSION GETTERS\r\n\r\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\r\n\r\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\r\n\r\n    // YIELD GENERATION GETTERS\r\n\r\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\r\n\r\n    function userAPY(uint termId, address user) external returns (uint256);\r\n\r\n    function termAPY(uint termId) external returns (uint256);\r\n\r\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\r\n\r\n    function totalYieldGenerated(uint termId) external returns (uint);\r\n\r\n    function userYieldGenerated(uint termId, address user) external returns (uint);\r\n}\r\n"
    },
    "contracts/interfaces/IZaynVaultV2TakaDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynVaultV2TakaDao {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function depositZap(uint256 _amount, uint256 _term) external;\r\n\r\n    function withdrawZap(uint256 _shares, uint256 _term) external;\r\n\r\n    function want() external pure returns (address);\r\n\r\n    function balance() external pure returns (uint256);\r\n\r\n    function strategy() external pure returns (address);\r\n\r\n    function balanceOf(uint256 term) external returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/libraries/LibCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibCollateral {\r\n    uint public constant COLLATERAL_VERSION = 1;\r\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\r\n\r\n    enum CollateralStates {\r\n        AcceptingCollateral, // Initial state where collateral are deposited\r\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\r\n        ReleasingCollateral, // Triggered when the fund closes\r\n        Closed // Triggered when all depositors withdraw their collaterals\r\n    }\r\n\r\n    struct DefaulterState {\r\n        bool payWithCollateral;\r\n        bool payWithFrozenPool;\r\n        bool gettingExpelled;\r\n        bool isBeneficiary;\r\n    }\r\n\r\n    struct Collateral {\r\n        bool initialized;\r\n        CollateralStates state;\r\n        uint firstDepositTime;\r\n        uint counterMembers;\r\n        address[] depositors;\r\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\r\n        mapping(address => uint) collateralMembersBank; // Users main balance\r\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\r\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\r\n    }\r\n\r\n    struct CollateralStorage {\r\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\r\n    }\r\n\r\n    function _collateralExists(uint termId) internal view returns (bool) {\r\n        return _collateralStorage().collaterals[termId].initialized;\r\n    }\r\n\r\n    function _collateralStorage()\r\n        internal\r\n        pure\r\n        returns (CollateralStorage storage collateralStorage)\r\n    {\r\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\r\n        assembly {\r\n            collateralStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\n\r\nlibrary LibFund {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    uint public constant FUND_VERSION = 1;\r\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\r\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\r\n\r\n    enum FundStates {\r\n        InitializingFund, // Time before the first cycle has started\r\n        AcceptingContributions, // Triggers at the start of a cycle\r\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\r\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\r\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\r\n    }\r\n\r\n    struct PayExemption {\r\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\r\n    }\r\n\r\n    struct Fund {\r\n        bool initialized;\r\n        FundStates currentState; // Variable to keep track of the different FundStates\r\n        IERC20 stableToken; // Instance of the stable token\r\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\r\n        uint fundStart; // Timestamp of the start of the fund\r\n        uint fundEnd; // Timestamp of the end of the fund\r\n        uint currentCycle; // Index of current cycle\r\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\r\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\r\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\r\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\r\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\r\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\r\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\r\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\r\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\r\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\r\n        uint totalAmountOfCycles;\r\n    }\r\n\r\n    struct FundStorage {\r\n        mapping(uint => Fund) funds; // termId => Fund struct\r\n    }\r\n\r\n    function _fundExists(uint termId) internal view returns (bool) {\r\n        return _fundStorage().funds[termId].initialized;\r\n    }\r\n\r\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\r\n        bytes32 position = FUND_STORAGE_POSITION;\r\n        assembly {\r\n            fundStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibTerm.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibTerm {\r\n    uint public constant TERM_VERSION = 2;\r\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\r\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\r\n\r\n    enum TermStates {\r\n        InitializingTerm,\r\n        ActiveTerm,\r\n        ExpiredTerm,\r\n        ClosedTerm\r\n    }\r\n\r\n    struct TermConsts {\r\n        uint sequencerStartupTime;\r\n        address sequencerUptimeFeedAddress;\r\n        mapping(string => address) aggregatorsAddresses; // \"ETH/USD\" => address , \"USDC/USD\" => address\r\n    }\r\n\r\n    struct Term {\r\n        bool initialized;\r\n        TermStates state;\r\n        address termOwner;\r\n        uint creationTime;\r\n        uint termId;\r\n        uint registrationPeriod; // Time for registration (seconds)\r\n        uint totalParticipants; // Max number of participants\r\n        uint cycleTime; // Time for single cycle (seconds)\r\n        uint contributionAmount; // Amount user must pay per cycle (USD)\r\n        uint contributionPeriod; // The portion of cycle user must make payment\r\n        address stableTokenAddress;\r\n    }\r\n\r\n    struct TermStorage {\r\n        uint nextTermId;\r\n        mapping(uint => Term) terms; // termId => Term struct\r\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\r\n    }\r\n\r\n    function _termExists(uint termId) internal view returns (bool) {\r\n        return _termStorage().terms[termId].initialized;\r\n    }\r\n\r\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\r\n        bytes32 position = TERM_CONSTS_POSITION;\r\n        assembly {\r\n            termConsts.slot := position\r\n        }\r\n    }\r\n\r\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\r\n        bytes32 position = TERM_STORAGE_POSITION;\r\n        assembly {\r\n            termStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibYieldGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibYieldGeneration {\r\n    uint public constant YIELD_GENERATION_VERSION = 1;\r\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\"diamond.standard.yield.providers\");\r\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\"diamond.standard.yield.storage\");\r\n\r\n    enum YGProviders {\r\n        InHouse,\r\n        ZaynFi\r\n    }\r\n\r\n    // Both index 0 are reserved for ZaynFi\r\n    struct YieldProviders {\r\n        mapping(string => address) providerAddresses;\r\n    }\r\n\r\n    struct YieldGeneration {\r\n        bool initialized;\r\n        YGProviders provider;\r\n        mapping(string => address) providerAddresses;\r\n        uint startTimeStamp;\r\n        uint totalDeposit;\r\n        uint currentTotalDeposit;\r\n        uint totalShares;\r\n        address[] yieldUsers;\r\n        mapping(address => bool) hasOptedIn;\r\n        mapping(address => uint256) withdrawnYield;\r\n        mapping(address => uint256) withdrawnCollateral;\r\n        mapping(address => uint256) availableYield;\r\n    }\r\n\r\n    struct YieldStorage {\r\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\r\n    }\r\n\r\n    function _yieldExists(uint termId) internal view returns (bool) {\r\n        return _yieldStorage().yields[termId].initialized;\r\n    }\r\n\r\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\r\n        bytes32 position = YIELD_PROVIDERS_POSITION;\r\n        assembly {\r\n            yieldProviders.slot := position\r\n        }\r\n    }\r\n\r\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\r\n        bytes32 position = YIELD_STORAGE_POSITION;\r\n        assembly {\r\n            yieldStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}