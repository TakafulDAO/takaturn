{
  "address": "0xa9D1D67189d9bf0D127363F71F470E4A7e642D84",
  "abi": [
    {
      "inputs": [],
      "name": "FunctionInvalidAtThisState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnCollateralStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnFrozenMoneyPotLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReimbursementWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "emptyCollateralAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTerm.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTerm.Term",
          "name": "term",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "defaulters",
          "type": "address[]"
        }
      ],
      "name": "requestContribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "withdrawReimbursement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b4fd133c0c5bee969016bc9c02a26f546b649d1615554b38feacdbd9049f269",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1836057",
    "logsBloom": "0x
    "blockHash": "0xc9d1192a1bd7b5d0fe9c24b17497e677c1fc9bbea7c94630cabcc6ac8c7319a3",
    "transactionHash": "0x4b4fd133c0c5bee969016bc9c02a26f546b649d1615554b38feacdbd9049f269",
    "logs": [],
    "blockNumber": 45109565,
    "cumulativeGasUsed": "1836057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "d56c373fa6e3acb1f7b405801ddac8d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FunctionInvalidAtThisState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnCollateralStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnFrozenMoneyPotLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReimbursementWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"emptyCollateralAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTerm.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTerm.Term\",\"name\":\"term\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"defaulters\",\"type\":\"address[]\"}],\"name\":\"requestContribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"withdrawReimbursement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aisha El Allam\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"params\":{\"termId\":\"The term id\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"releaseCollateral(uint256)\":{\"params\":{\"termId\":\"term id\"}},\"requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"details\":\"Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\",\"params\":{\"defaulters\":\"Addressess of all defaulters of the current cycle\"},\"returns\":{\"_0\":\"expellants array of addresses that were expelled\"}},\"withdrawCollateral(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"termId\":\"term id\"}},\"withdrawReimbursement(uint256,address)\":{\"params\":{\"depositor\":\"Address of the depositor\",\"termId\":\"term id\"}}},\"title\":\"Takaturn Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the Collateral after 180 days\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"notice\":\"Called from Fund contract when someone defaults\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Called by each member after during or at the end of the term to withraw collateral\"}},\"notice\":\"This is used to operate the Takaturn collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/CollateralFacet.sol\":\"CollateralFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/CollateralFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {LibTermOwnership} from \\\"../libraries/LibTermOwnership.sol\\\";\\r\\n\\r\\n/// @title Takaturn Collateral\\r\\n/// @author Aisha El Allam\\r\\n/// @notice This is used to operate the Takaturn collateral\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract CollateralFacet is ICollateral {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralStorage.CollateralStates indexed oldState,\\r\\n        LibCollateralStorage.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnCollateralWithdrawal(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        uint indexed collateralAmount\\r\\n    );\\r\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\\r\\n    event OnFrozenMoneyPotLiquidated(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        uint indexed amount\\r\\n    );\\r\\n\\r\\n    /// @param termId term id\\r\\n    /// @param _state collateral state\\r\\n    modifier atState(uint termId, LibCollateralStorage.CollateralStates _state) {\\r\\n        _atState(termId, _state);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTermOwner(uint termId) {\\r\\n        LibTermOwnership._ensureTermOwner(termId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param defaulters Addressess of all defaulters of the current cycle\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function requestContribution(\\r\\n        LibTerm.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    )\\r\\n        external\\r\\n        atState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing)\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[term.termId];\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[term.termId];\\r\\n\\r\\n        (uint collateralToDistribute, address[] memory expellants) = _solveDefaulters(\\r\\n            collateral,\\r\\n            term,\\r\\n            fund,\\r\\n            defaulters\\r\\n        );\\r\\n\\r\\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _findNonBeneficiaries(\\r\\n            collateral,\\r\\n            fund\\r\\n        );\\r\\n\\r\\n        if (nonBeneficiaryCounter > 0) {\\r\\n            // This case can only happen when what?\\r\\n            // Exempt non beneficiaries from paying an early expellant's cycle\\r\\n            uint expellantsLength = expellants.length;\\r\\n            for (uint i; i < expellantsLength; ) {\\r\\n                _exemptNonBeneficiariesFromPaying(\\r\\n                    fund,\\r\\n                    expellants[i],\\r\\n                    nonBeneficiaryCounter,\\r\\n                    nonBeneficiaries\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Finally, divide the share equally among non-beneficiaries //todo: check if this is still needed\\r\\n            collateralToDistribute = collateralToDistribute / nonBeneficiaryCounter;\\r\\n            for (uint i; i < nonBeneficiaryCounter; ) {\\r\\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += collateralToDistribute;\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice Called to exempt users from needing to pay\\r\\n    /// @param _fund Fund storage\\r\\n    /// @param _expellant The expellant in question\\r\\n    /// @param _nonBeneficiaries All non-beneficiaries at this time\\r\\n    function _exemptNonBeneficiariesFromPaying(\\r\\n        LibFundStorage.Fund storage _fund,\\r\\n        address _expellant,\\r\\n        uint _nonBeneficiaryCounter,\\r\\n        address[] memory _nonBeneficiaries\\r\\n    ) internal {\\r\\n        if (!_fund.isBeneficiary[_expellant]) {\\r\\n            uint expellantBeneficiaryCycle;\\r\\n\\r\\n            uint beneficiariesLength = _fund.beneficiariesOrder.length;\\r\\n            for (uint i; i < beneficiariesLength; ) {\\r\\n                if (_expellant == _fund.beneficiariesOrder[i]) {\\r\\n                    expellantBeneficiaryCycle = i + 1;\\r\\n                    break;\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (uint i; i < _nonBeneficiaryCounter; ) {\\r\\n                _fund.isExemptedOnCycle[expellantBeneficiaryCycle].exempted[\\r\\n                    _nonBeneficiaries[i]\\r\\n                ] = true;\\r\\n                // TODO: need to test this\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId term id\\r\\n    function withdrawCollateral(uint termId) external {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint userCollateral = collateral.collateralMembersBank[msg.sender];\\r\\n        require(userCollateral > 0, \\\"Collateral empty\\\");\\r\\n\\r\\n        bool success;\\r\\n        // Withdraw all the user has\\r\\n        if (collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral) {\\r\\n            collateral.collateralMembersBank[msg.sender] = 0;\\r\\n\\r\\n            _withdrawFromYield(termId, msg.sender, userCollateral, yield);\\r\\n            (success, ) = payable(msg.sender).call{value: userCollateral}(\\\"\\\");\\r\\n\\r\\n            --collateral.counterMembers; // todo: Is this needed?\\r\\n\\r\\n            emit OnCollateralWithdrawal(termId, msg.sender, userCollateral);\\r\\n        }\\r\\n        // Or withdraw partially\\r\\n        else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\r\\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\r\\n            uint minRequiredCollateral = (IGetters(address(this)).getRemainingCyclesContributionWei(\\r\\n                termId\\r\\n            ) * 15) / 10; // 1.5 X RCC in wei\\r\\n\\r\\n            // Collateral must be higher than 1.5 X RCC\\r\\n            if (userCollateral > minRequiredCollateral) {\\r\\n                uint allowedWithdrawal = userCollateral - minRequiredCollateral; // We allow to withdraw the positive difference\\r\\n                collateral.collateralMembersBank[msg.sender] -= allowedWithdrawal;\\r\\n\\r\\n                _withdrawFromYield(termId, msg.sender, allowedWithdrawal, yield);\\r\\n                (success, ) = payable(msg.sender).call{value: allowedWithdrawal}(\\\"\\\");\\r\\n\\r\\n                emit OnCollateralWithdrawal(termId, msg.sender, allowedWithdrawal);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(success, \\\"Withdraw failed\\\");\\r\\n        if (yield.hasOptedIn[msg.sender]) {\\r\\n            IYGFacetZaynFi(address(this)).claimAvailableYield(termId, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId term id\\r\\n    /// @param depositor Address of the depositor\\r\\n    function withdrawReimbursement(uint termId, address depositor) external {\\r\\n        require(LibFundStorage._fundExists(termId), \\\"Fund does not exists\\\");\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        uint amount = collateral.collateralPaymentBank[depositor];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n        collateral.collateralPaymentBank[depositor] = 0;\\r\\n\\r\\n        (bool success, ) = payable(depositor).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(termId, depositor, amount);\\r\\n    }\\r\\n\\r\\n    /// @param termId term id\\r\\n    function releaseCollateral(uint termId) external {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        require(fund.currentState == LibFundStorage.FundStates.FundClosed, \\\"Wrong state\\\");\\r\\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\r\\n        return _isUnderCollaterized(termId, member);\\r\\n    }\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    /// @param termId The term id\\r\\n    function emptyCollateralAfterEnd(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        onlyTermOwner(termId)\\r\\n        atState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral)\\r\\n    {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        (, , , , , uint fundEnd, , ) = IGetters(address(this)).getFundSummary(termId);\\r\\n        require(block.timestamp > fundEnd + 180 days, \\\"Can't empty yet\\\");\\r\\n\\r\\n        uint totalToWithdraw;\\r\\n        // todo: event for withdrawal\\r\\n        uint depositorsLength = collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            address depositor = collateral.depositors[i];\\r\\n            uint amount = collateral.collateralMembersBank[depositor];\\r\\n            uint paymentAmount = collateral.collateralPaymentBank[depositor];\\r\\n\\r\\n            collateral.collateralMembersBank[depositor] = 0;\\r\\n            collateral.collateralPaymentBank[depositor] = 0;\\r\\n            uint withdrawnYield = _withdrawFromYield(termId, depositor, amount, yield);\\r\\n\\r\\n            totalToWithdraw += (amount + paymentAmount + withdrawnYield);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.Closed);\\r\\n\\r\\n        (bool success, ) = payable(msg.sender).call{value: totalToWithdraw}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _termId The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\r\\n\\r\\n        if (!LibFundStorage._fundExists(_termId)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , collateralLimit, ) = IGetters(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _termId\\r\\n            );\\r\\n        } else {\\r\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\r\\n        }\\r\\n\\r\\n        return (memberCollateral < collateralLimit);\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _term Term storage\\r\\n    /// @param _defaulters Defaulters array\\r\\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function _solveDefaulters(\\r\\n        LibCollateralStorage.Collateral storage _collateral,\\r\\n        LibTerm.Term memory _term,\\r\\n        LibFundStorage.Fund storage _fund,\\r\\n        address[] memory _defaulters\\r\\n    ) internal returns (uint, address[] memory) {\\r\\n        // require(_defaulters.length > 0, \\\"No defaulters\\\"); // todo: needed? only call this function when there are defaulters\\r\\n\\r\\n        address[] memory expellants = new address[](_defaulters.length);\\r\\n        uint expellantsCounter;\\r\\n        uint distributedCollateral;\\r\\n\\r\\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\\r\\n            _term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\\r\\n        for (uint i; i < _defaulters.length; ) {\\r\\n            LibCollateralStorage.DefaulterState memory defaulterState;\\r\\n            defaulterState.isBeneficiary = _fund.isBeneficiary[_defaulters[i]];\\r\\n            uint collateralAmount = _collateral.collateralMembersBank[_defaulters[i]];\\r\\n            if (defaulterState.isBeneficiary) {\\r\\n                // Has the user been beneficiary?\\r\\n                if (_isUnderCollaterized(_term.termId, _defaulters[i])) {\\r\\n                    // Is the collateral below 1.0 X RCC?\\r\\n                    if (_fund.beneficiariesFrozenPool[_defaulters[i]]) {\\r\\n                        // Is the pool currently frozen?\\r\\n                        if (collateralAmount >= contributionAmountWei) {\\r\\n                            // Does the user's collateral cover a cycle?\\r\\n                            defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                            defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\r\\n                            defaulterState.gettingExpelled = false; // Not expelled\\r\\n                        } else {\\r\\n                            // We don't have to check exact amounts because the pool would always be deducted by consistent amounts\\r\\n                            if (_fund.beneficiariesPool[_defaulters[i]] > 0) {\\r\\n                                // Does the frozen stable token portion of the pool contain anything?\\r\\n                                defaulterState.payWithCollateral = false; // Do not pay with collateral\\r\\n                                defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\r\\n                                defaulterState.gettingExpelled = false; // Not expelled\\r\\n                            } else {\\r\\n                                // Is whatever is left from the collateral + received collateral portion of money pool below 1.0 X RCC?\\r\\n                                if (\\r\\n                                    collateralAmount +\\r\\n                                        _collateral.collateralPaymentBank[_defaulters[i]] >=\\r\\n                                    IGetters(address(this)).getRemainingCyclesContributionWei(\\r\\n                                        _term.termId\\r\\n                                    )\\r\\n                                ) {\\r\\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\r\\n                                    defaulterState.gettingExpelled = false; // Not expelled\\r\\n                                } else {\\r\\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\r\\n                                    defaulterState.gettingExpelled = true; // Expelled\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                        defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\r\\n                        defaulterState.gettingExpelled = true; // Expelled\\r\\n                    }\\r\\n                } else {\\r\\n                    defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\r\\n                    defaulterState.gettingExpelled = false; // Not expelled\\r\\n                }\\r\\n            } else {\\r\\n                if (collateralAmount >= contributionAmountWei) {\\r\\n                    defaulterState.payWithCollateral = true; // Pay with collateral\\r\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\r\\n                    defaulterState.gettingExpelled = false; // Not expelled\\r\\n                } else {\\r\\n                    defaulterState.payWithCollateral = false; // Pay with collateral\\r\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\r\\n                    defaulterState.gettingExpelled = true; // Expelled\\r\\n                }\\r\\n            }\\r\\n\\r\\n            distributedCollateral += _payDefaulterContribution(\\r\\n                _collateral,\\r\\n                _fund,\\r\\n                _term,\\r\\n                _defaulters[i],\\r\\n                contributionAmountWei,\\r\\n                defaulterState\\r\\n            );\\r\\n\\r\\n            if (defaulterState.gettingExpelled) {\\r\\n                expellants[expellantsCounter] = _defaulters[i];\\r\\n                _fund.cycleOfExpulsion[expellants[expellantsCounter]] = _fund.currentCycle;\\r\\n\\r\\n                unchecked {\\r\\n                    ++expellantsCounter;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (distributedCollateral, expellants);\\r\\n    }\\r\\n\\r\\n    /// @notice called internally to pay defaulter contribution\\r\\n    function _payDefaulterContribution(\\r\\n        LibCollateralStorage.Collateral storage _collateral,\\r\\n        LibFundStorage.Fund storage _fund,\\r\\n        LibTerm.Term memory _term,\\r\\n        address _defaulter,\\r\\n        uint _contributionAmountWei,\\r\\n        LibCollateralStorage.DefaulterState memory _defaulterState\\r\\n    ) internal returns (uint distributedCollateral) {\\r\\n        LibYieldGeneration.YieldGeneration storage yield = LibYieldGeneration\\r\\n            ._yieldStorage()\\r\\n            .yields[_term.termId];\\r\\n\\r\\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\\r\\n        if (_defaulterState.payWithCollateral && !_defaulterState.payWithFrozenPool) {\\r\\n            if (_defaulterState.gettingExpelled) {\\r\\n                if (_defaulterState.isBeneficiary) {\\r\\n                    uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\\r\\n                    _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\\r\\n\\r\\n                    distributedCollateral += remainingCollateral; // This will be distributed later\\r\\n                    _collateral.collateralMembersBank[_defaulter] = 0;\\r\\n                    emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\\r\\n                }\\r\\n\\r\\n                // Expelled\\r\\n                _collateral.isCollateralMember[_defaulter] = false;\\r\\n            } else {\\r\\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\\r\\n\\r\\n                // Subtract contribution from defaulter and add to beneficiary.\\r\\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\\r\\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\\r\\n\\r\\n                emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\\r\\n            }\\r\\n        }\\r\\n        if (_defaulterState.payWithFrozenPool && !_defaulterState.payWithCollateral) {\\r\\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount * 10 ** 6;\\r\\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * 10 ** 6;\\r\\n\\r\\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\\r\\n        }\\r\\n        if (_defaulterState.payWithCollateral && _defaulterState.payWithFrozenPool) {\\r\\n            uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\\r\\n            uint remainingCollateralFromPayments = _collateral.collateralPaymentBank[_defaulter];\\r\\n            uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\\r\\n                _term.contributionAmount * 10 ** 18\\r\\n            );\\r\\n\\r\\n            if (remainingCollateral > 0) {\\r\\n                _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\\r\\n\\r\\n                emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\\r\\n            }\\r\\n            if (_defaulterState.gettingExpelled) {\\r\\n                distributedCollateral += (remainingCollateral + remainingCollateralFromPayments);\\r\\n                _collateral.collateralMembersBank[_defaulter] = 0;\\r\\n                _collateral.collateralPaymentBank[_defaulter] = 0;\\r\\n                emit OnFrozenMoneyPotLiquidated(\\r\\n                    _term.termId,\\r\\n                    _defaulter,\\r\\n                    remainingCollateralFromPayments\\r\\n                );\\r\\n            } else {\\r\\n                // Remaining collateral is always less than contribution amount if/when we reach this\\r\\n                if (remainingCollateral > 0) {\\r\\n                    // Remove any last remaining collateral\\r\\n                    uint toDeductFromPayments = contributionAmountWei - remainingCollateral;\\r\\n                    _collateral.collateralMembersBank[_defaulter] = 0;\\r\\n                    _collateral.collateralPaymentBank[_defaulter] -= toDeductFromPayments;\\r\\n                    emit OnFrozenMoneyPotLiquidated(\\r\\n                        _term.termId,\\r\\n                        _defaulter,\\r\\n                        remainingCollateralFromPayments\\r\\n                    );\\r\\n                } else {\\r\\n                    _collateral.collateralPaymentBank[_defaulter] -= contributionAmountWei;\\r\\n                    emit OnFrozenMoneyPotLiquidated(\\r\\n                        _term.termId,\\r\\n                        _defaulter,\\r\\n                        contributionAmountWei\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param _collateral Collateral storage\\r\\n    /// @param _fund Fund storage\\r\\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\\r\\n    /// @return nonBeneficiaries array of addresses that were expelled\\r\\n    function _findNonBeneficiaries(\\r\\n        LibCollateralStorage.Collateral storage _collateral,\\r\\n        LibFundStorage.Fund storage _fund\\r\\n    ) internal view returns (uint, address[] memory) {\\r\\n        address currentDepositor;\\r\\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\\r\\n        uint nonBeneficiaryCounter;\\r\\n\\r\\n        // Check beneficiaries\\r\\n        uint depositorsLength = _collateral.depositors.length;\\r\\n        for (uint i; i < depositorsLength; ) {\\r\\n            currentDepositor = _collateral.depositors[i];\\r\\n            if (\\r\\n                !_fund.isBeneficiary[currentDepositor] &&\\r\\n                _collateral.isCollateralMember[currentDepositor]\\r\\n            ) {\\r\\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\\r\\n                nonBeneficiaryCounter++;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (nonBeneficiaryCounter, nonBeneficiaries);\\r\\n    }\\r\\n\\r\\n    function _withdrawFromYield(\\r\\n        uint _termId,\\r\\n        address _user,\\r\\n        uint _amount,\\r\\n        LibYieldGeneration.YieldGeneration storage _yieldStorage\\r\\n    ) internal returns (uint withdrawnYield) {\\r\\n        if (_yieldStorage.hasOptedIn[_user]) {\\r\\n            withdrawnYield = IYGFacetZaynFi(address(this)).withdrawYG(_termId, _amount, _user);\\r\\n        } else {\\r\\n            withdrawnYield = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _atState(uint _termId, LibCollateralStorage.CollateralStates _state) internal view {\\r\\n        LibCollateralStorage.CollateralStates state = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId]\\r\\n            .state;\\r\\n        if (state != _state) revert FunctionInvalidAtThisState();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8477e42998e93fcaa3106830f1723b86571e78d7ec51d31c9a6eaa4aa65001f9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    // Function cannot be called at this time.\\r\\n    error FunctionInvalidAtThisState();\\r\\n\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @param term the term object\\r\\n    /// @param defaulters Address that was randomly selected for the current cycle\\r\\n    function requestContribution(\\r\\n        LibTerm.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId The term id\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    /// @param participant The participant address\\r\\n    function withdrawReimbursement(uint termId, address participant) external;\\r\\n\\r\\n    /// @param termId The term id\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf563639cab46e3bde761342b272bc2e6f03c9bcf46da0e3416422309d809fa71\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    /// @notice Gets the current and next term id\\r\\n    /// @return current termID\\r\\n    /// @return next termID\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Must return 0 before starting the fund\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining registration time in seconds\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get current information of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return Term Struct, see LibTerm.sol\\r\\n    function getTermSummary(uint termId) external view returns (LibTerm.Term memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\r\\n    /// @param participant address\\r\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\r\\n    /// @return List of termIDs\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTerm.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user was previously expelled from\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the required minimum collateral deposit based on the position\\r\\n    /// @param termId the term id\\r\\n    /// @param depositorIndex the index of the depositor\\r\\n    /// @return required minimum in wei\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    // FUND GETTERS\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the current beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets a user information of in a fund\\r\\n    /// @param participant address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the fund/term\\r\\n    /// @return if the user was beneficiary in the past\\r\\n    /// @return if the user paid for the current cycle\\r\\n    /// @return if the user has autopay enabled\\r\\n    /// @return users money pot balance\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function userAPY(uint termId, address user) external returns (uint256);\\r\\n\\r\\n    function termAPY(uint termId) external returns (uint256);\\r\\n\\r\\n    function yieldDistributionRatio(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external returns (uint);\\r\\n\\r\\n    function userYieldGenerated(uint termId, address user) external returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x5782d12cdc4ea3c31bfaab397c398cd10944f184e391fc2e3d76673992897b14\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    function depositYG(uint termId, uint amount) external;\\r\\n\\r\\n    function withdrawYG(\\r\\n        uint termId,\\r\\n        uint256 ethAmount,\\r\\n        address user\\r\\n    ) external returns (uint neededShares);\\r\\n\\r\\n    function claimAvailableYield(uint termId) external;\\r\\n\\r\\n    function claimAvailableYield(uint termId, address user) external;\\r\\n\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x72eaefe85df56e1269d13228b75e1fb6847a8bbbe29f6c6f46dc64b8fb031260\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralStorage.CollateralStates indexed oldState,\\r\\n        LibCollateralStorage.CollateralStates indexed newState\\r\\n    );\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x174faa9c9172ab1b440e41471a2164d9920b2ecb36f9999d44d6ab2f0e6f0708\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    uint public constant COLLATERAL_VERSION = 1;\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5533a3634ad11b156b9db4c2ffc1a114c2dbad0e6ca96b0239807b365b2d090e\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint public constant FUND_VERSION = 1;\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e573ed3954c974c93379f2624c66f11bfc5140bacae56e964f7940ef9ef9d51\",\"license\":\"MIT\"},\"contracts/libraries/LibTerm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTerm {\\r\\n    uint public constant TERM_VERSION = 2;\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        uint sequencerStartupTime;\\r\\n        address sequencerUptimeFeedAddress;\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x451ae8fd0b3a0c1d688bce4302caa4af45bd4068d14b3840b3588ce497fc4276\",\"license\":\"MIT\"},\"contracts/libraries/LibTermOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTerm} from \\\"../libraries/LibTerm.sol\\\";\\r\\n\\r\\nlibrary LibTermOwnership {\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the term owner.\\r\\n     * @dev Used for internal calls\\r\\n     */\\r\\n    function _ensureTermOwner(uint termId) internal view {\\r\\n        require(\\r\\n            LibTerm._termStorage().terms[termId].termOwner == msg.sender,\\r\\n            \\\"TermOwnable: caller is not the owner\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0f155146f4ed0d83fef94324f175f0373627154b051c1d2bed32c664d166488\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    uint public constant YIELD_GENERATION_VERSION = 1;\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _sharesToEth(\\r\\n        uint _currentShares,\\r\\n        uint _totalDeposit,\\r\\n        uint _totalShares\\r\\n    ) internal pure returns (uint) {\\r\\n        return (_currentShares * _totalDeposit) / _totalShares;\\r\\n    }\\r\\n\\r\\n    function _ethToShares(\\r\\n        uint _collateralAmount,\\r\\n        uint _totalShares,\\r\\n        uint _totalDeposit\\r\\n    ) internal pure returns (uint) {\\r\\n        return (_collateralAmount * _totalShares) / _totalDeposit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38bfcad81689ed5586da67f0143099beb63ecabeb9db67adbc01995a327f9c2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612033806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632081c1af1461006757806339007b77146100905780636112fe2e146100a5578063ae483d07146100b8578063c177f091146100cb578063c3bfb61c146100ee575b600080fd5b61007a610075366004611b8f565b610101565b6040516100879190611c7d565b60405180910390f35b6100a361009e366004611cca565b610270565b005b6100a36100b3366004611cca565b6102f7565b6100a36100c6366004611ce3565b610681565b6100de6100d9366004611ce3565b610806565b6040519015158152602001610087565b6100a36100fc366004611cca565b61081b565b6060836080015160016101148282610a57565b6080860180516000908152600080516020611fde8339815191526020908152604080832093518352600080516020611f9e83398151915282528083208151898402818101850190935289815290939283926101929287928e928892918f918f91829190850190849080828437600092019190915250610ac292505050565b915091506000806101a38686610f85565b9092509050811561026057825160005b818110156101e8576101e0878683815181106101d1576101d1611d13565b602002602001015186866110ab565b6001016101b3565b506101f38386611d3f565b945060005b8381101561025d578588600601600085848151811061021957610219611d13565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102509190611d61565b90915550506001016101f8565b50505b50909a9950505050505050505050565b6000818152600080516020611f9e833981519152602052604090208054600490610100900460ff16818111156102a8576102a8611d74565b146102e85760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064015b60405180910390fd5b6102f38260026111a5565b5050565b6000818152600080516020611fde833981519152602090815260408083207f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9835281842033855260058201909352922054806103885760405162461bcd60e51b815260206004820152601060248201526f436f6c6c61746572616c20656d70747960801b60448201526064016102df565b600060028454610100900460ff1660038111156103a7576103a7611d74565b03610460573360008181526005860160205260408120556103cb9086908486611242565b5060405133908390600081818185875af1925050503d806000811461040c576040519150601f19603f3d011682016040523d82523d6000602084013e610411565b606091505b505080915050836002016000815461042890611d8a565b909155506040518290339087907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a46105c9565b60018454610100900460ff16600381111561047d5761047d611d74565b036105c95760405163f0d826e760e01b815260048101869052600090600a90309063f0d826e790602401602060405180830381865afa1580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e89190611da1565b6104f390600f611dba565b6104fd9190611d3f565b9050808311156105c75760006105138285611dd1565b336000908152600588016020526040812080549293508392909190610539908490611dd1565b9091555061054b905087338388611242565b5060405133908290600081818185875af1925050503d806000811461058c576040519150601f19603f3d011682016040523d82523d6000602084013e610591565b606091505b50506040519093508190339089907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a4505b505b806106085760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016102df565b33600090815260078401602052604090205460ff161561067a57604051637b52069560e11b815260048101869052336024820152309063f6a40d2a90604401600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b505050505b5050505050565b6000828152600080516020611f9e833981519152602052604090205460ff166106e35760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064016102df565b6000828152600080516020611fde833981519152602090815260408083206001600160a01b03851684526006810190925290912054806107585760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016102df565b6001600160a01b03831660008181526006840160205260408082208290555190919083908381818185875af1925050503d80600081146107b4576040519150601f19603f3d011682016040523d82523d6000602084013e6107b9565b606091505b50509050806107c757600080fd5b81846001600160a01b0316867f1d8d3d09e68fe1873369af18c4d7d361038dac92ac768b54ac19273dbd4cb6b860405160405180910390a45050505050565b600061081283836112f0565b90505b92915050565b8061082581611437565b8160026108328282610a57565b6000600080516020611fde83398151915260008681526020919091526040812091507f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa1580156108c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108eb9190810190611de4565b5050955050505050508062ed4e006109039190611d61565b42116109435760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b60448201526064016102df565b6003830154600090815b818110156109ea57600086600301828154811061096c5761096c611d13565b6000918252602080832091909101546001600160a01b031680835260058a0182526040808420805460068d0190945290842080549185905584905590935090916109b88e85858c611242565b9050806109c58385611d61565b6109cf9190611d61565b6109d99088611d61565b96508460010194505050505061094d565b506109f68960036111a5565b604051600090339084908381818185875af1925050503d8060008114610a38576040519150601f19603f3d011682016040523d82523d6000602084013e610a3d565b606091505b5050905080610a4b57600080fd5b50505050505050505050565b6000828152600080516020611fde8339815191526020526040902054610100900460ff16816003811115610a8d57610a8d611d74565b816003811115610a9f57610a9f611d74565b14610abd5760405163201328a760e01b815260040160405180910390fd5b505050565b600060606000835167ffffffffffffffff811115610ae257610ae2611abd565b604051908082528060200260200182016040528015610b0b578160200160208202803683370190505b5090506000806000306001600160a01b031663d072f4bc8a6101000151670de0b6b3a7640000610b3b9190611dba565b6040518263ffffffff1660e01b8152600401610b5991815260200190565b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190611da1565b905060005b8751811015610f74576040805160808101825260008082526020820181905291810182905260608101919091528960060160008a8481518110610be457610be4611d13565b6020908102919091018101516001600160a01b0316825281019190915260400160009081205460ff1615156060830152895160058e019082908c9086908110610c2f57610c2f611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050816060015115610e6157610c8b8c608001518b8581518110610c7e57610c7e611d13565b60200260200101516112f0565b15610e4a578a600a0160008b8581518110610ca857610ca8611d13565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610e3457838110610cf257600182526000602083018190526040830152610e91565b60008b60090160008c8681518110610d0c57610d0c611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610d51576000808352600160208401526040830152610e91565b60808c015160405163f0d826e760e01b81526004810191909152309063f0d826e790602401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190611da1565b8d60060160008c8681518110610dcf57610dcf611d13565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482610e039190611d61565b10610e1e576001808352602083015260006040830152610e91565b6001808352602083018190526040830152610e91565b6001808352600060208401526040830152610e91565b600182526000602083018190526040830152610e91565b838110610e7f57600182526000602083018190526040830152610e91565b60008083526020830152600160408301525b610eb88d8c8e8d8781518110610ea957610ea9611d13565b602002602001015188876114d2565b610ec29086611d61565b9450816040015115610f6a57898381518110610ee057610ee0611d13565b6020026020010151878781518110610efa57610efa611d13565b60200260200101906001600160a01b031690816001600160a01b0316815250508a600401548b600b016000898981518110610f3757610f37611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508560010195505b5050600101610b9f565b509099929850919650505050505050565b60006060600080856003018054905067ffffffffffffffff811115610fac57610fac611abd565b604051908082528060200260200182016040528015610fd5578160200160208202803683370190505b506003870154909150600090815b8181101561109a5788600301818154811061100057611000611d13565b60009182526020808320909101546001600160a01b031680835260068b0190915260409091205490955060ff1615801561105457506001600160a01b038516600090815260048a01602052604090205460ff165b15611092578484848151811061106c5761106c611d13565b6001600160a01b03909216602092830291909101909101528261108e81611f17565b9350505b600101610fe3565b5090945090925050505b9250929050565b6001600160a01b038316600090815260068501602052604090205460ff1661119f576001840154600090815b8181101561112d578660010181815481106110f4576110f4611d13565b6000918252602090912001546001600160a01b03908116908716036111255761111e816001611d61565b925061112d565b6001016110d7565b5060005b8481101561119b576000838152600c88016020526040812085516001929087908590811061116157611161611d13565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611131565b5050505b50505050565b6000828152600080516020611fde83398151915260205260409020805461010080820460ff16918491849161ff001916908360038111156111e8576111e8611d74565b02179055508260038111156111ff576111ff611d74565b81600381111561121157611211611d74565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b6001600160a01b038316600090815260078201602052604081205460ff16156112e45760405163a7cce35360e01b815260048101869052602481018490526001600160a01b0385166044820152309063a7cce353906064016020604051808303816000875af11580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd9190611da1565b90506112e8565b5060005b949350505050565b6000828152600080516020611fde833981519152602090815260408083206001600160a01b038516845260058101909252822054829061134c866000908152600080516020611f9e833981519152602052604090205460ff1690565b6113cb5760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190611f30565b50945061142e92505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190611da1565b91505b10949350505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60205260409020546001600160a01b03620100009091041633146114cf5760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b60648201526084016102df565b50565b60808401805160009081527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf960205260408082209251905163d8f8e99160e01b815260048101919091529091908290309063d8f8e99190602401602060405180830381865afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190611f79565b8451909150801561158057508360200151155b156116f35783604001511561164857836060015115611621576001600160a01b038616600090815260058a01602052604090205460808801516115c590888386611242565b506115d08185611d61565b6001600160a01b038816600081815260058d01602052604080822082905560808c01519051939750849390917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a91a4505b6001600160a01b038616600090815260048a0160205260409020805460ff191690556116f3565b6116588760800151878785611242565b506001600160a01b038616600090815260058a01602052604081208054879290611683908490611dd1565b90915550506001600160a01b038116600090815260068a016020526040812080548792906116b2908490611d61565b9091555050608087015160405186916001600160a01b038916917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8360200151801561170357508351155b156117bb5761010087015161171b90620f4240611dba565b6001600160a01b038716600090815260098a01602052604081208054909190611745908490611dd1565b909155505061010087015161175d90620f4240611dba565b6001600160a01b038216600090815260098a01602052604081208054909190611787908490611d61565b909155505061010087015160808801516040516001600160a01b0389169190600080516020611fbe83398151915290600090a45b835180156117ca575083602001515b15611ab1576001600160a01b038616600090815260058a01602090815260408083205460068d019092528220546101008a015191929091309063d072f4bc9061181b90670de0b6b3a7640000611dba565b6040518263ffffffff1660e01b815260040161183991815260200190565b602060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190611da1565b905082156118cf576118928a608001518a8588611242565b5060808a015160405184916001600160a01b038c16917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b866040015115611978576118e38284611d61565b6118ed9087611d61565b955060008c60050160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008c60060160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555081896001600160a01b03168b60800151600080516020611fbe83398151915260405160405180910390a4611aad565b8215611a2457600061198a8483611dd1565b905060008d60050160008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550808d60060160008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119f09190611dd1565b909155505060808b015160405184916001600160a01b038d1691600080516020611fbe83398151915290600090a450611a7d565b6001600160a01b038916600090815260068d01602052604081208054839290611a4e908490611dd1565b909155505060808a015160405182916001600160a01b038c1691600080516020611fbe83398151915290600090a45b6001600160a01b038416600090815260068d016020526040812080548a9290611aa7908490611d61565b90915550505b5050505b50509695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611af757611af7611abd565b60405290565b80151581146114cf57600080fd5b8035611b1681611afd565b919050565b803560048110611b1657600080fd5b6001600160a01b03811681146114cf57600080fd5b8035611b1681611b2a565b60008083601f840112611b5c57600080fd5b50813567ffffffffffffffff811115611b7457600080fd5b6020830191508360208260051b85010111156110a457600080fd5b6000806000838503610180811215611ba657600080fd5b61016080821215611bb657600080fd5b611bbe611ad3565b9150611bc986611b0b565b8252611bd760208701611b1b565b6020830152611be860408701611b3f565b6040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152610100808701358184015250610120808701358184015250610140611c45818801611b3f565b9083015290935084013567ffffffffffffffff811115611c6457600080fd5b611c7086828701611b4a565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611cbe5783516001600160a01b031683529284019291840191600101611c99565b50909695505050505050565b600060208284031215611cdc57600080fd5b5035919050565b60008060408385031215611cf657600080fd5b823591506020830135611d0881611b2a565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611d5c57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561081557610815611d29565b634e487b7160e01b600052602160045260246000fd5b600081611d9957611d99611d29565b506000190190565b600060208284031215611db357600080fd5b5051919050565b808202811582820484141761081557610815611d29565b8181038181111561081557610815611d29565b600080600080600080600080610100898b031215611e0157600080fd5b8851611e0c81611afd565b809850506020808a015160058110611e2357600080fd5b60408b0151909850611e3481611b2a565b60608b015190975067ffffffffffffffff80821115611e5257600080fd5b818c0191508c601f830112611e6657600080fd5b815181811115611e7857611e78611abd565b8060051b604051601f19603f83011681018181108582111715611e9d57611e9d611abd565b60405291825284820192508381018501918f831115611ebb57600080fd5b938501935b82851015611ee55784519150611ed582611b2a565b8184529385019392850192611ec0565b809a505050505050506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060018201611f2957611f29611d29565b5060010190565b600080600080600060a08688031215611f4857600080fd5b8551611f5381611afd565b602087015160408801516060890151608090990151929a91995097965090945092505050565b600060208284031215611f8b57600080fd5b8151611f9681611b2a565b939250505056fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9ecbf86544b133eb80eba635946daf018f997778387601f4c8d43c851b2ec07435fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a264697066735822122013d043120458a649c61f3a6af4279461944552673861e53fac4d307ec869b8ed64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632081c1af1461006757806339007b77146100905780636112fe2e146100a5578063ae483d07146100b8578063c177f091146100cb578063c3bfb61c146100ee575b600080fd5b61007a610075366004611b8f565b610101565b6040516100879190611c7d565b60405180910390f35b6100a361009e366004611cca565b610270565b005b6100a36100b3366004611cca565b6102f7565b6100a36100c6366004611ce3565b610681565b6100de6100d9366004611ce3565b610806565b6040519015158152602001610087565b6100a36100fc366004611cca565b61081b565b6060836080015160016101148282610a57565b6080860180516000908152600080516020611fde8339815191526020908152604080832093518352600080516020611f9e83398151915282528083208151898402818101850190935289815290939283926101929287928e928892918f918f91829190850190849080828437600092019190915250610ac292505050565b915091506000806101a38686610f85565b9092509050811561026057825160005b818110156101e8576101e0878683815181106101d1576101d1611d13565b602002602001015186866110ab565b6001016101b3565b506101f38386611d3f565b945060005b8381101561025d578588600601600085848151811061021957610219611d13565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102509190611d61565b90915550506001016101f8565b50505b50909a9950505050505050505050565b6000818152600080516020611f9e833981519152602052604090208054600490610100900460ff16818111156102a8576102a8611d74565b146102e85760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064015b60405180910390fd5b6102f38260026111a5565b5050565b6000818152600080516020611fde833981519152602090815260408083207f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9835281842033855260058201909352922054806103885760405162461bcd60e51b815260206004820152601060248201526f436f6c6c61746572616c20656d70747960801b60448201526064016102df565b600060028454610100900460ff1660038111156103a7576103a7611d74565b03610460573360008181526005860160205260408120556103cb9086908486611242565b5060405133908390600081818185875af1925050503d806000811461040c576040519150601f19603f3d011682016040523d82523d6000602084013e610411565b606091505b505080915050836002016000815461042890611d8a565b909155506040518290339087907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a46105c9565b60018454610100900460ff16600381111561047d5761047d611d74565b036105c95760405163f0d826e760e01b815260048101869052600090600a90309063f0d826e790602401602060405180830381865afa1580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e89190611da1565b6104f390600f611dba565b6104fd9190611d3f565b9050808311156105c75760006105138285611dd1565b336000908152600588016020526040812080549293508392909190610539908490611dd1565b9091555061054b905087338388611242565b5060405133908290600081818185875af1925050503d806000811461058c576040519150601f19603f3d011682016040523d82523d6000602084013e610591565b606091505b50506040519093508190339089907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a4505b505b806106085760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016102df565b33600090815260078401602052604090205460ff161561067a57604051637b52069560e11b815260048101869052336024820152309063f6a40d2a90604401600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b505050505b5050505050565b6000828152600080516020611f9e833981519152602052604090205460ff166106e35760405162461bcd60e51b815260206004820152601460248201527346756e6420646f6573206e6f742065786973747360601b60448201526064016102df565b6000828152600080516020611fde833981519152602090815260408083206001600160a01b03851684526006810190925290912054806107585760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016102df565b6001600160a01b03831660008181526006840160205260408082208290555190919083908381818185875af1925050503d80600081146107b4576040519150601f19603f3d011682016040523d82523d6000602084013e6107b9565b606091505b50509050806107c757600080fd5b81846001600160a01b0316867f1d8d3d09e68fe1873369af18c4d7d361038dac92ac768b54ac19273dbd4cb6b860405160405180910390a45050505050565b600061081283836112f0565b90505b92915050565b8061082581611437565b8160026108328282610a57565b6000600080516020611fde83398151915260008681526020919091526040812091507f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa1580156108c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108eb9190810190611de4565b5050955050505050508062ed4e006109039190611d61565b42116109435760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b60448201526064016102df565b6003830154600090815b818110156109ea57600086600301828154811061096c5761096c611d13565b6000918252602080832091909101546001600160a01b031680835260058a0182526040808420805460068d0190945290842080549185905584905590935090916109b88e85858c611242565b9050806109c58385611d61565b6109cf9190611d61565b6109d99088611d61565b96508460010194505050505061094d565b506109f68960036111a5565b604051600090339084908381818185875af1925050503d8060008114610a38576040519150601f19603f3d011682016040523d82523d6000602084013e610a3d565b606091505b5050905080610a4b57600080fd5b50505050505050505050565b6000828152600080516020611fde8339815191526020526040902054610100900460ff16816003811115610a8d57610a8d611d74565b816003811115610a9f57610a9f611d74565b14610abd5760405163201328a760e01b815260040160405180910390fd5b505050565b600060606000835167ffffffffffffffff811115610ae257610ae2611abd565b604051908082528060200260200182016040528015610b0b578160200160208202803683370190505b5090506000806000306001600160a01b031663d072f4bc8a6101000151670de0b6b3a7640000610b3b9190611dba565b6040518263ffffffff1660e01b8152600401610b5991815260200190565b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190611da1565b905060005b8751811015610f74576040805160808101825260008082526020820181905291810182905260608101919091528960060160008a8481518110610be457610be4611d13565b6020908102919091018101516001600160a01b0316825281019190915260400160009081205460ff1615156060830152895160058e019082908c9086908110610c2f57610c2f611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050816060015115610e6157610c8b8c608001518b8581518110610c7e57610c7e611d13565b60200260200101516112f0565b15610e4a578a600a0160008b8581518110610ca857610ca8611d13565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610e3457838110610cf257600182526000602083018190526040830152610e91565b60008b60090160008c8681518110610d0c57610d0c611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610d51576000808352600160208401526040830152610e91565b60808c015160405163f0d826e760e01b81526004810191909152309063f0d826e790602401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190611da1565b8d60060160008c8681518110610dcf57610dcf611d13565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482610e039190611d61565b10610e1e576001808352602083015260006040830152610e91565b6001808352602083018190526040830152610e91565b6001808352600060208401526040830152610e91565b600182526000602083018190526040830152610e91565b838110610e7f57600182526000602083018190526040830152610e91565b60008083526020830152600160408301525b610eb88d8c8e8d8781518110610ea957610ea9611d13565b602002602001015188876114d2565b610ec29086611d61565b9450816040015115610f6a57898381518110610ee057610ee0611d13565b6020026020010151878781518110610efa57610efa611d13565b60200260200101906001600160a01b031690816001600160a01b0316815250508a600401548b600b016000898981518110610f3757610f37611d13565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508560010195505b5050600101610b9f565b509099929850919650505050505050565b60006060600080856003018054905067ffffffffffffffff811115610fac57610fac611abd565b604051908082528060200260200182016040528015610fd5578160200160208202803683370190505b506003870154909150600090815b8181101561109a5788600301818154811061100057611000611d13565b60009182526020808320909101546001600160a01b031680835260068b0190915260409091205490955060ff1615801561105457506001600160a01b038516600090815260048a01602052604090205460ff165b15611092578484848151811061106c5761106c611d13565b6001600160a01b03909216602092830291909101909101528261108e81611f17565b9350505b600101610fe3565b5090945090925050505b9250929050565b6001600160a01b038316600090815260068501602052604090205460ff1661119f576001840154600090815b8181101561112d578660010181815481106110f4576110f4611d13565b6000918252602090912001546001600160a01b03908116908716036111255761111e816001611d61565b925061112d565b6001016110d7565b5060005b8481101561119b576000838152600c88016020526040812085516001929087908590811061116157611161611d13565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611131565b5050505b50505050565b6000828152600080516020611fde83398151915260205260409020805461010080820460ff16918491849161ff001916908360038111156111e8576111e8611d74565b02179055508260038111156111ff576111ff611d74565b81600381111561121157611211611d74565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b6001600160a01b038316600090815260078201602052604081205460ff16156112e45760405163a7cce35360e01b815260048101869052602481018490526001600160a01b0385166044820152309063a7cce353906064016020604051808303816000875af11580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd9190611da1565b90506112e8565b5060005b949350505050565b6000828152600080516020611fde833981519152602090815260408083206001600160a01b038516845260058101909252822054829061134c866000908152600080516020611f9e833981519152602052604090205460ff1690565b6113cb5760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190611f30565b50945061142e92505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190611da1565b91505b10949350505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60205260409020546001600160a01b03620100009091041633146114cf5760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b60648201526084016102df565b50565b60808401805160009081527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf960205260408082209251905163d8f8e99160e01b815260048101919091529091908290309063d8f8e99190602401602060405180830381865afa158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190611f79565b8451909150801561158057508360200151155b156116f35783604001511561164857836060015115611621576001600160a01b038616600090815260058a01602052604090205460808801516115c590888386611242565b506115d08185611d61565b6001600160a01b038816600081815260058d01602052604080822082905560808c01519051939750849390917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a91a4505b6001600160a01b038616600090815260048a0160205260409020805460ff191690556116f3565b6116588760800151878785611242565b506001600160a01b038616600090815260058a01602052604081208054879290611683908490611dd1565b90915550506001600160a01b038116600090815260068a016020526040812080548792906116b2908490611d61565b9091555050608087015160405186916001600160a01b038916917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8360200151801561170357508351155b156117bb5761010087015161171b90620f4240611dba565b6001600160a01b038716600090815260098a01602052604081208054909190611745908490611dd1565b909155505061010087015161175d90620f4240611dba565b6001600160a01b038216600090815260098a01602052604081208054909190611787908490611d61565b909155505061010087015160808801516040516001600160a01b0389169190600080516020611fbe83398151915290600090a45b835180156117ca575083602001515b15611ab1576001600160a01b038616600090815260058a01602090815260408083205460068d019092528220546101008a015191929091309063d072f4bc9061181b90670de0b6b3a7640000611dba565b6040518263ffffffff1660e01b815260040161183991815260200190565b602060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190611da1565b905082156118cf576118928a608001518a8588611242565b5060808a015160405184916001600160a01b038c16917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b866040015115611978576118e38284611d61565b6118ed9087611d61565b955060008c60050160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008c60060160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555081896001600160a01b03168b60800151600080516020611fbe83398151915260405160405180910390a4611aad565b8215611a2457600061198a8483611dd1565b905060008d60050160008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550808d60060160008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119f09190611dd1565b909155505060808b015160405184916001600160a01b038d1691600080516020611fbe83398151915290600090a450611a7d565b6001600160a01b038916600090815260068d01602052604081208054839290611a4e908490611dd1565b909155505060808a015160405182916001600160a01b038c1691600080516020611fbe83398151915290600090a45b6001600160a01b038416600090815260068d016020526040812080548a9290611aa7908490611d61565b90915550505b5050505b50509695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611af757611af7611abd565b60405290565b80151581146114cf57600080fd5b8035611b1681611afd565b919050565b803560048110611b1657600080fd5b6001600160a01b03811681146114cf57600080fd5b8035611b1681611b2a565b60008083601f840112611b5c57600080fd5b50813567ffffffffffffffff811115611b7457600080fd5b6020830191508360208260051b85010111156110a457600080fd5b6000806000838503610180811215611ba657600080fd5b61016080821215611bb657600080fd5b611bbe611ad3565b9150611bc986611b0b565b8252611bd760208701611b1b565b6020830152611be860408701611b3f565b6040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152610100808701358184015250610120808701358184015250610140611c45818801611b3f565b9083015290935084013567ffffffffffffffff811115611c6457600080fd5b611c7086828701611b4a565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611cbe5783516001600160a01b031683529284019291840191600101611c99565b50909695505050505050565b600060208284031215611cdc57600080fd5b5035919050565b60008060408385031215611cf657600080fd5b823591506020830135611d0881611b2a565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611d5c57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561081557610815611d29565b634e487b7160e01b600052602160045260246000fd5b600081611d9957611d99611d29565b506000190190565b600060208284031215611db357600080fd5b5051919050565b808202811582820484141761081557610815611d29565b8181038181111561081557610815611d29565b600080600080600080600080610100898b031215611e0157600080fd5b8851611e0c81611afd565b809850506020808a015160058110611e2357600080fd5b60408b0151909850611e3481611b2a565b60608b015190975067ffffffffffffffff80821115611e5257600080fd5b818c0191508c601f830112611e6657600080fd5b815181811115611e7857611e78611abd565b8060051b604051601f19603f83011681018181108582111715611e9d57611e9d611abd565b60405291825284820192508381018501918f831115611ebb57600080fd5b938501935b82851015611ee55784519150611ed582611b2a565b8184529385019392850192611ec0565b809a505050505050506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060018201611f2957611f29611d29565b5060010190565b600080600080600060a08688031215611f4857600080fd5b8551611f5381611afd565b602087015160408801516060890151608090990151929a91995097965090945092505050565b600060208284031215611f8b57600080fd5b8151611f9681611b2a565b939250505056fe6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9ecbf86544b133eb80eba635946daf018f997778387601f4c8d43c851b2ec07435fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a264697066735822122013d043120458a649c61f3a6af4279461944552673861e53fac4d307ec869b8ed64736f6c63430008120033",
  "devdoc": {
    "author": "Aisha El Allam",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "params": {
          "termId": "The term id"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "releaseCollateral(uint256)": {
        "params": {
          "termId": "term id"
        }
      },
      "requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "details": "Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract",
        "params": {
          "defaulters": "Addressess of all defaulters of the current cycle"
        },
        "returns": {
          "_0": "expellants array of addresses that were expelled"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "termId": "term id"
        }
      },
      "withdrawReimbursement(uint256,address)": {
        "params": {
          "depositor": "Address of the depositor",
          "termId": "term id"
        }
      }
    },
    "title": "Takaturn Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "notice": "allow the owner to empty the Collateral after 180 days"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "notice": "Called from Fund contract when someone defaults"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Called by each member after during or at the end of the term to withraw collateral"
      }
    },
    "notice": "This is used to operate the Takaturn collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}