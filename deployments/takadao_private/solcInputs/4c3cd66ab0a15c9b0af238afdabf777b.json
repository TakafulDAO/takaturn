{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTermStorage} from \"./libraries/LibTermStorage.sol\";\r\nimport {LibYieldGenerationStorage} from \"./libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\n\r\ncontract DiamondInit {\r\n    modifier onlyOwner() {\r\n        LibDiamond.enforceIsContractOwner();\r\n        _;\r\n    }\r\n\r\n    function init(\r\n        address _aggregatorAddressEthUsd,\r\n        address _aggregatorAddressUsdUsdc,\r\n        address _zapAddress, // Zaynfi Zap address\r\n        address _vaultAddress, // Zaynfi Vault address\r\n        bool _yieldLock\r\n    ) external onlyOwner {\r\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\r\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\r\n            ._yieldProviders();\r\n\r\n        termConsts.aggregatorsAddresses[\"ETH/USD\"] = _aggregatorAddressEthUsd;\r\n        termConsts.aggregatorsAddresses[\"USDC/USD\"] = _aggregatorAddressUsdUsdc;\r\n\r\n        yieldProvider.providerAddresses[\"ZaynZap\"] = _zapAddress;\r\n        yieldProvider.providerAddresses[\"ZaynVault\"] = _vaultAddress;\r\n\r\n        LibYieldGenerationStorage._yieldLock().yieldLock = _yieldLock;\r\n    }\r\n}\r\n"
    },
    "contracts/facets/CollateralFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\r\n\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\r\n\r\n/// @title Takaturn Collateral\r\n/// @author Aisha El Allam\r\n/// @notice This is used to operate the Takaturn collateral\r\n/// @dev v3.0 (Diamond)\r\ncontract CollateralFacet is ICollateral {\r\n    event OnCollateralStateChanged(\r\n        uint indexed termId,\r\n        LibCollateralStorage.CollateralStates indexed oldState,\r\n        LibCollateralStorage.CollateralStates indexed newState\r\n    );\r\n    event OnCollateralWithdrawal(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed collateralAmount\r\n    );\r\n    event OnReimbursementWithdrawn(\r\n        uint indexed termId,\r\n        address indexed participant,\r\n        address receiver,\r\n        uint indexed amount\r\n    );\r\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\r\n    event OnFrozenMoneyPotLiquidated(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        uint indexed amount\r\n    );\r\n    event OnYieldClaimed(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a user claims their yield\r\n\r\n    /// @param termId term id\r\n    /// @param _state collateral state\r\n    modifier atState(uint termId, LibCollateralStorage.CollateralStates _state) {\r\n        _atState(termId, _state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTermOwner(uint termId) {\r\n        LibTermOwnership._ensureTermOwner(termId);\r\n        _;\r\n    }\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param defaulters Addressess of all defaulters of the current cycle\r\n    /// @return expellants array of addresses that were expelled\r\n    function requestContribution(\r\n        LibTermStorage.Term memory term,\r\n        address[] calldata defaulters\r\n    )\r\n        external\r\n        atState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing)\r\n        returns (address[] memory)\r\n    {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[term.termId];\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[term.termId];\r\n        require(msg.sender == address(this));\r\n\r\n        (uint collateralToDistribute, address[] memory expellants) = _solveDefaulters(\r\n            collateral,\r\n            term,\r\n            fund,\r\n            defaulters\r\n        );\r\n\r\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _findNonBeneficiaries(\r\n            collateral,\r\n            fund\r\n        );\r\n\r\n        if (nonBeneficiaryCounter > 0) {\r\n            // This case can only happen when what?\r\n            // Exempt non beneficiaries from paying an early expellant's cycle\r\n            uint expellantsLength = expellants.length;\r\n            for (uint i; i < expellantsLength; ) {\r\n                _exemptNonBeneficiariesFromPaying(\r\n                    fund,\r\n                    expellants[i],\r\n                    nonBeneficiaryCounter,\r\n                    nonBeneficiaries\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n\r\n            // Finally, divide the share equally among non-beneficiaries\r\n            collateralToDistribute = collateralToDistribute / nonBeneficiaryCounter;\r\n            for (uint i; i < nonBeneficiaryCounter; ) {\r\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += collateralToDistribute;\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        return (expellants);\r\n    }\r\n\r\n    /// @notice Called to exempt users from needing to pay\r\n    /// @param _fund Fund storage\r\n    /// @param _expellant The expellant in question\r\n    /// @param _nonBeneficiaries All non-beneficiaries at this time\r\n    function _exemptNonBeneficiariesFromPaying(\r\n        LibFundStorage.Fund storage _fund,\r\n        address _expellant,\r\n        uint _nonBeneficiaryCounter,\r\n        address[] memory _nonBeneficiaries\r\n    ) internal {\r\n        if (!_fund.isBeneficiary[_expellant]) {\r\n            uint expellantBeneficiaryCycle;\r\n\r\n            uint beneficiariesLength = _fund.beneficiariesOrder.length;\r\n            for (uint i; i < beneficiariesLength; ) {\r\n                if (_expellant == _fund.beneficiariesOrder[i]) {\r\n                    expellantBeneficiaryCycle = i + 1;\r\n                    break;\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n\r\n            for (uint i; i < _nonBeneficiaryCounter; ) {\r\n                _fund.isExemptedOnCycle[expellantBeneficiaryCycle].exempted[\r\n                    _nonBeneficiaries[i]\r\n                ] = true;\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId term id\r\n    function withdrawCollateral(uint termId) external {\r\n        _withdrawCollateral(termId, msg.sender);\r\n    }\r\n\r\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId term id\r\n    /// @param receiver receiver address\r\n    function withdrawCollateralToAnotherAddress(uint termId, address receiver) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        address[] memory participants = fund.beneficiariesOrder;\r\n        uint participantsLength = participants.length;\r\n        bool canCall;\r\n\r\n        for (uint i; i < participantsLength; ) {\r\n            if (participants[i] == msg.sender) {\r\n                canCall = true;\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        require(canCall, \"The caller must be a participant\");\r\n\r\n        _withdrawCollateral(termId, receiver);\r\n    }\r\n\r\n    /// @param termId term id\r\n    function releaseCollateral(uint termId) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        require(fund.currentState == LibFundStorage.FundStates.FundClosed, \"Wrong state\");\r\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral);\r\n    }\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    /// @param termId The term id\r\n    function emptyCollateralAfterEnd(\r\n        uint termId\r\n    )\r\n        external\r\n        onlyTermOwner(termId)\r\n        atState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral)\r\n    {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        (, , , , , uint fundEnd, , ) = IGetters(address(this)).getFundSummary(termId);\r\n        require(block.timestamp > fundEnd + 180 days, \"Can't empty yet\");\r\n\r\n        uint totalToWithdraw;\r\n        uint depositorsLength = collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            address depositor = collateral.depositors[i];\r\n            uint amount = collateral.collateralMembersBank[depositor];\r\n            uint paymentAmount = collateral.collateralPaymentBank[depositor];\r\n\r\n            collateral.collateralMembersBank[depositor] = 0;\r\n            collateral.collateralPaymentBank[depositor] = 0;\r\n            uint withdrawnYield = _withdrawFromYield(termId, depositor, amount, yield);\r\n\r\n            totalToWithdraw += (amount + paymentAmount + withdrawnYield);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.Closed);\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: totalToWithdraw}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param _termId term id\r\n    /// @param _receiver receiver address\r\n    function _withdrawCollateral(uint _termId, address _receiver) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        LibTermStorage.Term memory term = LibTermStorage._termStorage().terms[_termId];\r\n\r\n        uint userCollateral = collateral.collateralMembersBank[msg.sender];\r\n        require(userCollateral > 0, \"Collateral empty\");\r\n\r\n        bool success;\r\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\r\n        // Withdraw all the user has.\r\n        if (\r\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\r\n            expelledBeforeBeneficiary\r\n        ) {\r\n            // First case: The collateral is released or the user was expelled before being a beneficiary\r\n            collateral.collateralMembersBank[msg.sender] = 0;\r\n\r\n            if (term.state != LibTermStorage.TermStates.ExpiredTerm) {\r\n                _withdrawFromYield(_termId, msg.sender, userCollateral, yield);\r\n            }\r\n\r\n            (success, ) = payable(_receiver).call{value: userCollateral}(\"\");\r\n\r\n            if (collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral) {\r\n                --collateral.counterMembers;\r\n            }\r\n\r\n            emit OnCollateralWithdrawal(_termId, msg.sender, _receiver, userCollateral);\r\n        }\r\n        // Or withdraw partially\r\n        else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\r\n            // Second case: The term is on an ongoing cycle, the user has not been expelled\r\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\r\n            uint minRequiredCollateral = (IGetters(address(this)).getRemainingCyclesContributionWei(\r\n                _termId\r\n            ) * 15) / 10; // 1.5 X RCC in wei\r\n\r\n            // Collateral must be higher than 1.5 X RCC\r\n            if (userCollateral > minRequiredCollateral) {\r\n                uint allowedWithdrawal = userCollateral - minRequiredCollateral; // We allow to withdraw the positive difference\r\n                collateral.collateralMembersBank[msg.sender] -= allowedWithdrawal;\r\n\r\n                _withdrawFromYield(_termId, msg.sender, allowedWithdrawal, yield);\r\n\r\n                (success, ) = payable(_receiver).call{value: allowedWithdrawal}(\"\");\r\n\r\n                emit OnCollateralWithdrawal(_termId, msg.sender, _receiver, allowedWithdrawal);\r\n            }\r\n        }\r\n\r\n        require(success, \"Withdraw failed\");\r\n        if (yield.hasOptedIn[msg.sender] && yield.availableYield[msg.sender] > 0) {\r\n            LibYieldGeneration._claimAvailableYield(_termId, msg.sender, _receiver);\r\n        }\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _term Term storage\r\n    /// @param _defaulters Defaulters array\r\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return expellants array of addresses that were expelled\r\n    function _solveDefaulters(\r\n        LibCollateralStorage.Collateral storage _collateral,\r\n        LibTermStorage.Term memory _term,\r\n        LibFundStorage.Fund storage _fund,\r\n        address[] memory _defaulters\r\n    ) internal returns (uint, address[] memory) {\r\n        // require(_defaulters.length > 0, \"No defaulters\");\r\n\r\n        address[] memory expellants = new address[](_defaulters.length);\r\n        uint expellantsCounter;\r\n        uint distributedCollateral;\r\n\r\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\r\n            _term.contributionAmount * 10 ** 18\r\n        );\r\n\r\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\r\n        for (uint i; i < _defaulters.length; ) {\r\n            LibCollateralStorage.DefaulterState memory defaulterState;\r\n            defaulterState.isBeneficiary = _fund.isBeneficiary[_defaulters[i]];\r\n            uint collateralAmount = _collateral.collateralMembersBank[_defaulters[i]];\r\n            if (defaulterState.isBeneficiary) {\r\n                // Has the user been beneficiary?\r\n                if (LibCollateral._isUnderCollaterized(_term.termId, _defaulters[i])) {\r\n                    // Is the collateral below 1.0 X RCC?\r\n                    if (_fund.beneficiariesFrozenPool[_defaulters[i]]) {\r\n                        // Is the pool currently frozen?\r\n                        if (collateralAmount >= contributionAmountWei) {\r\n                            // Does the user's collateral cover a cycle?\r\n                            defaulterState.payWithCollateral = true; // Pay with collateral\r\n                            defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\r\n                            defaulterState.gettingExpelled = false; // Not expelled\r\n                        } else {\r\n                            // We don't have to check exact amounts because the pool would always be deducted by consistent amounts\r\n                            if (_fund.beneficiariesPool[_defaulters[i]] > 0) {\r\n                                // Does the frozen stable token portion of the pool contain anything?\r\n                                defaulterState.payWithCollateral = false; // Do not pay with collateral\r\n                                defaulterState.payWithFrozenPool = true; // Pay with frozen pool\r\n                                defaulterState.gettingExpelled = false; // Not expelled\r\n                            } else {\r\n                                // Is whatever is left from the collateral + received collateral portion of money pool below 1.0 X RCC?\r\n                                if (\r\n                                    collateralAmount +\r\n                                        _collateral.collateralPaymentBank[_defaulters[i]] >=\r\n                                    IGetters(address(this)).getRemainingCyclesContributionWei(\r\n                                        _term.termId\r\n                                    )\r\n                                ) {\r\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\r\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\r\n                                    defaulterState.gettingExpelled = false; // Not expelled\r\n                                } else {\r\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\r\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\r\n                                    defaulterState.gettingExpelled = true; // Expelled\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        defaulterState.payWithCollateral = true; // Pay with collateral\r\n                        defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\r\n                        defaulterState.gettingExpelled = true; // Expelled\r\n                    }\r\n                } else {\r\n                    defaulterState.payWithCollateral = true; // Pay with collateral\r\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\r\n                    defaulterState.gettingExpelled = false; // Not expelled\r\n                }\r\n            } else {\r\n                if (collateralAmount >= contributionAmountWei) {\r\n                    defaulterState.payWithCollateral = true; // Pay with collateral\r\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\r\n                    defaulterState.gettingExpelled = false; // Not expelled\r\n                } else {\r\n                    defaulterState.payWithCollateral = false; // Pay with collateral\r\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\r\n                    defaulterState.gettingExpelled = true; // Expelled\r\n                }\r\n            }\r\n\r\n            distributedCollateral += _payDefaulterContribution(\r\n                _collateral,\r\n                _fund,\r\n                _term,\r\n                _defaulters[i],\r\n                contributionAmountWei,\r\n                defaulterState\r\n            );\r\n\r\n            if (defaulterState.gettingExpelled) {\r\n                expellants[expellantsCounter] = _defaulters[i];\r\n                _fund.cycleOfExpulsion[expellants[expellantsCounter]] = _fund.currentCycle;\r\n\r\n                unchecked {\r\n                    ++expellantsCounter;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return (distributedCollateral, expellants);\r\n    }\r\n\r\n    /// @notice called internally to pay defaulter contribution\r\n    function _payDefaulterContribution(\r\n        LibCollateralStorage.Collateral storage _collateral,\r\n        LibFundStorage.Fund storage _fund,\r\n        LibTermStorage.Term memory _term,\r\n        address _defaulter,\r\n        uint _contributionAmountWei,\r\n        LibCollateralStorage.DefaulterState memory _defaulterState\r\n    ) internal returns (uint distributedCollateral) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_term.termId];\r\n\r\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\r\n        if (_defaulterState.payWithCollateral && !_defaulterState.payWithFrozenPool) {\r\n            if (_defaulterState.gettingExpelled) {\r\n                if (_defaulterState.isBeneficiary) {\r\n                    uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\r\n                    _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\r\n\r\n                    distributedCollateral += remainingCollateral; // This will be distributed later\r\n                    _collateral.collateralMembersBank[_defaulter] = 0;\r\n                    emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\r\n                }\r\n\r\n                // Expelled\r\n                _collateral.isCollateralMember[_defaulter] = false;\r\n            } else {\r\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\r\n\r\n                // Subtract contribution from defaulter and add to beneficiary.\r\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\r\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\r\n\r\n                emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\r\n            }\r\n        }\r\n        if (_defaulterState.payWithFrozenPool && !_defaulterState.payWithCollateral) {\r\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount * 10 ** 6;\r\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * 10 ** 6;\r\n\r\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\r\n        }\r\n        if (_defaulterState.payWithCollateral && _defaulterState.payWithFrozenPool) {\r\n            uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\r\n            uint remainingCollateralFromPayments = _collateral.collateralPaymentBank[_defaulter];\r\n            uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\r\n                _term.contributionAmount * 10 ** 18\r\n            );\r\n\r\n            if (remainingCollateral > 0) {\r\n                _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\r\n\r\n                emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\r\n            }\r\n            if (_defaulterState.gettingExpelled) {\r\n                distributedCollateral += (remainingCollateral + remainingCollateralFromPayments);\r\n                _collateral.collateralMembersBank[_defaulter] = 0;\r\n                _collateral.collateralPaymentBank[_defaulter] = 0;\r\n                emit OnFrozenMoneyPotLiquidated(\r\n                    _term.termId,\r\n                    _defaulter,\r\n                    remainingCollateralFromPayments\r\n                );\r\n            } else {\r\n                // Remaining collateral is always less than contribution amount if/when we reach this\r\n                if (remainingCollateral > 0) {\r\n                    // Remove any last remaining collateral\r\n                    uint toDeductFromPayments = contributionAmountWei - remainingCollateral;\r\n                    _collateral.collateralMembersBank[_defaulter] = 0;\r\n                    _collateral.collateralPaymentBank[_defaulter] -= toDeductFromPayments;\r\n                    emit OnFrozenMoneyPotLiquidated(\r\n                        _term.termId,\r\n                        _defaulter,\r\n                        remainingCollateralFromPayments\r\n                    );\r\n                } else {\r\n                    _collateral.collateralPaymentBank[_defaulter] -= contributionAmountWei;\r\n                    emit OnFrozenMoneyPotLiquidated(\r\n                        _term.termId,\r\n                        _defaulter,\r\n                        contributionAmountWei\r\n                    );\r\n                }\r\n\r\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @param _collateral Collateral storage\r\n    /// @param _fund Fund storage\r\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\r\n    /// @return nonBeneficiaries array of addresses that were expelled\r\n    function _findNonBeneficiaries(\r\n        LibCollateralStorage.Collateral storage _collateral,\r\n        LibFundStorage.Fund storage _fund\r\n    ) internal view returns (uint, address[] memory) {\r\n        address currentDepositor;\r\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\r\n        uint nonBeneficiaryCounter;\r\n\r\n        // Check beneficiaries\r\n        uint depositorsLength = _collateral.depositors.length;\r\n        for (uint i; i < depositorsLength; ) {\r\n            currentDepositor = _collateral.depositors[i];\r\n            if (\r\n                !_fund.isBeneficiary[currentDepositor] &&\r\n                _collateral.isCollateralMember[currentDepositor]\r\n            ) {\r\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\r\n                nonBeneficiaryCounter++;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return (nonBeneficiaryCounter, nonBeneficiaries);\r\n    }\r\n\r\n    function _withdrawFromYield(\r\n        uint _termId,\r\n        address _user,\r\n        uint _amount,\r\n        LibYieldGenerationStorage.YieldGeneration storage _yieldStorage\r\n    ) internal returns (uint withdrawnYield) {\r\n        if (_yieldStorage.hasOptedIn[_user]) {\r\n            uint amountToWithdraw;\r\n            if (_amount > _yieldStorage.depositedCollateralByUser[_user]) {\r\n                amountToWithdraw = _yieldStorage.depositedCollateralByUser[_user];\r\n            } else {\r\n                amountToWithdraw = _amount;\r\n            }\r\n            withdrawnYield = LibYieldGeneration._withdrawYG(_termId, amountToWithdraw, _user);\r\n        } else {\r\n            withdrawnYield = 0;\r\n        }\r\n    }\r\n\r\n    function _atState(uint _termId, LibCollateralStorage.CollateralStates _state) internal view {\r\n        LibCollateralStorage.CollateralStates state = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId]\r\n            .state;\r\n        if (state != _state) revert FunctionInvalidAtThisState();\r\n    }\r\n}\r\n"
    },
    "contracts/facets/FundFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IFund} from \"../interfaces/IFund.sol\";\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\n/// @title Takaturn Fund\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to operate the Takaturn fund\r\n/// @dev v3.0 (Diamond)\r\ncontract FundFacet is IFund {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    event OnFundStateChanged(\r\n        uint indexed termId,\r\n        uint indexed currentCycle,\r\n        LibFundStorage.FundStates indexed newState\r\n    ); // Emits when state has updated\r\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\r\n    event OnBeneficiaryAwarded(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\r\n    event OnFundWithdrawn(\r\n        uint indexed termId,\r\n        address indexed participant,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a chosen beneficiary claims their fund\r\n    event OnParticipantDefaulted(\r\n        uint indexed termId,\r\n        uint indexed currentCycle,\r\n        address indexed defaulter\r\n    ); // Emits when a participant didn't pay this cycle's contribution\r\n    event OnDefaulterExpelled(\r\n        uint indexed termId,\r\n        uint indexed currentCycle,\r\n        address indexed expellant\r\n    ); // Emits when a defaulter can't compensate with the collateral\r\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\r\n\r\n    modifier onlyTermOwner(uint termId) {\r\n        LibTermOwnership._ensureTermOwner(termId);\r\n        _;\r\n    }\r\n\r\n    /// Insufficient balance for transfer. Needed `required` but only\r\n    /// `available` available.\r\n    /// @param available balance available.\r\n    /// @param required requested amount to transfer.\r\n    error InsufficientBalance(uint available, uint required);\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    /// @param termId the id of the term\r\n    function startNewCycle(uint termId) external {\r\n        LibFund._startNewCycle(termId);\r\n    }\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    /// @param termId the id of the term\r\n    function closeFundingPeriod(uint termId) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\r\n        require(\r\n            block.timestamp >\r\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\r\n            \"Still time to contribute\"\r\n        );\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\r\n            \"Wrong state\"\r\n        );\r\n\r\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        LibFund._autoPay(termId);\r\n\r\n        // Only then award the beneficiary\r\n        LibFund._setState(termId, LibFundStorage.FundStates.AwardingBeneficiary);\r\n\r\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\r\n        address[] memory participants = fund.beneficiariesOrder;\r\n\r\n        uint participantsLength = participants.length;\r\n        uint currentCycle = fund.currentCycle;\r\n        for (uint i; i < participantsLength; ) {\r\n            address p = participants[i];\r\n\r\n            // The current beneficiary or someone who is exempt doesn't pay neither gets defaulted\r\n            if (p == currentBeneficiary || fund.isExemptedOnCycle[currentCycle].exempted[p]) {\r\n                if (EnumerableSet.contains(fund._defaulters, p)) {\r\n                    EnumerableSet.remove(fund._defaulters, p);\r\n                    if (p == currentBeneficiary) {\r\n                        EnumerableSet.add(fund._beneficiaries, p);\r\n                    } else {\r\n                        EnumerableSet.add(fund._participants, p);\r\n                    }\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (fund.paidThisCycle[p]) {\r\n                // check where to restore the defaulter to, participants or beneficiaries\r\n                if (fund.isBeneficiary[p]) {\r\n                    EnumerableSet.add(fund._beneficiaries, p);\r\n                } else {\r\n                    EnumerableSet.add(fund._participants, p);\r\n                }\r\n\r\n                EnumerableSet.remove(fund._defaulters, p);\r\n            } else if (\r\n                !EnumerableSet.contains(fund._defaulters, p) &&\r\n                !IGetters(address(this)).wasExpelled(termId, p)\r\n            ) {\r\n                // And we make sure that existing defaulters are ignored\r\n                // If the current beneficiary is an expelled participant, only check previous beneficiaries,\r\n                // that have not been expelled\r\n                if (IGetters(address(this)).wasExpelled(termId, currentBeneficiary)) {\r\n                    if (fund.isBeneficiary[p]) {\r\n                        _defaultParticipant(termId, p);\r\n                    }\r\n                } else {\r\n                    _defaultParticipant(termId, p);\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\r\n        _awardBeneficiary(fund, term);\r\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\r\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\r\n            _closeFund(termId);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    ///         and prevent the fund to be stuck in limbo\r\n    /// @param termId the id of the term\r\n    function emptyFundAfterEnd(uint termId) external onlyTermOwner(termId) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.FundClosed &&\r\n                block.timestamp > fund.fundEnd + 180 days,\r\n            \"Can't empty yet\"\r\n        );\r\n\r\n        uint balance;\r\n        uint beneficiariesLength = fund.beneficiariesOrder.length;\r\n\r\n        for (uint i; i < beneficiariesLength; ) {\r\n            if (fund.beneficiariesPool[fund.beneficiariesOrder[i]] > 0) {\r\n                balance += fund.beneficiariesPool[fund.beneficiariesOrder[i]];\r\n                fund.beneficiariesPool[fund.beneficiariesOrder[i]] = 0;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (balance > 0) {\r\n            bool success = fund.stableToken.transfer(msg.sender, balance);\r\n            require(success, \"Transfer failed\");\r\n        }\r\n    }\r\n\r\n    /// @notice function to enable/disable autopay\r\n    /// @param termId the id of the term\r\n    function toggleAutoPay(uint termId) external {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        require(collateral.isCollateralMember[msg.sender], \"Pay collateral security first\");\r\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"Wrong state\");\r\n        bool enabled = !fund.autoPayEnabled[msg.sender];\r\n        fund.autoPayEnabled[msg.sender] = enabled;\r\n\r\n        emit OnAutoPayToggled(termId, msg.sender, enabled);\r\n    }\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    /// @param termId the id of the term\r\n    function payContribution(uint termId) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        // Get the beneficiary for this cycle\r\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\r\n\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\r\n            \"Wrong state\"\r\n        );\r\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\r\n        require(currentBeneficiary != msg.sender, \"Beneficiary doesn't pay\");\r\n        require(!fund.paidThisCycle[msg.sender], \"Already paid for cycle\");\r\n        require(\r\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[msg.sender],\r\n            \"Participant is exempted this cycle\"\r\n        );\r\n\r\n        _payContribution(termId, msg.sender, msg.sender);\r\n    }\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param termId the id of the term\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint termId, address participant) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\r\n\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\r\n            \"Wrong state\"\r\n        );\r\n        require(fund.isParticipant[participant], \"Not a participant\");\r\n        require(currentBeneficiary != participant, \"Beneficiary doesn't pay\");\r\n        require(!fund.paidThisCycle[participant], \"Already paid for cycle\");\r\n        require(\r\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[participant],\r\n            \"Participant is exempted this cycle\"\r\n        );\r\n\r\n        _payContribution(termId, msg.sender, participant);\r\n    }\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId the id of the term\r\n    function withdrawFund(uint termId) external {\r\n        _withdrawFund(termId, msg.sender);\r\n    }\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId the id of the term\r\n    /// @param receiver the address that will receive the fund\r\n    function withdrawFundOnAnotherWallet(uint termId, address receiver) external {\r\n        _withdrawFund(termId, receiver);\r\n    }\r\n\r\n    function _withdrawFund(uint _termId, address _receiver) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\r\n        // any of the past cycles.\r\n\r\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\r\n\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.FundClosed ||\r\n                fund.isBeneficiary[msg.sender] ||\r\n                expelledBeforeBeneficiary,\r\n            \"The caller must be a participant\"\r\n        );\r\n\r\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\r\n        bool hasFrozenPool = fund.beneficiariesFrozenPool[msg.sender];\r\n        bool hasCollateralPool = collateral.collateralPaymentBank[msg.sender] > 0;\r\n\r\n        require(hasFundPool || hasFrozenPool || hasCollateralPool, \"Nothing to withdraw\");\r\n\r\n        if (hasFrozenPool) {\r\n            bool freeze = _freezePot(\r\n                LibTermStorage._termStorage().terms[_termId],\r\n                fund,\r\n                msg.sender\r\n            );\r\n\r\n            if (fund.currentState != LibFundStorage.FundStates.FundClosed) {\r\n                require(!freeze, \"Need at least 1.1RCC collateral to unfreeze your fund\");\r\n            }\r\n\r\n            _transferPoolToBeneficiary(_termId, msg.sender, _receiver);\r\n        } else if (hasFundPool) {\r\n            _transferPoolToBeneficiary(_termId, msg.sender, _receiver);\r\n        }\r\n\r\n        if (hasCollateralPool) {\r\n            LibCollateral._withdrawReimbursement(_termId, msg.sender, _receiver);\r\n        }\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle\r\n    /// @param _termId the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContribution(uint _termId, address _payer, address _participant) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\r\n\r\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\r\n        require(success, \"Contribution failed, did you approve stable token?\");\r\n\r\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n        fund.paidThisCycle[_participant] = true;\r\n        emit OnPaidContribution(_termId, _participant, fund.currentCycle);\r\n    }\r\n\r\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\r\n    /// @param _termId The id of the term\r\n    /// @param _defaulter The participant to default\r\n    function _defaultParticipant(uint _termId, address _defaulter) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        // Try removing from participants first\r\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\r\n\r\n        // If that fails, we try removing from beneficiaries\r\n        if (!success) {\r\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\r\n        }\r\n\r\n        require(success, \"Can't remove defaulter\");\r\n        EnumerableSet.add(fund._defaulters, _defaulter);\r\n\r\n        emit OnParticipantDefaulted(_termId, fund.currentCycle, _defaulter);\r\n    }\r\n\r\n    /// @notice The beneficiary will be awarded here based on the beneficiariesOrder array.\r\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\r\n    function _awardBeneficiary(\r\n        LibFundStorage.Fund storage _fund,\r\n        LibTermStorage.Term storage _term\r\n    ) internal {\r\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\r\n\r\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\r\n        if (EnumerableSet.length(_fund._defaulters) > 0) {\r\n            address[] memory expellants = ICollateral(address(this)).requestContribution(\r\n                _term,\r\n                EnumerableSet.values(_fund._defaulters)\r\n            );\r\n\r\n            uint expellantsLength = expellants.length;\r\n            for (uint i; i < expellantsLength; ) {\r\n                if (expellants[i] == address(0) || expellants[i] == beneficiary) {\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                    continue;\r\n                }\r\n                _expelDefaulter(_fund, _term, expellants[i]);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Remove participant from participants set..\r\n        if (EnumerableSet.remove(_fund._participants, beneficiary)) {\r\n            // ..Then add them to the benificiaries set\r\n            EnumerableSet.add(_fund._beneficiaries, beneficiary);\r\n        }\r\n\r\n        // Update the mapping to track who's been beneficiary\r\n        _fund.isBeneficiary[beneficiary] = true;\r\n\r\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\r\n        uint paidCount;\r\n        address[] memory participants = _fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\r\n        uint participantsLength = participants.length;\r\n        for (uint i; i < participantsLength; ) {\r\n            if (_fund.paidThisCycle[participants[i]]) {\r\n                paidCount++;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Award the beneficiary with the pool or freeze the pot\r\n        _freezePot(_term, _fund, beneficiary);\r\n\r\n        _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * paidCount * 10 ** 6; // Six decimals\r\n\r\n        emit OnBeneficiaryAwarded(_term.termId, beneficiary);\r\n        LibFund._setState(_term.termId, LibFundStorage.FundStates.CycleOngoing);\r\n    }\r\n\r\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\r\n    /// @param _expellant The address of the defaulter that will be expelled\r\n    function _expelDefaulter(\r\n        LibFundStorage.Fund storage _fund,\r\n        LibTermStorage.Term storage _term,\r\n        address _expellant\r\n    ) internal {\r\n        // Expellants should only be in the defauters set so no need to touch the other sets\r\n        require(\r\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\r\n            \"Expellant not found\"\r\n        );\r\n\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_term.termId];\r\n\r\n        _fund.isParticipant[_expellant] = false;\r\n        collateral.isCollateralMember[_expellant] = false;\r\n        // If the expellant has not been a beneficiary before, mark them as expelledBeforeBeneficiary\r\n        if (!_fund.isBeneficiary[_expellant]) {\r\n            _fund.expelledBeforeBeneficiary[_expellant] = true;\r\n        }\r\n\r\n        // Lastly, lower the amount of participants\r\n        --_term.totalParticipants;\r\n        ++_fund.expelledParticipants;\r\n\r\n        emit OnDefaulterExpelled(_term.termId, _fund.currentCycle, _expellant);\r\n    }\r\n\r\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\r\n    /// @param _termId The id of the term\r\n    function _closeFund(uint _termId) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n        fund.fundEnd = block.timestamp;\r\n        term.state = LibTermStorage.TermStates.ClosedTerm;\r\n        LibFund._setState(_termId, LibFundStorage.FundStates.FundClosed);\r\n        ICollateral(address(this)).releaseCollateral(_termId);\r\n    }\r\n\r\n    /// @notice Internal function to transfer the pool to the beneficiary\r\n    /// @param _termId The id of the term\r\n    /// @param _receiver The address of the beneficiary\r\n    function _transferPoolToBeneficiary(\r\n        uint _termId,\r\n        address _participant,\r\n        address _receiver\r\n    ) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n\r\n        // Get the amount this beneficiary can withdraw\r\n        uint transferAmount = fund.beneficiariesPool[_participant];\r\n        uint contractBalance = fund.stableToken.balanceOf(address(this));\r\n        if (contractBalance < transferAmount) {\r\n            revert InsufficientBalance({available: contractBalance, required: transferAmount});\r\n        } else {\r\n            fund.beneficiariesPool[_participant] = 0;\r\n            bool success = fund.stableToken.transfer(_receiver, transferAmount);\r\n            require(success, \"Transfer failed\");\r\n        }\r\n        emit OnFundWithdrawn(_termId, _participant, _receiver, transferAmount);\r\n    }\r\n\r\n    /// @notice Internal function to freeze the pot for the beneficiary\r\n    function _freezePot(\r\n        LibTermStorage.Term memory _term,\r\n        LibFundStorage.Fund storage _fund,\r\n        address _user\r\n    ) internal returns (bool) {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_term.termId];\r\n\r\n        bool expelledBeforeBeneficiary = _fund.expelledBeforeBeneficiary[_user];\r\n\r\n        if (expelledBeforeBeneficiary) {\r\n            _fund.beneficiariesFrozenPool[_user] = false;\r\n        } else {\r\n            uint remainingCyclesContribution = IGetters(address(this))\r\n                .getRemainingCyclesContributionWei(_term.termId);\r\n\r\n            uint neededCollateral = (110 * remainingCyclesContribution) / 100; // 1.1 x RCC\r\n\r\n            if (collateral.collateralMembersBank[_user] < neededCollateral) {\r\n                _fund.beneficiariesFrozenPool[_user] = true;\r\n            } else {\r\n                _fund.beneficiariesFrozenPool[_user] = false;\r\n            }\r\n        }\r\n        return _fund.beneficiariesFrozenPool[_user];\r\n    }\r\n}\r\n"
    },
    "contracts/facets/GettersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\r\n\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract GettersFacet is IGetters {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    // TERM GETTERS\r\n    /// @return the current term id\r\n    /// @return the next term id\r\n    function getTermsId() external view returns (uint, uint) {\r\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\r\n        uint lastTermId = termStorage.nextTermId - 1;\r\n        uint nextTermId = termStorage.nextTermId;\r\n        return (lastTermId, nextTermId);\r\n    }\r\n\r\n    ///  @notice Gets the remaining registration period for a term\r\n    ///  @param termId the term id\r\n    ///  @return remaining contribution period\r\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        require(collateral.firstDepositTime != 0, \"Nobody has deposited yet\");\r\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\r\n            return 0;\r\n        } else {\r\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\r\n        }\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return the term struct\r\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\r\n        return (LibTermStorage._termStorage().terms[termId]);\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @return an array with the term ids the participant is part of\r\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\r\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\r\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\r\n        return participantTermIds;\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @param state the term state\r\n    /// @return an array with the term ids the participant is part of, giving the state of the term\r\n    function getJoinedTermsByState(\r\n        address participant,\r\n        LibTermStorage.TermStates state\r\n    ) public view returns (uint[] memory) {\r\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\r\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\r\n        uint termsCounter;\r\n        uint joinedTermsLength = joinedTerms.length;\r\n\r\n        for (uint i; i < joinedTermsLength; ) {\r\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\r\n                temporaryArray[termsCounter] = joinedTerms[i];\r\n                unchecked {\r\n                    ++termsCounter;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        uint[] memory userTermsByState = new uint[](termsCounter);\r\n\r\n        for (uint i; i < termsCounter; ) {\r\n            userTermsByState[i] = temporaryArray[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return userTermsByState;\r\n    }\r\n\r\n    /// @param participant the participant address\r\n    /// @return an array the term ids the participant is part of, giving the state of the term\r\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\r\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\r\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\r\n        uint termsCounter;\r\n        uint joinedTermsLength = joinedTerms.length;\r\n\r\n        for (uint i; i < joinedTermsLength; ) {\r\n            if (wasExpelled(joinedTerms[i], participant)) {\r\n                temporaryArray[termsCounter] = joinedTerms[i];\r\n                unchecked {\r\n                    ++termsCounter;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        uint[] memory termsExpelled = new uint[](termsCounter);\r\n\r\n        for (uint i; i < termsCounter; ) {\r\n            termsExpelled[i] = temporaryArray[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return termsExpelled;\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining cycles\r\n    function getRemainingCycles(uint termId) public view returns (uint) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining time in the current cycle\r\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\r\n        if (block.timestamp > cycleEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return cycleEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    /// @param termId the term id\r\n    /// @return remaining cycles contribution\r\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n\r\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\r\n        uint contributionAmountWei = getToCollateralConversionRate(\r\n            term.contributionAmount * 10 ** 18\r\n        );\r\n\r\n        return remainingCycles * contributionAmountWei;\r\n    }\r\n\r\n    /// @notice a function to get the needed allowance for every active term the user is part of\r\n    /// @param user the user address\r\n    /// @return the needed allowance\r\n    function getNeededAllowance(address user) external view returns (uint) {\r\n        uint neededAllowance;\r\n\r\n        uint[] memory activeTerms = getJoinedTermsByState(\r\n            user,\r\n            LibTermStorage.TermStates.ActiveTerm\r\n        );\r\n        uint[] memory initializedTerms = getJoinedTermsByState(\r\n            user,\r\n            LibTermStorage.TermStates.InitializingTerm\r\n        );\r\n\r\n        uint activeTermsLength = activeTerms.length;\r\n        uint initializedTermsLength = initializedTerms.length;\r\n\r\n        for (uint i; i < activeTermsLength; ) {\r\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\r\n            uint remainingPayments = term.contributionAmount *\r\n                getRemainingCycles(activeTerms[i]) *\r\n                10 ** 6;\r\n            neededAllowance += remainingPayments;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        for (uint i; i < initializedTermsLength; ) {\r\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\r\n                initializedTerms[i]\r\n            ];\r\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\r\n            neededAllowance += totalPayments;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return neededAllowance;\r\n    }\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @param depositor the depositor address\r\n    /// @param termId the collateral id\r\n    /// @return isCollateralMember\r\n    /// @return collateralMembersBank\r\n    /// @return collateralPaymentBank\r\n    /// @return collateralDepositByUser\r\n    /// @return expulsion limit\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint) {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n\r\n        uint limit;\r\n        if (!fund.isBeneficiary[depositor]) {\r\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\r\n        } else {\r\n            limit = getRemainingCyclesContributionWei(termId);\r\n        }\r\n\r\n        return (\r\n            collateral.isCollateralMember[depositor],\r\n            collateral.collateralMembersBank[depositor],\r\n            collateral.collateralPaymentBank[depositor],\r\n            collateral.collateralDepositByUser[depositor],\r\n            limit\r\n        );\r\n    }\r\n\r\n    /// @param termId the collateral id\r\n    /// @return collateral initialized\r\n    /// @return collateral state\r\n    /// @return collateral firstDepositTime\r\n    /// @return counterMembers\r\n    /// @return collateral depositors\r\n    function getCollateralSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\r\n    {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        return (\r\n            collateral.initialized,\r\n            collateral.state, // Current state of Collateral\r\n            collateral.firstDepositTime, // Time when the first deposit was made\r\n            collateral.counterMembers, // Current member count\r\n            collateral.depositors // List of depositors\r\n        );\r\n    }\r\n\r\n    /// @notice Called to check the minimum collateral amount to deposit in wei\r\n    /// @return amount the minimum collateral amount to deposit in wei\r\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\r\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\r\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\r\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\r\n    function minCollateralToDeposit(\r\n        uint termId,\r\n        uint depositorIndex\r\n    ) external view returns (uint amount) {\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n\r\n        require(depositorIndex < term.totalParticipants, \"Index out of bounds\");\r\n\r\n        uint contributionAmountInWei = getToCollateralConversionRate(\r\n            term.contributionAmount * 10 ** 18\r\n        );\r\n\r\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\r\n    }\r\n\r\n    /// @notice Called to check how much collateral a user can withdraw\r\n    /// @param termId term id\r\n    /// @param user depositor address\r\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\r\n    function getWithdrawableUserBalance(\r\n        uint termId,\r\n        address user\r\n    ) external view returns (uint allowedWithdrawal) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint userCollateral = collateral.collateralMembersBank[user];\r\n        uint availableYield = yield.availableYield[user];\r\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\r\n\r\n        if (\r\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\r\n            expelledBeforeBeingBeneficiary\r\n        ) {\r\n            allowedWithdrawal = userCollateral + availableYield;\r\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\r\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\r\n            uint minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\r\n\r\n            // Collateral must be higher than 1.5 X RCC\r\n            if (userCollateral > minRequiredCollateral) {\r\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\r\n            } else {\r\n                allowedWithdrawal = 0;\r\n            }\r\n        } else {\r\n            allowedWithdrawal = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param termId The term id\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\r\n        return LibCollateral._isUnderCollaterized(termId, member);\r\n    }\r\n\r\n    // FUND GETTERS\r\n\r\n    /// @notice function to get the cycle information in one go\r\n    /// @param termId the fund id\r\n    /// @return fund initialized\r\n    /// @return fund currentState\r\n    /// @return fund stableToken\r\n    /// @return fund beneficiariesOrder\r\n    /// @return fund fundStart\r\n    /// @return fund fundEnd\r\n    /// @return fund currentCycle\r\n    /// @return fund totalAmountOfCycles\r\n    function getFundSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\r\n    {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return (\r\n            fund.initialized,\r\n            fund.currentState,\r\n            fund.stableToken,\r\n            fund.beneficiariesOrder,\r\n            fund.fundStart,\r\n            fund.fundEnd,\r\n            fund.currentCycle,\r\n            fund.totalAmountOfCycles\r\n        );\r\n    }\r\n\r\n    /// @notice function to get the current beneficiary\r\n    /// @param termId the fund id\r\n    /// @return the current beneficiary\r\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\r\n    }\r\n\r\n    /// @notice function to know if a user was expelled before\r\n    /// @param termId the fund id\r\n    /// @param user the user to check\r\n    /// @return true if the user was expelled before\r\n    function wasExpelled(uint termId, address user) public view returns (bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @notice function to see if a user is exempted from paying a cycle\r\n    /// @param termId the fund id\r\n    /// @param cycle the cycle to check\r\n    /// @param user the user to check\r\n    /// @return true if the user is exempted\r\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return fund.isExemptedOnCycle[cycle].exempted[user];\r\n    }\r\n\r\n    /// @notice function to get fund information of a specific participant\r\n    /// @param participant the user to get the info from\r\n    /// @param termId the fund id\r\n    /// @return fund isParticipant, true if is participant\r\n    /// @return fund isBeneficiary, true if has been beneficiary\r\n    /// @return fund paidThisCycle, true if has paid the current cycle\r\n    /// @return fund autoPayEnabled, true if auto pay is enabled\r\n    /// @return fund beneficiariesPool, the beneficiary pool, 6 decimals\r\n    /// @return fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint termId\r\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return (\r\n            fund.isParticipant[participant],\r\n            fund.isBeneficiary[participant],\r\n            fund.paidThisCycle[participant],\r\n            fund.autoPayEnabled[participant],\r\n            fund.beneficiariesPool[participant],\r\n            fund.beneficiariesFrozenPool[participant]\r\n        );\r\n    }\r\n\r\n    /// @notice function to get cycle information of a specific participant\r\n    /// @param participant the user to get the info from\r\n    /// @param termId the fund id\r\n    /// @return on participant set\r\n    /// @return on beneficiary set\r\n    /// @return on defaulter set\r\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\r\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\r\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\r\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\r\n    }\r\n\r\n    /// @param termId the id of the term\r\n    /// @param beneficiary the address of the participant to check\r\n    /// @return true if the participant is a beneficiary\r\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return fund.isBeneficiary[beneficiary];\r\n    }\r\n\r\n    /// @param termId the id of the term\r\n    /// @param user the address of the participant to check\r\n    /// @return true if the participant is expelled before being a beneficiary\r\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        return fund.expelledBeforeBeneficiary[user];\r\n    }\r\n\r\n    /// @notice returns the time left to contribute for this cycle\r\n    /// @param termId the fund id\r\n    /// @return the time left to contribute\r\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\r\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\r\n            return 0;\r\n        }\r\n\r\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\r\n        uint contributionEndTimestamp = term.cycleTime *\r\n            (fund.currentCycle - 1) +\r\n            fund.fundStart +\r\n            term.contributionPeriod;\r\n        if (block.timestamp > contributionEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return contributionEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // CONVERSION GETTERS\r\n\r\n    /// @notice Gets latest ETH / USD price\r\n    /// @return uint latest price in Wei Note: 18 decimals\r\n    function getLatestPrice() public view returns (uint) {\r\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\r\n\r\n        (\r\n            uint80 roundID_ethUSD,\r\n            int256 price_ethUSD,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\r\n            uint80 answeredInRound_ethUSD\r\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"ETH/USD\"]).latestRoundData(); //8 decimals\r\n\r\n        // Check if chainlink data is not stale or incorrect\r\n        require(\r\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        (\r\n            uint80 roundID_usdUSDC,\r\n            int256 price_usdUSDC,\r\n            ,\r\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\r\n            uint80 answeredInRound_usdUSDC\r\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"USDC/USD\"]).latestRoundData(); //8 decimals\r\n\r\n        require(\r\n            timeStamp_usdUSDC != 0 &&\r\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\r\n                price_usdUSDC > 0,\r\n            \"ChainlinkOracle: stale data\"\r\n        );\r\n\r\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\r\n\r\n        return uint(ethUSDC * 10 ** 18); //18 decimals\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in USD to ETH\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param USDAmount The amount in USD with 18 decimals\r\n    /// @return uint converted amount in wei\r\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\r\n        uint ethPrice = getLatestPrice();\r\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\r\n        return USDAmountInEth;\r\n    }\r\n\r\n    /// @notice Gets the conversion rate of an amount in ETH to USD\r\n    /// @dev should we always deal with in Wei?\r\n    /// @param ethAmount The amount in ETH\r\n    /// @return uint converted amount in USD correct to 18 decimals\r\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\r\n        // NOTE: This will be made internal\r\n        uint ethPrice = getLatestPrice();\r\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\r\n        return ethAmountInUSD;\r\n    }\r\n\r\n    // YIELD GENERATION GETTERS\r\n\r\n    /// @notice This function is used to check if a user has opted in for yield generation\r\n    /// @param termId The term id for which the check is being made\r\n    /// @param user The user for which the check is being made\r\n    /// @return True if the user has opted in\r\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        return yield.hasOptedIn[user];\r\n    }\r\n\r\n    /// @notice This function is used to get a user APY\r\n    /// @param termId The term id for which the APY is being calculated\r\n    /// @param user The user for which the APY is being calculated\r\n    /// @return The APY for the user\r\n    function userAPY(uint termId, address user) external view returns (uint256) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\r\n\r\n        uint userYieldGenerated = yield.withdrawnYield[user] +\r\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\r\n\r\n        return\r\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\r\n                365 days) / elaspedTime;\r\n    }\r\n\r\n    /// @notice This function is used to get a term APY\r\n    /// @param termId The term id for which the APY is being calculated\r\n    /// @return The APY for the term\r\n    function termAPY(uint termId) external view returns (uint256) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\r\n\r\n        return\r\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\r\n            elaspedTime;\r\n    }\r\n\r\n    /// @notice This function is used to get the total yield generated for a term\r\n    /// @param termId The term id for which the yield is being calculated\r\n    /// @return The total yield generated for the term\r\n    function totalYieldGenerated(uint termId) public view returns (uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint totalWithdrawnYield;\r\n\r\n        address[] memory arrayToCheck = yield.yieldUsers;\r\n        uint arrayLength = arrayToCheck.length;\r\n\r\n        for (uint i; i < arrayLength; ) {\r\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\r\n\r\n        if (sharesInEth > yield.currentTotalDeposit) {\r\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\r\n        } else {\r\n            return totalWithdrawnYield;\r\n        }\r\n    }\r\n\r\n    /// @param user the depositor address\r\n    /// @param termId the collateral id\r\n    /// @return hasOptedIn\r\n    /// @return withdrawnYield\r\n    /// @return withdrawnCollateral\r\n    /// @return availableYield\r\n    /// @return depositedCollateralByUser\r\n    /// @return yieldDistributed\r\n    function getUserYieldSummary(\r\n        address user,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\r\n\r\n        return (\r\n            yield.hasOptedIn[user],\r\n            yield.withdrawnYield[user],\r\n            yield.withdrawnCollateral[user],\r\n            yield.availableYield[user],\r\n            yield.depositedCollateralByUser[user],\r\n            yieldDistributed\r\n        );\r\n    }\r\n\r\n    /// @param termId the collateral id\r\n    /// @return initialized\r\n    /// @return startTimeStamp\r\n    /// @return totalDeposit\r\n    /// @return currentTotalDeposit\r\n    /// @return totalShares\r\n    /// @return yieldUsers\r\n    /// @return vaultAddress\r\n    /// @return zapAddress\r\n    function getYieldSummary(\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n        return (\r\n            yield.initialized,\r\n            yield.startTimeStamp,\r\n            yield.totalDeposit,\r\n            yield.currentTotalDeposit,\r\n            yield.totalShares,\r\n            yield.yieldUsers,\r\n            yield.providerAddresses[\"ZaynVault\"],\r\n            yield.providerAddresses[\"ZaynZap\"]\r\n        );\r\n    }\r\n\r\n    /// @notice This function is used to get the current state of the yield lock\r\n    function getYieldLockState() external view returns (bool) {\r\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\r\n    }\r\n\r\n    /// @notice This function return the current constant values for oracles and yield providers\r\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\r\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\r\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\r\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\r\n    function getConstants(\r\n        string memory firstAggregator,\r\n        string memory secondAggregator,\r\n        string memory zapAddress,\r\n        string memory vaultAddress\r\n    ) external view returns (address, address, address, address) {\r\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\r\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\r\n            ._yieldProviders();\r\n\r\n        return (\r\n            termConsts.aggregatorsAddresses[firstAggregator],\r\n            termConsts.aggregatorsAddresses[secondAggregator],\r\n            yieldProvider.providerAddresses[zapAddress],\r\n            yieldProvider.providerAddresses[vaultAddress]\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/facets/TermFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IFund} from \"../interfaces/IFund.sol\";\r\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {ITerm} from \"../interfaces/ITerm.sol\";\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\r\n\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\n\r\n/// @title Takaturn Term\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to deploy the collateral & fund contracts\r\n/// @dev v3.0 (Diamond)\r\ncontract TermFacet is ITerm {\r\n    event OnTermCreated(uint indexed termId, address indexed termOwner);\r\n    event OnCollateralDeposited(uint indexed termId, address indexed user, uint amount);\r\n    event OnTermFilled(uint indexed termId);\r\n    event OnTermExpired(uint indexed termId);\r\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\r\n\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint registrationPeriod,\r\n        uint cycleTime,\r\n        uint contributionAmount, // in stable token, without decimals\r\n        uint contributionPeriod,\r\n        address stableTokenAddress\r\n    ) external returns (uint) {\r\n        return\r\n            _createTerm(\r\n                totalParticipants,\r\n                registrationPeriod,\r\n                cycleTime,\r\n                contributionAmount,\r\n                contributionPeriod,\r\n                stableTokenAddress\r\n            );\r\n    }\r\n\r\n    function joinTerm(uint termId, bool optYield) external payable {\r\n        _joinTerm(termId, optYield);\r\n    }\r\n\r\n    function startTerm(uint termId) external {\r\n        _startTerm(termId);\r\n    }\r\n\r\n    function expireTerm(uint termId) external {\r\n        _expireTerm(termId);\r\n    }\r\n\r\n    function _createTerm(\r\n        uint _totalParticipants,\r\n        uint _registrationPeriod,\r\n        uint _cycleTime,\r\n        uint _contributionAmount,\r\n        uint _contributionPeriod,\r\n        address _stableTokenAddress\r\n    ) internal returns (uint) {\r\n        require(\r\n            _cycleTime != 0 &&\r\n                _contributionAmount != 0 &&\r\n                _contributionPeriod != 0 &&\r\n                _totalParticipants != 0 &&\r\n                _registrationPeriod != 0 &&\r\n                _contributionPeriod < _cycleTime &&\r\n                _stableTokenAddress != address(0),\r\n            \"Invalid inputs\"\r\n        );\r\n\r\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\r\n        uint termId = termStorage.nextTermId;\r\n\r\n        LibTermStorage.Term memory newTerm;\r\n\r\n        newTerm.termId = termId;\r\n        newTerm.totalParticipants = _totalParticipants;\r\n        newTerm.registrationPeriod = _registrationPeriod;\r\n        newTerm.cycleTime = _cycleTime;\r\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\r\n        newTerm.contributionPeriod = _contributionPeriod;\r\n        newTerm.stableTokenAddress = _stableTokenAddress;\r\n        newTerm.termOwner = msg.sender;\r\n        newTerm.creationTime = block.timestamp;\r\n        newTerm.initialized = true;\r\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\r\n\r\n        termStorage.terms[termId] = newTerm;\r\n        termStorage.nextTermId++;\r\n\r\n        _createCollateral(termId, _totalParticipants);\r\n\r\n        emit OnTermCreated(termId, msg.sender);\r\n\r\n        return termId;\r\n    }\r\n\r\n    function _joinTerm(uint _termId, bool _optYield) internal {\r\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\r\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        require(LibTermStorage._termExists(_termId), \"Term doesn't exist\");\r\n\r\n        require(\r\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\r\n            \"Closed\"\r\n        );\r\n\r\n        require(collateral.counterMembers < term.totalParticipants, \"No space\");\r\n\r\n        require(!collateral.isCollateralMember[msg.sender], \"Reentry\");\r\n\r\n        uint memberIndex = collateral.counterMembers;\r\n\r\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, memberIndex);\r\n        require(msg.value >= minAmount, \"Eth payment too low\");\r\n\r\n        collateral.collateralMembersBank[msg.sender] += msg.value;\r\n        collateral.isCollateralMember[msg.sender] = true;\r\n        collateral.depositors[memberIndex] = msg.sender;\r\n        collateral.counterMembers++;\r\n        collateral.collateralDepositByUser[msg.sender] += msg.value;\r\n\r\n        termStorage.participantToTermId[msg.sender].push(_termId);\r\n\r\n        // If the lock is false, I accept the opt in\r\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\r\n            yield.hasOptedIn[msg.sender] = _optYield;\r\n        } else {\r\n            // If the lock is true, opt in is always false\r\n            yield.hasOptedIn[msg.sender] = false;\r\n        }\r\n\r\n        emit OnCollateralDeposited(_termId, msg.sender, msg.value);\r\n\r\n        if (collateral.counterMembers == 1) {\r\n            collateral.firstDepositTime = block.timestamp;\r\n        }\r\n\r\n        // If all the spots are filled, change the collateral\r\n        if (collateral.counterMembers == term.totalParticipants) {\r\n            emit OnTermFilled(_termId);\r\n        }\r\n    }\r\n\r\n    function _startTerm(uint _termId) internal {\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n        address[] memory depositors = collateral.depositors;\r\n\r\n        uint depositorsArrayLength = depositors.length;\r\n\r\n        require(\r\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\r\n            \"Term not ready to start\"\r\n        );\r\n\r\n        require(collateral.counterMembers == term.totalParticipants, \"All spots are not filled\");\r\n\r\n        // Need to check each user because they can have different collateral amounts\r\n        for (uint i; i < depositorsArrayLength; ) {\r\n            require(\r\n                !LibCollateral._isUnderCollaterized(term.termId, depositors[i]),\r\n                \"Eth prices dropped\"\r\n            );\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Actually create and initialize the fund\r\n        _createFund(term, collateral);\r\n\r\n        // If the lock is false\r\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\r\n            // Check on each depositor if they opted in for yield generation\r\n            for (uint i; i < depositorsArrayLength; ) {\r\n                if (yield.hasOptedIn[depositors[i]]) {\r\n                    // If someone opted in, create the yield generator\r\n                    _createYieldGenerator(term, collateral);\r\n                    break;\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            // If the lock is set to true, before the term starts and after users have joined term\r\n            // There is a chance that somebody has opted in for yield generation\r\n            for (uint i; i < depositorsArrayLength; ) {\r\n                if (yield.hasOptedIn[depositors[i]]) {\r\n                    yield.hasOptedIn[depositors[i]] = false;\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Tell the collateral that the term has started\r\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\r\n\r\n        term.state = LibTermStorage.TermStates.ActiveTerm;\r\n    }\r\n\r\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\r\n        //require(!LibCollateralStorage._collateralExists(termId), \"Collateral already exists\");\r\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        newCollateral.initialized = true;\r\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\r\n        newCollateral.depositors = new address[](_totalParticipants);\r\n    }\r\n\r\n    function _createFund(\r\n        LibTermStorage.Term memory _term,\r\n        LibCollateralStorage.Collateral storage _collateral\r\n    ) internal {\r\n        require(!LibFundStorage._fundExists(_term.termId), \"Fund already exists\");\r\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\r\n\r\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\r\n        newFund.beneficiariesOrder = _collateral.depositors;\r\n        newFund.initialized = true;\r\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\r\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\r\n\r\n        LibFund._initFund(_term.termId);\r\n    }\r\n\r\n    function _expireTerm(uint _termId) internal {\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        require(\r\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\r\n        );\r\n\r\n        require(\r\n            collateral.firstDepositTime != 0 &&\r\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\r\n            \"Registration period not ended\"\r\n        );\r\n\r\n        require(\r\n            collateral.counterMembers < term.totalParticipants,\r\n            \"All spots are filled, can't expire\"\r\n        );\r\n\r\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \"Term already expired\");\r\n\r\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\r\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\r\n\r\n        emit OnTermExpired(_termId);\r\n    }\r\n\r\n    function _createYieldGenerator(\r\n        LibTermStorage.Term memory _term,\r\n        LibCollateralStorage.Collateral storage _collateral\r\n    ) internal {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_term.termId];\r\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\r\n            ._yieldProviders();\r\n\r\n        uint amountToYield;\r\n\r\n        address[] memory depositors = _collateral.depositors;\r\n        uint depositorsArrayLength = depositors.length;\r\n\r\n        for (uint i; i < depositorsArrayLength; ) {\r\n            if (yield.hasOptedIn[depositors[i]]) {\r\n                yield.yieldUsers.push(depositors[i]);\r\n                yield.depositedCollateralByUser[depositors[i]] =\r\n                    (_collateral.collateralMembersBank[depositors[i]] * 90) /\r\n                    100;\r\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (amountToYield > 0) {\r\n            yield.startTimeStamp = block.timestamp;\r\n            yield.initialized = true;\r\n            yield.providerAddresses[\"ZaynZap\"] = yieldProviders.providerAddresses[\"ZaynZap\"];\r\n            yield.providerAddresses[\"ZaynVault\"] = yieldProviders.providerAddresses[\"ZaynVault\"];\r\n\r\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/facets/WithdrawGoerliEthFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n/// @notice: This contract is used for test only, it is not used in the mainnet\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {LibWithdrawGoerliEth} from \"../libraries/LibWithdrawGoerliEth.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\n\r\ncontract WithdrawTestEthFacet {\r\n    event OnTestEthWithdraw(uint indexed amount, address indexed receiver);\r\n\r\n    modifier onlyOwner() {\r\n        LibDiamond.enforceIsContractOwner();\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager(address managerCheck) {\r\n        LibWithdrawGoerliEth._enforceIsTrustedManager(managerCheck);\r\n        _;\r\n    }\r\n\r\n    function withdrawTestEth() external onlyOwner onlyManager(msg.sender) {\r\n        uint balance = address(this).balance;\r\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n        emit OnTestEthWithdraw(balance, msg.sender);\r\n    }\r\n\r\n    function addTrustedAddress(address newManager) external onlyOwner onlyManager(msg.sender) {\r\n        LibWithdrawGoerliEth._addTrustedAddress(newManager);\r\n    }\r\n\r\n    // The next function is to test the error InsufficientBalance on FundFacet is working\r\n    function testInsufficientBalance(uint termId) external onlyOwner onlyManager(msg.sender) {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        uint balance = fund.stableToken.balanceOf(address(this));\r\n        bool success = fund.stableToken.transfer(msg.sender, balance);\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function testUpgradeOnMultisig() external pure returns (string memory) {\r\n        return \"Test multisig upgrade [demo]\";\r\n    }\r\n}\r\n"
    },
    "contracts/facets/YGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\r\n\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\n\r\ncontract YGFacetZaynFi is IYGFacetZaynFi {\r\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\r\n    event OnYieldClaimed(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a user claims their yield\r\n\r\n    modifier onlyOwner() {\r\n        LibDiamond.enforceIsContractOwner();\r\n        _;\r\n    }\r\n\r\n    /// @notice This function allows a user to claim the current available yield\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param receiver The address of the user who will receive the yield\r\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\r\n    function claimAvailableYield(uint termId, address receiver) external {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n\r\n        address[] memory participants = fund.beneficiariesOrder;\r\n        uint participantsLength = participants.length;\r\n        bool canCall;\r\n\r\n        for (uint i; i < participantsLength; ) {\r\n            if (participants[i] == msg.sender) {\r\n                canCall = true;\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        require(canCall, \"The caller must be a participant\");\r\n\r\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\r\n    }\r\n\r\n    /// @notice This function allows a user to toggle their yield generation\r\n    /// @dev only allowed before the term starts\r\n    /// @param termId The term id for which the yield is being claimed\r\n    function toggleOptInYG(uint termId) external {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[termId];\r\n\r\n        require(\r\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\r\n            \"Too late to change YG opt in\"\r\n        );\r\n        require(\r\n            collateral.isCollateralMember[msg.sender],\r\n            \"Pay the collateral security deposit first\"\r\n        );\r\n\r\n        bool optIn = !yield.hasOptedIn[msg.sender];\r\n        yield.hasOptedIn[msg.sender] = optIn;\r\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\r\n    }\r\n\r\n    /// @notice This function allows the owner to update the global variable for new yield provider\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateYieldProvider(\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external onlyOwner {\r\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\r\n            ._yieldProviders();\r\n\r\n        yieldProvider.providerAddresses[providerString] = providerAddress;\r\n    }\r\n\r\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\r\n    function toggleYieldLock() external onlyOwner returns (bool) {\r\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\r\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\r\n\r\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\r\n    }\r\n\r\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateProviderAddressOnTerms(\r\n        uint termId,\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external onlyOwner {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[termId];\r\n\r\n        require(LibFundStorage._fundExists(termId), \"Fund does not exist\");\r\n        require(providerAddress != address(0), \"Invalid provider address\");\r\n        require(\r\n            yield.providerAddresses[providerString] != providerAddress,\r\n            \"Same provider address\"\r\n        );\r\n\r\n        yield.providerAddresses[providerString] = providerAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Collateral Interface\r\n/// @author Aisha EL Allam\r\n/// @notice This is used to allow fund to easily communicate with collateral\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\n\r\ninterface ICollateral {\r\n    // Function cannot be called at this time.\r\n    error FunctionInvalidAtThisState();\r\n\r\n    /// @notice Called from Fund contract when someone defaults\r\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\r\n    /// @param term the term object\r\n    /// @param defaulters Address that was randomly selected for the current cycle\r\n    function requestContribution(\r\n        LibTermStorage.Term memory term,\r\n        address[] calldata defaulters\r\n    ) external returns (address[] memory);\r\n\r\n    /// @notice Called by each member after the end of the cycle to withraw collateral\r\n    /// @dev This follows the pull-over-push pattern.\r\n    /// @param termId The term id\r\n    function withdrawCollateral(uint termId) external;\r\n\r\n    /// @param termId The term id\r\n    function releaseCollateral(uint termId) external;\r\n\r\n    /// @notice allow the owner to empty the Collateral after 180 days\r\n    function emptyCollateralAfterEnd(uint termId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\n/// @title Takaturn Fund Interface\r\n/// @author Mohammed Haddouti\r\n/// @notice This is used to allow collateral to easily communicate with fund\r\n/// @dev v2.0 (post-deploy)\r\n\r\nimport {LibFund} from \"../libraries/LibFund.sol\";\r\n\r\ninterface IFund {\r\n    // function initFund(uint termId) external;\r\n\r\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\r\n    function startNewCycle(uint termId) external;\r\n\r\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\r\n    function closeFundingPeriod(uint termId) external;\r\n\r\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\r\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\r\n    //         and prevent the fund to be stuck in limbo\r\n    function emptyFundAfterEnd(uint termId) external;\r\n\r\n    /// @notice function to enable/disable autopay\r\n    function toggleAutoPay(uint termId) external;\r\n\r\n    /// @notice This is the function participants call to pay the contribution\r\n    function payContribution(uint termId) external;\r\n\r\n    /// @notice This function is here to give the possibility to pay using a different wallet\r\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\r\n    function payContributionOnBehalfOf(uint termId, address participant) external;\r\n\r\n    /// @notice Called by the beneficiary to withdraw the fund\r\n    /// @dev This follows the pull-over-push pattern.\r\n    function withdrawFund(uint termId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IGetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\r\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\r\n\r\ninterface IGetters {\r\n    // TERM GETTERS\r\n\r\n    /// @notice Gets the current and next term id\r\n    /// @return current termID\r\n    /// @return next termID\r\n    function getTermsId() external view returns (uint, uint);\r\n\r\n    /// @notice Must return 0 before starting the fund\r\n    /// @param termId the id of the term\r\n    /// @return remaining registration time in seconds\r\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\r\n\r\n    /// @notice Get current information of a term\r\n    /// @param termId the id of the term\r\n    /// @return Term Struct, see LibTermStorage.sol\r\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\r\n\r\n    /// @notice Gets all terms a user has previously joined\r\n    /// @param participant address\r\n    /// @return List of termIDs\r\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\r\n    /// @param participant address\r\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\r\n    /// @return List of termIDs\r\n    function getJoinedTermsByState(\r\n        address participant,\r\n        LibTermStorage.TermStates state\r\n    ) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all terms a user was previously expelled from\r\n    /// @param participant address\r\n    /// @return List of termIDs\r\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\r\n\r\n    /// @notice Gets all remaining cycles of a term\r\n    /// @param termId the id of the term\r\n    /// @return remaining cycles\r\n    function getRemainingCycles(uint termId) external view returns (uint);\r\n\r\n    /// @notice Must be 0 before starting a new cycle\r\n    /// @param termId the id of the term\r\n    /// @return remaining cycle time in seconds\r\n    function getRemainingCycleTime(uint termId) external view returns (uint);\r\n\r\n    /// @notice Gets the expected remaining contribution amount for users in a term\r\n    /// @param termId the id of the term\r\n    /// @return total remaining contribution in wei\r\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\r\n\r\n    /// @notice a function to get the needed allowance\r\n    /// @param user the user address\r\n    /// @return the needed allowance\r\n    function getNeededAllowance(address user) external view returns (uint);\r\n\r\n    // COLLATERAL GETTERS\r\n\r\n    /// @notice Gets a users collateral summary\r\n    /// @param depositor address\r\n    /// @param termId the id of the term\r\n    /// @return if the user is a true member of the term\r\n    /// @return current users locked collateral balance in wei\r\n    /// @return current users unlocked collateral balance in wei\r\n    /// @return initial users deposit in wei\r\n    /// @return expulsion limit\r\n    function getDepositorCollateralSummary(\r\n        address depositor,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint);\r\n\r\n    /// @notice Gets the collateral summary of a term\r\n    /// @param termId the id of the term\r\n    /// @return if collateral is initialized\r\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\r\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\r\n    /// @return current member count\r\n    /// @return list of depositors\r\n    function getCollateralSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\r\n\r\n    /// @notice Gets the required minimum collateral deposit based on the position\r\n    /// @param termId the term id\r\n    /// @param depositorIndex the index of the depositor\r\n    /// @return required minimum in wei\r\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\r\n\r\n    /// @notice Called to check how much collateral a user can withdraw\r\n    /// @param termId term id\r\n    /// @param user depositor address\r\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\r\n    function getWithdrawableUserBalance(\r\n        uint termId,\r\n        address user\r\n    ) external view returns (uint allowedWithdrawal);\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param termId The term id\r\n    /// @param member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\r\n\r\n    // FUND GETTERS\r\n    /// @notice Gets the fund summary of a term\r\n    /// @param termId the id of the term\r\n    /// @return if fund is initialized\r\n    /// @return current state of the fund, see States struct in LibFund.sol\r\n    /// @return stablecoin address used\r\n    /// @return list for order of beneficiaries\r\n    /// @return when the fund started in seconds\r\n    /// @return when the fund ended in seconds, 0 otherwise\r\n    /// @return current cycle of fund\r\n    /// @return total amount of cycles in this fund/term\r\n    function getFundSummary(\r\n        uint termId\r\n    )\r\n        external\r\n        view\r\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\r\n\r\n    /// @notice Gets the current beneficiary of a term\r\n    /// @param termId the id of the term\r\n    /// @return user address\r\n    function getCurrentBeneficiary(uint termId) external view returns (address);\r\n\r\n    /// @notice Gets if a user is expelled from a specefic term\r\n    /// @param termId the id of the term\r\n    /// @param user address\r\n    /// @return true or false\r\n    function wasExpelled(uint termId, address user) external view returns (bool);\r\n\r\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\r\n    /// @param termId the id of the term\r\n    /// @param cycle number\r\n    /// @param user address\r\n    /// @return true or false\r\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\r\n\r\n    /// @notice Gets a user information of in a fund\r\n    /// @param participant address\r\n    /// @param termId the id of the term\r\n    /// @return if the user is a true member of the fund/term\r\n    /// @return if the user was beneficiary in the past\r\n    /// @return if the user paid for the current cycle\r\n    /// @return if the user has autopay enabled\r\n    /// @return users money pot balance\r\n    function getParticipantFundSummary(\r\n        address participant,\r\n        uint termId\r\n    ) external view returns (bool, bool, bool, bool, uint, bool);\r\n\r\n    /// @notice Must return 0 before closing a contribution period\r\n    /// @param termId the id of the term\r\n    /// @return remaining contribution time in seconds\r\n    function getRemainingContributionTime(uint termId) external view returns (uint);\r\n\r\n    /// @param termId the id of the term\r\n    /// @param beneficiary the address of the participant to check\r\n    /// @return true if the participant is a beneficiary\r\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\r\n\r\n    /// @param termId the id of the term\r\n    /// @param user the address of the participant to check\r\n    /// @return true if the participant is expelled before being a beneficiary\r\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\r\n\r\n    // CONVERSION GETTERS\r\n\r\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\r\n\r\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\r\n\r\n    // YIELD GENERATION GETTERS\r\n\r\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\r\n\r\n    function userAPY(uint termId, address user) external view returns (uint256);\r\n\r\n    function termAPY(uint termId) external view returns (uint256);\r\n\r\n    function totalYieldGenerated(uint termId) external view returns (uint);\r\n\r\n    /// @param user the depositor address\r\n    /// @param termId the collateral id\r\n    /// @return hasOptedIn\r\n    /// @return withdrawnYield\r\n    /// @return withdrawnCollateral\r\n    /// @return availableYield\r\n    /// @return depositedCollateralByUser\r\n    /// @return yieldDistributed\r\n    function getUserYieldSummary(\r\n        address user,\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint, uint);\r\n\r\n    /// @param termId the collateral id\r\n    /// @return initialized\r\n    /// @return startTimeStamp\r\n    /// @return totalDeposit\r\n    /// @return currentTotalDeposit\r\n    /// @return totalShares\r\n    /// @return yieldUsers\r\n    /// @return vaultAddress\r\n    /// @return zapAddress\r\n    function getYieldSummary(\r\n        uint termId\r\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\r\n\r\n    function getYieldLockState() external view returns (bool);\r\n\r\n    /// @notice This function return the current constant values for oracles and yield providers\r\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\r\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\r\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\r\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\r\n    function getConstants(\r\n        string memory firstAggregator,\r\n        string memory secondAggregator,\r\n        string memory zapAddress,\r\n        string memory vaultAddress\r\n    ) external view returns (address, address, address, address);\r\n}\r\n"
    },
    "contracts/interfaces/ITerm.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface ITerm {\r\n    function createTerm(\r\n        uint totalParticipants,\r\n        uint registrationPeriod,\r\n        uint cycleTime,\r\n        uint contributionAmount,\r\n        uint contributionPeriod,\r\n        address stableTokenAddress\r\n    ) external returns (uint);\r\n\r\n    function joinTerm(uint termId, bool optYield) external payable;\r\n\r\n    function startTerm(uint termId) external;\r\n\r\n    function expireTerm(uint termId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IYGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\n\r\ninterface IYGFacetZaynFi {\r\n    /// @notice This function allows a user to claim the current available yield\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param receiver The address of the user who will receive the yield\r\n    function claimAvailableYield(uint termId, address receiver) external;\r\n\r\n    /// @notice This function allows a user to toggle their yield generation\r\n    /// @dev only allowed before the term starts\r\n    /// @param termId The term id for which the yield is being claimed\r\n    function toggleOptInYG(uint termId) external;\r\n\r\n    /// @notice This function allows the owner to update the global variable for new yield provider\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\r\n\r\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\r\n    function toggleYieldLock() external returns (bool);\r\n\r\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\r\n    /// @param termId The term id for which the yield is being claimed\r\n    /// @param providerString The provider string for which the address is being updated\r\n    /// @param providerAddress The new address of the provider\r\n    function updateProviderAddressOnTerms(\r\n        uint termId,\r\n        string memory providerString,\r\n        address providerAddress\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IZaynVaultV2TakaDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynVaultV2TakaDao {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function depositZap(uint256 _amount, uint256 _term) external;\r\n\r\n    function withdrawZap(uint256 _shares, uint256 _term) external;\r\n\r\n    function want() external view returns (address);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    function balanceOf(uint256 term) external view returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IZaynZapV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynZapV2TakaDAO {\r\n    function zapInEth(address vault, uint256 termID) external payable;\r\n\r\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\r\n\r\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\r\n}\r\n"
    },
    "contracts/libraries/LibCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\n\r\nimport {LibCollateralStorage} from \"./LibCollateralStorage.sol\";\r\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\r\n\r\nlibrary LibCollateral {\r\n    event OnCollateralStateChanged(\r\n        uint indexed termId,\r\n        LibCollateralStorage.CollateralStates indexed oldState,\r\n        LibCollateralStorage.CollateralStates indexed newState\r\n    );\r\n    event OnReimbursementWithdrawn(\r\n        uint indexed termId,\r\n        address indexed participant,\r\n        address receiver,\r\n        uint indexed amount\r\n    );\r\n\r\n    /// @param _termId term id\r\n    /// @param _newState collateral state\r\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\r\n        collateral.state = _newState;\r\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\r\n    }\r\n\r\n    /// @param _termId term id\r\n    /// @param _participant Address of the depositor\r\n    function _withdrawReimbursement(\r\n        uint _termId,\r\n        address _participant,\r\n        address _receiver\r\n    ) internal {\r\n        require(LibFundStorage._fundExists(_termId), \"Fund does not exists\");\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        uint amount = collateral.collateralPaymentBank[_participant];\r\n        require(amount > 0, \"Nothing to claim\");\r\n        collateral.collateralPaymentBank[_participant] = 0;\r\n\r\n        (bool success, ) = payable(_receiver).call{value: amount}(\"\");\r\n        require(success);\r\n\r\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\r\n    }\r\n\r\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\r\n    /// @dev This will revert if called during ReleasingCollateral or after\r\n    /// @param _termId The fund id\r\n    /// @param _member The user to check for\r\n    /// @return Bool check if member is below 1.0x of collateralDeposit\r\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\r\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\r\n            ._collateralStorage()\r\n            .collaterals[_termId];\r\n\r\n        uint collateralLimit;\r\n        uint memberCollateral = collateral.collateralMembersBank[_member];\r\n\r\n        if (!LibFundStorage._fundExists(_termId)) {\r\n            // Only check here when starting the term\r\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\r\n                _member,\r\n                _termId\r\n            );\r\n        } else {\r\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\r\n        }\r\n\r\n        return (memberCollateral < collateralLimit);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibCollateralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibCollateralStorage {\r\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\r\n\r\n    enum CollateralStates {\r\n        AcceptingCollateral, // Initial state where collateral are deposited\r\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\r\n        ReleasingCollateral, // Triggered when the fund closes\r\n        Closed // Triggered when all depositors withdraw their collaterals\r\n    }\r\n\r\n    struct DefaulterState {\r\n        bool payWithCollateral;\r\n        bool payWithFrozenPool;\r\n        bool gettingExpelled;\r\n        bool isBeneficiary;\r\n    }\r\n\r\n    struct Collateral {\r\n        bool initialized;\r\n        CollateralStates state;\r\n        uint firstDepositTime;\r\n        uint counterMembers;\r\n        address[] depositors;\r\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\r\n        mapping(address => uint) collateralMembersBank; // Users main balance\r\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\r\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\r\n    }\r\n\r\n    struct CollateralStorage {\r\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\r\n    }\r\n\r\n    function _collateralExists(uint termId) internal view returns (bool) {\r\n        return _collateralStorage().collaterals[termId].initialized;\r\n    }\r\n\r\n    function _collateralStorage()\r\n        internal\r\n        pure\r\n        returns (CollateralStorage storage collateralStorage)\r\n    {\r\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\r\n        assembly {\r\n            collateralStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IGetters} from \"../interfaces/IGetters.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport {LibTermStorage} from \"./LibTermStorage.sol\";\r\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\r\n\r\nlibrary LibFund {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\r\n    event OnFundStateChanged(\r\n        uint indexed termId,\r\n        uint indexed currentCycle,\r\n        LibFundStorage.FundStates indexed newState\r\n    ); // Emits when state has updated\r\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\r\n\r\n    /// @notice called by the term to init the fund\r\n    /// @param termId the id of the term\r\n    function _initFund(uint termId) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\r\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\r\n        // Set and track participants\r\n        for (uint i; i < participantsArrayLength; ) {\r\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\r\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        // Starts the first cycle\r\n        _startNewCycle(termId);\r\n\r\n        // Set timestamp of deployment, which will be used to determine cycle times\r\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\r\n        fund.fundStart = block.timestamp;\r\n        //emit LibFund.OnTermStart(termId);\r\n        emit OnTermStart(termId);\r\n    }\r\n\r\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\r\n    /// @param _termId The id of the term\r\n    function _startNewCycle(uint _termId) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n        // currentCycle is 0 when this is called for the first time\r\n        require(\r\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\r\n            \"Too early to start new cycle\"\r\n        );\r\n        require(\r\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\r\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\r\n            \"Wrong state\"\r\n        );\r\n\r\n        ++fund.currentCycle;\r\n        uint length = fund.beneficiariesOrder.length;\r\n        for (uint i; i < length; ) {\r\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\r\n\r\n        // We attempt to make the autopayers pay their contribution right away\r\n        _autoPay(_termId);\r\n    }\r\n\r\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\r\n    /// @param _termId The id of the term\r\n    /// @param _newState The new state of the fund\r\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"Fund closed\");\r\n        fund.currentState = _newState;\r\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\r\n    }\r\n\r\n    /// @notice function to attempt to make autopayers pay their contribution\r\n    /// @param _termId the id of the term\r\n    function _autoPay(uint _termId) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n\r\n        // Get the beneficiary for this cycle\r\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\r\n\r\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\r\n        uint autoPayersArray = autoPayers.length;\r\n\r\n        for (uint i; i < autoPayersArray; ) {\r\n            address autoPayer = autoPayers[i];\r\n            // The beneficiary doesn't pay\r\n            if (currentBeneficiary == autoPayer) {\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                fund.autoPayEnabled[autoPayer] &&\r\n                !fund.paidThisCycle[autoPayer] &&\r\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\r\n            ) {\r\n                _payContributionSafe(_termId, autoPayer, autoPayer);\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\r\n    /// @param _termId the id of the term\r\n    /// @param _payer the address that's paying\r\n    /// @param _participant the (participant) address that's being paid for\r\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\r\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\r\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\r\n\r\n        // Get the amount and do the actual transfer\r\n        // This will only succeed if the sender approved this contract address beforehand\r\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\r\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\r\n            if (success) {\r\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\r\n                fund.paidThisCycle[_participant] = true;\r\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\r\n            }\r\n        } catch {}\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibFundStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nlibrary LibFundStorage {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\r\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\r\n\r\n    enum FundStates {\r\n        InitializingFund, // Time before the first cycle has started\r\n        AcceptingContributions, // Triggers at the start of a cycle\r\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\r\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\r\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\r\n    }\r\n\r\n    struct PayExemption {\r\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\r\n    }\r\n\r\n    struct Fund {\r\n        bool initialized;\r\n        FundStates currentState; // Variable to keep track of the different FundStates\r\n        IERC20 stableToken; // Instance of the stable token\r\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\r\n        uint fundStart; // Timestamp of the start of the fund\r\n        uint fundEnd; // Timestamp of the end of the fund\r\n        uint currentCycle; // Index of current cycle\r\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\r\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\r\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\r\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\r\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\r\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\r\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\r\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\r\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\r\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\r\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\r\n        uint totalAmountOfCycles;\r\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\r\n    }\r\n\r\n    struct FundStorage {\r\n        mapping(uint => Fund) funds; // termId => Fund struct\r\n    }\r\n\r\n    function _fundExists(uint termId) internal view returns (bool) {\r\n        return _fundStorage().funds[termId].initialized;\r\n    }\r\n\r\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\r\n        bytes32 position = FUND_STORAGE_POSITION;\r\n        assembly {\r\n            fundStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibTermOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\r\n\r\nlibrary LibTermOwnership {\r\n    /**\r\n     * @dev Throws if the sender is not the term owner.\r\n     * @dev Used for internal calls\r\n     */\r\n    function _ensureTermOwner(uint termId) internal view {\r\n        require(\r\n            LibTermStorage._termStorage().terms[termId].termOwner == msg.sender,\r\n            \"TermOwnable: caller is not the owner\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibTermStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibTermStorage {\r\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\r\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\r\n\r\n    enum TermStates {\r\n        InitializingTerm,\r\n        ActiveTerm,\r\n        ExpiredTerm,\r\n        ClosedTerm\r\n    }\r\n\r\n    struct TermConsts {\r\n        mapping(string => address) aggregatorsAddresses; // \"ETH/USD\" => address , \"USDC/USD\" => address\r\n    }\r\n\r\n    struct Term {\r\n        bool initialized;\r\n        TermStates state;\r\n        address termOwner;\r\n        uint creationTime;\r\n        uint termId;\r\n        uint registrationPeriod; // Time for registration (seconds)\r\n        uint totalParticipants; // Max number of participants\r\n        uint cycleTime; // Time for single cycle (seconds)\r\n        uint contributionAmount; // Amount user must pay per cycle (USD)\r\n        uint contributionPeriod; // The portion of cycle user must make payment\r\n        address stableTokenAddress;\r\n    }\r\n\r\n    struct TermStorage {\r\n        uint nextTermId;\r\n        mapping(uint => Term) terms; // termId => Term struct\r\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\r\n    }\r\n\r\n    function _termExists(uint termId) internal view returns (bool) {\r\n        return _termStorage().terms[termId].initialized;\r\n    }\r\n\r\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\r\n        bytes32 position = TERM_CONSTS_POSITION;\r\n        assembly {\r\n            termConsts.slot := position\r\n        }\r\n    }\r\n\r\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\r\n        bytes32 position = TERM_STORAGE_POSITION;\r\n        assembly {\r\n            termStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibWithdrawGoerliEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibWithdrawGoerliEth {\r\n    bytes32 constant TRUSTED_MANAGERS_POSITION = keccak256(\"diamond.standard.trusted.managers\");\r\n\r\n    struct TrustedManagers {\r\n        address[] managers;\r\n    }\r\n\r\n    function _trustedManagers() internal pure returns (TrustedManagers storage trustedManagers) {\r\n        bytes32 position = TRUSTED_MANAGERS_POSITION;\r\n        assembly {\r\n            trustedManagers.slot := position\r\n        }\r\n    }\r\n\r\n    function _addTrustedAddress(address newManager) internal {\r\n        require(newManager != address(0), \"Invalid address\");\r\n        TrustedManagers storage managers = _trustedManagers();\r\n        managers.managers.push(newManager);\r\n    }\r\n\r\n    function _enforceIsTrustedManager(address managerCheck) internal view returns (bool) {\r\n        TrustedManagers storage managers = _trustedManagers();\r\n        uint length = managers.managers.length;\r\n        for (uint i; i < length; ) {\r\n            if (managers.managers[i] == managerCheck) {\r\n                return true;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibYieldGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\r\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\r\n\r\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\r\n\r\nlibrary LibYieldGeneration {\r\n    event OnYieldClaimed(\r\n        uint indexed termId,\r\n        address indexed user,\r\n        address receiver,\r\n        uint indexed amount\r\n    ); // Emits when a user claims their yield\r\n\r\n    /// @notice This function is used to deposit collateral for yield generation\r\n    /// @param _termId The term id for which the collateral is being deposited\r\n    /// @param _ethAmount The amount of collateral being deposited\r\n    function _depositYG(uint _termId, uint _ethAmount) internal {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        yield.totalDeposit = _ethAmount;\r\n        yield.currentTotalDeposit = _ethAmount;\r\n\r\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n\r\n        IZaynZapV2TakaDAO(yield.providerAddresses[\"ZaynZap\"]).zapInEth{value: _ethAmount}(\r\n            vaultAddress,\r\n            _termId\r\n        );\r\n\r\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\r\n    }\r\n\r\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\r\n    /// @param _termId The term id for which the collateral is being withdrawn\r\n    /// @param _collateralAmount The amount of collateral being withdrawn\r\n    /// @param _user The user address that is withdrawing the collateral\r\n    function _withdrawYG(\r\n        uint _termId,\r\n        uint256 _collateralAmount,\r\n        address _user\r\n    ) internal returns (uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint neededShares = _ethToShares(_collateralAmount, yield);\r\n\r\n        yield.withdrawnCollateral[_user] += _collateralAmount;\r\n        yield.currentTotalDeposit -= _collateralAmount;\r\n\r\n        address zapAddress = yield.providerAddresses[\"ZaynZap\"];\r\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\r\n\r\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\r\n            vaultAddress,\r\n            neededShares,\r\n            _termId\r\n        );\r\n\r\n        if (withdrawnAmount < _collateralAmount) {\r\n            return 0;\r\n        } else {\r\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\r\n            yield.withdrawnYield[_user] += withdrawnYield;\r\n            yield.availableYield[_user] += withdrawnYield;\r\n\r\n            return withdrawnYield;\r\n        }\r\n    }\r\n\r\n    /// @notice Conversion from shares to eth\r\n    /// @param _termId The term id\r\n    /// @param _yield The yield generation struct\r\n    function _sharesToEth(\r\n        uint _termId,\r\n        LibYieldGenerationStorage.YieldGeneration storage _yield\r\n    ) internal view returns (uint) {\r\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"]).balanceOf(\r\n            _termId\r\n        );\r\n\r\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\r\n            .getPricePerFullShare();\r\n\r\n        return (termBalance * pricePerShare) / 10 ** 18;\r\n    }\r\n\r\n    /// @notice Conversion from eth to shares\r\n    /// @param _collateralAmount The amount of collateral to withdraw\r\n    /// @param _yield The yield generation struct\r\n    function _ethToShares(\r\n        uint _collateralAmount,\r\n        LibYieldGenerationStorage.YieldGeneration storage _yield\r\n    ) internal view returns (uint) {\r\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\r\n            .getPricePerFullShare();\r\n\r\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\r\n    }\r\n\r\n    /// @notice This function is used to get the current total yield generated for a term\r\n    /// @param _termId The term id for which the yield is being calculated\r\n    /// @return The total yield generated for the term\r\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"]).balanceOf(\r\n            _termId\r\n        );\r\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"])\r\n            .getPricePerFullShare();\r\n\r\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\r\n        if (sharesInEth > yield.currentTotalDeposit) {\r\n            return sharesInEth - yield.currentTotalDeposit;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @notice This function is used to get the yield distribution ratio for a user\r\n    /// @param _termId The term id for which the ratio is being calculated\r\n    /// @param _user The user for which the ratio is being calculated\r\n    /// @return The yield distribution ratio for the user\r\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        if (yield.currentTotalDeposit == 0) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\r\n                    10 ** 18) / yield.currentTotalDeposit;\r\n        }\r\n    }\r\n\r\n    /// @notice This function is used to get the total yield generated for a user\r\n    /// @param termId The term id for which the yield is being calculated\r\n    /// @param user The user for which the yield is being calculated\r\n    /// @return The total yield generated for the user\r\n    function _unwithdrawnUserYieldGenerated(\r\n        uint termId,\r\n        address user\r\n    ) internal view returns (uint) {\r\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\r\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\r\n\r\n        return yieldDistributed;\r\n    }\r\n\r\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\r\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\r\n            ._yieldStorage()\r\n            .yields[_termId];\r\n\r\n        uint availableYield = yield.availableYield[_user];\r\n\r\n        require(availableYield > 0, \"No yield to withdraw\");\r\n\r\n        yield.availableYield[_user] = 0;\r\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\"\");\r\n        require(success);\r\n\r\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/LibYieldGenerationStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nlibrary LibYieldGenerationStorage {\r\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\"diamond.standard.yield.providers\");\r\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\"diamond.standard.yield.storage\");\r\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\"diamond.standard.yield.lock\");\r\n\r\n    enum YGProviders {\r\n        InHouse,\r\n        ZaynFi\r\n    }\r\n\r\n    struct YieldLock {\r\n        bool yieldLock;\r\n    }\r\n\r\n    // Both index 0 are reserved for ZaynFi\r\n    struct YieldProviders {\r\n        mapping(string => address) providerAddresses;\r\n    }\r\n\r\n    struct YieldGeneration {\r\n        bool initialized;\r\n        YGProviders provider;\r\n        mapping(string => address) providerAddresses;\r\n        uint startTimeStamp;\r\n        uint totalDeposit;\r\n        uint currentTotalDeposit;\r\n        uint totalShares;\r\n        address[] yieldUsers;\r\n        mapping(address => bool) hasOptedIn;\r\n        mapping(address => uint256) withdrawnYield;\r\n        mapping(address => uint256) withdrawnCollateral;\r\n        mapping(address => uint256) availableYield;\r\n        mapping(address => uint256) depositedCollateralByUser;\r\n    }\r\n\r\n    struct YieldStorage {\r\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\r\n    }\r\n\r\n    function _yieldExists(uint termId) internal view returns (bool) {\r\n        return _yieldStorage().yields[termId].initialized;\r\n    }\r\n\r\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\r\n        bytes32 position = YIELD_LOCK_POSITION;\r\n        assembly {\r\n            yieldLock.slot := position\r\n        }\r\n    }\r\n\r\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\r\n        bytes32 position = YIELD_PROVIDERS_POSITION;\r\n        assembly {\r\n            yieldProviders.slot := position\r\n        }\r\n    }\r\n\r\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\r\n        bytes32 position = YIELD_STORAGE_POSITION;\r\n        assembly {\r\n            yieldStorage.slot := position\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/aggregator/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract MockV3Aggregator is AggregatorV3Interface {\r\n    int256 price;\r\n    uint8 numDecimals;\r\n    uint256 age;\r\n\r\n    constructor(uint8 _numDecimals, int256 _price) {\r\n        price = _price;\r\n        numDecimals = _numDecimals;\r\n        age = 30;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return numDecimals;\r\n    }\r\n\r\n    function description() external pure override returns (string memory) {\r\n        return \"Mock Chainlink Oracle Feed\";\r\n    }\r\n\r\n    function version() external pure override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function setPrice(int256 _price) public {\r\n        price = _price;\r\n    }\r\n\r\n    function setDecimals(uint8 _decimals) public {\r\n        numDecimals = _decimals;\r\n    }\r\n\r\n    function setAge(uint256 _age) public {\r\n        age = _age;\r\n    }\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = _roundId;\r\n        answer = price;\r\n        startedAt = block.timestamp - age;\r\n        updatedAt = block.timestamp - age;\r\n        answeredInRound = 0;\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        roundId = 0;\r\n        answer = price;\r\n        startedAt = block.timestamp - age;\r\n        updatedAt = block.timestamp - age;\r\n        answeredInRound = 0;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/tokens/tUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract tUSDC is ERC20 {\r\n    constructor() ERC20(\"test USDC Token\", \"tUSDC\") {}\r\n\r\n    function mintUSDC(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 6;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IMasterWombatV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the MasterWombatV2\r\n */\r\ninterface IMasterWombatV2 {\r\n    function getAssetPid(address asset) external view returns (uint256 pid);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function pendingTokens(\r\n        uint256 _pid,\r\n        address _user\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 pendingRewards,\r\n            IERC20[] memory bonusTokenAddresses,\r\n            string[] memory bonusTokenSymbols,\r\n            uint256[] memory pendingBonusRewards\r\n        );\r\n\r\n    function rewarderBonusTokenInfo(\r\n        uint256 _pid\r\n    )\r\n        external\r\n        view\r\n        returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\r\n\r\n    function massUpdatePools() external;\r\n\r\n    function updatePool(uint256 _pid) external;\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\r\n\r\n    function multiClaim(\r\n        uint256[] memory _pids\r\n    )\r\n        external\r\n        returns (\r\n            uint256 transfered,\r\n            uint256[] memory rewards,\r\n            uint256[][] memory additionalRewards\r\n        );\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function migrate(uint256[] calldata _pids) external;\r\n\r\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\r\n\r\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\r\n\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IPool {\r\n    function getTokens() external view returns (address[] memory);\r\n\r\n    function addressOfAsset(address token) external view returns (address);\r\n\r\n    function deposit(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 minimumLiquidity,\r\n        address to,\r\n        uint256 deadline,\r\n        bool shouldStake\r\n    ) external returns (uint256 liquidity);\r\n\r\n    function withdraw(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 minimumAmount,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amount);\r\n\r\n    function withdrawFromOtherAsset(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 liquidity,\r\n        uint256 minimumAmount,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amount);\r\n\r\n    function swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromAmount,\r\n        uint256 minimumToAmount,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 actualToAmount, uint256 haircut);\r\n\r\n    function quotePotentialDeposit(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256 liquidity, uint256 reward);\r\n\r\n    function quotePotentialSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        int256 fromAmount\r\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\r\n\r\n    function quotePotentialWithdraw(\r\n        address token,\r\n        uint256 liquidity\r\n    ) external view returns (uint256 amount, uint256 fee);\r\n\r\n    function quoteAmountIn(\r\n        address fromToken,\r\n        address toToken,\r\n        int256 toAmount\r\n    ) external view returns (uint256 amountIn, uint256 haircut);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IStrategy {\r\n    function vault() external view returns (address);\r\n\r\n    function want() external view returns (IERC20);\r\n\r\n    function beforeDeposit() external;\r\n\r\n    function deposit() external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function balanceOfWant() external view returns (uint256);\r\n\r\n    function balanceOfPool() external view returns (uint256);\r\n\r\n    function harvest() external;\r\n\r\n    function retireStrat() external;\r\n\r\n    function panic() external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function unirouter() external view returns (address);\r\n\r\n    function migrate() external;\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IUniswapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombatLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IWombatLP is IERC20 {\r\n    function underlyingToken() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function cash() external view returns (uint120);\r\n\r\n    function liability() external view returns (uint120);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function underlyingTokenDecimals() external view returns (uint8);\r\n\r\n    function setPool(address pool_) external;\r\n\r\n    function underlyingTokenBalance() external view returns (uint256);\r\n\r\n    function transferUnderlyingToken(address to, uint256 amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(address to, uint256 amount) external;\r\n\r\n    function addCash(uint256 amount) external;\r\n\r\n    function removeCash(uint256 amount) external;\r\n\r\n    function addLiability(uint256 amount) external;\r\n\r\n    function removeLiability(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombatRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IWombatRouter {\r\n    function getAmountOut(\r\n        address[] calldata tokenPath,\r\n        address[] calldata poolPath,\r\n        int256 amountIn\r\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\r\n\r\n    function swapExactTokensForTokens(\r\n        address[] calldata tokenPath,\r\n        address[] calldata poolPath,\r\n        uint256 fromAmount,\r\n        uint256 minimumToAmount,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountOut);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombexInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IConvexBooster {\r\n    function deposit(uint256 pid, uint256 amount, bool stake) external returns (bool);\r\n\r\n    function poolInfo(\r\n        uint256 pid\r\n    )\r\n        external\r\n        view\r\n        returns (address lptoken, address token, address gauge, address crvRewards, bool shutdown);\r\n}\r\n\r\ninterface IConvexRewardPool {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function periodFinish() external view returns (uint256);\r\n\r\n    function getReward() external;\r\n\r\n    function getReward(address _account, bool _claimExtras) external;\r\n\r\n    function withdrawAndUnwrap(uint256 _amount, bool claim) external;\r\n\r\n    function withdrawAllAndUnwrap(bool claim) external;\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynReferrerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IZaynReferrerV2 {\r\n    function recordDeposit(address referrer, uint256 amount) external;\r\n\r\n    function recordWithdraw(address referrer, uint256 amount) external;\r\n\r\n    function recordFeeShare(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynStrategyV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynStrategyV2 {\r\n    function wantUnderlyingToken() external view returns (address);\r\n\r\n    function revShareToken() external view returns (address);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynVaultV2TakaoDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.5;\r\n\r\ninterface IZaynVaultV2TakaoDao {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function depositZap(uint256 _amount, uint256 _term) external;\r\n\r\n    function withdrawZap(uint256 _shares, uint256 _term) external;\r\n\r\n    function want() external pure returns (address);\r\n\r\n    function balance() external pure returns (uint256);\r\n\r\n    function strategy() external pure returns (address);\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./StratManager.sol\";\r\n\r\nabstract contract FeeManager is StratManager {\r\n    uint public constant MAX_FEE = 5000;\r\n    uint public constant FEE_DIVISOR = 1000;\r\n    uint public zaynFee = 200;\r\n    uint public mgmtFeeDelay = 43200; // 12 hours\r\n    uint public chargePerDay = 54794520000000; // 0.02 / 365\r\n    uint public revShareFees = 50; // 0.05 or 5%\r\n\r\n    function setZaynFee(uint256 _fee) public onlyManager {\r\n        require(_fee <= MAX_FEE, \"!cap\");\r\n        zaynFee = _fee;\r\n    }\r\n\r\n    function setMgmtFeeDelay(uint256 _seconds) public onlyManager {\r\n        mgmtFeeDelay = _seconds;\r\n    }\r\n\r\n    function setChargePerDay(uint256 _perDay) public onlyManager {\r\n        chargePerDay = _perDay;\r\n    }\r\n\r\n    function setRevShareFees(uint256 _revShareFees) public onlyManager {\r\n        revShareFees = _revShareFees;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nimport \"../interfaces/IUniswapRouter.sol\";\r\nimport \"../interfaces/IPool.sol\";\r\nimport \"../interfaces/IMasterWombatV2.sol\";\r\nimport \"./StratManager.sol\";\r\nimport \"./FeeManager.sol\";\r\nimport \"../interfaces/IZaynReferrerV2.sol\";\r\nimport \"../interfaces/IWombexInterfaces.sol\";\r\nimport \"../interfaces/IZaynStrategyV2.sol\";\r\nimport \"../interfaces/IWombatRouter.sol\";\r\n\r\ncontract StrategyV2Mock is StratManager, FeeManager, IZaynStrategyV2 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Tokens used\r\n    address public want;\r\n    address public override wantUnderlyingToken;\r\n\r\n    // Third party contracts\r\n    // IConvexBooster public booster = IConvexBooster(0x0A251FA652B59592E60f4bfBce3cD9Cb3d3bd5E9);\r\n    // IPool public wombatPool;\r\n    // address public rewardPool; // convex base reward pool\r\n    uint256 public poolId;\r\n\r\n    struct RewardV2 {\r\n        address token;\r\n        address router; // uniswap v2 router\r\n        address[] toWantUnderlyingRoute; // uniswap route\r\n        uint minAmount; // minimum amount to be swapped to native\r\n    }\r\n    RewardV2[] public rewards;\r\n\r\n    // Zayn settings\r\n    uint256 public lastFeeCharge;\r\n    bool public revShareEnabled = false;\r\n    IZaynReferrerV2 public zaynReferrer;\r\n    IWombatRouter public WOMBAT_ROUTER;\r\n    address public WETH;\r\n    // events\r\n    event Deposit(uint256 tvl);\r\n    event Withdraw(uint256 tvl);\r\n    event AddedLiquidity(uint256 amount);\r\n    event ChargedFees(uint256 revShareFees, uint256 zaynFees);\r\n    event ManagementFees(uint256 zaynFees);\r\n    event StratHarvest(address indexed harvester);\r\n    event Migrated();\r\n\r\n    constructor(\r\n        address _want,\r\n        address _wantUnderlyingToken,\r\n        // IPool _wombatPool,\r\n        uint256 _poolId,\r\n        address _vault,\r\n        address _unirouter,\r\n        address _manager,\r\n        address _strategist,\r\n        address _zaynFeeRecipient,\r\n        IWombatRouter _wombatRouter,\r\n        address _weth\r\n    ) StratManager(_manager, _strategist, _unirouter, _vault, _zaynFeeRecipient) {\r\n        want = _want;\r\n        wantUnderlyingToken = _wantUnderlyingToken;\r\n        // wombatPool = _wombatPool;\r\n        poolId = _poolId;\r\n        lastFeeCharge = block.timestamp;\r\n        WOMBAT_ROUTER = _wombatRouter;\r\n        WETH = _weth;\r\n        // Wombex\r\n        // (,,,rewardPool,) = booster.poolInfo(poolId);\r\n        // _giveAllowances();\r\n    }\r\n\r\n    // puts the funds to work\r\n    function deposit() public whenNotPaused {\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n        if (wantBal > 0) {\r\n            // booster.deposit(poolId, wantBal, true);\r\n            emit Deposit(wantBal);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == vault, \"!vault\");\r\n\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n\r\n        if (wantBal < _amount) {\r\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(_amount - wantBal, false);\r\n            wantBal = IERC20(want).balanceOf(address(this));\r\n        }\r\n\r\n        if (wantBal > _amount) {\r\n            wantBal = _amount;\r\n        }\r\n\r\n        IERC20(want).safeTransfer(vault, wantBal);\r\n        emit Withdraw(wantBal);\r\n    }\r\n\r\n    // compounds earnings and charges performance fee\r\n    function harvest() external whenNotPaused {\r\n        // IConvexRewardPool(rewardPool).getReward(); // harvest\r\n        // swapRewardsToUnderlying();\r\n\r\n        uint256 swapped = IERC20(wantUnderlyingToken).balanceOf(address(this));\r\n        if (swapped > 0) {\r\n            // chargeFees(swapped);\r\n            // addLiquidity();\r\n            // deposit();\r\n        }\r\n\r\n        emit StratHarvest(msg.sender);\r\n    }\r\n\r\n    function swapRewardsToUnderlying() internal view {\r\n        for (uint i; i < rewards.length; ++i) {\r\n            // uint bal = IERC20(rewards[i].token).balanceOf(address(this));\r\n            // if (bal >= rewards[i].minAmount) {\r\n            //     uint256[] memory amountOuts = IUniswapRouter(rewards[i].router).getAmountsOut(bal, rewards[i].toWantUnderlyingRoute);\r\n            //     uint256 _outputAmount = amountOuts[amountOuts.length - 1];\r\n            //     uint256 _slippage = _outputAmount.mul(5 * 10 ** 15).div((1e18));\r\n            //     uint256 _outputAmountAfterSlippage =  _outputAmount.sub(_slippage);\r\n            //     IUniswapRouter(rewards[i].router).swapExactTokensForTokens(\r\n            //         bal,\r\n            //         _outputAmountAfterSlippage,\r\n            //         rewards[i].toWantUnderlyingRoute,\r\n            //         address(this),\r\n            //         block.timestamp\r\n            //     );\r\n            // }\r\n        }\r\n    }\r\n\r\n    function swapEthToUnderlying(\r\n        address _token,\r\n        address _underlyingToken,\r\n        uint256 _amount\r\n    ) internal returns (uint256 swappedAmount) {\r\n        // address[] memory _path = new address[](2);\r\n        // _path[0] = address(_token);\r\n        // _path[1] = address(_underlyingToken);\r\n        // address[] memory _poolPathArr = new address[](1);\r\n        // _poolPathArr[0] = address(poolPath);\r\n        // (uint256 minDepositOut,) = getAmountOut(_path, _poolPathArr, int256(_amount));\r\n        // uint256 _before = IERC20(_underlyingToken).balanceOf(address(this));\r\n        // WOMBAT_ROUTER.swapExactTokensForTokens(\r\n        //     _path,\r\n        //     _poolPathArr,\r\n        //     _amount,\r\n        //     minDepositOut,\r\n        //     address(this),\r\n        //     block.timestamp\r\n        // );\r\n        // uint256 _after = IERC20(_underlyingToken).balanceOf(address(this));\r\n    }\r\n\r\n    // performance fees\r\n    function chargeFees(uint256 swapped) internal {\r\n        uint256 zaynFee = swapped.mul(zaynFee).div(FEE_DIVISOR);\r\n        if (revShareEnabled) {\r\n            uint256 revShareFees = zaynFee.mul(revShareFees).div(FEE_DIVISOR);\r\n            zaynReferrer.recordFeeShare(revShareFees);\r\n            IERC20(wantUnderlyingToken).safeTransfer(address(zaynReferrer), revShareFees);\r\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee.sub(revShareFees));\r\n            emit ChargedFees(revShareFees, zaynFee.sub(revShareFees));\r\n        } else {\r\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee);\r\n            emit ChargedFees(0, zaynFee);\r\n        }\r\n    }\r\n\r\n    // Adds liquidity to AMM and gets more LP tokens.\r\n    function addLiquidity() internal view {\r\n        // uint256 underlyingAmount = IERC20(wantUnderlyingToken).balanceOf(address(this));\r\n        // (uint256 minLiq,) = wombatPool.quotePotentialDeposit(wantUnderlyingToken, underlyingAmount);\r\n        // (uint256 liquidity) = wombatPool.deposit(wantUnderlyingToken, underlyingAmount, 0, address(this), block.timestamp, false);\r\n        // emit AddedLiquidity(liquidity);\r\n    }\r\n\r\n    // calculate the total underlaying 'want' held by the strat.\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    // it calculates how much 'want' this contract holds.\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    // it calculates how much 'want' the strategy has working in the farm.\r\n    function balanceOfPool() public pure returns (uint256) {\r\n        return 0;\r\n        // return IConvexRewardPool(rewardPool).balanceOf(address(this));\r\n    }\r\n\r\n    function revShareToken() public view override returns (address) {\r\n        return wantUnderlyingToken;\r\n    }\r\n\r\n    // called as part of strat migration. Sends all the available funds back to the vault.\r\n    function retireStrat() external {\r\n        require(msg.sender == vault, \"!vault\");\r\n\r\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\r\n\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n        IERC20(want).safeTransfer(vault, wantBal);\r\n    }\r\n\r\n    // pauses deposits and withdraws all funds from third party systems.\r\n    function panic() public onlyManager {\r\n        pause();\r\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\r\n    }\r\n\r\n    function pause() public onlyManager {\r\n        _pause();\r\n\r\n        _removeAllowances();\r\n    }\r\n\r\n    function unpause() external onlyManager {\r\n        _unpause();\r\n\r\n        _giveAllowances();\r\n\r\n        deposit();\r\n    }\r\n\r\n    function _giveAllowances() internal {\r\n        // IERC20(want).safeApprove(address(booster), type(uint256).max);\r\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), type(uint256).max);\r\n    }\r\n\r\n    function _removeAllowances() internal {\r\n        // IERC20(want).safeApprove(address(booster), 0);\r\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), 0);\r\n    }\r\n\r\n    // charges 2% annual management fee per 12 hours.\r\n    function chargeManagementFees() external {\r\n        if (block.timestamp >= lastFeeCharge.add(mgmtFeeDelay)) {\r\n            uint secondsElapsed = block.timestamp - lastFeeCharge;\r\n            uint chargeAmount = chargePerDay.div(86400).mul(secondsElapsed); // getting 0.02 / 365 / 86400\r\n\r\n            uint256 tvl = balanceOf();\r\n            uint256 fees = tvl.mul(chargeAmount).div(1e18);\r\n\r\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(fees, false);\r\n            IERC20(want).safeTransfer(zaynFeeRecipient, fees);\r\n            lastFeeCharge = block.timestamp;\r\n            emit ManagementFees(fees);\r\n        }\r\n    }\r\n\r\n    function enableRevShare(IZaynReferrerV2 _referrer) external onlyOwner {\r\n        revShareEnabled = true;\r\n        zaynReferrer = _referrer;\r\n    }\r\n\r\n    function disableRevShare() external onlyOwner {\r\n        revShareEnabled = false;\r\n    }\r\n\r\n    function migrate() external virtual override {\r\n        require(msg.sender == vault, \"!vault\");\r\n        emit Migrated();\r\n    }\r\n\r\n    function addRewardV2(\r\n        address _router,\r\n        address[] calldata _rewardToUnderlyingRoute,\r\n        uint _minAmount\r\n    ) external onlyOwner {\r\n        // address token = _rewardToUnderlyingRoute[0];\r\n        // require(token != want, \"!want\");\r\n        // require(_rewardToUnderlyingRoute[_rewardToUnderlyingRoute.length - 1] == wantUnderlyingToken, \"!want\");\r\n        // rewards.push(RewardV2(token, _router, _rewardToUnderlyingRoute, _minAmount));\r\n        // IERC20(token).safeApprove(_router, 0);\r\n        // IERC20(token).safeApprove(_router, type(uint).max);\r\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), 0);\r\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), type(uint).max);\r\n    }\r\n\r\n    function resetRewardsV2() external onlyManager {\r\n        delete rewards;\r\n    }\r\n\r\n    function updateBooster(address _booster) external onlyOwner {\r\n        // booster = IConvexBooster(_booster);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/StratManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\ncontract StratManager is Ownable, Pausable {\r\n    /**\r\n     * @dev Zayn Fi Contracts:\r\n     * {manager} - Address to manage a few lower risk features of the strat\r\n     * {strategist} - Address of the strategy author/deployer where strategist fee will go.\r\n     * {vault} - Address of the vault that controls the strategy's funds.\r\n     * {unirouter} - Address of exchange to execute swaps.\r\n     */\r\n    address public manager;\r\n    address public strategist;\r\n    address public unirouter;\r\n    address public vault;\r\n    address public zaynFeeRecipient;\r\n\r\n    /**\r\n     * @dev Initializes the base strategy.\r\n     * @param _manager address to use as alternative owner.\r\n     * @param _strategist address where strategist fees go.\r\n     * @param _unirouter router to use for swaps\r\n     * @param _vault address of parent vault.\r\n     * @param _zaynFeeRecipient address where to send Zayn's fees.\r\n     */\r\n    constructor(\r\n        address _manager,\r\n        address _strategist,\r\n        address _unirouter,\r\n        address _vault,\r\n        address _zaynFeeRecipient\r\n    ) {\r\n        manager = _manager;\r\n        strategist = _strategist;\r\n        unirouter = _unirouter;\r\n        vault = _vault;\r\n        zaynFeeRecipient = _zaynFeeRecipient;\r\n    }\r\n\r\n    // checks that caller is either owner or manager.\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner() || msg.sender == manager, \"!manager\");\r\n        _;\r\n    }\r\n\r\n    function setManager(address _manager) external onlyManager {\r\n        manager = _manager;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates address where strategist fee earnings will go.\r\n     * @param _strategist new strategist address.\r\n     */\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates router that will be used for swaps.\r\n     * @param _unirouter new unirouter address.\r\n     */\r\n    function setUnirouter(address _unirouter) external onlyOwner {\r\n        unirouter = _unirouter;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates parent vault.\r\n     * @param _vault new vault address.\r\n     */\r\n    function setVault(address _vault) external onlyOwner {\r\n        vault = _vault;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates Zayn's fee recipient.\r\n     * @param _zaynFeeRecipient new Zayn's fee recipient address.\r\n     */\r\n    function setZaynFeeRecipient(address _zaynFeeRecipient) external onlyOwner {\r\n        zaynFeeRecipient = _zaynFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to synchronize balances before new user deposit.\r\n     * Can be overridden in the strategy.\r\n     */\r\n    function beforeDeposit() external virtual {}\r\n\r\n    /**\r\n     * @dev Function to synchronize different want tokens if strategy is changed in vault\r\n     * Can be overridden in the strategy.\r\n     */\r\n    function migrate() external virtual {}\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"../interfaces/IStrategy.sol\";\r\nimport \"../interfaces/IZaynReferrerV2.sol\";\r\n\r\n// import \"hardhat/console.sol\";\r\n/**\r\n * @dev Implementation of a vault to deposit funds for yield optimizing.\r\n * This is the contract that receives funds and that users interface with.\r\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\r\n */\r\ncontract ZaynVaultV2TakaDAO is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct StratCandidate {\r\n        address implementation;\r\n        uint proposedTime;\r\n    }\r\n\r\n    // Info of each user.\r\n    struct TermInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n    }\r\n\r\n    mapping(uint256 => TermInfo) public termInfo;\r\n    // The last proposed strategy to switch to.\r\n    StratCandidate public stratCandidate;\r\n    // The strategy currently in use by the vault.\r\n    IStrategy public strategy;\r\n    // The minimum time it has to pass before a strat candidate can be approved.\r\n    uint256 public immutable approvalDelay;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event NewStratCandidate(address implementation);\r\n    event UpgradeStrat(address implementation);\r\n    event Deposit(uint256 indexed term, uint256 amount);\r\n    event Withdraw(uint256 indexed term, uint256 amount);\r\n\r\n    address public zapAddress;\r\n    bool public zapEnabled = false;\r\n\r\n    modifier onlyZap() {\r\n        require(zapAddress == msg.sender, \"Only zap can call\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the value of {token} to the token that the vault will\r\n     * hold as underlying value. It initializes the vault's own 'moo' token.\r\n     * This token is minted when someone does a deposit. It is burned in order\r\n     * to withdraw the corresponding portion of the underlying assets.\r\n     * @param _strategy the address of the strategy.\r\n     * @param _approvalDelay the delay before a new strat can be approved.\r\n     */\r\n    constructor(IStrategy _strategy, uint256 _approvalDelay) {\r\n        strategy = _strategy;\r\n        approvalDelay = _approvalDelay;\r\n    }\r\n\r\n    function want() public view returns (IERC20) {\r\n        return IERC20(strategy.want());\r\n    }\r\n\r\n    /**\r\n     * @dev It calculates the total underlying value of {token} held by the system.\r\n     * It takes into account the vault contract balance, the strategy contract balance\r\n     *  and the balance deployed in other contracts as part of the strategy.\r\n     */\r\n    function balance() public view returns (uint) {\r\n        return want().balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\r\n    }\r\n\r\n    function balanceOf(uint256 termId) public view returns (uint) {\r\n        TermInfo storage term = termInfo[termId];\r\n        return term.amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Custom logic in here for how much the vault allows to be borrowed.\r\n     * We return 100% of tokens for block.timestamp. Under certain conditions we might\r\n     * want to keep some of the system funds at hand in the vault, instead\r\n     * of putting them to work.\r\n     */\r\n    function available() public view returns (uint256) {\r\n        return want().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\r\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\r\n     */\r\n    function getPricePerFullShare() public view returns (uint256) {\r\n        return totalSupply == 0 ? 1e18 : balance().mul(1e18).div(totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev The entrypoint of funds into the system. People deposit with this function\r\n     * into the vault. The vault is then in charge of sending funds into the strategy.\r\n     */\r\n    function _deposit(uint _amount, uint256 _term, address _payer) internal {\r\n        TermInfo storage term = termInfo[_term];\r\n        // console.log(\"_term\", _term);\r\n        strategy.beforeDeposit();\r\n\r\n        uint256 _pool = balance();\r\n        want().safeTransferFrom(_payer, address(this), _amount);\r\n        earn();\r\n        uint256 _after = balance();\r\n        _amount = _after.sub(_pool); // Additional check for deflationary tokens\r\n        uint256 shares = 0;\r\n        if (totalSupply == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = (_amount.mul(totalSupply)).div(_pool);\r\n        }\r\n        // console.log(\"_amount\", _amount);\r\n        // console.log(\"term.amount\", term.amount);\r\n        // console.log(\"shares\", shares);\r\n\r\n        term.amount = term.amount.add(shares);\r\n        totalSupply = totalSupply.add(shares);\r\n        emit Deposit(_term, shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to send funds into the strategy and put them to work. It's primarily called\r\n     * by the vault's deposit() function.\r\n     */\r\n    function earn() public {\r\n        uint _bal = available();\r\n        want().safeTransfer(address(strategy), _bal);\r\n        strategy.deposit();\r\n    }\r\n\r\n    function _withdraw(uint256 _shares, uint256 _term, address _receiver) internal {\r\n        uint256 r = (balance().mul(_shares)).div(totalSupply);\r\n        TermInfo storage term = termInfo[_term];\r\n        require(term.amount >= _shares, \"withdraw: not enough balance\");\r\n        term.amount = term.amount.sub(_shares);\r\n        totalSupply = totalSupply.sub(_shares);\r\n        uint b = want().balanceOf(address(this));\r\n        if (b < r) {\r\n            uint _withdrawAmount = r.sub(b);\r\n            strategy.withdraw(_withdrawAmount);\r\n            uint _after = want().balanceOf(address(this));\r\n            uint _diff = _after.sub(b);\r\n            if (_diff < _withdrawAmount) {\r\n                r = b.add(_diff); // CHECK THIS\r\n            }\r\n        }\r\n        emit Withdraw(_term, _shares);\r\n        want().safeTransfer(_receiver, r);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the candidate for the new strat to use with this vault.\r\n     * @param _implementation The address of the candidate strategy.\r\n     */\r\n    function proposeStrat(address _implementation) public onlyOwner {\r\n        require(\r\n            address(this) == IStrategy(_implementation).vault(),\r\n            \"Proposal not valid for this Vault\"\r\n        );\r\n        stratCandidate = StratCandidate({\r\n            implementation: _implementation,\r\n            proposedTime: block.timestamp\r\n        });\r\n\r\n        emit NewStratCandidate(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev It switches the active strat for the strat candidate. After upgrading, the\r\n     * candidate implementation is set to the 0x00 address, and proposedTime to a time\r\n     * happening in +100 years for safety.\r\n     */\r\n\r\n    function upgradeStrat() public onlyOwner {\r\n        require(stratCandidate.implementation != address(0), \"There is no candidate\");\r\n        require(\r\n            stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\r\n            \"Delay has not passed\"\r\n        );\r\n\r\n        emit UpgradeStrat(stratCandidate.implementation);\r\n        IERC20 oldWant = strategy.want();\r\n        strategy.retireStrat();\r\n        strategy = IStrategy(stratCandidate.implementation);\r\n        uint256 wantBal = oldWant.balanceOf(address(this));\r\n        oldWant.safeTransfer(address(strategy), wantBal);\r\n        strategy.migrate();\r\n        stratCandidate.implementation = address(0);\r\n        stratCandidate.proposedTime = 5000000000;\r\n\r\n        earn();\r\n    }\r\n\r\n    /**\r\n     * @dev Rescues random funds stuck that the strat can't handle.\r\n     * @param _token address of the token to rescue.\r\n     */\r\n    function rescueTokens(address _token) external onlyOwner {\r\n        require(_token != address(want()), \"!token\");\r\n        if (_token == address(0)) {\r\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(sent, \"failed to send\");\r\n        } else {\r\n            uint256 amount = IERC20(_token).balanceOf(address(this));\r\n            IERC20(_token).safeTransfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    // @dev Ability to change the zap address\r\n    function setZapAddress(address _zapAddress) external onlyOwner {\r\n        require(_zapAddress != address(0), \"New zap address is zero address\");\r\n        zapAddress = _zapAddress;\r\n        zapEnabled = true;\r\n    }\r\n\r\n    function toggleZap(bool _toggle) external onlyOwner {\r\n        zapEnabled = _toggle;\r\n    }\r\n\r\n    function depositZap(uint256 _amount, uint256 _term) public nonReentrant onlyZap {\r\n        require(zapEnabled, \"Zap not enabled\");\r\n        // console.log(\"_term\", _term);\r\n        // console.log(\"depositZap _amount\", _amount);\r\n        _deposit(_amount, _term, msg.sender);\r\n    }\r\n\r\n    function withdrawZap(uint256 _shares, uint256 _term) public onlyZap {\r\n        require(zapEnabled, \"Zap not enabled\");\r\n        _withdraw(_shares, _term, msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/zaynfi/protocol/ZaynZapV2TakaDAOMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nimport \"../interfaces/IWombatRouter.sol\";\r\nimport \"../interfaces/IPool.sol\";\r\nimport \"../interfaces/IWombatLP.sol\";\r\nimport \"../interfaces/IZaynVaultV2TakaoDao.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"./TransferHelper.sol\";\r\n\r\ncontract ZaynZapV2TakaDAOMock is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) public allowedTokens;\r\n    IWombatRouter public WOMBAT_ROUTER;\r\n    IPool public WOMBAT_POOL;\r\n    address public WETH;\r\n    address public poolPath;\r\n\r\n    mapping(address => bool) public trustedSenders;\r\n\r\n    constructor(IWombatRouter _wombatRouter, IPool _wombatPool, address _poolPath, address _weth) {\r\n        WOMBAT_ROUTER = _wombatRouter;\r\n        WOMBAT_POOL = _wombatPool;\r\n        poolPath = _poolPath;\r\n        WETH = _weth;\r\n    }\r\n\r\n    modifier onlyTrustedSender() {\r\n        require(trustedSenders[msg.sender], \"only truster senders can call this\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescues random funds stuck that the strat can't handle.\r\n     * @param _token address of the token to rescue.\r\n     */\r\n    function recoverTokens(address _token) external onlyOwner {\r\n        if (_token == address(0)) {\r\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(sent, \"failed to send\");\r\n        } else {\r\n            uint256 amount = IERC20(_token).balanceOf(address(this));\r\n            IERC20(_token).safeTransfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function allowToken(address _token, bool _allow) external onlyOwner {\r\n        allowedTokens[_token] = _allow;\r\n    }\r\n\r\n    function toggleTrustedSender(address _trustedSender, bool _allow) external onlyOwner {\r\n        trustedSenders[_trustedSender] = _allow;\r\n    }\r\n\r\n    function zapInEth(address vault, uint256 termID) external payable onlyTrustedSender {\r\n        require(msg.value > 0, \"Deposit amount should be greater than 0\");\r\n\r\n        address _lpAddress = IZaynVaultV2TakaoDao(vault).want();\r\n        // address _underlyingToken = IWombatLP(_lpAddress).underlyingToken();\r\n\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n        // swapToUnderlying(WETH, _underlyingToken, msg.value); // WETH to underlying\r\n        // uint256 liquidity = addLiquidity(_underlyingToken, msg.value); // underlying to LP\r\n        _approveTokenIfNeeded(_lpAddress, vault); // approve LP to vault\r\n        IZaynVaultV2TakaoDao(vault).depositZap(msg.value, termID); // deposit LP to vault\r\n    }\r\n\r\n    function swapToUnderlying(\r\n        address _token,\r\n        address _underlyingToken,\r\n        uint256 _amount\r\n    ) internal returns (uint256 swappedAmount) {\r\n        // address[] memory _path = new address[](2);\r\n        // _path[0] = address(_token);\r\n        // _path[1] = address(_underlyingToken);\r\n        // address[] memory _poolPathArr = new address[](1);\r\n        // _poolPathArr[0] = address(poolPath);\r\n        // (uint256 minDepositOut,) = getAmountOut(_path, _poolPathArr, int256(_amount));\r\n        // _approveTokenIfNeeded(_token, address(WOMBAT_ROUTER));\r\n        // uint256 _before = IERC20(_underlyingToken).balanceOf(address(this));\r\n        // WOMBAT_ROUTER.swapExactTokensForTokens(\r\n        //     _path,\r\n        //     _poolPathArr,\r\n        //     _amount,\r\n        //     minDepositOut,\r\n        //     address(this),\r\n        //     block.timestamp\r\n        // );\r\n        // uint256 _after = IERC20(_underlyingToken).balanceOf(address(this));\r\n        // swappedAmount = _after.sub(_before);\r\n    }\r\n\r\n    function addLiquidity(\r\n        address _underlyingToken,\r\n        uint256 depositAmount\r\n    ) internal returns (uint256 liquidity) {\r\n        //  (uint256 minLiq,) = WOMBAT_POOL.quotePotentialDeposit(_underlyingToken, depositAmount);\r\n        // uint256 _slippage = minLiq.mul(5 * 10 ** 15).div((1e18));\r\n        // minLiq =  minLiq.sub(_slippage);\r\n        // _approveTokenIfNeeded(_underlyingToken, address(WOMBAT_POOL));\r\n        // liquidity = WOMBAT_POOL.deposit(\r\n        //     _underlyingToken,\r\n        //     depositAmount,\r\n        //     minLiq,\r\n        //     address(this),\r\n        //     block.timestamp,\r\n        //     false\r\n        // );\r\n    }\r\n\r\n    function zapOutETH(\r\n        address vault,\r\n        uint256 _shares,\r\n        uint256 termID\r\n    ) external onlyTrustedSender returns (uint256) {\r\n        require(_shares > 0, \"Amount should be greater than 0\");\r\n        IZaynVaultV2TakaoDao vaultObj = IZaynVaultV2TakaoDao(vault);\r\n        vaultObj.withdrawZap(_shares, termID);\r\n\r\n        // address _lpAddress = IZaynVaultV2TakaoDao(vault).want();\r\n        // address _underlyingToken = IWombatLP(_lpAddress).underlyingToken();\r\n        // uint256 wantBal = IERC20(_lpAddress).balanceOf(address(this));\r\n        // _approveTokenIfNeeded(_lpAddress, address(WOMBAT_POOL));\r\n\r\n        // address[] memory _poolPathArr = new address[](1);\r\n        // _poolPathArr[0] = address(poolPath);\r\n\r\n        // address[] memory _path = new address[](2);\r\n        // _path[0] = address(_underlyingToken);\r\n        // _path[1] = address(WETH);\r\n\r\n        // uint256 withdrawnAmount = WOMBAT_POOL.withdraw(_underlyingToken, wantBal, 0, address(this), block.timestamp);\r\n        // _approveTokenIfNeeded(_underlyingToken, address(WOMBAT_ROUTER));\r\n        // uint256 wethBefore = IERC20(WETH).balanceOf(address(this));\r\n        // WOMBAT_ROUTER.swapExactTokensForTokens(_path, _poolPathArr, withdrawnAmount, 0, address(this), block.timestamp);\r\n        uint256 wethBal = IERC20(WETH).balanceOf(address(this));\r\n        IWETH(WETH).withdraw(wethBal);\r\n        TransferHelper.safeTransferETH(msg.sender, wethBal);\r\n        return wethBal;\r\n    }\r\n\r\n    function _approveTokenIfNeeded(address token, address spender) private {\r\n        if (IERC20(token).allowance(address(this), spender) == 0) {\r\n            IERC20(token).safeApprove(spender, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function getAmountOut(\r\n        address[] memory _path,\r\n        address[] memory _poolPathArr,\r\n        int256 _amount\r\n    ) public view returns (uint256 amountOut, uint256[] memory haircuts) {\r\n        return WOMBAT_ROUTER.getAmountOut(_path, _poolPathArr, _amount);\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n}\r\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}