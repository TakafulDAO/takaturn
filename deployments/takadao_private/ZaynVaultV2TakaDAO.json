{
  "address": "0xd12b5EB920615B37Fe0E4194a449FfeCD2CE18d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_approvalDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "NewStratCandidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "UpgradeStrat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "approvalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "available",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "depositZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "proposeStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zapAddress",
          "type": "address"
        }
      ],
      "name": "setZapAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stratCandidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "termInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_toggle",
          "type": "bool"
        }
      ],
      "name": "toggleZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_term",
          "type": "uint256"
        }
      ],
      "name": "withdrawZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zapAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a3655cdbfebbf560e7f7341d573befbd99ba6a83d6fe2372a406988e4107c0b",
  "receipt": {
    "to": null,
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": "0xd12b5EB920615B37Fe0E4194a449FfeCD2CE18d2",
    "transactionIndex": 0,
    "gasUsed": "1469815",
    "logsBloom": "0x
    "blockHash": "0xb98d84266767b8535ac676483bfbeba5e2127a9c0c4dc05384060882d249e69e",
    "transactionHash": "0x3a3655cdbfebbf560e7f7341d573befbd99ba6a83d6fe2372a406988e4107c0b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30088,
        "transactionHash": "0x3a3655cdbfebbf560e7f7341d573befbd99ba6a83d6fe2372a406988e4107c0b",
        "address": "0xd12b5EB920615B37Fe0E4194a449FfeCD2CE18d2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003904f59df9199e0d6dc3800af9f6794c9d037eb1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb98d84266767b8535ac676483bfbeba5e2127a9c0c4dc05384060882d249e69e"
      }
    ],
    "blockNumber": 30088,
    "cumulativeGasUsed": "1469815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa520D1B134fF05953Be740E56E81d99Bb471F39e",
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "4c3cd66ab0a15c9b0af238afdabf777b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"NewStratCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradeStrat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approvalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"depositZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"proposeStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zapAddress\",\"type\":\"address\"}],\"name\":\"setZapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stratCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"toggleZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_term\",\"type\":\"uint256\"}],\"name\":\"withdrawZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of a vault to deposit funds for yield optimizing. This is the contract that receives funds and that users interface with. The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\",\"kind\":\"dev\",\"methods\":{\"available()\":{\"details\":\"Custom logic in here for how much the vault allows to be borrowed. We return 100% of tokens for block.timestamp. Under certain conditions we might want to keep some of the system funds at hand in the vault, instead of putting them to work.\"},\"balance()\":{\"details\":\"It calculates the total underlying value of {token} held by the system. It takes into account the vault contract balance, the strategy contract balance  and the balance deployed in other contracts as part of the strategy.\"},\"constructor\":{\"details\":\"Sets the value of {token} to the token that the vault will hold as underlying value. It initializes the vault's own 'moo' token. This token is minted when someone does a deposit. It is burned in order to withdraw the corresponding portion of the underlying assets.\",\"params\":{\"_approvalDelay\":\"the delay before a new strat can be approved.\",\"_strategy\":\"the address of the strategy.\"}},\"earn()\":{\"details\":\"Function to send funds into the strategy and put them to work. It's primarily called by the vault's deposit() function.\"},\"getPricePerFullShare()\":{\"details\":\"Function for various UIs to display the current value of one of our yield tokens. Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeStrat(address)\":{\"details\":\"Sets the candidate for the new strat to use with this vault.\",\"params\":{\"_implementation\":\"The address of the candidate strategy.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"details\":\"Rescues random funds stuck that the strat can't handle.\",\"params\":{\"_token\":\"address of the token to rescue.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeStrat()\":{\"details\":\"It switches the active strat for the strat candidate. After upgrading, the candidate implementation is set to the 0x00 address, and proposedTime to a time happening in +100 years for safety.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol\":\"ZaynVaultV2TakaDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function want() external view returns (IERC20);\\r\\n\\r\\n    function beforeDeposit() external;\\r\\n\\r\\n    function deposit() external;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function balanceOf() external view returns (uint256);\\r\\n\\r\\n    function balanceOfWant() external view returns (uint256);\\r\\n\\r\\n    function balanceOfPool() external view returns (uint256);\\r\\n\\r\\n    function harvest() external;\\r\\n\\r\\n    function retireStrat() external;\\r\\n\\r\\n    function panic() external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function unirouter() external view returns (address);\\r\\n\\r\\n    function migrate() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfc212041f739a841b4a036006191766fd8282e1c6af7f93d89cb97fb1440265e\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/interfaces/IZaynReferrerV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IZaynReferrerV2 {\\r\\n    function recordDeposit(address referrer, uint256 amount) external;\\r\\n\\r\\n    function recordWithdraw(address referrer, uint256 amount) external;\\r\\n\\r\\n    function recordFeeShare(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xafc926e3188841d6e45ec7408b2332b6e1d6da72c3e9c0e768d8d94d12cc9ae2\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IStrategy.sol\\\";\\r\\nimport \\\"../interfaces/IZaynReferrerV2.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of a vault to deposit funds for yield optimizing.\\r\\n * This is the contract that receives funds and that users interface with.\\r\\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\\r\\n */\\r\\ncontract ZaynVaultV2TakaDAO is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct StratCandidate {\\r\\n        address implementation;\\r\\n        uint proposedTime;\\r\\n    }\\r\\n\\r\\n    // Info of each user.\\r\\n    struct TermInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => TermInfo) public termInfo;\\r\\n    // The last proposed strategy to switch to.\\r\\n    StratCandidate public stratCandidate;\\r\\n    // The strategy currently in use by the vault.\\r\\n    IStrategy public strategy;\\r\\n    // The minimum time it has to pass before a strat candidate can be approved.\\r\\n    uint256 public immutable approvalDelay;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    event NewStratCandidate(address implementation);\\r\\n    event UpgradeStrat(address implementation);\\r\\n    event Deposit(uint256 indexed term, uint256 amount);\\r\\n    event Withdraw(uint256 indexed term, uint256 amount);\\r\\n\\r\\n    address public zapAddress;\\r\\n    bool public zapEnabled = false;\\r\\n\\r\\n    modifier onlyZap() {\\r\\n        require(zapAddress == msg.sender, \\\"Only zap can call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the value of {token} to the token that the vault will\\r\\n     * hold as underlying value. It initializes the vault's own 'moo' token.\\r\\n     * This token is minted when someone does a deposit. It is burned in order\\r\\n     * to withdraw the corresponding portion of the underlying assets.\\r\\n     * @param _strategy the address of the strategy.\\r\\n     * @param _approvalDelay the delay before a new strat can be approved.\\r\\n     */\\r\\n    constructor(IStrategy _strategy, uint256 _approvalDelay) {\\r\\n        strategy = _strategy;\\r\\n        approvalDelay = _approvalDelay;\\r\\n    }\\r\\n\\r\\n    function want() public view returns (IERC20) {\\r\\n        return IERC20(strategy.want());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev It calculates the total underlying value of {token} held by the system.\\r\\n     * It takes into account the vault contract balance, the strategy contract balance\\r\\n     *  and the balance deployed in other contracts as part of the strategy.\\r\\n     */\\r\\n    function balance() public view returns (uint) {\\r\\n        return want().balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\\r\\n    }\\r\\n\\r\\n    function balanceOf(uint256 termId) public view returns (uint) {\\r\\n        TermInfo storage term = termInfo[termId];\\r\\n        return term.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Custom logic in here for how much the vault allows to be borrowed.\\r\\n     * We return 100% of tokens for block.timestamp. Under certain conditions we might\\r\\n     * want to keep some of the system funds at hand in the vault, instead\\r\\n     * of putting them to work.\\r\\n     */\\r\\n    function available() public view returns (uint256) {\\r\\n        return want().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\\r\\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\\r\\n     */\\r\\n    function getPricePerFullShare() public view returns (uint256) {\\r\\n        return totalSupply == 0 ? 1e18 : balance().mul(1e18).div(totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The entrypoint of funds into the system. People deposit with this function\\r\\n     * into the vault. The vault is then in charge of sending funds into the strategy.\\r\\n     */\\r\\n    function _deposit(uint _amount, uint256 _term, address _payer) internal {\\r\\n        TermInfo storage term = termInfo[_term];\\r\\n        // console.log(\\\"_term\\\", _term);\\r\\n        strategy.beforeDeposit();\\r\\n\\r\\n        uint256 _pool = balance();\\r\\n        want().safeTransferFrom(_payer, address(this), _amount);\\r\\n        earn();\\r\\n        uint256 _after = balance();\\r\\n        _amount = _after.sub(_pool); // Additional check for deflationary tokens\\r\\n        uint256 shares = 0;\\r\\n        if (totalSupply == 0) {\\r\\n            shares = _amount;\\r\\n        } else {\\r\\n            shares = (_amount.mul(totalSupply)).div(_pool);\\r\\n        }\\r\\n        // console.log(\\\"_amount\\\", _amount);\\r\\n        // console.log(\\\"term.amount\\\", term.amount);\\r\\n        // console.log(\\\"shares\\\", shares);\\r\\n\\r\\n        term.amount = term.amount.add(shares);\\r\\n        totalSupply = totalSupply.add(shares);\\r\\n        emit Deposit(_term, shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to send funds into the strategy and put them to work. It's primarily called\\r\\n     * by the vault's deposit() function.\\r\\n     */\\r\\n    function earn() public {\\r\\n        uint _bal = available();\\r\\n        want().safeTransfer(address(strategy), _bal);\\r\\n        strategy.deposit();\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 _shares, uint256 _term, address _receiver) internal {\\r\\n        uint256 r = (balance().mul(_shares)).div(totalSupply);\\r\\n        TermInfo storage term = termInfo[_term];\\r\\n        require(term.amount >= _shares, \\\"withdraw: not enough balance\\\");\\r\\n        term.amount = term.amount.sub(_shares);\\r\\n        totalSupply = totalSupply.sub(_shares);\\r\\n        uint b = want().balanceOf(address(this));\\r\\n        if (b < r) {\\r\\n            uint _withdrawAmount = r.sub(b);\\r\\n            strategy.withdraw(_withdrawAmount);\\r\\n            uint _after = want().balanceOf(address(this));\\r\\n            uint _diff = _after.sub(b);\\r\\n            if (_diff < _withdrawAmount) {\\r\\n                r = b.add(_diff); // CHECK THIS\\r\\n            }\\r\\n        }\\r\\n        emit Withdraw(_term, _shares);\\r\\n        want().safeTransfer(_receiver, r);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the candidate for the new strat to use with this vault.\\r\\n     * @param _implementation The address of the candidate strategy.\\r\\n     */\\r\\n    function proposeStrat(address _implementation) public onlyOwner {\\r\\n        require(\\r\\n            address(this) == IStrategy(_implementation).vault(),\\r\\n            \\\"Proposal not valid for this Vault\\\"\\r\\n        );\\r\\n        stratCandidate = StratCandidate({\\r\\n            implementation: _implementation,\\r\\n            proposedTime: block.timestamp\\r\\n        });\\r\\n\\r\\n        emit NewStratCandidate(_implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev It switches the active strat for the strat candidate. After upgrading, the\\r\\n     * candidate implementation is set to the 0x00 address, and proposedTime to a time\\r\\n     * happening in +100 years for safety.\\r\\n     */\\r\\n\\r\\n    function upgradeStrat() public onlyOwner {\\r\\n        require(stratCandidate.implementation != address(0), \\\"There is no candidate\\\");\\r\\n        require(\\r\\n            stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\\r\\n            \\\"Delay has not passed\\\"\\r\\n        );\\r\\n\\r\\n        emit UpgradeStrat(stratCandidate.implementation);\\r\\n        IERC20 oldWant = strategy.want();\\r\\n        strategy.retireStrat();\\r\\n        strategy = IStrategy(stratCandidate.implementation);\\r\\n        uint256 wantBal = oldWant.balanceOf(address(this));\\r\\n        oldWant.safeTransfer(address(strategy), wantBal);\\r\\n        strategy.migrate();\\r\\n        stratCandidate.implementation = address(0);\\r\\n        stratCandidate.proposedTime = 5000000000;\\r\\n\\r\\n        earn();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescues random funds stuck that the strat can't handle.\\r\\n     * @param _token address of the token to rescue.\\r\\n     */\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        require(_token != address(want()), \\\"!token\\\");\\r\\n        if (_token == address(0)) {\\r\\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n            require(sent, \\\"failed to send\\\");\\r\\n        } else {\\r\\n            uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n            IERC20(_token).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // @dev Ability to change the zap address\\r\\n    function setZapAddress(address _zapAddress) external onlyOwner {\\r\\n        require(_zapAddress != address(0), \\\"New zap address is zero address\\\");\\r\\n        zapAddress = _zapAddress;\\r\\n        zapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function toggleZap(bool _toggle) external onlyOwner {\\r\\n        zapEnabled = _toggle;\\r\\n    }\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) public nonReentrant onlyZap {\\r\\n        require(zapEnabled, \\\"Zap not enabled\\\");\\r\\n        // console.log(\\\"_term\\\", _term);\\r\\n        // console.log(\\\"depositZap _amount\\\", _amount);\\r\\n        _deposit(_amount, _term, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) public onlyZap {\\r\\n        require(zapEnabled, \\\"Zap not enabled\\\");\\r\\n        _withdraw(_shares, _term, msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xea03743ab3ca18e9b71a87d116ac4c51c7aff7bf3536d8aafb677a6a419d1ff3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526007805460ff60a01b1916905534801561001d57600080fd5b5060405161196638038061196683398101604081905261003c916100c2565b61004533610072565b60018055600580546001600160a01b0319166001600160a01b0393909316929092179091556080526100fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100d557600080fd5b82516001600160a01b03811681146100ec57600080fd5b6020939093015192949293505050565b60805161184861011e600039600081816102ec0152610b0401526118486000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c806377c7b8fc116100c3578063b69ef8a81161007c578063b69ef8a8146102d7578063d389800f146102df578063e2d1e75c146102e7578063e66852441461030e578063f043299314610316578063f2fde38b1461032957600080fd5b806377c7b8fc1461026557806378ba898f1461026d5780638da5cb5b146102805780639c11597d146102915780639cc7f708146102a4578063a8c62e76146102c457600080fd5b806333f315751161011557806333f31575146101d9578063340e92e8146101ec57806348a0d7541461020c5780635b12ff9b14610214578063715018a61461022757806376dfabb81461022f57600080fd5b8062ae3bf814610151578063086348351461016657806318160ddd1461018f5780631a331eb1146101a65780631f1fcd51146101d1575b600080fd5b61016461015f36600461164d565b61033c565b005b60075461017a90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b61019860065481565b604051908152602001610186565b6007546101b9906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b6101b96104b9565b6101646101e7366004611671565b61052c565b6101986101fa366004611693565b60026020526000908152604090205481565b6101986105d0565b61016461022236600461164d565b610644565b61016461077f565b600354600454610246916001600160a01b03169082565b604080516001600160a01b039093168352602083019190915201610186565b610198610793565b61016461027b366004611671565b6107d2565b6000546001600160a01b03166101b9565b61016461029f36600461164d565b610887565b6101986102b2366004611693565b60009081526002602052604090205490565b6005546101b9906001600160a01b031681565b61019861090c565b610164610a00565b6101987f000000000000000000000000000000000000000000000000000000000000000081565b610164610aa1565b6101646103243660046116ba565b610dad565b61016461033736600461164d565b610dd3565b610344610e49565b61034c6104b9565b6001600160a01b0316816001600160a01b03160361039a5760405162461bcd60e51b815260206004820152600660248201526510ba37b5b2b760d11b60448201526064015b60405180910390fd5b6001600160a01b03811661043557604051600090339047908381818185875af1925050503d80600081146103ea576040519150601f19603f3d011682016040523d82523d6000602084013e6103ef565b606091505b50509050806104315760405162461bcd60e51b815260206004820152600e60248201526d19985a5b1959081d1bc81cd95b9960921b6044820152606401610391565b5050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a091906116d7565b90506104316001600160a01b0383163383610ea3565b50565b60055460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd519160048083019260209291908290030181865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906116f0565b905090565b6007546001600160a01b0316331461057a5760405162461bcd60e51b815260206004820152601160248201527013db9b1e481e985c0818d85b8818d85b1b607a1b6044820152606401610391565b600754600160a01b900460ff166105c55760405162461bcd60e51b815260206004820152600f60248201526e16985c081b9bdd08195b98589b1959608a1b6044820152606401610391565b610431828233610f0b565b60006105da6104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906116d7565b61064c610e49565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906116f0565b6001600160a01b0316306001600160a01b0316146107185760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c6044820152601d60fa1b6064820152608401610391565b6040805180820182526001600160a01b038316808252426020928301819052600380546001600160a01b0319168317905560045591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b610787610e49565b6107916000611175565b565b60006006546000146107c5576105276006546107bf670de0b6b3a76400006107b961090c565b906111c5565b906111da565b50670de0b6b3a764000090565b6107da6111e6565b6007546001600160a01b031633146108285760405162461bcd60e51b815260206004820152601160248201527013db9b1e481e985c0818d85b8818d85b1b607a1b6044820152606401610391565b600754600160a01b900460ff166108735760405162461bcd60e51b815260206004820152600f60248201526e16985c081b9bdd08195b98589b1959608a1b6044820152606401610391565b61087e82823361123f565b61043160018055565b61088f610e49565b6001600160a01b0381166108e55760405162461bcd60e51b815260206004820152601f60248201527f4e6577207a61702061646472657373206973207a65726f2061646472657373006044820152606401610391565b600780546001600160a81b0319166001600160a01b0390921691909117600160a01b179055565b6000610527600560009054906101000a90046001600160a01b03166001600160a01b031663722713f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098891906116d7565b6109906104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906116d7565b9061137d565b6000610a0a6105d0565b600554909150610a36906001600160a01b031682610a266104b9565b6001600160a01b03169190610ea3565b600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b5050505050565b610aa9610e49565b6003546001600160a01b0316610af95760405162461bcd60e51b81526020600482015260156024820152745468657265206973206e6f2063616e64696461746560581b6044820152606401610391565b6004544290610b28907f000000000000000000000000000000000000000000000000000000000000000061137d565b10610b6c5760405162461bcd60e51b815260206004820152601460248201527311195b185e481a185cc81b9bdd081c185cdcd95960621b6044820152606401610391565b6003546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a160055460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd519160048083019260209291908290030181865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906116f0565b9050600560009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b5050600354600580546001600160a01b0319166001600160a01b039283161790556040516370a0823160e01b81523060048201526000935090841691506370a0823190602401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0791906116d7565b600554909150610d24906001600160a01b03848116911683610ea3565b600560009054906101000a90046001600160a01b03166001600160a01b0316638fd3ab806040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b5050600380546001600160a01b0319169055505064012a05f200600455610431610a00565b610db5610e49565b60078054911515600160a01b0260ff60a01b19909216919091179055565b610ddb610e49565b6001600160a01b038116610e405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610391565b6104b681611175565b6000546001600160a01b031633146107915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610391565b6040516001600160a01b038316602482015260448101829052610f0690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611389565b505050565b6000610f1f6006546107bf866107b961090c565b6000848152600260205260409020805491925090851115610f825760405162461bcd60e51b815260206004820152601c60248201527f77697468647261773a206e6f7420656e6f7567682062616c616e6365000000006044820152606401610391565b8054610f8e908661145e565b8155600654610f9d908661145e565b6006556000610faa6104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101491906116d7565b90508281101561112657600061102a848361145e565b600554604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b5050505060006110936104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd91906116d7565b9050600061110b828561145e565b9050828110156111225761111f848261137d565b95505b5050505b847f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c88760405161115891815260200190565b60405180910390a261116d8484610a266104b9565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006111d18284611723565b90505b92915050565b60006111d1828461173a565b6002600154036112385760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610391565b6002600155565b6000828152600260205260408082206005548251632b9ff78560e11b8152925191936001600160a01b039091169263573fef0a926004808301939282900301818387803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b5050505060006112b161090c565b90506112d28330876112c16104b9565b6001600160a01b031692919061146a565b6112da610a00565b60006112e461090c565b90506112f0818361145e565b95506000600654600003611305575085611321565b61131e836107bf6006548a6111c590919063ffffffff16565b90505b835461132d908261137d565b845560065461133c908261137d565b60065560405181815286907fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c559060200160405180910390a250505050505050565b60006111d1828461175c565b60006113de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114a89092919063ffffffff16565b90508051600014806113ff5750808060200190518101906113ff919061176f565b610f065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610391565b60006111d1828461178c565b6040516001600160a01b03808516602483015283166044820152606481018290526114a29085906323b872dd60e01b90608401610ecf565b50505050565b60606114b784846000856114bf565b949350505050565b6060824710156115205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610391565b600080866001600160a01b0316858760405161153c91906117c3565b60006040518083038185875af1925050503d8060008114611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b509150915061158f8783838761159a565b979650505050505050565b60608315611609578251600003611602576001600160a01b0385163b6116025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610391565b50816114b7565b6114b7838381511561161e5781518083602001fd5b8060405162461bcd60e51b815260040161039191906117df565b6001600160a01b03811681146104b657600080fd5b60006020828403121561165f57600080fd5b813561166a81611638565b9392505050565b6000806040838503121561168457600080fd5b50508035926020909101359150565b6000602082840312156116a557600080fd5b5035919050565b80151581146104b657600080fd5b6000602082840312156116cc57600080fd5b813561166a816116ac565b6000602082840312156116e957600080fd5b5051919050565b60006020828403121561170257600080fd5b815161166a81611638565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111d4576111d461170d565b60008261175757634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111d4576111d461170d565b60006020828403121561178157600080fd5b815161166a816116ac565b818103818111156111d4576111d461170d565b60005b838110156117ba5781810151838201526020016117a2565b50506000910152565b600082516117d581846020870161179f565b9190910192915050565b60208152600082518060208401526117fe81604085016020870161179f565b601f01601f1916919091016040019291505056fea2646970667358221220ed5f0e8233892b9e9d63aa044372789b9a4fa7bbdfaef1ccfd12516642d316fd64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014c5760003560e01c806377c7b8fc116100c3578063b69ef8a81161007c578063b69ef8a8146102d7578063d389800f146102df578063e2d1e75c146102e7578063e66852441461030e578063f043299314610316578063f2fde38b1461032957600080fd5b806377c7b8fc1461026557806378ba898f1461026d5780638da5cb5b146102805780639c11597d146102915780639cc7f708146102a4578063a8c62e76146102c457600080fd5b806333f315751161011557806333f31575146101d9578063340e92e8146101ec57806348a0d7541461020c5780635b12ff9b14610214578063715018a61461022757806376dfabb81461022f57600080fd5b8062ae3bf814610151578063086348351461016657806318160ddd1461018f5780631a331eb1146101a65780631f1fcd51146101d1575b600080fd5b61016461015f36600461164d565b61033c565b005b60075461017a90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b61019860065481565b604051908152602001610186565b6007546101b9906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b6101b96104b9565b6101646101e7366004611671565b61052c565b6101986101fa366004611693565b60026020526000908152604090205481565b6101986105d0565b61016461022236600461164d565b610644565b61016461077f565b600354600454610246916001600160a01b03169082565b604080516001600160a01b039093168352602083019190915201610186565b610198610793565b61016461027b366004611671565b6107d2565b6000546001600160a01b03166101b9565b61016461029f36600461164d565b610887565b6101986102b2366004611693565b60009081526002602052604090205490565b6005546101b9906001600160a01b031681565b61019861090c565b610164610a00565b6101987f000000000000000000000000000000000000000000000000000000000000000081565b610164610aa1565b6101646103243660046116ba565b610dad565b61016461033736600461164d565b610dd3565b610344610e49565b61034c6104b9565b6001600160a01b0316816001600160a01b03160361039a5760405162461bcd60e51b815260206004820152600660248201526510ba37b5b2b760d11b60448201526064015b60405180910390fd5b6001600160a01b03811661043557604051600090339047908381818185875af1925050503d80600081146103ea576040519150601f19603f3d011682016040523d82523d6000602084013e6103ef565b606091505b50509050806104315760405162461bcd60e51b815260206004820152600e60248201526d19985a5b1959081d1bc81cd95b9960921b6044820152606401610391565b5050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a091906116d7565b90506104316001600160a01b0383163383610ea3565b50565b60055460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd519160048083019260209291908290030181865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906116f0565b905090565b6007546001600160a01b0316331461057a5760405162461bcd60e51b815260206004820152601160248201527013db9b1e481e985c0818d85b8818d85b1b607a1b6044820152606401610391565b600754600160a01b900460ff166105c55760405162461bcd60e51b815260206004820152600f60248201526e16985c081b9bdd08195b98589b1959608a1b6044820152606401610391565b610431828233610f0b565b60006105da6104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906116d7565b61064c610e49565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906116f0565b6001600160a01b0316306001600160a01b0316146107185760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c6044820152601d60fa1b6064820152608401610391565b6040805180820182526001600160a01b038316808252426020928301819052600380546001600160a01b0319168317905560045591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b610787610e49565b6107916000611175565b565b60006006546000146107c5576105276006546107bf670de0b6b3a76400006107b961090c565b906111c5565b906111da565b50670de0b6b3a764000090565b6107da6111e6565b6007546001600160a01b031633146108285760405162461bcd60e51b815260206004820152601160248201527013db9b1e481e985c0818d85b8818d85b1b607a1b6044820152606401610391565b600754600160a01b900460ff166108735760405162461bcd60e51b815260206004820152600f60248201526e16985c081b9bdd08195b98589b1959608a1b6044820152606401610391565b61087e82823361123f565b61043160018055565b61088f610e49565b6001600160a01b0381166108e55760405162461bcd60e51b815260206004820152601f60248201527f4e6577207a61702061646472657373206973207a65726f2061646472657373006044820152606401610391565b600780546001600160a81b0319166001600160a01b0390921691909117600160a01b179055565b6000610527600560009054906101000a90046001600160a01b03166001600160a01b031663722713f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098891906116d7565b6109906104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906116d7565b9061137d565b6000610a0a6105d0565b600554909150610a36906001600160a01b031682610a266104b9565b6001600160a01b03169190610ea3565b600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b5050505050565b610aa9610e49565b6003546001600160a01b0316610af95760405162461bcd60e51b81526020600482015260156024820152745468657265206973206e6f2063616e64696461746560581b6044820152606401610391565b6004544290610b28907f000000000000000000000000000000000000000000000000000000000000000061137d565b10610b6c5760405162461bcd60e51b815260206004820152601460248201527311195b185e481a185cc81b9bdd081c185cdcd95960621b6044820152606401610391565b6003546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a160055460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd519160048083019260209291908290030181865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a91906116f0565b9050600560009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b5050600354600580546001600160a01b0319166001600160a01b039283161790556040516370a0823160e01b81523060048201526000935090841691506370a0823190602401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0791906116d7565b600554909150610d24906001600160a01b03848116911683610ea3565b600560009054906101000a90046001600160a01b03166001600160a01b0316638fd3ab806040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b5050600380546001600160a01b0319169055505064012a05f200600455610431610a00565b610db5610e49565b60078054911515600160a01b0260ff60a01b19909216919091179055565b610ddb610e49565b6001600160a01b038116610e405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610391565b6104b681611175565b6000546001600160a01b031633146107915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610391565b6040516001600160a01b038316602482015260448101829052610f0690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611389565b505050565b6000610f1f6006546107bf866107b961090c565b6000848152600260205260409020805491925090851115610f825760405162461bcd60e51b815260206004820152601c60248201527f77697468647261773a206e6f7420656e6f7567682062616c616e6365000000006044820152606401610391565b8054610f8e908661145e565b8155600654610f9d908661145e565b6006556000610faa6104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101491906116d7565b90508281101561112657600061102a848361145e565b600554604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b5050505060006110936104b9565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd91906116d7565b9050600061110b828561145e565b9050828110156111225761111f848261137d565b95505b5050505b847f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c88760405161115891815260200190565b60405180910390a261116d8484610a266104b9565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006111d18284611723565b90505b92915050565b60006111d1828461173a565b6002600154036112385760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610391565b6002600155565b6000828152600260205260408082206005548251632b9ff78560e11b8152925191936001600160a01b039091169263573fef0a926004808301939282900301818387803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b5050505060006112b161090c565b90506112d28330876112c16104b9565b6001600160a01b031692919061146a565b6112da610a00565b60006112e461090c565b90506112f0818361145e565b95506000600654600003611305575085611321565b61131e836107bf6006548a6111c590919063ffffffff16565b90505b835461132d908261137d565b845560065461133c908261137d565b60065560405181815286907fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c559060200160405180910390a250505050505050565b60006111d1828461175c565b60006113de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114a89092919063ffffffff16565b90508051600014806113ff5750808060200190518101906113ff919061176f565b610f065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610391565b60006111d1828461178c565b6040516001600160a01b03808516602483015283166044820152606481018290526114a29085906323b872dd60e01b90608401610ecf565b50505050565b60606114b784846000856114bf565b949350505050565b6060824710156115205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610391565b600080866001600160a01b0316858760405161153c91906117c3565b60006040518083038185875af1925050503d8060008114611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b509150915061158f8783838761159a565b979650505050505050565b60608315611609578251600003611602576001600160a01b0385163b6116025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610391565b50816114b7565b6114b7838381511561161e5781518083602001fd5b8060405162461bcd60e51b815260040161039191906117df565b6001600160a01b03811681146104b657600080fd5b60006020828403121561165f57600080fd5b813561166a81611638565b9392505050565b6000806040838503121561168457600080fd5b50508035926020909101359150565b6000602082840312156116a557600080fd5b5035919050565b80151581146104b657600080fd5b6000602082840312156116cc57600080fd5b813561166a816116ac565b6000602082840312156116e957600080fd5b5051919050565b60006020828403121561170257600080fd5b815161166a81611638565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111d4576111d461170d565b60008261175757634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111d4576111d461170d565b60006020828403121561178157600080fd5b815161166a816116ac565b818103818111156111d4576111d461170d565b60005b838110156117ba5781810151838201526020016117a2565b50506000910152565b600082516117d581846020870161179f565b9190910192915050565b60208152600082518060208401526117fe81604085016020870161179f565b601f01601f1916919091016040019291505056fea2646970667358221220ed5f0e8233892b9e9d63aa044372789b9a4fa7bbdfaef1ccfd12516642d316fd64736f6c63430008120033",
  "devdoc": {
    "details": "Implementation of a vault to deposit funds for yield optimizing. This is the contract that receives funds and that users interface with. The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.",
    "kind": "dev",
    "methods": {
      "available()": {
        "details": "Custom logic in here for how much the vault allows to be borrowed. We return 100% of tokens for block.timestamp. Under certain conditions we might want to keep some of the system funds at hand in the vault, instead of putting them to work."
      },
      "balance()": {
        "details": "It calculates the total underlying value of {token} held by the system. It takes into account the vault contract balance, the strategy contract balance  and the balance deployed in other contracts as part of the strategy."
      },
      "constructor": {
        "details": "Sets the value of {token} to the token that the vault will hold as underlying value. It initializes the vault's own 'moo' token. This token is minted when someone does a deposit. It is burned in order to withdraw the corresponding portion of the underlying assets.",
        "params": {
          "_approvalDelay": "the delay before a new strat can be approved.",
          "_strategy": "the address of the strategy."
        }
      },
      "earn()": {
        "details": "Function to send funds into the strategy and put them to work. It's primarily called by the vault's deposit() function."
      },
      "getPricePerFullShare()": {
        "details": "Function for various UIs to display the current value of one of our yield tokens. Returns an uint256 with 18 decimals of how much underlying asset one vault share represents."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proposeStrat(address)": {
        "details": "Sets the candidate for the new strat to use with this vault.",
        "params": {
          "_implementation": "The address of the candidate strategy."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "details": "Rescues random funds stuck that the strat can't handle.",
        "params": {
          "_token": "address of the token to rescue."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeStrat()": {
        "details": "It switches the active strat for the strat candidate. After upgrading, the candidate implementation is set to the 0x00 address, and proposedTime to a time happening in +100 years for safety."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14084,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "termInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(TermInfo)14079_storage)"
      },
      {
        "astId": 14087,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "stratCandidate",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(StratCandidate)14076_storage"
      },
      {
        "astId": 14090,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "strategy",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStrategy)12590"
      },
      {
        "astId": 14094,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14116,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "zapAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 14119,
        "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
        "label": "zapEnabled",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStrategy)12590": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(TermInfo)14079_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ZaynVaultV2TakaDAO.TermInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TermInfo)14079_storage"
      },
      "t_struct(StratCandidate)14076_storage": {
        "encoding": "inplace",
        "label": "struct ZaynVaultV2TakaDAO.StratCandidate",
        "members": [
          {
            "astId": 14073,
            "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
            "label": "implementation",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14075,
            "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
            "label": "proposedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TermInfo)14079_storage": {
        "encoding": "inplace",
        "label": "struct ZaynVaultV2TakaDAO.TermInfo",
        "members": [
          {
            "astId": 14078,
            "contract": "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol:ZaynVaultV2TakaDAO",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}