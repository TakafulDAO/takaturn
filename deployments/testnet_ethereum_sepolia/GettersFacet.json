{
  "address": "0xB044CF266ad8A337DfC75A8e5c21FCa442E01cfc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "expelledBeforeBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getAllJoinedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getExpelledTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "enum LibTermStorage.TermStates",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "getJoinedTermsByState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNeededAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRegistrationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToCollateralConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToStableConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldLockState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isExempted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasoptedInYG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f0818603ed65b5c4ebaeb90e357025d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"expelledBeforeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getAllJoinedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getExpelledTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"getJoinedTermsByState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNeededAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToCollateralConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToStableConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldLockState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasoptedInYG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"expelledBeforeBeneficiary(uint256,address)\":{\"params\":{\"termId\":\"the id of the term\",\"user\":\"the address of the participant to check\"},\"returns\":{\"_0\":\"true if the participant is expelled before being a beneficiary\"}},\"getAllJoinedTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of\"}},\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"collateral initialized\",\"_1\":\"collateral state\",\"_2\":\"collateral firstDepositTime\",\"_3\":\"counterMembers\",\"_4\":\"collateral depositors\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"isCollateralMember\",\"_1\":\"collateralMembersBank\",\"_2\":\"collateralPaymentBank\",\"_3\":\"collateralDepositByUser\",\"_4\":\"expulsion limit\"}},\"getExpelledTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array the term ids the participant is part of, giving the state of the term\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"fund initialized\",\"_1\":\"fund currentState\",\"_2\":\"fund stableToken\",\"_3\":\"fund beneficiariesOrder\",\"_4\":\"fund fundStart\",\"_5\":\"fund fundEnd\",\"_6\":\"fund currentCycle\",\"_7\":\"fund totalAmountOfCycles\"}},\"getJoinedTermsByState(address,uint8)\":{\"params\":{\"participant\":\"the participant address\",\"state\":\"the term state\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of, giving the state of the term\"}},\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getNeededAllowance(address)\":{\"params\":{\"user\":\"the user address\"},\"returns\":{\"_0\":\"the needed allowance\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"fund isParticipant, true if is participant\",\"_1\":\"fund isBeneficiary, true if has been beneficiary\",\"_2\":\"fund paidThisCycle, true if has paid the current cycle\",\"_3\":\"fund autoPayEnabled, true if auto pay is enabled\",\"_4\":\"fund beneficiariesPool, the beneficiary pool, 6 decimals\",\"_5\":\"fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution\"}},\"getRemainingRegistrationTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining contribution period\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term struct\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToCollateralConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"USDAmount\":\"The amount in USD with 18 decimals\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToStableConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"getUserSet(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"on participant set\",\"_1\":\"on beneficiary set\",\"_2\":\"on defaulter set\"}},\"getUserYieldSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"_0\":\"hasOptedIn\",\"_1\":\"withdrawnYield\",\"_2\":\"withdrawnCollateral\",\"_3\":\"availableYield\",\"_4\":\"depositedCollateralByUser\",\"_5\":\"yieldDistributed\"}},\"getWithdrawableUserBalance(uint256,address)\":{\"params\":{\"termId\":\"term id\",\"user\":\"depositor address\"},\"returns\":{\"allowedWithdrawal\":\"amount the amount of collateral the depositor can withdraw\"}},\"getYieldSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"initialized\",\"_1\":\"startTimeStamp\",\"_2\":\"totalDeposit\",\"_3\":\"currentTotalDeposit\",\"_4\":\"totalShares\",\"_5\":\"yieldUsers\",\"_6\":\"vaultAddress\",\"_7\":\"zapAddress\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"isExempted(uint256,uint256,address)\":{\"params\":{\"cycle\":\"the cycle to check\",\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user is exempted\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"minCollateralToDeposit(uint256,uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5\",\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPY(uint256)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPY(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\",\"user\":\"The user for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the user\"}},\"userHasoptedInYG(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the check is being made\",\"user\":\"The user for which the check is being made\"},\"returns\":{\"_0\":\"True if the user has opted in\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the current beneficiary\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getNeededAllowance(address)\":{\"notice\":\"a function to get the needed allowance for every active term the user is part of\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getRemainingRegistrationTime(uint256)\":{\"notice\":\"Gets the remaining registration period for a term\"},\"getToCollateralConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToStableConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"getUserSet(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getWithdrawableUserBalance(uint256,address)\":{\"notice\":\"Called to check how much collateral a user can withdraw\"},\"getYieldLockState()\":{\"notice\":\"This function is used to get the current state of the yield lock\"},\"isExempted(uint256,uint256,address)\":{\"notice\":\"function to see if a user is exempted from paying a cycle\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"minCollateralToDeposit(uint256,uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPY(uint256)\":{\"notice\":\"This function is used to get a term APY\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPY(uint256,address)\":{\"notice\":\"This function is used to get a user APY\"},\"userHasoptedInYG(uint256,address)\":{\"notice\":\"This function is used to check if a user has opted in for yield generation\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\ncontract GettersFacet is IGetters {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    // TERM GETTERS\\r\\n    /// @return the current term id\\r\\n    /// @return the next term id\\r\\n    function getTermsId() external view returns (uint, uint) {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        uint lastTermId = termStorage.nextTermId - 1;\\r\\n        uint nextTermId = termStorage.nextTermId;\\r\\n        return (lastTermId, nextTermId);\\r\\n    }\\r\\n\\r\\n    ///  @notice Gets the remaining registration period for a term\\r\\n    ///  @param termId the term id\\r\\n    ///  @return remaining contribution period\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        require(collateral.firstDepositTime != 0, \\\"Nobody has deposited yet\\\");\\r\\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return the term struct\\r\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\\r\\n        return (LibTermStorage._termStorage().terms[termId]);\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array with the term ids the participant is part of\\r\\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\r\\n        return participantTermIds;\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @param state the term state\\r\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTermStorage.TermStates state\\r\\n    ) public view returns (uint[] memory) {\\r\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\r\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\r\\n        uint termsCounter;\\r\\n        uint joinedTermsLength = joinedTerms.length;\\r\\n\\r\\n        for (uint i; i < joinedTermsLength; ) {\\r\\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\\r\\n                temporaryArray[termsCounter] = joinedTerms[i];\\r\\n                unchecked {\\r\\n                    ++termsCounter;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory userTermsByState = new uint[](termsCounter);\\r\\n\\r\\n        for (uint i; i < termsCounter; ) {\\r\\n            userTermsByState[i] = temporaryArray[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return userTermsByState;\\r\\n    }\\r\\n\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array the term ids the participant is part of, giving the state of the term\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\\r\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\r\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\r\\n        uint termsCounter;\\r\\n        uint joinedTermsLength = joinedTerms.length;\\r\\n\\r\\n        for (uint i; i < joinedTermsLength; ) {\\r\\n            if (wasExpelled(joinedTerms[i], participant)) {\\r\\n                temporaryArray[termsCounter] = joinedTerms[i];\\r\\n                unchecked {\\r\\n                    ++termsCounter;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory termsExpelled = new uint[](termsCounter);\\r\\n\\r\\n        for (uint i; i < termsCounter; ) {\\r\\n            termsExpelled[i] = temporaryArray[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return termsExpelled;\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) public view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n\\r\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining time in the current cycle\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\r\\n        if (block.timestamp > cycleEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return cycleEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining cycles contribution\\r\\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\r\\n        uint contributionAmountWei = getToCollateralConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        return remainingCycles * contributionAmountWei;\\r\\n    }\\r\\n\\r\\n    /// @notice a function to get the needed allowance for every active term the user is part of\\r\\n    /// @param user the user address\\r\\n    /// @return the needed allowance\\r\\n    function getNeededAllowance(address user) external view returns (uint) {\\r\\n        uint neededAllowance;\\r\\n\\r\\n        uint[] memory activeTerms = getJoinedTermsByState(\\r\\n            user,\\r\\n            LibTermStorage.TermStates.ActiveTerm\\r\\n        );\\r\\n        uint[] memory initializedTerms = getJoinedTermsByState(\\r\\n            user,\\r\\n            LibTermStorage.TermStates.InitializingTerm\\r\\n        );\\r\\n\\r\\n        uint activeTermsLength = activeTerms.length;\\r\\n        uint initializedTermsLength = initializedTerms.length;\\r\\n\\r\\n        for (uint i; i < activeTermsLength; ) {\\r\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\\r\\n            uint remainingPayments = term.contributionAmount *\\r\\n                getRemainingCycles(activeTerms[i]) *\\r\\n                10 ** 6;\\r\\n            neededAllowance += remainingPayments;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i; i < initializedTermsLength; ) {\\r\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\\r\\n                initializedTerms[i]\\r\\n            ];\\r\\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\\r\\n            neededAllowance += totalPayments;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return neededAllowance;\\r\\n    }\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @param depositor the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return isCollateralMember\\r\\n    /// @return collateralMembersBank\\r\\n    /// @return collateralPaymentBank\\r\\n    /// @return collateralDepositByUser\\r\\n    /// @return expulsion limit\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        uint limit;\\r\\n        if (!fund.isBeneficiary[depositor]) {\\r\\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\r\\n        } else {\\r\\n            limit = getRemainingCyclesContributionWei(termId);\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            collateral.isCollateralMember[depositor],\\r\\n            collateral.collateralMembersBank[depositor],\\r\\n            collateral.collateralPaymentBank[depositor],\\r\\n            collateral.collateralDepositByUser[depositor],\\r\\n            limit\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return collateral initialized\\r\\n    /// @return collateral state\\r\\n    /// @return collateral firstDepositTime\\r\\n    /// @return counterMembers\\r\\n    /// @return collateral depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\\r\\n    {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        return (\\r\\n            collateral.initialized,\\r\\n            collateral.state, // Current state of Collateral\\r\\n            collateral.firstDepositTime, // Time when the first deposit was made\\r\\n            collateral.counterMembers, // Current member count\\r\\n            collateral.depositors // List of depositors\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\r\\n    /// @return amount the minimum collateral amount to deposit in wei\\r\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\r\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\r\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\r\\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\\r\\n    function minCollateralToDeposit(\\r\\n        uint termId,\\r\\n        uint depositorIndex\\r\\n    ) external view returns (uint amount) {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n\\r\\n        require(depositorIndex < term.totalParticipants, \\\"Index out of bounds\\\");\\r\\n\\r\\n        uint contributionAmountInWei = getToCollateralConversionRate(\\r\\n            term.contributionAmount * 10 ** 18\\r\\n        );\\r\\n\\r\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\r\\n    }\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint userCollateral = collateral.collateralMembersBank[user];\\r\\n        uint availableYield = yield.availableYield[user];\\r\\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\\r\\n\\r\\n        if (\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\r\\n            expelledBeforeBeingBeneficiary\\r\\n        ) {\\r\\n            allowedWithdrawal = userCollateral + availableYield;\\r\\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\r\\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\r\\n            uint minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\\r\\n\\r\\n            // Collateral must be higher than 1.5 X RCC\\r\\n            if (userCollateral > minRequiredCollateral) {\\r\\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\\r\\n            } else {\\r\\n                allowedWithdrawal = 0;\\r\\n            }\\r\\n        } else {\\r\\n            allowedWithdrawal = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\r\\n        return LibCollateral._isUnderCollaterized(termId, member);\\r\\n    }\\r\\n\\r\\n    // FUND GETTERS\\r\\n\\r\\n    /// @notice function to get the cycle information in one go\\r\\n    /// @param termId the fund id\\r\\n    /// @return fund initialized\\r\\n    /// @return fund currentState\\r\\n    /// @return fund stableToken\\r\\n    /// @return fund beneficiariesOrder\\r\\n    /// @return fund fundStart\\r\\n    /// @return fund fundEnd\\r\\n    /// @return fund currentCycle\\r\\n    /// @return fund totalAmountOfCycles\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\r\\n    {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return (\\r\\n            fund.initialized,\\r\\n            fund.currentState,\\r\\n            fund.stableToken,\\r\\n            fund.beneficiariesOrder,\\r\\n            fund.fundStart,\\r\\n            fund.fundEnd,\\r\\n            fund.currentCycle,\\r\\n            fund.totalAmountOfCycles\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get the current beneficiary\\r\\n    /// @param termId the fund id\\r\\n    /// @return the current beneficiary\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\r\\n    }\\r\\n\\r\\n    /// @notice function to know if a user was expelled before\\r\\n    /// @param termId the fund id\\r\\n    /// @param user the user to check\\r\\n    /// @return true if the user was expelled before\\r\\n    function wasExpelled(uint termId, address user) public view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to see if a user is exempted from paying a cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @param cycle the cycle to check\\r\\n    /// @param user the user to check\\r\\n    /// @return true if the user is exempted\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.isExemptedOnCycle[cycle].exempted[user];\\r\\n    }\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return fund isParticipant, true if is participant\\r\\n    /// @return fund isBeneficiary, true if has been beneficiary\\r\\n    /// @return fund paidThisCycle, true if has paid the current cycle\\r\\n    /// @return fund autoPayEnabled, true if auto pay is enabled\\r\\n    /// @return fund beneficiariesPool, the beneficiary pool, 6 decimals\\r\\n    /// @return fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return (\\r\\n            fund.isParticipant[participant],\\r\\n            fund.isBeneficiary[participant],\\r\\n            fund.paidThisCycle[participant],\\r\\n            fund.autoPayEnabled[participant],\\r\\n            fund.beneficiariesPool[participant],\\r\\n            fund.beneficiariesFrozenPool[participant]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice function to get cycle information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return on participant set\\r\\n    /// @return on beneficiary set\\r\\n    /// @return on defaulter set\\r\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\\r\\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\\r\\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\\r\\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\\r\\n    }\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.isBeneficiary[beneficiary];\\r\\n    }\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user the address of the participant to check\\r\\n    /// @return true if the participant is expelled before being a beneficiary\\r\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        return fund.expelledBeforeBeneficiary[user];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the time left to contribute for this cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @return the time left to contribute\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\r\\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\r\\n        uint contributionEndTimestamp = term.cycleTime *\\r\\n            (fund.currentCycle - 1) +\\r\\n            fund.fundStart +\\r\\n            term.contributionPeriod;\\r\\n        if (block.timestamp > contributionEndTimestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return contributionEndTimestamp - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    /// @notice Gets latest ETH / USD price\\r\\n    /// @return uint latest price in Wei Note: 18 decimals\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\r\\n\\r\\n        (\\r\\n            uint80 roundID_ethUSD,\\r\\n            int256 price_ethUSD,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\r\\n            uint80 answeredInRound_ethUSD\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        // Check if chainlink data is not stale or incorrect\\r\\n        require(\\r\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            uint80 roundID_usdUSDC,\\r\\n            int256 price_usdUSDC,\\r\\n            ,\\r\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\r\\n            uint80 answeredInRound_usdUSDC\\r\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USDC/USD\\\"]).latestRoundData(); //8 decimals\\r\\n\\r\\n        require(\\r\\n            timeStamp_usdUSDC != 0 &&\\r\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\r\\n                price_usdUSDC > 0,\\r\\n            \\\"ChainlinkOracle: stale data\\\"\\r\\n        );\\r\\n\\r\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\r\\n\\r\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param USDAmount The amount in USD with 18 decimals\\r\\n    /// @return uint converted amount in wei\\r\\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\r\\n        return USDAmountInEth;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\r\\n    /// @dev should we always deal with in Wei?\\r\\n    /// @param ethAmount The amount in ETH\\r\\n    /// @return uint converted amount in USD correct to 18 decimals\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\\r\\n        // NOTE: This will be made internal\\r\\n        uint ethPrice = getLatestPrice();\\r\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    /// @notice This function is used to check if a user has opted in for yield generation\\r\\n    /// @param termId The term id for which the check is being made\\r\\n    /// @param user The user for which the check is being made\\r\\n    /// @return True if the user has opted in\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        return yield.hasOptedIn[user];\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get a user APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @param user The user for which the APY is being calculated\\r\\n    /// @return The APY for the user\\r\\n    function userAPY(uint termId, address user) external view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        uint userYieldGenerated = yield.withdrawnYield[user] +\\r\\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\r\\n\\r\\n        return\\r\\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\\r\\n                365 days) / elaspedTime;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get a term APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @return The APY for the term\\r\\n    function termAPY(uint termId) external view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\r\\n\\r\\n        return\\r\\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\\r\\n            elaspedTime;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a term\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint totalWithdrawnYield;\\r\\n\\r\\n        address[] memory arrayToCheck = yield.yieldUsers;\\r\\n        uint arrayLength = arrayToCheck.length;\\r\\n\\r\\n        for (uint i; i < arrayLength; ) {\\r\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\\r\\n\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return totalWithdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return hasOptedIn\\r\\n    /// @return withdrawnYield\\r\\n    /// @return withdrawnCollateral\\r\\n    /// @return availableYield\\r\\n    /// @return depositedCollateralByUser\\r\\n    /// @return yieldDistributed\\r\\n    function getUserYieldSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n\\r\\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\r\\n\\r\\n        return (\\r\\n            yield.hasOptedIn[user],\\r\\n            yield.withdrawnYield[user],\\r\\n            yield.withdrawnCollateral[user],\\r\\n            yield.availableYield[user],\\r\\n            yield.depositedCollateralByUser[user],\\r\\n            yieldDistributed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return initialized\\r\\n    /// @return startTimeStamp\\r\\n    /// @return totalDeposit\\r\\n    /// @return currentTotalDeposit\\r\\n    /// @return totalShares\\r\\n    /// @return yieldUsers\\r\\n    /// @return vaultAddress\\r\\n    /// @return zapAddress\\r\\n    function getYieldSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[termId];\\r\\n        return (\\r\\n            yield.initialized,\\r\\n            yield.startTimeStamp,\\r\\n            yield.totalDeposit,\\r\\n            yield.currentTotalDeposit,\\r\\n            yield.totalShares,\\r\\n            yield.yieldUsers,\\r\\n            yield.providerAddresses[\\\"ZaynVault\\\"],\\r\\n            yield.providerAddresses[\\\"ZaynZap\\\"]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current state of the yield lock\\r\\n    function getYieldLockState() external view returns (bool) {\\r\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\r\\n    }\\r\\n\\r\\n    // /// @notice This function return the current constant values for oracles and yield providers\\r\\n    // /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\r\\n    // /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\r\\n    // /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\r\\n    // /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\r\\n    // function getConstants(\\r\\n    //     string memory firstAggregator,\\r\\n    //     string memory secondAggregator,\\r\\n    //     string memory zapAddress,\\r\\n    //     string memory vaultAddress\\r\\n    // ) external view returns (address, address, address, address) {\\r\\n    //     LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\r\\n    //     LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\r\\n    //         ._yieldProviders();\\r\\n\\r\\n    //     return (\\r\\n    //         termConsts.aggregatorsAddresses[firstAggregator],\\r\\n    //         termConsts.aggregatorsAddresses[secondAggregator],\\r\\n    //         yieldProvider.providerAddresses[zapAddress],\\r\\n    //         yieldProvider.providerAddresses[vaultAddress]\\r\\n    //     );\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0xb42102b5342ed9c83485efbd44fd987bbe8353a88bc67b7df2e5b441bf7ce818\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    // TERM GETTERS\\r\\n\\r\\n    /// @notice Gets the current and next term id\\r\\n    /// @return current termID\\r\\n    /// @return next termID\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Must return 0 before starting the fund\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining registration time in seconds\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get current information of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return Term Struct, see LibTermStorage.sol\\r\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\r\\n    /// @param participant address\\r\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\r\\n    /// @return List of termIDs\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTermStorage.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all terms a user was previously expelled from\\r\\n    /// @param participant address\\r\\n    /// @return List of termIDs\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice a function to get the needed allowance\\r\\n    /// @param user the user address\\r\\n    /// @return the needed allowance\\r\\n    function getNeededAllowance(address user) external view returns (uint);\\r\\n\\r\\n    // COLLATERAL GETTERS\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    /// @return expulsion limit\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the required minimum collateral deposit based on the position\\r\\n    /// @param termId the term id\\r\\n    /// @param depositorIndex the index of the depositor\\r\\n    /// @return required minimum in wei\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    // FUND GETTERS\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the current beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets a user information of in a fund\\r\\n    /// @param participant address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the fund/term\\r\\n    /// @return if the user was beneficiary in the past\\r\\n    /// @return if the user paid for the current cycle\\r\\n    /// @return if the user has autopay enabled\\r\\n    /// @return users money pot balance\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user the address of the participant to check\\r\\n    /// @return true if the participant is expelled before being a beneficiary\\r\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    // CONVERSION GETTERS\\r\\n\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    // YIELD GENERATION GETTERS\\r\\n\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    function userAPY(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    function termAPY(uint termId) external view returns (uint256);\\r\\n\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return hasOptedIn\\r\\n    /// @return withdrawnYield\\r\\n    /// @return withdrawnCollateral\\r\\n    /// @return availableYield\\r\\n    /// @return depositedCollateralByUser\\r\\n    /// @return yieldDistributed\\r\\n    function getUserYieldSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\r\\n\\r\\n    /// @param termId the collateral id\\r\\n    /// @return initialized\\r\\n    /// @return startTimeStamp\\r\\n    /// @return totalDeposit\\r\\n    /// @return currentTotalDeposit\\r\\n    /// @return totalShares\\r\\n    /// @return yieldUsers\\r\\n    /// @return vaultAddress\\r\\n    /// @return zapAddress\\r\\n    function getYieldSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\r\\n\\r\\n    function getYieldLockState() external view returns (bool);\\r\\n\\r\\n    // /// @notice This function return the current constant values for oracles and yield providers\\r\\n    // /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\r\\n    // /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\r\\n    // /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\r\\n    // /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\r\\n    // function getConstants(\\r\\n    //     string memory firstAggregator,\\r\\n    //     string memory secondAggregator,\\r\\n    //     string memory zapAddress,\\r\\n    //     string memory vaultAddress\\r\\n    // ) external view returns (address, address, address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x59204a29dd8f59daadaa6a8199b1317209e2f84a2124b9d24b598cd88487261e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external view returns (address);\\r\\n\\r\\n    function balance() external view returns (uint256);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external view returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x78699e5f3347a796b59482d2d5ad459c68125c87223e0d4634188f3e1339cf7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n\\r\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d0cdf796501fc604bc1c83c28ff89fefe49ea1b994677c60dc62312af143c94\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralStorage.CollateralStates indexed oldState,\\r\\n        LibCollateralStorage.CollateralStates indexed newState\\r\\n    );\\r\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @param _termId term id\\r\\n    /// @param _depositor Address of the depositor\\r\\n    function _withdrawReimbursement(uint _termId, address _depositor) internal {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint amount = collateral.collateralPaymentBank[_depositor];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n        collateral.collateralPaymentBank[_depositor] = 0;\\r\\n\\r\\n        (bool success, ) = payable(_depositor).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(_termId, _depositor, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _termId The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\r\\n\\r\\n        if (!LibFundStorage._fundExists(_termId)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _termId\\r\\n            );\\r\\n        } else {\\r\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\r\\n        }\\r\\n\\r\\n        return (memberCollateral < collateralLimit);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c5746ff238d6b39300b75d80ce1c4c58ce0ffc534061afe685c569f2d8d1382\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime;\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd4f3ddd4b3ea2531cb93494be6ee8433464221d6f0563eecabbf0d8d0c03ed01\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa92b912c45c29b3022b2a98c0606f1d9cd6d9305576c3195bd6a226ece6966f6\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermStorage {\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime;\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d12e51a175c821d32aa12da41bf3158a8aa1ec0a377232800cd6cfd21e81a2b\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param _termId The term id for which the collateral is being deposited\\r\\n    /// @param _ethAmount The amount of collateral being deposited\\r\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        yield.totalDeposit = _ethAmount;\\r\\n        yield.currentTotalDeposit = _ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\r\\n            vaultAddress,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param _termId The term id for which the collateral is being withdrawn\\r\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\r\\n    /// @param _user The user address that is withdrawing the collateral\\r\\n    function _withdrawYG(\\r\\n        uint _termId,\\r\\n        uint256 _collateralAmount,\\r\\n        address _user\\r\\n    ) internal returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint neededShares = _ethToShares(_collateralAmount, yield);\\r\\n\\r\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\r\\n        yield.currentTotalDeposit -= _collateralAmount;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        if (withdrawnAmount < _collateralAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\r\\n            yield.withdrawnYield[_user] += withdrawnYield;\\r\\n            yield.availableYield[_user] += withdrawnYield;\\r\\n\\r\\n            return withdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from shares to eth\\r\\n    /// @param _termId The term id\\r\\n    /// @param _yield The yield generation struct\\r\\n    function _sharesToEth(\\r\\n        uint _termId,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\r\\n    ) internal view returns (uint) {\\r\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        return (termBalance * pricePerShare) / 10 ** 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from eth to shares\\r\\n    /// @param _collateralAmount The amount of collateral to withdraw\\r\\n    /// @param _yield The yield generation struct\\r\\n    function _ethToShares(\\r\\n        uint _collateralAmount,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\r\\n    ) internal view returns (uint) {\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current total yield generated for a term\\r\\n    /// @param _termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the yield distribution ratio for a user\\r\\n    /// @param _termId The term id for which the ratio is being calculated\\r\\n    /// @param _user The user for which the ratio is being calculated\\r\\n    /// @return The yield distribution ratio for the user\\r\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        if (yield.currentTotalDeposit == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\r\\n                    10 ** 18) / yield.currentTotalDeposit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a user\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @param user The user for which the yield is being calculated\\r\\n    /// @return The total yield generated for the user\\r\\n    function _unwithdrawnUserYieldGenerated(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) internal view returns (uint) {\\r\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\r\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\r\\n\\r\\n        return yieldDistributed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x239c5206b778fd5df9215c7c27e86fd5a4092867d0722fcdb0054d484ac66713\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGenerationStorage {\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    struct YieldLock {\\r\\n        bool yieldLock;\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp;\\r\\n        uint totalDeposit;\\r\\n        uint currentTotalDeposit;\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield;\\r\\n        mapping(address => uint256) withdrawnCollateral;\\r\\n        mapping(address => uint256) availableYield;\\r\\n        mapping(address => uint256) depositedCollateralByUser;\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\r\\n        bytes32 position = YIELD_LOCK_POSITION;\\r\\n        assembly {\\r\\n            yieldLock.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaeed5248c171a073c6cdf849d6bc3d840a5f9d5d6ef514b462c06f83c886a042\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806392a6c8021161011a578063d8f8e991116100ad578063dc9e24ae1161007c578063dc9e24ae1461068d578063e51a6295146106a0578063e9783e60146106b3578063f0d826e7146106fd578063fd4dba9d1461071057600080fd5b8063d8f8e9911461060b578063da3791ca14610636578063dbd576831461065a578063dbf428101461067a57600080fd5b8063c177f091116100e9578063c177f091146105ab578063d072f4bc146105be578063d72bb87e146105d1578063d7992e5b146105f857600080fd5b806392a6c802146104e35780639d4eb26f146104f6578063b7cf483f1461051d578063bb91b76d1461056e57600080fd5b806365654fe31161019d57806377778baf1161016c57806377778baf146104855780637aed53a61461049857806380530731146104b55780638e15f473146104c857806391ce5ff7146104d057600080fd5b806365654fe3146103cb5780636bbbb5fb146103de57806375aaa78c1461042857806375d4e40b1461043b57600080fd5b80631e993b53116101d95780631e993b531461034f5780633d17f1e01461036f5780636191474c146103a557806362f02abd146103b857600080fd5b80630c64c6971461020b5780630fc4a7ef146102315780631268612d146102445780631c162dbe1461030d575b600080fd5b61021e610219366004612295565b610742565b6040519081526020015b60405180910390f35b61021e61023f3660046122b7565b610804565b6102d46102523660046122ec565b600090815260008051602061281d833981519152602090815260408083206001600160a01b039490941683526005840182528083205460068501835281842054600786018452828520546008870185528386205460098801865284872054600a909801909552929094205460ff91821696948216959282169493821693911690565b604080519615158752941515602087015292151593850193909352151560608401526080830191909152151560a082015260c001610228565b61032061031b3660046122ec565b610838565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c001610228565b61036261035d366004612316565b6108ce565b6040516102289190612331565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff165b6040519015158152602001610228565b61021e6103b33660046122b7565b610a41565b61021e6103c63660046122b7565b610aff565b61021e6103d9366004612375565b610b40565b6103956103ec366004612375565b600091825260008051602061281d833981519152602090815260408084206001600160a01b039390931684526015909201905290205460ff1690565b610362610436366004612316565b610c17565b610395610449366004612375565b60009182526000805160206127fd833981519152602090815260408084206001600160a01b039390931684526007909201905290205460ff1690565b61021e610493366004612375565b610cb7565b6104a0610df8565b60408051928352602083019190915201610228565b61021e6104c33660046122b7565b610e29565b61021e610e90565b61021e6104de3660046122b7565b611124565b61021e6104f13660046122b7565b6111ec565b6105096105043660046122b7565b611239565b6040516102289897969594939291906123e5565b61039561052b366004612442565b600092835260008051602061281d83398151915260209081526040808520938552600c90930181528284206001600160a01b039290921684525290205460ff1690565b61058161057c3660046122ec565b611374565b6040805195151586526020860194909452928401919091526060830152608082015260a001610228565b6103956105b9366004612375565b61146c565b61021e6105cc3660046122b7565b611478565b6105e46105df3660046122b7565b61149a565b60405161022898979695949392919061248d565b610395610606366004612375565b611573565b61061e6106193660046122b7565b61160d565b6040516001600160a01b039091168152602001610228565b6106496106443660046122b7565b611669565b60405161022895949392919061250b565b61066d6106683660046122b7565b61171f565b604051610228919061254e565b61021e6106883660046122b7565b611868565b61036261069b3660046125ec565b611993565b61021e6106ae366004612316565b611b54565b6103956106c1366004612375565b600091825260008051602061281d833981519152602090815260408084206001600160a01b039390931684526006909201905290205460ff1690565b61021e61070b3660046122b7565b611cb7565b61072361071e3660046122ec565b611d40565b6040805193151584529115156020840152151590820152606001610228565b600082815260008051602061283d83398151915260205260408120600481015483106107ab5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064015b60405180910390fd5b60006107c88260060154670de0b6b3a76400006105cc919061263d565b905060648483600401546107dc9190612654565b6107e6908361263d565b6107f190609661263d565b6107fb919061267d565b95945050505050565b60008061080f610e90565b90506000670de0b6b3a7640000610826858461263d565b610830919061267d565b949350505050565b60008181526000805160206127fd833981519152602052604081208190819081908190819081610868898b611d9f565b6001600160a01b039a909a1660009081526007830160209081526040808320546008860183528184205460098701845282852054600a8801855283862054600b909801909452919093205460ff9093169d909c919b509399509097509550909350505050565b606060006108db83610c17565b90506000815167ffffffffffffffff8111156108f9576108f9612691565b604051908082528060200260200182016040528015610922578160200160208202803683370190505b508251909150600090815b818110156109a45761095885828151811061094a5761094a6126a7565b602002602001015188611573565b1561099c5784818151811061096f5761096f6126a7565b6020026020010151848481518110610989576109896126a7565b6020026020010181815250508260010192505b60010161092d565b5060008267ffffffffffffffff8111156109c0576109c0612691565b6040519080825280602002602001820160405280156109e9578160200160208202803683370190505b50905060005b83811015610a3657848181518110610a0957610a096126a7565b6020026020010151828281518110610a2357610a236126a7565b60209081029190910101526001016109ef565b509695505050505050565b600081815260008051602061281d8339815191526020908152604080832060008051602061283d83398151915290925282208154600190610100900460ff166004811115610a9157610a91612477565b14610aa0575060009392505050565b60008160070154836002015460018560040154610abd9190612654565b8460050154610acc919061263d565b610ad691906126bd565b610ae091906126bd565b905080421115610af557506000949350505050565b6107fb4282612654565b600081815260008051602061281d8339815191526020526040812060048101546014820154610b2f9060016126bd565b610b399190612654565b9392505050565b60008281526000805160206127fd8339815191526020908152604080832060008051602061285d833981519152909252822060028201548390610b839042612654565b90506000610b918787611d9f565b6001600160a01b0387166000908152600886016020526040902054610bb691906126bd565b6001600160a01b03871660009081526005850160205260409020549091508290610be883670de0b6b3a764000061263d565b610bf2919061267d565b610c00906301e1338061263d565b610c0a919061267d565b9450505050505b92915050565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b60209081526040808320805482518185028101850190935280835260609460008051602061287d833981519152949093929190830182828015610ca957602002820191906000526020600020905b815481526020019060010190808311610c95575b509398975050505050505050565b600082815260008051602061281d8339815191526020908152604080832060008051602061285d83398151915283528184206000805160206127fd83398151915284528285206001600160a01b038716865260058201855283862054600a82018652848720546015850190965293862054825493959294919391929160ff918216916002916101009004166003811115610d5357610d53612477565b1480610d5c5750805b15610d7257610d6b82846126bd565b9650610dec565b60018554610100900460ff166003811115610d8f57610d8f612477565b03610de7576000600a610da18b611cb7565b610dac90600f61263d565b610db6919061267d565b905080841115610ddc5782610dcb8286612654565b610dd591906126bd565b9750610de1565b600097505b50610dec565b600096505b50505050505092915050565b60008051602061287d833981519152805460009182918290610e1c90600190612654565b9154919491935090915050565b60008181526000805160206127fd8339815191526020526040812060028101548290610e559042612654565b9050808260040154610e6686611868565b610e7890670de0b6b3a764000061263d565b610e82919061267d565b610826906301e1338061263d565b6000807f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4905060008060008084600001604051610eda90661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5191906126e7565b94509450509350935081600014158015610f7d5750836001600160501b0316816001600160501b031610155b8015610f895750600083135b610fd55760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107a2565b60008060008088600001604051610ffa90671554d110cbd554d160c21b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa15801561104d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107191906126e7565b9450945050935093508160001415801561109d5750836001600160501b0316816001600160501b031610155b80156110a95750600083135b6110f55760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107a2565b60006111018489612737565b905061111581670de0b6b3a7640000612765565b9a505050505050505050505090565b600081815260008051602061283d8339815191526020908152604080832060008051602061285d8339815191529092528220600181015483036111a95760405162461bcd60e51b815260206004820152601860248201527f4e6f626f647920686173206465706f736974656420796574000000000000000060448201526064016107a2565b816003015481600101546111bd91906126bd565b42106111cd575060009392505050565b42826003015482600101546111e291906126bd565b6108309190612654565b600081815260008051602061281d8339815191526020908152604080832060008051602061283d8339815191529092528220600282015460048301546005830154859291610ad69161263d565b60008080808060608180806000805160206127fd83398151915260000160008b815260200190815260200160002090508060000160009054906101000a900460ff16816002015482600301548360040154846005015485600601866001016040516112b3906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b03169060018901906112e9906605a61796e5a61760cc1b815260070190565b908152604080519182900360209081018320548554808302850183019093528284526001600160a01b03169291859183018282801561135157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611333575b505050505092509850985098509850985098509850985050919395975091939597565b600081815260008051602061285d8339815191526020908152604080832060008051602061281d833981519152835281842060008051602061283d83398151915284528285206001600160a01b038816865260068201909452918420548493849384938493909290849060ff16611407576114008260060154670de0b6b3a76400006105cc919061263d565b9050611413565b6114108a611cb7565b90505b6001600160a01b039a909a1660009081526004840160209081526040808320546005870183528184205460068801845282852054600790980190935292205460ff9092169c909b949a5090985092965091945050505050565b6000610b398383611dc8565b600080611483610e90565b905060008161082685670de0b6b3a764000061263d565b600080806060818080808060008051602061281d83398151915260008b81526020918252604090819020805460028201546003830154600484015460148501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b031697919691879183018282801561155057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611532575b505050505094509850985098509850985098509850985050919395975091939597565b600082815260008051602061281d8339815191526020908152604080832060008051602061285d83398151915283528184206001600160a01b0386168552600582019093529083205490919060ff161580156115ea57506001600160a01b038416600090815260048201602052604090205460ff16155b156115fa57600192505050610c11565b600092505050610c11565b505092915050565b600081815260008051602061281d83398151915260205260408120600481015460018083019161163d9190612654565b8154811061164d5761164d6126a7565b6000918252602090912001546001600160a01b03169392505050565b600080808060608160008051602061285d8339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff80851697610100909504169592949193909291839183018282801561170457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116e6575b50505050509050955095509550955095505091939590929450565b61178f60408051610160810190915260008082526020820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600082815260008051602061283d833981519152602090815260409182902082516101608101909352805460ff8082161515855291928401916101009091041660038111156117e0576117e0612477565b60038111156117f1576117f1612477565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015292915050565b60008181526000805160206127fd833981519152602090815260408083206006810180548351818602810186019094528084529193859384939092918301828280156118dd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118bf575b505083519394506000925050505b818110156119495784600801600084838151811061190b5761190b6126a7565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548461193f91906126bd565b93506001016118eb565b5060006119568786611f0f565b9050846004015481111561198857600485015461197382866126bd565b61197d9190612654565b979650505050505050565b509195945050505050565b606060006119a084610c17565b90506000815167ffffffffffffffff8111156119be576119be612691565b6040519080825280602002602001820160405280156119e7578160200160208202803683370190505b508251909150600090815b81811015611ab657866003811115611a0c57611a0c612477565b60008051602061287d8339815191526001016000878481518110611a3257611a326126a7565b6020026020010151815260200190815260200160002060000160019054906101000a900460ff166003811115611a6a57611a6a612477565b03611aae57848181518110611a8157611a816126a7565b6020026020010151848481518110611a9b57611a9b6126a7565b6020026020010181815250508260010192505b6001016119f2565b5060008267ffffffffffffffff811115611ad257611ad2612691565b604051908082528060200260200182016040528015611afb578160200160208202803683370190505b50905060005b83811015611b4857848181518110611b1b57611b1b6126a7565b6020026020010151828281518110611b3557611b356126a7565b6020908102919091010152600101611b01565b50979650505050505050565b6000806000611b64846001611993565b90506000611b73856000611993565b825181519192509060005b82811015611c2157600060008051602061287d8339815191526001016000878481518110611bae57611bae6126a7565b6020026020010151815260200190815260200160002090506000611bea878481518110611bdd57611bdd6126a7565b6020026020010151610aff565b8260060154611bf9919061263d565b611c0690620f424061263d565b9050611c1281896126bd565b97508260010192505050611b7e565b5060005b81811015611cab57600060008051602061287d8339815191526001016000868481518110611c5557611c556126a7565b602002602001015181526020019081526020016000209050600081600401548260060154611c83919061263d565b611c9090620f424061263d565b9050611c9c81896126bd565b97508260010192505050611c25565b50939695505050505050565b600081815260008051602061281d8339815191526020908152604080832060008051602061283d833981519152909252822060048201546014830154849190611d019060016126bd565b611d0b9190612654565b90506000611d2a8360060154670de0b6b3a76400006105cc919061263d565b9050611d36818361263d565b9695505050505050565b600081815260008051602061281d833981519152602052604081208190819081611d6d600d83018861205b565b90506000611d7e83600f018961205b565b90506000611d8f846011018a61205b565b9299919850919650945050505050565b600080670de0b6b3a7640000611db5858561207d565b611dbe86612109565b610826919061263d565b600082815260008051602061285d833981519152602090815260408083206001600160a01b0385168452600581019092528220548290611e2486600090815260008051602061281d833981519152602052604090205460ff1690565b611ea35760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e979190612795565b9550611f069350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015611edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0391906127e3565b91505b10949350505050565b60008082600101604051611f32906816985e5b95985d5b1d60ba1b815260090190565b90815260405190819003602001812054631398fee160e31b82526001600160a01b031690639cc7f70890611f6e90879060040190815260200190565b602060405180830381865afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf91906127e3565b9050600083600101604051611fd3906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204691906127e3565b9050670de0b6b3a76400006107f1828461263d565b6001600160a01b03811660009081526001830160205260408120541515610b39565b60008281526000805160206127fd83398151915260205260408120600481015482036120ad576000915050610c11565b60048101546001600160a01b0384166000908152600983016020908152604080832054600b8601909252909120546120e59190612654565b6120f790670de0b6b3a764000061263d565b612101919061267d565b915050610c11565b60008181526000805160206127fd833981519152602052604080822081516816985e5b95985d5b1d60ba1b8152600182016009820152915191829003602901822054631398fee160e31b835260048301859052909183916001600160a01b031690639cc7f70890602401602060405180830381865afa158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b491906127e3565b90506000826001016040516121d8906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015612227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224b91906127e3565b90506000670de0b6b3a7640000612262838561263d565b61226c919061267d565b90508360040154811115612289576004840154611d369082612654565b50600095945050505050565b600080604083850312156122a857600080fd5b50508035926020909101359150565b6000602082840312156122c957600080fd5b5035919050565b80356001600160a01b03811681146122e757600080fd5b919050565b600080604083850312156122ff57600080fd5b612308836122d0565b946020939093013593505050565b60006020828403121561232857600080fd5b610b39826122d0565b6020808252825182820181905260009190848201906040850190845b818110156123695783518352928401929184019160010161234d565b50909695505050505050565b6000806040838503121561238857600080fd5b82359150612398602084016122d0565b90509250929050565b600081518084526020808501945080840160005b838110156123da5781516001600160a01b0316875295820195908201906001016123b5565b509495945050505050565b60006101008a151583528960208401528860408401528760608401528660808401528060a0840152612419818401876123a1565b6001600160a01b0395861660c08501529390941660e09092019190915250979650505050505050565b60008060006060848603121561245757600080fd5b833592506020840135915061246e604085016122d0565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60006101008a1515835260058a106124a7576124a7612477565b602083018a90526001600160a01b0389166040840152606083018190526124d0818401896123a1565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b6004811061250857612508612477565b50565b8515158152612519856124f8565b84602082015283604082015282606082015260a06080820152600061197d60a08301846123a1565b61254a816124f8565b9052565b8151151581526101608101602083015161256b6020840182612541565b50604083015161258660408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151611605828501826001600160a01b03169052565b600080604083850312156125ff57600080fd5b612608836122d0565b915060208301356004811061261c57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1157610c11612627565b81810381811115610c1157610c11612627565b634e487b7160e01b600052601260045260246000fd5b60008261268c5761268c612667565b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b80820180821115610c1157610c11612627565b80516001600160501b03811681146122e757600080fd5b600080600080600060a086880312156126ff57600080fd5b612708866126d0565b945060208601519350604086015192506060860151915061272b608087016126d0565b90509295509295909350565b60008261274657612746612667565b600160ff1b82146000198414161561276057612760612627565b500590565b80820260008212600160ff1b8414161561278157612781612627565b8181058314821517610c1157610c11612627565b600080600080600060a086880312156127ad57600080fd5b855180151581146127bd57600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b6000602082840312156127f557600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288887101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89a2646970667358221220b79919a806985ca167468abc7cd8996b85c9fae54bf881203fa1259886be79b964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "expelledBeforeBeneficiary(uint256,address)": {
        "params": {
          "termId": "the id of the term",
          "user": "the address of the participant to check"
        },
        "returns": {
          "_0": "true if the participant is expelled before being a beneficiary"
        }
      },
      "getAllJoinedTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of"
        }
      },
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "collateral initialized",
          "_1": "collateral state",
          "_2": "collateral firstDepositTime",
          "_3": "counterMembers",
          "_4": "collateral depositors"
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "isCollateralMember",
          "_1": "collateralMembersBank",
          "_2": "collateralPaymentBank",
          "_3": "collateralDepositByUser",
          "_4": "expulsion limit"
        }
      },
      "getExpelledTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array the term ids the participant is part of, giving the state of the term"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "fund initialized",
          "_1": "fund currentState",
          "_2": "fund stableToken",
          "_3": "fund beneficiariesOrder",
          "_4": "fund fundStart",
          "_5": "fund fundEnd",
          "_6": "fund currentCycle",
          "_7": "fund totalAmountOfCycles"
        }
      },
      "getJoinedTermsByState(address,uint8)": {
        "params": {
          "participant": "the participant address",
          "state": "the term state"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of, giving the state of the term"
        }
      },
      "getLatestPrice()": {
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getNeededAllowance(address)": {
        "params": {
          "user": "the user address"
        },
        "returns": {
          "_0": "the needed allowance"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "fund isParticipant, true if is participant",
          "_1": "fund isBeneficiary, true if has been beneficiary",
          "_2": "fund paidThisCycle, true if has paid the current cycle",
          "_3": "fund autoPayEnabled, true if auto pay is enabled",
          "_4": "fund beneficiariesPool, the beneficiary pool, 6 decimals",
          "_5": "fund beneficiariesFrozenPool, true if the beneficiary pool is frozen"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution"
        }
      },
      "getRemainingRegistrationTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining contribution period"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term struct"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToCollateralConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "USDAmount": "The amount in USD with 18 decimals"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToStableConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "getUserSet(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "on participant set",
          "_1": "on beneficiary set",
          "_2": "on defaulter set"
        }
      },
      "getUserYieldSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "_0": "hasOptedIn",
          "_1": "withdrawnYield",
          "_2": "withdrawnCollateral",
          "_3": "availableYield",
          "_4": "depositedCollateralByUser",
          "_5": "yieldDistributed"
        }
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "params": {
          "termId": "term id",
          "user": "depositor address"
        },
        "returns": {
          "allowedWithdrawal": "amount the amount of collateral the depositor can withdraw"
        }
      },
      "getYieldSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "initialized",
          "_1": "startTimeStamp",
          "_2": "totalDeposit",
          "_3": "currentTotalDeposit",
          "_4": "totalShares",
          "_5": "yieldUsers",
          "_6": "vaultAddress",
          "_7": "zapAddress"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "isExempted(uint256,uint256,address)": {
        "params": {
          "cycle": "the cycle to check",
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user is exempted"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5",
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPY(uint256)": {
        "params": {
          "termId": "The term id for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPY(uint256,address)": {
        "params": {
          "termId": "The term id for which the APY is being calculated",
          "user": "The user for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the user"
        }
      },
      "userHasoptedInYG(uint256,address)": {
        "params": {
          "termId": "The term id for which the check is being made",
          "user": "The user for which the check is being made"
        },
        "returns": {
          "_0": "True if the user has opted in"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the current beneficiary"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getNeededAllowance(address)": {
        "notice": "a function to get the needed allowance for every active term the user is part of"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getRemainingRegistrationTime(uint256)": {
        "notice": "Gets the remaining registration period for a term"
      },
      "getToCollateralConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToStableConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "getUserSet(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "notice": "Called to check how much collateral a user can withdraw"
      },
      "getYieldLockState()": {
        "notice": "This function is used to get the current state of the yield lock"
      },
      "isExempted(uint256,uint256,address)": {
        "notice": "function to see if a user is exempted from paying a cycle"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPY(uint256)": {
        "notice": "This function is used to get a term APY"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPY(uint256,address)": {
        "notice": "This function is used to get a user APY"
      },
      "userHasoptedInYG(uint256,address)": {
        "notice": "This function is used to check if a user has opted in for yield generation"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}