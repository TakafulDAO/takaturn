{
  "address": "0x06851f7C136ce1A5c70A5Fb70a76F342ca315D36",
  "abi": [
    {
      "inputs": [],
      "name": "FunctionInvalidAtThisState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "OnCollateralStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnFrozenMoneyPotLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReimbursementWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "emptyCollateralAfterEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "term",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "defaulters",
          "type": "address[]"
        }
      ],
      "name": "requestContribution",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "6e8c483fe921afc9932723347ba43fe2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FunctionInvalidAtThisState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"OnCollateralStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnFrozenMoneyPotLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReimbursementWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"emptyCollateralAfterEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"term\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"defaulters\",\"type\":\"address[]\"}],\"name\":\"requestContribution\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aisha El Allam\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"params\":{\"termId\":\"The term id\"}},\"releaseCollateral(uint256)\":{\"params\":{\"termId\":\"term id\"}},\"requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"details\":\"Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\",\"params\":{\"defaulters\":\"Addressess of all defaulters of the current cycle\"},\"returns\":{\"_0\":\"expellants array of addresses that were expelled\"}},\"withdrawCollateral(uint256)\":{\"details\":\"This follows the pull-over-push pattern.\",\"params\":{\"termId\":\"term id\"}}},\"title\":\"Takaturn Collateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emptyCollateralAfterEnd(uint256)\":{\"notice\":\"allow the owner to empty the Collateral after 180 days\"},\"requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])\":{\"notice\":\"Called from Fund contract when someone defaults\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Called by each member after during or at the end of the term to withraw collateral\"}},\"notice\":\"This is used to operate the Takaturn collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/CollateralFacet.sol\":\"CollateralFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/CollateralFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\n\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibTermOwnership} from \\\"../libraries/LibTermOwnership.sol\\\";\\n\\n/// @title Takaturn Collateral\\n/// @author Aisha El Allam\\n/// @notice This is used to operate the Takaturn collateral\\n/// @dev v3.0 (Diamond)\\ncontract CollateralFacet is ICollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    );\\n    event OnCollateralWithdrawal(\\n        uint indexed termId,\\n        address indexed user,\\n        uint indexed collateralAmount\\n    );\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\\n    event OnFrozenMoneyPotLiquidated(\\n        uint indexed termId,\\n        address indexed user,\\n        uint indexed amount\\n    );\\n\\n    /// @param termId term id\\n    /// @param _state collateral state\\n    modifier atState(uint termId, LibCollateralStorage.CollateralStates _state) {\\n        _atState(termId, _state);\\n        _;\\n    }\\n\\n    modifier onlyTermOwner(uint termId) {\\n        LibTermOwnership._ensureTermOwner(termId);\\n        _;\\n    }\\n\\n    /// @notice Called from Fund contract when someone defaults\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\n    /// @param defaulters Addressess of all defaulters of the current cycle\\n    /// @return expellants array of addresses that were expelled\\n    function requestContribution(\\n        LibTermStorage.Term memory term,\\n        address[] calldata defaulters\\n    )\\n        external\\n        atState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing)\\n        returns (address[] memory)\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[term.termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[term.termId];\\n        require(msg.sender == address(this));\\n\\n        (uint collateralToDistribute, address[] memory expellants) = _solveDefaulters(\\n            collateral,\\n            term,\\n            fund,\\n            defaulters\\n        );\\n\\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _findNonBeneficiaries(\\n            collateral,\\n            fund\\n        );\\n\\n        if (nonBeneficiaryCounter > 0) {\\n            // This case can only happen when what?\\n            // Exempt non beneficiaries from paying an early expellant's cycle\\n            uint expellantsLength = expellants.length;\\n            for (uint i; i < expellantsLength; ) {\\n                _exemptNonBeneficiariesFromPaying(\\n                    fund,\\n                    expellants[i],\\n                    nonBeneficiaryCounter,\\n                    nonBeneficiaries\\n                );\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Finally, divide the share equally among non-beneficiaries\\n            collateralToDistribute = collateralToDistribute / nonBeneficiaryCounter;\\n            for (uint i; i < nonBeneficiaryCounter; ) {\\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += collateralToDistribute;\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        return (expellants);\\n    }\\n\\n    /// @notice Called to exempt users from needing to pay\\n    /// @param _fund Fund storage\\n    /// @param _expellant The expellant in question\\n    /// @param _nonBeneficiaries All non-beneficiaries at this time\\n    function _exemptNonBeneficiariesFromPaying(\\n        LibFundStorage.Fund storage _fund,\\n        address _expellant,\\n        uint _nonBeneficiaryCounter,\\n        address[] memory _nonBeneficiaries\\n    ) internal {\\n        if (!_fund.isBeneficiary[_expellant]) {\\n            uint expellantBeneficiaryCycle;\\n\\n            uint beneficiariesLength = _fund.beneficiariesOrder.length;\\n            for (uint i; i < beneficiariesLength; ) {\\n                if (_expellant == _fund.beneficiariesOrder[i]) {\\n                    expellantBeneficiaryCycle = i + 1;\\n                    break;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            for (uint i; i < _nonBeneficiaryCounter; ) {\\n                _fund.isExemptedOnCycle[expellantBeneficiaryCycle].exempted[\\n                    _nonBeneficiaries[i]\\n                ] = true;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId term id\\n    function withdrawCollateral(uint termId) external {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        LibTermStorage.Term memory term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint userCollateral = collateral.collateralMembersBank[msg.sender];\\n        require(userCollateral > 0, \\\"Collateral empty\\\");\\n\\n        bool success;\\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\\n        // Withdraw all the user has.\\n        if (\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\n            expelledBeforeBeneficiary\\n        ) {\\n            // First case: The collateral is released or the user was expelled before being a beneficiary\\n            collateral.collateralMembersBank[msg.sender] = 0;\\n\\n            if (term.state != LibTermStorage.TermStates.ExpiredTerm) {\\n                _withdrawFromYield(termId, msg.sender, userCollateral, yield);\\n            }\\n\\n            (success, ) = payable(msg.sender).call{value: userCollateral}(\\\"\\\");\\n\\n            if (collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral) {\\n                --collateral.counterMembers;\\n            }\\n\\n            emit OnCollateralWithdrawal(termId, msg.sender, userCollateral);\\n        }\\n        // Or withdraw partially\\n        else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\n            // Second case: The term is on an ongoing cycle, the user has not been expelled\\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\n            uint minRequiredCollateral = (IGetters(address(this)).getRemainingCyclesContributionWei(\\n                termId\\n            ) * 15) / 10; // 1.5 X RCC in wei\\n\\n            // Collateral must be higher than 1.5 X RCC\\n            if (userCollateral > minRequiredCollateral) {\\n                uint allowedWithdrawal = userCollateral - minRequiredCollateral; // We allow to withdraw the positive difference\\n                collateral.collateralMembersBank[msg.sender] -= allowedWithdrawal;\\n\\n                _withdrawFromYield(termId, msg.sender, allowedWithdrawal, yield);\\n\\n                (success, ) = payable(msg.sender).call{value: allowedWithdrawal}(\\\"\\\");\\n\\n                emit OnCollateralWithdrawal(termId, msg.sender, allowedWithdrawal);\\n            }\\n        }\\n\\n        require(success, \\\"Withdraw failed\\\");\\n        if (yield.hasOptedIn[msg.sender] && yield.availableYield[msg.sender] > 0) {\\n            IYGFacetZaynFi(address(this)).claimAvailableYield(termId, msg.sender);\\n        }\\n    }\\n\\n    /// @param termId term id\\n    function releaseCollateral(uint termId) external {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        require(fund.currentState == LibFundStorage.FundStates.FundClosed, \\\"Wrong state\\\");\\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral);\\n    }\\n\\n    /// @notice allow the owner to empty the Collateral after 180 days\\n    /// @param termId The term id\\n    function emptyCollateralAfterEnd(\\n        uint termId\\n    )\\n        external\\n        onlyTermOwner(termId)\\n        atState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral)\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        (, , , , , uint fundEnd, , ) = IGetters(address(this)).getFundSummary(termId);\\n        require(block.timestamp > fundEnd + 180 days, \\\"Can't empty yet\\\");\\n\\n        uint totalToWithdraw;\\n        uint depositorsLength = collateral.depositors.length;\\n        for (uint i; i < depositorsLength; ) {\\n            address depositor = collateral.depositors[i];\\n            uint amount = collateral.collateralMembersBank[depositor];\\n            uint paymentAmount = collateral.collateralPaymentBank[depositor];\\n\\n            collateral.collateralMembersBank[depositor] = 0;\\n            collateral.collateralPaymentBank[depositor] = 0;\\n            uint withdrawnYield = _withdrawFromYield(termId, depositor, amount, yield);\\n\\n            totalToWithdraw += (amount + paymentAmount + withdrawnYield);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.Closed);\\n\\n        (bool success, ) = payable(msg.sender).call{value: totalToWithdraw}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /// @param _collateral Collateral storage\\n    /// @param _term Term storage\\n    /// @param _defaulters Defaulters array\\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\\n    /// @return expellants array of addresses that were expelled\\n    function _solveDefaulters(\\n        LibCollateralStorage.Collateral storage _collateral,\\n        LibTermStorage.Term memory _term,\\n        LibFundStorage.Fund storage _fund,\\n        address[] memory _defaulters\\n    ) internal returns (uint, address[] memory) {\\n        // require(_defaulters.length > 0, \\\"No defaulters\\\");\\n\\n        address[] memory expellants = new address[](_defaulters.length);\\n        uint expellantsCounter;\\n        uint distributedCollateral;\\n\\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\\n            _term.contributionAmount * 10 ** 18\\n        );\\n\\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\\n        for (uint i; i < _defaulters.length; ) {\\n            LibCollateralStorage.DefaulterState memory defaulterState;\\n            defaulterState.isBeneficiary = _fund.isBeneficiary[_defaulters[i]];\\n            uint collateralAmount = _collateral.collateralMembersBank[_defaulters[i]];\\n            if (defaulterState.isBeneficiary) {\\n                // Has the user been beneficiary?\\n                if (LibCollateral._isUnderCollaterized(_term.termId, _defaulters[i])) {\\n                    // Is the collateral below 1.0 X RCC?\\n                    if (_fund.beneficiariesFrozenPool[_defaulters[i]]) {\\n                        // Is the pool currently frozen?\\n                        if (collateralAmount >= contributionAmountWei) {\\n                            // Does the user's collateral cover a cycle?\\n                            defaulterState.payWithCollateral = true; // Pay with collateral\\n                            defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\n                            defaulterState.gettingExpelled = false; // Not expelled\\n                        } else {\\n                            // We don't have to check exact amounts because the pool would always be deducted by consistent amounts\\n                            if (_fund.beneficiariesPool[_defaulters[i]] > 0) {\\n                                // Does the frozen stable token portion of the pool contain anything?\\n                                defaulterState.payWithCollateral = false; // Do not pay with collateral\\n                                defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\n                                defaulterState.gettingExpelled = false; // Not expelled\\n                            } else {\\n                                // Is whatever is left from the collateral + received collateral portion of money pool below 1.0 X RCC?\\n                                if (\\n                                    collateralAmount +\\n                                        _collateral.collateralPaymentBank[_defaulters[i]] >=\\n                                    IGetters(address(this)).getRemainingCyclesContributionWei(\\n                                        _term.termId\\n                                    )\\n                                ) {\\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\n                                    defaulterState.gettingExpelled = false; // Not expelled\\n                                } else {\\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\\n                                    defaulterState.gettingExpelled = true; // Expelled\\n                                }\\n                            }\\n                        }\\n                    } else {\\n                        defaulterState.payWithCollateral = true; // Pay with collateral\\n                        defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\n                        defaulterState.gettingExpelled = true; // Expelled\\n                    }\\n                } else {\\n                    defaulterState.payWithCollateral = true; // Pay with collateral\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\n                    defaulterState.gettingExpelled = false; // Not expelled\\n                }\\n            } else {\\n                if (collateralAmount >= contributionAmountWei) {\\n                    defaulterState.payWithCollateral = true; // Pay with collateral\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\n                    defaulterState.gettingExpelled = false; // Not expelled\\n                } else {\\n                    defaulterState.payWithCollateral = false; // Pay with collateral\\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\\n                    defaulterState.gettingExpelled = true; // Expelled\\n                }\\n            }\\n\\n            distributedCollateral += _payDefaulterContribution(\\n                _collateral,\\n                _fund,\\n                _term,\\n                _defaulters[i],\\n                contributionAmountWei,\\n                defaulterState\\n            );\\n\\n            if (defaulterState.gettingExpelled) {\\n                expellants[expellantsCounter] = _defaulters[i];\\n                _fund.cycleOfExpulsion[expellants[expellantsCounter]] = _fund.currentCycle;\\n\\n                unchecked {\\n                    ++expellantsCounter;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (distributedCollateral, expellants);\\n    }\\n\\n    /// @notice called internally to pay defaulter contribution\\n    function _payDefaulterContribution(\\n        LibCollateralStorage.Collateral storage _collateral,\\n        LibFundStorage.Fund storage _fund,\\n        LibTermStorage.Term memory _term,\\n        address _defaulter,\\n        uint _contributionAmountWei,\\n        LibCollateralStorage.DefaulterState memory _defaulterState\\n    ) internal returns (uint distributedCollateral) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_term.termId];\\n\\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\\n        if (_defaulterState.payWithCollateral && !_defaulterState.payWithFrozenPool) {\\n            if (_defaulterState.gettingExpelled) {\\n                if (_defaulterState.isBeneficiary) {\\n                    uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\\n                    _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\\n\\n                    distributedCollateral += remainingCollateral; // This will be distributed later\\n                    _collateral.collateralMembersBank[_defaulter] = 0;\\n                    emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\\n                }\\n\\n                // Expelled\\n                _collateral.isCollateralMember[_defaulter] = false;\\n            } else {\\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\\n\\n                // Subtract contribution from defaulter and add to beneficiary.\\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\\n\\n                emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\\n            }\\n        }\\n        if (_defaulterState.payWithFrozenPool && !_defaulterState.payWithCollateral) {\\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount * 10 ** 6;\\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * 10 ** 6;\\n\\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\\n        }\\n        if (_defaulterState.payWithCollateral && _defaulterState.payWithFrozenPool) {\\n            uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\\n            uint remainingCollateralFromPayments = _collateral.collateralPaymentBank[_defaulter];\\n            uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\\n                _term.contributionAmount * 10 ** 18\\n            );\\n\\n            if (remainingCollateral > 0) {\\n                _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\\n\\n                emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\\n            }\\n            if (_defaulterState.gettingExpelled) {\\n                distributedCollateral += (remainingCollateral + remainingCollateralFromPayments);\\n                _collateral.collateralMembersBank[_defaulter] = 0;\\n                _collateral.collateralPaymentBank[_defaulter] = 0;\\n                emit OnFrozenMoneyPotLiquidated(\\n                    _term.termId,\\n                    _defaulter,\\n                    remainingCollateralFromPayments\\n                );\\n            } else {\\n                // Remaining collateral is always less than contribution amount if/when we reach this\\n                if (remainingCollateral > 0) {\\n                    // Remove any last remaining collateral\\n                    uint toDeductFromPayments = contributionAmountWei - remainingCollateral;\\n                    _collateral.collateralMembersBank[_defaulter] = 0;\\n                    _collateral.collateralPaymentBank[_defaulter] -= toDeductFromPayments;\\n                    emit OnFrozenMoneyPotLiquidated(\\n                        _term.termId,\\n                        _defaulter,\\n                        remainingCollateralFromPayments\\n                    );\\n                } else {\\n                    _collateral.collateralPaymentBank[_defaulter] -= contributionAmountWei;\\n                    emit OnFrozenMoneyPotLiquidated(\\n                        _term.termId,\\n                        _defaulter,\\n                        contributionAmountWei\\n                    );\\n                }\\n\\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\\n            }\\n        }\\n    }\\n\\n    /// @param _collateral Collateral storage\\n    /// @param _fund Fund storage\\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\\n    /// @return nonBeneficiaries array of addresses that were expelled\\n    function _findNonBeneficiaries(\\n        LibCollateralStorage.Collateral storage _collateral,\\n        LibFundStorage.Fund storage _fund\\n    ) internal view returns (uint, address[] memory) {\\n        address currentDepositor;\\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\\n        uint nonBeneficiaryCounter;\\n\\n        // Check beneficiaries\\n        uint depositorsLength = _collateral.depositors.length;\\n        for (uint i; i < depositorsLength; ) {\\n            currentDepositor = _collateral.depositors[i];\\n            if (\\n                !_fund.isBeneficiary[currentDepositor] &&\\n                _collateral.isCollateralMember[currentDepositor]\\n            ) {\\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\\n                nonBeneficiaryCounter++;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (nonBeneficiaryCounter, nonBeneficiaries);\\n    }\\n\\n    function _withdrawFromYield(\\n        uint _termId,\\n        address _user,\\n        uint _amount,\\n        LibYieldGenerationStorage.YieldGeneration storage _yieldStorage\\n    ) internal returns (uint withdrawnYield) {\\n        if (_yieldStorage.hasOptedIn[_user]) {\\n            uint amountToWithdraw;\\n            if (_amount > _yieldStorage.depositedCollateralByUser[_user]) {\\n                amountToWithdraw = _yieldStorage.depositedCollateralByUser[_user];\\n            } else {\\n                amountToWithdraw = _amount;\\n            }\\n            withdrawnYield = LibYieldGeneration._withdrawYG(_termId, amountToWithdraw, _user);\\n        } else {\\n            withdrawnYield = 0;\\n        }\\n    }\\n\\n    function _atState(uint _termId, LibCollateralStorage.CollateralStates _state) internal view {\\n        LibCollateralStorage.CollateralStates state = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId]\\n            .state;\\n        if (state != _state) revert FunctionInvalidAtThisState();\\n    }\\n}\\n\",\"keccak256\":\"0x00cc64e956b52ff6f81791dec3489a318a39801bd35a60a31e5d3de54147905b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Takaturn Collateral Interface\\n/// @author Aisha EL Allam\\n/// @notice This is used to allow fund to easily communicate with collateral\\n/// @dev v2.0 (post-deploy)\\n\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface ICollateral {\\n    // Function cannot be called at this time.\\n    error FunctionInvalidAtThisState();\\n\\n    /// @notice Called from Fund contract when someone defaults\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\n    /// @param term the term object\\n    /// @param defaulters Address that was randomly selected for the current cycle\\n    function requestContribution(\\n        LibTermStorage.Term memory term,\\n        address[] calldata defaulters\\n    ) external returns (address[] memory);\\n\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId The term id\\n    function withdrawCollateral(uint termId) external;\\n\\n    /// @param termId The term id\\n    function releaseCollateral(uint termId) external;\\n\\n    /// @notice allow the owner to empty the Collateral after 180 days\\n    function emptyCollateralAfterEnd(uint termId) external;\\n}\\n\",\"keccak256\":\"0xa4c1aaa0bcea73659ab81292304b9ac36068371451d3f2b8c71b2a01f7ef7e97\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ninterface IGetters {\\n    // TERM GETTERS\\n\\n    /// @notice Gets the current and next term id\\n    /// @return current termID\\n    /// @return next termID\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Must return 0 before starting the fund\\n    /// @param termId the id of the term\\n    /// @return remaining registration time in seconds\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Get current information of a term\\n    /// @param termId the id of the term\\n    /// @return Term Struct, see LibTermStorage.sol\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets all terms a user has previously joined\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\n    /// @param participant address\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\n    /// @return List of termIDs\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user was previously expelled from\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    // COLLATERAL GETTERS\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the required minimum collateral deposit based on the position\\n    /// @param termId the term id\\n    /// @param depositorIndex the index of the depositor\\n    /// @return required minimum in wei\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    // FUND GETTERS\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the current beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice Gets a user information of in a fund\\n    /// @param participant address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the fund/term\\n    /// @return if the user was beneficiary in the past\\n    /// @return if the user paid for the current cycle\\n    /// @return if the user has autopay enabled\\n    /// @return users money pot balance\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    // CONVERSION GETTERS\\n\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    // YIELD GENERATION GETTERS\\n\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return hasOptedIn\\n    /// @return withdrawnYield\\n    /// @return withdrawnCollateral\\n    /// @return availableYield\\n    /// @return depositedCollateralByUser\\n    /// @return yieldDistributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @param termId the collateral id\\n    /// @return initialized\\n    /// @return startTimeStamp\\n    /// @return totalDeposit\\n    /// @return currentTotalDeposit\\n    /// @return totalShares\\n    /// @return yieldUsers\\n    /// @return vaultAddress\\n    /// @return zapAddress\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n}\\n\",\"keccak256\":\"0x30af7c1416a0df52d5360ac5fd83a66735db5155e08a64c908b1676aae0f9849\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface IYGFacetZaynFi {\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    function claimAvailableYield(uint termId) external;\\n\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param user The user address that is claiming the yield\\n    function claimAvailableYield(uint termId, address user) external;\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external;\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external returns (bool);\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdf88f06b2718a99dbb3e8f2d3d14554822af06c4212a5bed88b00300ab0da9bb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    );\\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\\n\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @param _termId term id\\n    /// @param _depositor Address of the depositor\\n    function _withdrawReimbursement(uint _termId, address _depositor) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_depositor];\\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        collateral.collateralPaymentBank[_depositor] = 0;\\n\\n        (bool success, ) = payable(_depositor).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _depositor, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x27515ec6ce0f7e161ac69fa5551d699a55335d34711c53909ab5d81e5ab8e41d\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime;\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e38e087f7ab23dfb967d6fae65a7676851fd31a1d2b61d6b63d760ead53f86f\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8da9bfc4ef1154e188e9fb8249c6314e020355e42dd59830507c122f4ff4d029\",\"license\":\"MIT\"},\"contracts/libraries/LibTermOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\nlibrary LibTermOwnership {\\n    /**\\n     * @dev Throws if the sender is not the term owner.\\n     * @dev Used for internal calls\\n     */\\n    function _ensureTermOwner(uint termId) internal view {\\n        require(\\n            LibTermStorage._termStorage().terms[termId].termOwner == msg.sender,\\n            \\\"TermOwnable: caller is not the owner\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb169df424c370e228f522a86c6612a45b4fbb8a0e2f20058a467680b93966acb\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime;\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc48faf4702ebe6ad8376ea4fd6f6911c1ee9558c71acee41ba438723780cd\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _ethToShares(_collateralAmount, yield);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _yield The yield generation struct\\n    function _ethToShares(\\n        uint _collateralAmount,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.currentTotalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n}\\n\",\"keccak256\":\"0x8c0b0c40b55a771f0e3f3992f843d20751f073bc1f708be8f351a34476c532e2\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp;\\n        uint totalDeposit;\\n        uint currentTotalDeposit;\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield;\\n        mapping(address => uint256) withdrawnCollateral;\\n        mapping(address => uint256) availableYield;\\n        mapping(address => uint256) depositedCollateralByUser;\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1c7ea8a7018a0d03d382bb84f31fb6bfabd585315545f9d7bf09475c3f6dcef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612206806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632081c1af1461005157806339007b771461007a5780636112fe2e1461008f578063c3bfb61c146100a2575b600080fd5b61006461005f366004611d79565b6100b5565b6040516100719190611e67565b60405180910390f35b61008d610088366004611eb4565b610230565b005b61008d61009d366004611eb4565b6102b7565b61008d6100b0366004611eb4565b6107b1565b6060836080015160016100c882826109db565b60808601805160009081526000805160206121b18339815191526020908152604080832093518352600080516020612171833981519152909152902030331461011057600080fd5b600080610152848b858c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610a4692505050565b915091506000806101638686610f09565b9092509050811561022057825160005b818110156101a8576101a08786838151811061019157610191611ecd565b6020026020010151868661102f565b600101610173565b506101b38386611ef9565b945060005b8381101561021d57858860060160008584815181106101d9576101d9611ecd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102109190611f1b565b90915550506001016101b8565b50505b50909a9950505050505050505050565b6000818152600080516020612171833981519152602052604090208054600490610100900460ff168181111561026857610268611f2e565b146102a85760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064015b60405180910390fd5b6102b3826002611129565b5050565b6000818152600080516020612171833981519152602090815260408083206000805160206121b1833981519152835281842060008051602061215183398151915284528285207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a855283862084516101608101909552805460ff808216151587529497939692959394919284019161010090910416600381111561035d5761035d611f2e565b600381111561036e5761036e611f2e565b815281546001600160a01b0362010000909104811660208084019190915260018401546040808501919091526002850154606085015260038501546080850152600485015460a085015260058086015460c0860152600686015460e08601526007860154610100860152600890950154909216610120909301929092523360009081529287019091529020549091508061043d5760405162461bcd60e51b815260206004820152601060248201526f436f6c6c61746572616c20656d70747960801b604482015260640161029f565b33600090815260158601602052604081205460ff1660028654610100900460ff16600381111561046f5761046f611f2e565b14806104785750805b15610571573360009081526005870160205260408120556002846020015160038111156104a7576104a7611f2e565b146104ba576104b8883385886111c6565b505b60405133908490600081818185875af1925050503d80600081146104fa576040519150601f19603f3d011682016040523d82523d6000602084013e6104ff565b606091505b50909250600290508654610100900460ff16600381111561052257610522611f2e565b0361053d57856002016000815461053890611f44565b909155505b604051839033908a907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a46106da565b60018654610100900460ff16600381111561058e5761058e611f2e565b036106da5760405163f0d826e760e01b815260048101899052600090600a90309063f0d826e790602401602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611f5b565b61060490600f611f74565b61060e9190611ef9565b9050808411156106d85760006106248286611f8b565b33600090815260058a01602052604081208054929350839290919061064a908490611f8b565b9091555061065c90508a33838a6111c6565b5060405133908290600081818185875af1925050503d806000811461069d576040519150601f19603f3d011682016040523d82523d6000602084013e6106a2565b606091505b5050604051909450819033908c907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a4505b505b816107195760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161029f565b33600090815260078601602052604090205460ff16801561074a5750336000908152600a8601602052604090205415155b156107a757604051637b52069560e11b815260048101899052336024820152309063f6a40d2a90604401600060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050505b5050505050505050565b806107bb8161124e565b8160026107c882826109db565b60006000805160206121b18339815191526000868152602091909152604081209150600080516020612151833981519152600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086f9190810190611f9e565b5050955050505050508062ed4e006108879190611f1b565b42116108c75760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b604482015260640161029f565b6003830154600090815b8181101561096e5760008660030182815481106108f0576108f0611ecd565b6000918252602080832091909101546001600160a01b031680835260058a0182526040808420805460068d01909452908420805491859055849055909350909161093c8e85858c6111c6565b9050806109498385611f1b565b6109539190611f1b565b61095d9088611f1b565b9650846001019450505050506108d1565b5061097a896003611129565b604051600090339084908381818185875af1925050503d80600081146109bc576040519150601f19603f3d011682016040523d82523d6000602084013e6109c1565b606091505b50509050806109cf57600080fd5b50505050505050505050565b60008281526000805160206121b18339815191526020526040902054610100900460ff16816003811115610a1157610a11611f2e565b816003811115610a2357610a23611f2e565b14610a415760405163201328a760e01b815260040160405180910390fd5b505050565b600060606000835167ffffffffffffffff811115610a6657610a66611ca7565b604051908082528060200260200182016040528015610a8f578160200160208202803683370190505b5090506000806000306001600160a01b031663d072f4bc8a6101000151670de0b6b3a7640000610abf9190611f74565b6040518263ffffffff1660e01b8152600401610add91815260200190565b602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e9190611f5b565b905060005b8751811015610ef8576040805160808101825260008082526020820181905291810182905260608101919091528960060160008a8481518110610b6857610b68611ecd565b6020908102919091018101516001600160a01b0316825281019190915260400160009081205460ff1615156060830152895160058e019082908c9086908110610bb357610bb3611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050816060015115610de557610c0f8c608001518b8581518110610c0257610c02611ecd565b60200260200101516112e9565b15610dce578a600a0160008b8581518110610c2c57610c2c611ecd565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610db857838110610c7657600182526000602083018190526040830152610e15565b60008b60090160008c8681518110610c9057610c90611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610cd5576000808352600160208401526040830152610e15565b60808c015160405163f0d826e760e01b81526004810191909152309063f0d826e790602401602060405180830381865afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190611f5b565b8d60060160008c8681518110610d5357610d53611ecd565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482610d879190611f1b565b10610da2576001808352602083015260006040830152610e15565b6001808352602083018190526040830152610e15565b6001808352600060208401526040830152610e15565b600182526000602083018190526040830152610e15565b838110610e0357600182526000602083018190526040830152610e15565b60008083526020830152600160408301525b610e3c8d8c8e8d8781518110610e2d57610e2d611ecd565b60200260200101518887611432565b610e469086611f1b565b9450816040015115610eee57898381518110610e6457610e64611ecd565b6020026020010151878781518110610e7e57610e7e611ecd565b60200260200101906001600160a01b031690816001600160a01b0316815250508a600401548b600b016000898981518110610ebb57610ebb611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508560010195505b5050600101610b23565b509099929850919650505050505050565b60006060600080856003018054905067ffffffffffffffff811115610f3057610f30611ca7565b604051908082528060200260200182016040528015610f59578160200160208202803683370190505b506003870154909150600090815b8181101561101e57886003018181548110610f8457610f84611ecd565b60009182526020808320909101546001600160a01b031680835260068b0190915260409091205490955060ff16158015610fd857506001600160a01b038516600090815260048a01602052604090205460ff165b156110165784848481518110610ff057610ff0611ecd565b6001600160a01b039092166020928302919091019091015282611012816120d1565b9350505b600101610f67565b5090945090925050505b9250929050565b6001600160a01b038316600090815260068501602052604090205460ff16611123576001840154600090815b818110156110b15786600101818154811061107857611078611ecd565b6000918252602090912001546001600160a01b03908116908716036110a9576110a2816001611f1b565b92506110b1565b60010161105b565b5060005b8481101561111f576000838152600c8801602052604081208551600192908790859081106110e5576110e5611ecd565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016110b5565b5050505b50505050565b60008281526000805160206121b183398151915260205260409020805461010080820460ff16918491849161ff0019169083600381111561116c5761116c611f2e565b021790555082600381111561118357611183611f2e565b81600381111561119557611195611f2e565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b6001600160a01b038316600090815260078201602052604081205460ff1615611242576001600160a01b0384166000908152600b8301602052604081205484111561122c57506001600160a01b0384166000908152600b8301602052604090205461122f565b50825b61123a868287611a0b565b915050611246565b5060005b949350505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60205260409020546001600160a01b03620100009091041633146112e65760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b606482015260840161029f565b50565b60008281526000805160206121b1833981519152602090815260408083206001600160a01b0385168452600581019092528220548290611345866000908152600080516020612171833981519152602052604090205460ff1690565b6113c45760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906120ea565b95506114279350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611f5b565b91505b109150505b92915050565b608084018051600090815260008051602061215183398151915260205260408082209251905163d8f8e99160e01b815260048101919091529091908290309063d8f8e99190602401602060405180830381865afa158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb9190612133565b845190915080156114ce57508360200151155b15611641578360400151156115965783606001511561156f576001600160a01b038616600090815260058a0160205260409020546080880151611513908883866111c6565b5061151e8185611f1b565b6001600160a01b038816600081815260058d01602052604080822082905560808c01519051939750849390917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a91a4505b6001600160a01b038616600090815260048a0160205260409020805460ff19169055611641565b6115a687608001518787856111c6565b506001600160a01b038616600090815260058a016020526040812080548792906115d1908490611f8b565b90915550506001600160a01b038116600090815260068a01602052604081208054879290611600908490611f1b565b9091555050608087015160405186916001600160a01b038916917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8360200151801561165157508351155b156117095761010087015161166990620f4240611f74565b6001600160a01b038716600090815260098a01602052604081208054909190611693908490611f8b565b90915550506101008701516116ab90620f4240611f74565b6001600160a01b038216600090815260098a016020526040812080549091906116d5908490611f1b565b909155505061010087015160808801516040516001600160a01b038916919060008051602061219183398151915290600090a45b83518015611718575083602001515b156119ff576001600160a01b038616600090815260058a01602090815260408083205460068d019092528220546101008a015191929091309063d072f4bc9061176990670de0b6b3a7640000611f74565b6040518263ffffffff1660e01b815260040161178791815260200190565b602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190611f5b565b9050821561181d576117e08a608001518a85886111c6565b5060808a015160405184916001600160a01b038c16917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8660400151156118c6576118318284611f1b565b61183b9087611f1b565b955060008c60050160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008c60060160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555081896001600160a01b03168b6080015160008051602061219183398151915260405160405180910390a46119fb565b82156119725760006118d88483611f8b565b905060008d60050160008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550808d60060160008c6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461193e9190611f8b565b909155505060808b015160405184916001600160a01b038d169160008051602061219183398151915290600090a4506119cb565b6001600160a01b038916600090815260068d0160205260408120805483929061199c908490611f8b565b909155505060808a015160405182916001600160a01b038c169160008051602061219183398151915290600090a45b6001600160a01b038416600090815260068d016020526040812080548a92906119f5908490611f1b565b90915550505b5050505b50509695505050505050565b60008381526000805160206121518339815191526020526040812081611a318583611bf2565b6001600160a01b0385166000908152600984016020526040812080549293508792909190611a60908490611f1b565b9250508190555084826004016000828254611a7b9190611f8b565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190611f5b565b905087811015611b6e57600095505050505050611beb565b6000611b7a8983611f8b565b6001600160a01b0389166000908152600888016020526040812080549293508392909190611ba9908490611f1b565b90915550506001600160a01b0388166000908152600a8701602052604081208054839290611bd8908490611f1b565b90915550909650611beb95505050505050565b9392505050565b60008082600101604051611c15906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c889190611f5b565b905080611c9d85670de0b6b3a7640000611f74565b6112469190611ef9565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611ce157611ce1611ca7565b60405290565b80151581146112e657600080fd5b8035611d0081611ce7565b919050565b803560048110611d0057600080fd5b6001600160a01b03811681146112e657600080fd5b8035611d0081611d14565b60008083601f840112611d4657600080fd5b50813567ffffffffffffffff811115611d5e57600080fd5b6020830191508360208260051b850101111561102857600080fd5b6000806000838503610180811215611d9057600080fd5b61016080821215611da057600080fd5b611da8611cbd565b9150611db386611cf5565b8252611dc160208701611d05565b6020830152611dd260408701611d29565b6040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152610100808701358184015250610120808701358184015250610140611e2f818801611d29565b9083015290935084013567ffffffffffffffff811115611e4e57600080fd5b611e5a86828701611d34565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611ea85783516001600160a01b031683529284019291840191600101611e83565b50909695505050505050565b600060208284031215611ec657600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611f1657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561142c5761142c611ee3565b634e487b7160e01b600052602160045260246000fd5b600081611f5357611f53611ee3565b506000190190565b600060208284031215611f6d57600080fd5b5051919050565b808202811582820484141761142c5761142c611ee3565b8181038181111561142c5761142c611ee3565b600080600080600080600080610100898b031215611fbb57600080fd5b8851611fc681611ce7565b809850506020808a015160058110611fdd57600080fd5b60408b0151909850611fee81611d14565b60608b015190975067ffffffffffffffff8082111561200c57600080fd5b818c0191508c601f83011261202057600080fd5b81518181111561203257612032611ca7565b8060051b604051601f19603f8301168101818110858211171561205757612057611ca7565b60405291825284820192508381018501918f83111561207557600080fd5b938501935b8285101561209f578451915061208f82611d14565b818452938501939285019261207a565b809a505050505050506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b6000600182016120e3576120e3611ee3565b5060010190565b600080600080600060a0868803121561210257600080fd5b855161210d81611ce7565b602087015160408801516060890151608090990151929a91995097965090945092505050565b60006020828403121561214557600080fd5b8151611beb81611d1456fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9ecbf86544b133eb80eba635946daf018f997778387601f4c8d43c851b2ec07435fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212204cc450d7114fdf88472e13d9ee32bdc56b6f0f129e5d47d44dff3a4eefb81c9464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632081c1af1461005157806339007b771461007a5780636112fe2e1461008f578063c3bfb61c146100a2575b600080fd5b61006461005f366004611d79565b6100b5565b6040516100719190611e67565b60405180910390f35b61008d610088366004611eb4565b610230565b005b61008d61009d366004611eb4565b6102b7565b61008d6100b0366004611eb4565b6107b1565b6060836080015160016100c882826109db565b60808601805160009081526000805160206121b18339815191526020908152604080832093518352600080516020612171833981519152909152902030331461011057600080fd5b600080610152848b858c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610a4692505050565b915091506000806101638686610f09565b9092509050811561022057825160005b818110156101a8576101a08786838151811061019157610191611ecd565b6020026020010151868661102f565b600101610173565b506101b38386611ef9565b945060005b8381101561021d57858860060160008584815181106101d9576101d9611ecd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102109190611f1b565b90915550506001016101b8565b50505b50909a9950505050505050505050565b6000818152600080516020612171833981519152602052604090208054600490610100900460ff168181111561026857610268611f2e565b146102a85760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064015b60405180910390fd5b6102b3826002611129565b5050565b6000818152600080516020612171833981519152602090815260408083206000805160206121b1833981519152835281842060008051602061215183398151915284528285207f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a855283862084516101608101909552805460ff808216151587529497939692959394919284019161010090910416600381111561035d5761035d611f2e565b600381111561036e5761036e611f2e565b815281546001600160a01b0362010000909104811660208084019190915260018401546040808501919091526002850154606085015260038501546080850152600485015460a085015260058086015460c0860152600686015460e08601526007860154610100860152600890950154909216610120909301929092523360009081529287019091529020549091508061043d5760405162461bcd60e51b815260206004820152601060248201526f436f6c6c61746572616c20656d70747960801b604482015260640161029f565b33600090815260158601602052604081205460ff1660028654610100900460ff16600381111561046f5761046f611f2e565b14806104785750805b15610571573360009081526005870160205260408120556002846020015160038111156104a7576104a7611f2e565b146104ba576104b8883385886111c6565b505b60405133908490600081818185875af1925050503d80600081146104fa576040519150601f19603f3d011682016040523d82523d6000602084013e6104ff565b606091505b50909250600290508654610100900460ff16600381111561052257610522611f2e565b0361053d57856002016000815461053890611f44565b909155505b604051839033908a907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a46106da565b60018654610100900460ff16600381111561058e5761058e611f2e565b036106da5760405163f0d826e760e01b815260048101899052600090600a90309063f0d826e790602401602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611f5b565b61060490600f611f74565b61060e9190611ef9565b9050808411156106d85760006106248286611f8b565b33600090815260058a01602052604081208054929350839290919061064a908490611f8b565b9091555061065c90508a33838a6111c6565b5060405133908290600081818185875af1925050503d806000811461069d576040519150601f19603f3d011682016040523d82523d6000602084013e6106a2565b606091505b5050604051909450819033908c907fd94b416f75aca5d5e5c7e359e58fa21ccbdbb8a6036f8af786e3e2ab7ceb37be90600090a4505b505b816107195760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161029f565b33600090815260078601602052604090205460ff16801561074a5750336000908152600a8601602052604090205415155b156107a757604051637b52069560e11b815260048101899052336024820152309063f6a40d2a90604401600060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050505b5050505050505050565b806107bb8161124e565b8160026107c882826109db565b60006000805160206121b18339815191526000868152602091909152604081209150600080516020612151833981519152600087815260209190915260408082209051636b95dc3f60e11b815260048101899052909250309063d72bb87e90602401600060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086f9190810190611f9e565b5050955050505050508062ed4e006108879190611f1b565b42116108c75760405162461bcd60e51b815260206004820152600f60248201526e10d85b89dd08195b5c1d1e481e595d608a1b604482015260640161029f565b6003830154600090815b8181101561096e5760008660030182815481106108f0576108f0611ecd565b6000918252602080832091909101546001600160a01b031680835260058a0182526040808420805460068d01909452908420805491859055849055909350909161093c8e85858c6111c6565b9050806109498385611f1b565b6109539190611f1b565b61095d9088611f1b565b9650846001019450505050506108d1565b5061097a896003611129565b604051600090339084908381818185875af1925050503d80600081146109bc576040519150601f19603f3d011682016040523d82523d6000602084013e6109c1565b606091505b50509050806109cf57600080fd5b50505050505050505050565b60008281526000805160206121b18339815191526020526040902054610100900460ff16816003811115610a1157610a11611f2e565b816003811115610a2357610a23611f2e565b14610a415760405163201328a760e01b815260040160405180910390fd5b505050565b600060606000835167ffffffffffffffff811115610a6657610a66611ca7565b604051908082528060200260200182016040528015610a8f578160200160208202803683370190505b5090506000806000306001600160a01b031663d072f4bc8a6101000151670de0b6b3a7640000610abf9190611f74565b6040518263ffffffff1660e01b8152600401610add91815260200190565b602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e9190611f5b565b905060005b8751811015610ef8576040805160808101825260008082526020820181905291810182905260608101919091528960060160008a8481518110610b6857610b68611ecd565b6020908102919091018101516001600160a01b0316825281019190915260400160009081205460ff1615156060830152895160058e019082908c9086908110610bb357610bb3611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050816060015115610de557610c0f8c608001518b8581518110610c0257610c02611ecd565b60200260200101516112e9565b15610dce578a600a0160008b8581518110610c2c57610c2c611ecd565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610db857838110610c7657600182526000602083018190526040830152610e15565b60008b60090160008c8681518110610c9057610c90611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610cd5576000808352600160208401526040830152610e15565b60808c015160405163f0d826e760e01b81526004810191909152309063f0d826e790602401602060405180830381865afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190611f5b565b8d60060160008c8681518110610d5357610d53611ecd565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482610d879190611f1b565b10610da2576001808352602083015260006040830152610e15565b6001808352602083018190526040830152610e15565b6001808352600060208401526040830152610e15565b600182526000602083018190526040830152610e15565b838110610e0357600182526000602083018190526040830152610e15565b60008083526020830152600160408301525b610e3c8d8c8e8d8781518110610e2d57610e2d611ecd565b60200260200101518887611432565b610e469086611f1b565b9450816040015115610eee57898381518110610e6457610e64611ecd565b6020026020010151878781518110610e7e57610e7e611ecd565b60200260200101906001600160a01b031690816001600160a01b0316815250508a600401548b600b016000898981518110610ebb57610ebb611ecd565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508560010195505b5050600101610b23565b509099929850919650505050505050565b60006060600080856003018054905067ffffffffffffffff811115610f3057610f30611ca7565b604051908082528060200260200182016040528015610f59578160200160208202803683370190505b506003870154909150600090815b8181101561101e57886003018181548110610f8457610f84611ecd565b60009182526020808320909101546001600160a01b031680835260068b0190915260409091205490955060ff16158015610fd857506001600160a01b038516600090815260048a01602052604090205460ff165b156110165784848481518110610ff057610ff0611ecd565b6001600160a01b039092166020928302919091019091015282611012816120d1565b9350505b600101610f67565b5090945090925050505b9250929050565b6001600160a01b038316600090815260068501602052604090205460ff16611123576001840154600090815b818110156110b15786600101818154811061107857611078611ecd565b6000918252602090912001546001600160a01b03908116908716036110a9576110a2816001611f1b565b92506110b1565b60010161105b565b5060005b8481101561111f576000838152600c8801602052604081208551600192908790859081106110e5576110e5611ecd565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016110b5565b5050505b50505050565b60008281526000805160206121b183398151915260205260409020805461010080820460ff16918491849161ff0019169083600381111561116c5761116c611f2e565b021790555082600381111561118357611183611f2e565b81600381111561119557611195611f2e565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b6001600160a01b038316600090815260078201602052604081205460ff1615611242576001600160a01b0384166000908152600b8301602052604081205484111561122c57506001600160a01b0384166000908152600b8301602052604090205461122f565b50825b61123a868287611a0b565b915050611246565b5060005b949350505050565b60008181527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a60205260409020546001600160a01b03620100009091041633146112e65760405162461bcd60e51b8152602060048201526024808201527f5465726d4f776e61626c653a2063616c6c6572206973206e6f7420746865206f6044820152633bb732b960e11b606482015260840161029f565b50565b60008281526000805160206121b1833981519152602090815260408083206001600160a01b0385168452600581019092528220548290611345866000908152600080516020612171833981519152602052604090205460ff1690565b6113c45760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906120ea565b95506114279350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611f5b565b91505b109150505b92915050565b608084018051600090815260008051602061215183398151915260205260408082209251905163d8f8e99160e01b815260048101919091529091908290309063d8f8e99190602401602060405180830381865afa158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb9190612133565b845190915080156114ce57508360200151155b15611641578360400151156115965783606001511561156f576001600160a01b038616600090815260058a0160205260409020546080880151611513908883866111c6565b5061151e8185611f1b565b6001600160a01b038816600081815260058d01602052604080822082905560808c01519051939750849390917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a91a4505b6001600160a01b038616600090815260048a0160205260409020805460ff19169055611641565b6115a687608001518787856111c6565b506001600160a01b038616600090815260058a016020526040812080548792906115d1908490611f8b565b90915550506001600160a01b038116600090815260068a01602052604081208054879290611600908490611f1b565b9091555050608087015160405186916001600160a01b038916917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8360200151801561165157508351155b156117095761010087015161166990620f4240611f74565b6001600160a01b038716600090815260098a01602052604081208054909190611693908490611f8b565b90915550506101008701516116ab90620f4240611f74565b6001600160a01b038216600090815260098a016020526040812080549091906116d5908490611f1b565b909155505061010087015160808801516040516001600160a01b038916919060008051602061219183398151915290600090a45b83518015611718575083602001515b156119ff576001600160a01b038616600090815260058a01602090815260408083205460068d019092528220546101008a015191929091309063d072f4bc9061176990670de0b6b3a7640000611f74565b6040518263ffffffff1660e01b815260040161178791815260200190565b602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190611f5b565b9050821561181d576117e08a608001518a85886111c6565b5060808a015160405184916001600160a01b038c16917f10f8476f9a23ac06c638b35201072d11e362a5abe0247195ce64284bbe94ce9a90600090a45b8660400151156118c6576118318284611f1b565b61183b9087611f1b565b955060008c60050160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008c60060160008b6001600160a01b03166001600160a01b031681526020019081526020016000208190555081896001600160a01b03168b6080015160008051602061219183398151915260405160405180910390a46119fb565b82156119725760006118d88483611f8b565b905060008d60050160008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550808d60060160008c6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461193e9190611f8b565b909155505060808b015160405184916001600160a01b038d169160008051602061219183398151915290600090a4506119cb565b6001600160a01b038916600090815260068d0160205260408120805483929061199c908490611f8b565b909155505060808a015160405182916001600160a01b038c169160008051602061219183398151915290600090a45b6001600160a01b038416600090815260068d016020526040812080548a92906119f5908490611f1b565b90915550505b5050505b50509695505050505050565b60008381526000805160206121518339815191526020526040812081611a318583611bf2565b6001600160a01b0385166000908152600984016020526040812080549293508792909190611a60908490611f1b565b9250508190555084826004016000828254611a7b9190611f8b565b9091555050604080516605a61796e5a61760cc1b815260018401600782018190529151908190036027018120546816985e5b95985d5b1d60ba1b82526001600160a01b031691600091600901908152604051908190036020018120546316d5e29b60e11b82526001600160a01b039081166004830181905260248301869052604483018b9052925060009190841690632dabc536906064016020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190611f5b565b905087811015611b6e57600095505050505050611beb565b6000611b7a8983611f8b565b6001600160a01b0389166000908152600888016020526040812080549293508392909190611ba9908490611f1b565b90915550506001600160a01b0388166000908152600a8701602052604081208054839290611bd8908490611f1b565b90915550909650611beb95505050505050565b9392505050565b60008082600101604051611c15906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015611c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c889190611f5b565b905080611c9d85670de0b6b3a7640000611f74565b6112469190611ef9565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611ce157611ce1611ca7565b60405290565b80151581146112e657600080fd5b8035611d0081611ce7565b919050565b803560048110611d0057600080fd5b6001600160a01b03811681146112e657600080fd5b8035611d0081611d14565b60008083601f840112611d4657600080fd5b50813567ffffffffffffffff811115611d5e57600080fd5b6020830191508360208260051b850101111561102857600080fd5b6000806000838503610180811215611d9057600080fd5b61016080821215611da057600080fd5b611da8611cbd565b9150611db386611cf5565b8252611dc160208701611d05565b6020830152611dd260408701611d29565b6040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152610100808701358184015250610120808701358184015250610140611e2f818801611d29565b9083015290935084013567ffffffffffffffff811115611e4e57600080fd5b611e5a86828701611d34565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611ea85783516001600160a01b031683529284019291840191600101611e83565b50909695505050505050565b600060208284031215611ec657600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082611f1657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561142c5761142c611ee3565b634e487b7160e01b600052602160045260246000fd5b600081611f5357611f53611ee3565b506000190190565b600060208284031215611f6d57600080fd5b5051919050565b808202811582820484141761142c5761142c611ee3565b8181038181111561142c5761142c611ee3565b600080600080600080600080610100898b031215611fbb57600080fd5b8851611fc681611ce7565b809850506020808a015160058110611fdd57600080fd5b60408b0151909850611fee81611d14565b60608b015190975067ffffffffffffffff8082111561200c57600080fd5b818c0191508c601f83011261202057600080fd5b81518181111561203257612032611ca7565b8060051b604051601f19603f8301168101818110858211171561205757612057611ca7565b60405291825284820192508381018501918f83111561207557600080fd5b938501935b8285101561209f578451915061208f82611d14565b818452938501939285019261207a565b809a505050505050506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b6000600182016120e3576120e3611ee3565b5060010190565b600080600080600060a0868803121561210257600080fd5b855161210d81611ce7565b602087015160408801516060890151608090990151929a91995097965090945092505050565b60006020828403121561214557600080fd5b8151611beb81611d1456fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9ecbf86544b133eb80eba635946daf018f997778387601f4c8d43c851b2ec07435fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212204cc450d7114fdf88472e13d9ee32bdc56b6f0f129e5d47d44dff3a4eefb81c9464736f6c63430008120033",
  "devdoc": {
    "author": "Aisha El Allam",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "params": {
          "termId": "The term id"
        }
      },
      "releaseCollateral(uint256)": {
        "params": {
          "termId": "term id"
        }
      },
      "requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "details": "Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract",
        "params": {
          "defaulters": "Addressess of all defaulters of the current cycle"
        },
        "returns": {
          "_0": "expellants array of addresses that were expelled"
        }
      },
      "withdrawCollateral(uint256)": {
        "details": "This follows the pull-over-push pattern.",
        "params": {
          "termId": "term id"
        }
      }
    },
    "title": "Takaturn Collateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emptyCollateralAfterEnd(uint256)": {
        "notice": "allow the owner to empty the Collateral after 180 days"
      },
      "requestContribution((bool,uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),address[])": {
        "notice": "Called from Fund contract when someone defaults"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Called by each member after during or at the end of the term to withraw collateral"
      }
    },
    "notice": "This is used to operate the Takaturn collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}