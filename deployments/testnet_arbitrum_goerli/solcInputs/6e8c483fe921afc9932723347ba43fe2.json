{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"./libraries/LibTermStorage.sol\";\nimport {LibYieldGenerationStorage} from \"./libraries/LibYieldGenerationStorage.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\n\ncontract DiamondInit {\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    function init(\n        address _aggregatorAddressEthUsd,\n        address _aggregatorAddressUsdUsdc,\n        address _zapAddress, // Zaynfi Zap address\n        address _vaultAddress, // Zaynfi Vault address\n        bool _yieldLock\n    ) external onlyOwner {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        termConsts.aggregatorsAddresses[\"ETH/USD\"] = _aggregatorAddressEthUsd;\n        termConsts.aggregatorsAddresses[\"USDC/USD\"] = _aggregatorAddressUsdUsdc;\n\n        yieldProvider.providerAddresses[\"ZaynZap\"] = _zapAddress;\n        yieldProvider.providerAddresses[\"ZaynVault\"] = _vaultAddress;\n\n        LibYieldGenerationStorage._yieldLock().yieldLock = _yieldLock;\n    }\n}\n"
    },
    "contracts/facets/CollateralFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\n\n/// @title Takaturn Collateral\n/// @author Aisha El Allam\n/// @notice This is used to operate the Takaturn collateral\n/// @dev v3.0 (Diamond)\ncontract CollateralFacet is ICollateral {\n    event OnCollateralStateChanged(\n        uint indexed termId,\n        LibCollateralStorage.CollateralStates indexed oldState,\n        LibCollateralStorage.CollateralStates indexed newState\n    );\n    event OnCollateralWithdrawal(\n        uint indexed termId,\n        address indexed user,\n        uint indexed collateralAmount\n    );\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount);\n    event OnFrozenMoneyPotLiquidated(\n        uint indexed termId,\n        address indexed user,\n        uint indexed amount\n    );\n\n    /// @param termId term id\n    /// @param _state collateral state\n    modifier atState(uint termId, LibCollateralStorage.CollateralStates _state) {\n        _atState(termId, _state);\n        _;\n    }\n\n    modifier onlyTermOwner(uint termId) {\n        LibTermOwnership._ensureTermOwner(termId);\n        _;\n    }\n\n    /// @notice Called from Fund contract when someone defaults\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\n    /// @param defaulters Addressess of all defaulters of the current cycle\n    /// @return expellants array of addresses that were expelled\n    function requestContribution(\n        LibTermStorage.Term memory term,\n        address[] calldata defaulters\n    )\n        external\n        atState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing)\n        returns (address[] memory)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[term.termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[term.termId];\n        require(msg.sender == address(this));\n\n        (uint collateralToDistribute, address[] memory expellants) = _solveDefaulters(\n            collateral,\n            term,\n            fund,\n            defaulters\n        );\n\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _findNonBeneficiaries(\n            collateral,\n            fund\n        );\n\n        if (nonBeneficiaryCounter > 0) {\n            // This case can only happen when what?\n            // Exempt non beneficiaries from paying an early expellant's cycle\n            uint expellantsLength = expellants.length;\n            for (uint i; i < expellantsLength; ) {\n                _exemptNonBeneficiariesFromPaying(\n                    fund,\n                    expellants[i],\n                    nonBeneficiaryCounter,\n                    nonBeneficiaries\n                );\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            // Finally, divide the share equally among non-beneficiaries\n            collateralToDistribute = collateralToDistribute / nonBeneficiaryCounter;\n            for (uint i; i < nonBeneficiaryCounter; ) {\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += collateralToDistribute;\n\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        return (expellants);\n    }\n\n    /// @notice Called to exempt users from needing to pay\n    /// @param _fund Fund storage\n    /// @param _expellant The expellant in question\n    /// @param _nonBeneficiaries All non-beneficiaries at this time\n    function _exemptNonBeneficiariesFromPaying(\n        LibFundStorage.Fund storage _fund,\n        address _expellant,\n        uint _nonBeneficiaryCounter,\n        address[] memory _nonBeneficiaries\n    ) internal {\n        if (!_fund.isBeneficiary[_expellant]) {\n            uint expellantBeneficiaryCycle;\n\n            uint beneficiariesLength = _fund.beneficiariesOrder.length;\n            for (uint i; i < beneficiariesLength; ) {\n                if (_expellant == _fund.beneficiariesOrder[i]) {\n                    expellantBeneficiaryCycle = i + 1;\n                    break;\n                }\n                unchecked {\n                    ++i;\n                }\n            }\n\n            for (uint i; i < _nonBeneficiaryCounter; ) {\n                _fund.isExemptedOnCycle[expellantBeneficiaryCycle].exempted[\n                    _nonBeneficiaries[i]\n                ] = true;\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId term id\n    function withdrawCollateral(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        LibTermStorage.Term memory term = LibTermStorage._termStorage().terms[termId];\n\n        uint userCollateral = collateral.collateralMembersBank[msg.sender];\n        require(userCollateral > 0, \"Collateral empty\");\n\n        bool success;\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\n        // Withdraw all the user has.\n        if (\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\n            expelledBeforeBeneficiary\n        ) {\n            // First case: The collateral is released or the user was expelled before being a beneficiary\n            collateral.collateralMembersBank[msg.sender] = 0;\n\n            if (term.state != LibTermStorage.TermStates.ExpiredTerm) {\n                _withdrawFromYield(termId, msg.sender, userCollateral, yield);\n            }\n\n            (success, ) = payable(msg.sender).call{value: userCollateral}(\"\");\n\n            if (collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral) {\n                --collateral.counterMembers;\n            }\n\n            emit OnCollateralWithdrawal(termId, msg.sender, userCollateral);\n        }\n        // Or withdraw partially\n        else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\n            // Second case: The term is on an ongoing cycle, the user has not been expelled\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\n            uint minRequiredCollateral = (IGetters(address(this)).getRemainingCyclesContributionWei(\n                termId\n            ) * 15) / 10; // 1.5 X RCC in wei\n\n            // Collateral must be higher than 1.5 X RCC\n            if (userCollateral > minRequiredCollateral) {\n                uint allowedWithdrawal = userCollateral - minRequiredCollateral; // We allow to withdraw the positive difference\n                collateral.collateralMembersBank[msg.sender] -= allowedWithdrawal;\n\n                _withdrawFromYield(termId, msg.sender, allowedWithdrawal, yield);\n\n                (success, ) = payable(msg.sender).call{value: allowedWithdrawal}(\"\");\n\n                emit OnCollateralWithdrawal(termId, msg.sender, allowedWithdrawal);\n            }\n        }\n\n        require(success, \"Withdraw failed\");\n        if (yield.hasOptedIn[msg.sender] && yield.availableYield[msg.sender] > 0) {\n            IYGFacetZaynFi(address(this)).claimAvailableYield(termId, msg.sender);\n        }\n    }\n\n    /// @param termId term id\n    function releaseCollateral(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(fund.currentState == LibFundStorage.FundStates.FundClosed, \"Wrong state\");\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral);\n    }\n\n    /// @notice allow the owner to empty the Collateral after 180 days\n    /// @param termId The term id\n    function emptyCollateralAfterEnd(\n        uint termId\n    )\n        external\n        onlyTermOwner(termId)\n        atState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        (, , , , , uint fundEnd, , ) = IGetters(address(this)).getFundSummary(termId);\n        require(block.timestamp > fundEnd + 180 days, \"Can't empty yet\");\n\n        uint totalToWithdraw;\n        uint depositorsLength = collateral.depositors.length;\n        for (uint i; i < depositorsLength; ) {\n            address depositor = collateral.depositors[i];\n            uint amount = collateral.collateralMembersBank[depositor];\n            uint paymentAmount = collateral.collateralPaymentBank[depositor];\n\n            collateral.collateralMembersBank[depositor] = 0;\n            collateral.collateralPaymentBank[depositor] = 0;\n            uint withdrawnYield = _withdrawFromYield(termId, depositor, amount, yield);\n\n            totalToWithdraw += (amount + paymentAmount + withdrawnYield);\n\n            unchecked {\n                ++i;\n            }\n        }\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.Closed);\n\n        (bool success, ) = payable(msg.sender).call{value: totalToWithdraw}(\"\");\n        require(success);\n    }\n\n    /// @param _collateral Collateral storage\n    /// @param _term Term storage\n    /// @param _defaulters Defaulters array\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\n    /// @return expellants array of addresses that were expelled\n    function _solveDefaulters(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibTermStorage.Term memory _term,\n        LibFundStorage.Fund storage _fund,\n        address[] memory _defaulters\n    ) internal returns (uint, address[] memory) {\n        // require(_defaulters.length > 0, \"No defaulters\");\n\n        address[] memory expellants = new address[](_defaulters.length);\n        uint expellantsCounter;\n        uint distributedCollateral;\n\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\n            _term.contributionAmount * 10 ** 18\n        );\n\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\n        for (uint i; i < _defaulters.length; ) {\n            LibCollateralStorage.DefaulterState memory defaulterState;\n            defaulterState.isBeneficiary = _fund.isBeneficiary[_defaulters[i]];\n            uint collateralAmount = _collateral.collateralMembersBank[_defaulters[i]];\n            if (defaulterState.isBeneficiary) {\n                // Has the user been beneficiary?\n                if (LibCollateral._isUnderCollaterized(_term.termId, _defaulters[i])) {\n                    // Is the collateral below 1.0 X RCC?\n                    if (_fund.beneficiariesFrozenPool[_defaulters[i]]) {\n                        // Is the pool currently frozen?\n                        if (collateralAmount >= contributionAmountWei) {\n                            // Does the user's collateral cover a cycle?\n                            defaulterState.payWithCollateral = true; // Pay with collateral\n                            defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                            defaulterState.gettingExpelled = false; // Not expelled\n                        } else {\n                            // We don't have to check exact amounts because the pool would always be deducted by consistent amounts\n                            if (_fund.beneficiariesPool[_defaulters[i]] > 0) {\n                                // Does the frozen stable token portion of the pool contain anything?\n                                defaulterState.payWithCollateral = false; // Do not pay with collateral\n                                defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                defaulterState.gettingExpelled = false; // Not expelled\n                            } else {\n                                // Is whatever is left from the collateral + received collateral portion of money pool below 1.0 X RCC?\n                                if (\n                                    collateralAmount +\n                                        _collateral.collateralPaymentBank[_defaulters[i]] >=\n                                    IGetters(address(this)).getRemainingCyclesContributionWei(\n                                        _term.termId\n                                    )\n                                ) {\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                    defaulterState.gettingExpelled = false; // Not expelled\n                                } else {\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                    defaulterState.gettingExpelled = true; // Expelled\n                                }\n                            }\n                        }\n                    } else {\n                        defaulterState.payWithCollateral = true; // Pay with collateral\n                        defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                        defaulterState.gettingExpelled = true; // Expelled\n                    }\n                } else {\n                    defaulterState.payWithCollateral = true; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = false; // Not expelled\n                }\n            } else {\n                if (collateralAmount >= contributionAmountWei) {\n                    defaulterState.payWithCollateral = true; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = false; // Not expelled\n                } else {\n                    defaulterState.payWithCollateral = false; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = true; // Expelled\n                }\n            }\n\n            distributedCollateral += _payDefaulterContribution(\n                _collateral,\n                _fund,\n                _term,\n                _defaulters[i],\n                contributionAmountWei,\n                defaulterState\n            );\n\n            if (defaulterState.gettingExpelled) {\n                expellants[expellantsCounter] = _defaulters[i];\n                _fund.cycleOfExpulsion[expellants[expellantsCounter]] = _fund.currentCycle;\n\n                unchecked {\n                    ++expellantsCounter;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (distributedCollateral, expellants);\n    }\n\n    /// @notice called internally to pay defaulter contribution\n    function _payDefaulterContribution(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term memory _term,\n        address _defaulter,\n        uint _contributionAmountWei,\n        LibCollateralStorage.DefaulterState memory _defaulterState\n    ) internal returns (uint distributedCollateral) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_term.termId];\n\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\n        if (_defaulterState.payWithCollateral && !_defaulterState.payWithFrozenPool) {\n            if (_defaulterState.gettingExpelled) {\n                if (_defaulterState.isBeneficiary) {\n                    uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\n                    _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\n\n                    distributedCollateral += remainingCollateral; // This will be distributed later\n                    _collateral.collateralMembersBank[_defaulter] = 0;\n                    emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\n                }\n\n                // Expelled\n                _collateral.isCollateralMember[_defaulter] = false;\n            } else {\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\n\n                // Subtract contribution from defaulter and add to beneficiary.\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\n\n                emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\n            }\n        }\n        if (_defaulterState.payWithFrozenPool && !_defaulterState.payWithCollateral) {\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount * 10 ** 6;\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * 10 ** 6;\n\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\n        }\n        if (_defaulterState.payWithCollateral && _defaulterState.payWithFrozenPool) {\n            uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\n            uint remainingCollateralFromPayments = _collateral.collateralPaymentBank[_defaulter];\n            uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\n                _term.contributionAmount * 10 ** 18\n            );\n\n            if (remainingCollateral > 0) {\n                _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\n\n                emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\n            }\n            if (_defaulterState.gettingExpelled) {\n                distributedCollateral += (remainingCollateral + remainingCollateralFromPayments);\n                _collateral.collateralMembersBank[_defaulter] = 0;\n                _collateral.collateralPaymentBank[_defaulter] = 0;\n                emit OnFrozenMoneyPotLiquidated(\n                    _term.termId,\n                    _defaulter,\n                    remainingCollateralFromPayments\n                );\n            } else {\n                // Remaining collateral is always less than contribution amount if/when we reach this\n                if (remainingCollateral > 0) {\n                    // Remove any last remaining collateral\n                    uint toDeductFromPayments = contributionAmountWei - remainingCollateral;\n                    _collateral.collateralMembersBank[_defaulter] = 0;\n                    _collateral.collateralPaymentBank[_defaulter] -= toDeductFromPayments;\n                    emit OnFrozenMoneyPotLiquidated(\n                        _term.termId,\n                        _defaulter,\n                        remainingCollateralFromPayments\n                    );\n                } else {\n                    _collateral.collateralPaymentBank[_defaulter] -= contributionAmountWei;\n                    emit OnFrozenMoneyPotLiquidated(\n                        _term.termId,\n                        _defaulter,\n                        contributionAmountWei\n                    );\n                }\n\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\n            }\n        }\n    }\n\n    /// @param _collateral Collateral storage\n    /// @param _fund Fund storage\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\n    /// @return nonBeneficiaries array of addresses that were expelled\n    function _findNonBeneficiaries(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibFundStorage.Fund storage _fund\n    ) internal view returns (uint, address[] memory) {\n        address currentDepositor;\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\n        uint nonBeneficiaryCounter;\n\n        // Check beneficiaries\n        uint depositorsLength = _collateral.depositors.length;\n        for (uint i; i < depositorsLength; ) {\n            currentDepositor = _collateral.depositors[i];\n            if (\n                !_fund.isBeneficiary[currentDepositor] &&\n                _collateral.isCollateralMember[currentDepositor]\n            ) {\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\n                nonBeneficiaryCounter++;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (nonBeneficiaryCounter, nonBeneficiaries);\n    }\n\n    function _withdrawFromYield(\n        uint _termId,\n        address _user,\n        uint _amount,\n        LibYieldGenerationStorage.YieldGeneration storage _yieldStorage\n    ) internal returns (uint withdrawnYield) {\n        if (_yieldStorage.hasOptedIn[_user]) {\n            uint amountToWithdraw;\n            if (_amount > _yieldStorage.depositedCollateralByUser[_user]) {\n                amountToWithdraw = _yieldStorage.depositedCollateralByUser[_user];\n            } else {\n                amountToWithdraw = _amount;\n            }\n            withdrawnYield = LibYieldGeneration._withdrawYG(_termId, amountToWithdraw, _user);\n        } else {\n            withdrawnYield = 0;\n        }\n    }\n\n    function _atState(uint _termId, LibCollateralStorage.CollateralStates _state) internal view {\n        LibCollateralStorage.CollateralStates state = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId]\n            .state;\n        if (state != _state) revert FunctionInvalidAtThisState();\n    }\n}\n"
    },
    "contracts/facets/FundFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IFund} from \"../interfaces/IFund.sol\";\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\nimport {LibFund} from \"../libraries/LibFund.sol\";\n\n/// @title Takaturn Fund\n/// @author Mohammed Haddouti\n/// @notice This is used to operate the Takaturn fund\n/// @dev v3.0 (Diamond)\ncontract FundFacet is IFund {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OnFundStateChanged(\n        uint indexed termId,\n        uint indexed currentCycle,\n        LibFundStorage.FundStates indexed newState\n    ); // Emits when state has updated\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\n    event OnBeneficiaryAwarded(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\n    event OnFundWithdrawn(uint indexed termId, address indexed claimant, uint indexed amount); // Emits when a chosen beneficiary claims their fund\n    event OnParticipantDefaulted(\n        uint indexed termId,\n        uint indexed currentCycle,\n        address indexed defaulter\n    ); // Emits when a participant didn't pay this cycle's contribution\n    event OnDefaulterExpelled(\n        uint indexed termId,\n        uint indexed currentCycle,\n        address indexed expellant\n    ); // Emits when a defaulter can't compensate with the collateral\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\n\n    modifier onlyTermOwner(uint termId) {\n        LibTermOwnership._ensureTermOwner(termId);\n        _;\n    }\n\n    /// Insufficient balance for transfer. Needed `required` but only\n    /// `available` available.\n    /// @param available balance available.\n    /// @param required requested amount to transfer.\n    error InsufficientBalance(uint available, uint required);\n\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\n    /// @param termId the id of the term\n    function startNewCycle(uint termId) external {\n        LibFund._startNewCycle(termId);\n    }\n\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\n    /// @param termId the id of the term\n    function closeFundingPeriod(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\n        require(\n            block.timestamp >\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\n            \"Still time to contribute\"\n        );\n        require(\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\n            \"Wrong state\"\n        );\n\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\n\n        // We attempt to make the autopayers pay their contribution right away\n        LibFund._autoPay(termId);\n\n        // Only then award the beneficiary\n        LibFund._setState(termId, LibFundStorage.FundStates.AwardingBeneficiary);\n\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\n        address[] memory participants = fund.beneficiariesOrder;\n\n        uint participantsLength = participants.length;\n        uint currentCycle = fund.currentCycle;\n        for (uint i; i < participantsLength; ) {\n            address p = participants[i];\n\n            // The current beneficiary or someone who is exempt doesn't pay neither gets defaulted\n            if (p == currentBeneficiary || fund.isExemptedOnCycle[currentCycle].exempted[p]) {\n                if (EnumerableSet.contains(fund._defaulters, p)) {\n                    EnumerableSet.remove(fund._defaulters, p);\n                    if (p == currentBeneficiary) {\n                        EnumerableSet.add(fund._beneficiaries, p);\n                    } else {\n                        EnumerableSet.add(fund._participants, p);\n                    }\n                }\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            if (fund.paidThisCycle[p]) {\n                // check where to restore the defaulter to, participants or beneficiaries\n                if (fund.isBeneficiary[p]) {\n                    EnumerableSet.add(fund._beneficiaries, p);\n                } else {\n                    EnumerableSet.add(fund._participants, p);\n                }\n\n                EnumerableSet.remove(fund._defaulters, p);\n            } else if (\n                !EnumerableSet.contains(fund._defaulters, p) &&\n                !IGetters(address(this)).wasExpelled(termId, p)\n            ) {\n                // And we make sure that existing defaulters are ignored\n                // If the current beneficiary is an expelled participant, only check previous beneficiaries,\n                // that have not been expelled\n                if (IGetters(address(this)).wasExpelled(termId, currentBeneficiary)) {\n                    if (fund.isBeneficiary[p]) {\n                        _defaultParticipant(termId, p);\n                    }\n                } else {\n                    _defaultParticipant(termId, p);\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\n        _awardBeneficiary(fund, term);\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\n            _closeFund(termId);\n            return;\n        }\n    }\n\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\n    ///         and prevent the fund to be stuck in limbo\n    /// @param termId the id of the term\n    function emptyFundAfterEnd(uint termId) external onlyTermOwner(termId) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(\n            fund.currentState == LibFundStorage.FundStates.FundClosed &&\n                block.timestamp > fund.fundEnd + 180 days,\n            \"Can't empty yet\"\n        );\n\n        uint balance;\n        uint beneficiariesLength = fund.beneficiariesOrder.length;\n\n        for (uint i; i < beneficiariesLength; ) {\n            if (fund.beneficiariesPool[fund.beneficiariesOrder[i]] > 0) {\n                balance += fund.beneficiariesPool[fund.beneficiariesOrder[i]];\n                fund.beneficiariesPool[fund.beneficiariesOrder[i]] = 0;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (balance > 0) {\n            bool success = fund.stableToken.transfer(msg.sender, balance);\n            require(success, \"Transfer failed\");\n        }\n    }\n\n    /// @notice function to enable/disable autopay\n    /// @param termId the id of the term\n    function toggleAutoPay(uint termId) external {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(collateral.isCollateralMember[msg.sender], \"Pay collateral security first\");\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"Wrong state\");\n        bool enabled = !fund.autoPayEnabled[msg.sender];\n        fund.autoPayEnabled[msg.sender] = enabled;\n\n        emit OnAutoPayToggled(termId, msg.sender, enabled);\n    }\n\n    /// @notice This is the function participants call to pay the contribution\n    /// @param termId the id of the term\n    function payContribution(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        // Get the beneficiary for this cycle\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\n\n        require(\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\n            \"Wrong state\"\n        );\n        require(fund.isParticipant[msg.sender], \"Not a participant\");\n        require(currentBeneficiary != msg.sender, \"Beneficiary doesn't pay\");\n        require(!fund.paidThisCycle[msg.sender], \"Already paid for cycle\");\n        require(\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[msg.sender],\n            \"Participant is exempted this cycle\"\n        );\n\n        _payContribution(termId, msg.sender, msg.sender);\n    }\n\n    /// @notice This function is here to give the possibility to pay using a different wallet\n    /// @param termId the id of the term\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\n    function payContributionOnBehalfOf(uint termId, address participant) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\n\n        require(\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions,\n            \"Wrong state\"\n        );\n        require(fund.isParticipant[participant], \"Not a participant\");\n        require(currentBeneficiary != participant, \"Beneficiary doesn't pay\");\n        require(!fund.paidThisCycle[participant], \"Already paid for cycle\");\n        require(\n            !fund.isExemptedOnCycle[fund.currentCycle].exempted[participant],\n            \"Participant is exempted this cycle\"\n        );\n\n        _payContribution(termId, msg.sender, participant);\n    }\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId the id of the term\n    function withdrawFund(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\n        // any of the past cycles.\n\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\n\n        require(\n            term.state == LibTermStorage.TermStates.ExpiredTerm ||\n                fund.currentState == LibFundStorage.FundStates.FundClosed ||\n                fund.isBeneficiary[msg.sender] ||\n                expelledBeforeBeneficiary,\n            \"You must be a beneficiary\"\n        );\n\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\n        bool hasFrozenPool = fund.beneficiariesFrozenPool[msg.sender];\n        bool hasCollateralPool = collateral.collateralPaymentBank[msg.sender] > 0;\n\n        require(hasFundPool || hasFrozenPool || hasCollateralPool, \"Nothing to withdraw\");\n\n        if (hasFrozenPool) {\n            bool freeze = _freezePot(LibTermStorage._termStorage().terms[termId], fund, msg.sender);\n\n            if (fund.currentState != LibFundStorage.FundStates.FundClosed) {\n                require(!freeze, \"Need at least 1.1RCC collateral to unfreeze your fund\");\n            }\n\n            _transferPoolToBeneficiary(termId, msg.sender);\n        } else if (hasFundPool) {\n            _transferPoolToBeneficiary(termId, msg.sender);\n        }\n\n        if (hasCollateralPool) {\n            LibCollateral._withdrawReimbursement(termId, msg.sender);\n        }\n    }\n\n    /// @notice function to pay the actual contribution for the cycle\n    /// @param _termId the id of the term\n    /// @param _payer the address that's paying\n    /// @param _participant the (participant) address that's being paid for\n    function _payContribution(uint _termId, address _payer, address _participant) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n\n        // Get the amount and do the actual transfer\n        // This will only succeed if the sender approved this contract address beforehand\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\n\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\n        require(success, \"Contribution failed, did you approve stable token?\");\n\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\n        fund.paidThisCycle[_participant] = true;\n        emit OnPaidContribution(_termId, _participant, fund.currentCycle);\n    }\n\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\n    /// @param _termId The id of the term\n    /// @param _defaulter The participant to default\n    function _defaultParticipant(uint _termId, address _defaulter) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        // Try removing from participants first\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\n\n        // If that fails, we try removing from beneficiaries\n        if (!success) {\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\n        }\n\n        require(success, \"Can't remove defaulter\");\n        EnumerableSet.add(fund._defaulters, _defaulter);\n\n        emit OnParticipantDefaulted(_termId, fund.currentCycle, _defaulter);\n    }\n\n    /// @notice The beneficiary will be awarded here based on the beneficiariesOrder array.\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\n    function _awardBeneficiary(\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term storage _term\n    ) internal {\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\n\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\n        if (EnumerableSet.length(_fund._defaulters) > 0) {\n            address[] memory expellants = ICollateral(address(this)).requestContribution(\n                _term,\n                EnumerableSet.values(_fund._defaulters)\n            );\n\n            uint expellantsLength = expellants.length;\n            for (uint i; i < expellantsLength; ) {\n                if (expellants[i] == address(0) || expellants[i] == beneficiary) {\n                    unchecked {\n                        ++i;\n                    }\n                    continue;\n                }\n                _expelDefaulter(_fund, _term, expellants[i]);\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        // Remove participant from participants set..\n        if (EnumerableSet.remove(_fund._participants, beneficiary)) {\n            // ..Then add them to the benificiaries set\n            EnumerableSet.add(_fund._beneficiaries, beneficiary);\n        }\n\n        // Update the mapping to track who's been beneficiary\n        _fund.isBeneficiary[beneficiary] = true;\n\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\n        uint paidCount;\n        address[] memory participants = _fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\n        uint participantsLength = participants.length;\n        for (uint i; i < participantsLength; ) {\n            if (_fund.paidThisCycle[participants[i]]) {\n                paidCount++;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Award the beneficiary with the pool or freeze the pot\n        _freezePot(_term, _fund, beneficiary);\n\n        _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * paidCount * 10 ** 6; // Six decimals\n\n        emit OnBeneficiaryAwarded(_term.termId, beneficiary);\n        LibFund._setState(_term.termId, LibFundStorage.FundStates.CycleOngoing);\n    }\n\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\n    /// @param _expellant The address of the defaulter that will be expelled\n    function _expelDefaulter(\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term storage _term,\n        address _expellant\n    ) internal {\n        // Expellants should only be in the defauters set so no need to touch the other sets\n        require(\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\n            \"Expellant not found\"\n        );\n\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_term.termId];\n\n        _fund.isParticipant[_expellant] = false;\n        collateral.isCollateralMember[_expellant] = false;\n        // If the expellant has not been a beneficiary before, mark them as expelledBeforeBeneficiary\n        if (!_fund.isBeneficiary[_expellant]) {\n            _fund.expelledBeforeBeneficiary[_expellant] = true;\n        }\n\n        // Lastly, lower the amount of participants\n        --_term.totalParticipants;\n        ++_fund.expelledParticipants;\n\n        emit OnDefaulterExpelled(_term.termId, _fund.currentCycle, _expellant);\n    }\n\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\n    /// @param _termId The id of the term\n    function _closeFund(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        fund.fundEnd = block.timestamp;\n        term.state = LibTermStorage.TermStates.ClosedTerm;\n        LibFund._setState(_termId, LibFundStorage.FundStates.FundClosed);\n        ICollateral(address(this)).releaseCollateral(_termId);\n    }\n\n    /// @notice Internal function to transfer the pool to the beneficiary\n    /// @param _termId The id of the term\n    /// @param _beneficiary The address of the beneficiary\n    function _transferPoolToBeneficiary(uint _termId, address _beneficiary) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n\n        // Get the amount this beneficiary can withdraw\n        uint transferAmount = fund.beneficiariesPool[_beneficiary];\n        uint contractBalance = fund.stableToken.balanceOf(address(this));\n        if (contractBalance < transferAmount) {\n            revert InsufficientBalance({available: contractBalance, required: transferAmount});\n        } else {\n            fund.beneficiariesPool[_beneficiary] = 0;\n            bool success = fund.stableToken.transfer(_beneficiary, transferAmount);\n            require(success, \"Transfer failed\");\n        }\n        emit OnFundWithdrawn(_termId, _beneficiary, transferAmount);\n    }\n\n    /// @notice Internal function to freeze the pot for the beneficiary\n    function _freezePot(\n        LibTermStorage.Term memory _term,\n        LibFundStorage.Fund storage _fund,\n        address _user\n    ) internal returns (bool) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_term.termId];\n\n        bool expelledBeforeBeneficiary = _fund.expelledBeforeBeneficiary[_user];\n\n        if (expelledBeforeBeneficiary) {\n            _fund.beneficiariesFrozenPool[_user] = false;\n        } else {\n            uint remainingCyclesContribution = IGetters(address(this))\n                .getRemainingCyclesContributionWei(_term.termId);\n\n            uint neededCollateral = (110 * remainingCyclesContribution) / 100; // 1.1 x RCC\n\n            if (collateral.collateralMembersBank[_user] < neededCollateral) {\n                _fund.beneficiariesFrozenPool[_user] = true;\n            } else {\n                _fund.beneficiariesFrozenPool[_user] = false;\n            }\n        }\n        return _fund.beneficiariesFrozenPool[_user];\n    }\n}\n"
    },
    "contracts/facets/GettersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract GettersFacet is IGetters {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // TERM GETTERS\n    /// @return the current term id\n    /// @return the next term id\n    function getTermsId() external view returns (uint, uint) {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint lastTermId = termStorage.nextTermId - 1;\n        uint nextTermId = termStorage.nextTermId;\n        return (lastTermId, nextTermId);\n    }\n\n    ///  @notice Gets the remaining registration period for a term\n    ///  @param termId the term id\n    ///  @return remaining contribution period\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        require(collateral.firstDepositTime != 0, \"Nobody has deposited yet\");\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\n            return 0;\n        } else {\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\n        }\n    }\n\n    /// @param termId the term id\n    /// @return the term struct\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\n        return (LibTermStorage._termStorage().terms[termId]);\n    }\n\n    /// @param participant the participant address\n    /// @return an array with the term ids the participant is part of\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\n        return participantTermIds;\n    }\n\n    /// @param participant the participant address\n    /// @param state the term state\n    /// @return an array with the term ids the participant is part of, giving the state of the term\n    function getJoinedTermsByState(\n        address participant,\n        LibTermStorage.TermStates state\n    ) public view returns (uint[] memory) {\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\n        uint termsCounter;\n        uint joinedTermsLength = joinedTerms.length;\n\n        for (uint i; i < joinedTermsLength; ) {\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\n                temporaryArray[termsCounter] = joinedTerms[i];\n                unchecked {\n                    ++termsCounter;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint[] memory userTermsByState = new uint[](termsCounter);\n\n        for (uint i; i < termsCounter; ) {\n            userTermsByState[i] = temporaryArray[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return userTermsByState;\n    }\n\n    /// @param participant the participant address\n    /// @return an array the term ids the participant is part of, giving the state of the term\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\n        uint termsCounter;\n        uint joinedTermsLength = joinedTerms.length;\n\n        for (uint i; i < joinedTermsLength; ) {\n            if (wasExpelled(joinedTerms[i], participant)) {\n                temporaryArray[termsCounter] = joinedTerms[i];\n                unchecked {\n                    ++termsCounter;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint[] memory termsExpelled = new uint[](termsCounter);\n\n        for (uint i; i < termsCounter; ) {\n            termsExpelled[i] = temporaryArray[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return termsExpelled;\n    }\n\n    /// @param termId the term id\n    /// @return remaining cycles\n    function getRemainingCycles(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\n    }\n\n    /// @param termId the term id\n    /// @return remaining time in the current cycle\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\n        if (block.timestamp > cycleEndTimestamp) {\n            return 0;\n        } else {\n            return cycleEndTimestamp - block.timestamp;\n        }\n    }\n\n    /// @param termId the term id\n    /// @return remaining cycles contribution\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\n        uint contributionAmountWei = getToCollateralConversionRate(\n            term.contributionAmount * 10 ** 18\n        );\n\n        return remainingCycles * contributionAmountWei;\n    }\n\n    /// @notice a function to get the needed allowance for every active term the user is part of\n    /// @param user the user address\n    /// @return the needed allowance\n    function getNeededAllowance(address user) external view returns (uint) {\n        uint neededAllowance;\n\n        uint[] memory activeTerms = getJoinedTermsByState(\n            user,\n            LibTermStorage.TermStates.ActiveTerm\n        );\n        uint[] memory initializedTerms = getJoinedTermsByState(\n            user,\n            LibTermStorage.TermStates.InitializingTerm\n        );\n\n        uint activeTermsLength = activeTerms.length;\n        uint initializedTermsLength = initializedTerms.length;\n\n        for (uint i; i < activeTermsLength; ) {\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\n            uint remainingPayments = term.contributionAmount *\n                getRemainingCycles(activeTerms[i]) *\n                10 ** 6;\n            neededAllowance += remainingPayments;\n            unchecked {\n                ++i;\n            }\n        }\n\n        for (uint i; i < initializedTermsLength; ) {\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\n                initializedTerms[i]\n            ];\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\n            neededAllowance += totalPayments;\n            unchecked {\n                ++i;\n            }\n        }\n\n        return neededAllowance;\n    }\n\n    // COLLATERAL GETTERS\n\n    /// @param depositor the depositor address\n    /// @param termId the collateral id\n    /// @return isCollateralMember\n    /// @return collateralMembersBank\n    /// @return collateralPaymentBank\n    /// @return collateralDepositByUser\n    /// @return expulsion limit\n    function getDepositorCollateralSummary(\n        address depositor,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        uint limit;\n        if (!fund.isBeneficiary[depositor]) {\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\n        } else {\n            limit = getRemainingCyclesContributionWei(termId);\n        }\n\n        return (\n            collateral.isCollateralMember[depositor],\n            collateral.collateralMembersBank[depositor],\n            collateral.collateralPaymentBank[depositor],\n            collateral.collateralDepositByUser[depositor],\n            limit\n        );\n    }\n\n    /// @param termId the collateral id\n    /// @return collateral initialized\n    /// @return collateral state\n    /// @return collateral firstDepositTime\n    /// @return counterMembers\n    /// @return collateral depositors\n    function getCollateralSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        return (\n            collateral.initialized,\n            collateral.state, // Current state of Collateral\n            collateral.firstDepositTime, // Time when the first deposit was made\n            collateral.counterMembers, // Current member count\n            collateral.depositors // List of depositors\n        );\n    }\n\n    /// @notice Called to check the minimum collateral amount to deposit in wei\n    /// @return amount the minimum collateral amount to deposit in wei\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\n    function minCollateralToDeposit(\n        uint termId,\n        uint depositorIndex\n    ) external view returns (uint amount) {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        require(depositorIndex < term.totalParticipants, \"Index out of bounds\");\n\n        uint contributionAmountInWei = getToCollateralConversionRate(\n            term.contributionAmount * 10 ** 18\n        );\n\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\n    }\n\n    /// @notice Called to check how much collateral a user can withdraw\n    /// @param termId term id\n    /// @param user depositor address\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\n    function getWithdrawableUserBalance(\n        uint termId,\n        address user\n    ) external view returns (uint allowedWithdrawal) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint userCollateral = collateral.collateralMembersBank[user];\n        uint availableYield = yield.availableYield[user];\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\n\n        if (\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\n            expelledBeforeBeingBeneficiary\n        ) {\n            allowedWithdrawal = userCollateral + availableYield;\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\n            uint minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\n\n            // Collateral must be higher than 1.5 X RCC\n            if (userCollateral > minRequiredCollateral) {\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\n            } else {\n                allowedWithdrawal = 0;\n            }\n        } else {\n            allowedWithdrawal = 0;\n        }\n    }\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param termId The term id\n    /// @param member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\n        return LibCollateral._isUnderCollaterized(termId, member);\n    }\n\n    // FUND GETTERS\n\n    /// @notice function to get the cycle information in one go\n    /// @param termId the fund id\n    /// @return fund initialized\n    /// @return fund currentState\n    /// @return fund stableToken\n    /// @return fund beneficiariesOrder\n    /// @return fund fundStart\n    /// @return fund fundEnd\n    /// @return fund currentCycle\n    /// @return fund totalAmountOfCycles\n    function getFundSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\n    {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return (\n            fund.initialized,\n            fund.currentState,\n            fund.stableToken,\n            fund.beneficiariesOrder,\n            fund.fundStart,\n            fund.fundEnd,\n            fund.currentCycle,\n            fund.totalAmountOfCycles\n        );\n    }\n\n    /// @notice function to get the current beneficiary\n    /// @param termId the fund id\n    /// @return the current beneficiary\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\n    }\n\n    /// @notice function to know if a user was expelled before\n    /// @param termId the fund id\n    /// @param user the user to check\n    /// @return true if the user was expelled before\n    function wasExpelled(uint termId, address user) public view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @notice function to see if a user is exempted from paying a cycle\n    /// @param termId the fund id\n    /// @param cycle the cycle to check\n    /// @param user the user to check\n    /// @return true if the user is exempted\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.isExemptedOnCycle[cycle].exempted[user];\n    }\n\n    /// @notice function to get fund information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return fund isParticipant, true if is participant\n    /// @return fund isBeneficiary, true if has been beneficiary\n    /// @return fund paidThisCycle, true if has paid the current cycle\n    /// @return fund autoPayEnabled, true if auto pay is enabled\n    /// @return fund beneficiariesPool, the beneficiary pool, 6 decimals\n    /// @return fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\n    function getParticipantFundSummary(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return (\n            fund.isParticipant[participant],\n            fund.isBeneficiary[participant],\n            fund.paidThisCycle[participant],\n            fund.autoPayEnabled[participant],\n            fund.beneficiariesPool[participant],\n            fund.beneficiariesFrozenPool[participant]\n        );\n    }\n\n    /// @notice function to get cycle information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return on participant set\n    /// @return on beneficiary set\n    /// @return on defaulter set\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\n    }\n\n    /// @param termId the id of the term\n    /// @param beneficiary the address of the participant to check\n    /// @return true if the participant is a beneficiary\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.isBeneficiary[beneficiary];\n    }\n\n    /// @param termId the id of the term\n    /// @param user the address of the participant to check\n    /// @return true if the participant is expelled before being a beneficiary\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.expelledBeforeBeneficiary[user];\n    }\n\n    /// @notice returns the time left to contribute for this cycle\n    /// @param termId the fund id\n    /// @return the time left to contribute\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\n            return 0;\n        }\n\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\n        uint contributionEndTimestamp = term.cycleTime *\n            (fund.currentCycle - 1) +\n            fund.fundStart +\n            term.contributionPeriod;\n        if (block.timestamp > contributionEndTimestamp) {\n            return 0;\n        } else {\n            return contributionEndTimestamp - block.timestamp;\n        }\n    }\n\n    // CONVERSION GETTERS\n\n    /// @notice Gets latest ETH / USD price\n    /// @return uint latest price in Wei Note: 18 decimals\n    function getLatestPrice() public view returns (uint) {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n\n        (\n            uint80 roundID_ethUSD,\n            int256 price_ethUSD,\n            ,\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\n            uint80 answeredInRound_ethUSD\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"ETH/USD\"]).latestRoundData(); //8 decimals\n\n        // Check if chainlink data is not stale or incorrect\n        require(\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\n            \"ChainlinkOracle: stale data\"\n        );\n\n        (\n            uint80 roundID_usdUSDC,\n            int256 price_usdUSDC,\n            ,\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\n            uint80 answeredInRound_usdUSDC\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"USDC/USD\"]).latestRoundData(); //8 decimals\n\n        require(\n            timeStamp_usdUSDC != 0 &&\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\n                price_usdUSDC > 0,\n            \"ChainlinkOracle: stale data\"\n        );\n\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\n\n        return uint(ethUSDC * 10 ** 18); //18 decimals\n    }\n\n    /// @notice Gets the conversion rate of an amount in USD to ETH\n    /// @dev should we always deal with in Wei?\n    /// @param USDAmount The amount in USD with 18 decimals\n    /// @return uint converted amount in wei\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\n        uint ethPrice = getLatestPrice();\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\n        return USDAmountInEth;\n    }\n\n    /// @notice Gets the conversion rate of an amount in ETH to USD\n    /// @dev should we always deal with in Wei?\n    /// @param ethAmount The amount in ETH\n    /// @return uint converted amount in USD correct to 18 decimals\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\n        // NOTE: This will be made internal\n        uint ethPrice = getLatestPrice();\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\n        return ethAmountInUSD;\n    }\n\n    // YIELD GENERATION GETTERS\n\n    /// @notice This function is used to check if a user has opted in for yield generation\n    /// @param termId The term id for which the check is being made\n    /// @param user The user for which the check is being made\n    /// @return True if the user has opted in\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        return yield.hasOptedIn[user];\n    }\n\n    /// @notice This function is used to get a user APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @param user The user for which the APY is being calculated\n    /// @return The APY for the user\n    function userAPY(uint termId, address user) external view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\n\n        uint userYieldGenerated = yield.withdrawnYield[user] +\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\n\n        return\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\n                365 days) / elaspedTime;\n    }\n\n    /// @notice This function is used to get a term APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @return The APY for the term\n    function termAPY(uint termId) external view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\n\n        return\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\n            elaspedTime;\n    }\n\n    /// @notice This function is used to get the total yield generated for a term\n    /// @param termId The term id for which the yield is being calculated\n    /// @return The total yield generated for the term\n    function totalYieldGenerated(uint termId) public view returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint totalWithdrawnYield;\n\n        address[] memory arrayToCheck = yield.yieldUsers;\n        uint arrayLength = arrayToCheck.length;\n\n        for (uint i; i < arrayLength; ) {\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\n\n        if (sharesInEth > yield.currentTotalDeposit) {\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\n        } else {\n            return totalWithdrawnYield;\n        }\n    }\n\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return hasOptedIn\n    /// @return withdrawnYield\n    /// @return withdrawnCollateral\n    /// @return availableYield\n    /// @return depositedCollateralByUser\n    /// @return yieldDistributed\n    function getUserYieldSummary(\n        address user,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\n\n        return (\n            yield.hasOptedIn[user],\n            yield.withdrawnYield[user],\n            yield.withdrawnCollateral[user],\n            yield.availableYield[user],\n            yield.depositedCollateralByUser[user],\n            yieldDistributed\n        );\n    }\n\n    /// @param termId the collateral id\n    /// @return initialized\n    /// @return startTimeStamp\n    /// @return totalDeposit\n    /// @return currentTotalDeposit\n    /// @return totalShares\n    /// @return yieldUsers\n    /// @return vaultAddress\n    /// @return zapAddress\n    function getYieldSummary(\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        return (\n            yield.initialized,\n            yield.startTimeStamp,\n            yield.totalDeposit,\n            yield.currentTotalDeposit,\n            yield.totalShares,\n            yield.yieldUsers,\n            yield.providerAddresses[\"ZaynVault\"],\n            yield.providerAddresses[\"ZaynZap\"]\n        );\n    }\n\n    /// @notice This function is used to get the current state of the yield lock\n    function getYieldLockState() external view returns (bool) {\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\n    }\n\n    /// @notice This function return the current constant values for oracles and yield providers\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\n    function getConstants(\n        string memory firstAggregator,\n        string memory secondAggregator,\n        string memory zapAddress,\n        string memory vaultAddress\n    ) external view returns (address, address, address, address) {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        return (\n            termConsts.aggregatorsAddresses[firstAggregator],\n            termConsts.aggregatorsAddresses[secondAggregator],\n            yieldProvider.providerAddresses[zapAddress],\n            yieldProvider.providerAddresses[vaultAddress]\n        );\n    }\n}\n"
    },
    "contracts/facets/TermFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IFund} from \"../interfaces/IFund.sol\";\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ITerm} from \"../interfaces/ITerm.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibFund} from \"../libraries/LibFund.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\n\n/// @title Takaturn Term\n/// @author Mohammed Haddouti\n/// @notice This is used to deploy the collateral & fund contracts\n/// @dev v3.0 (Diamond)\ncontract TermFacet is ITerm {\n    event OnTermCreated(uint indexed termId, address indexed termOwner);\n    event OnCollateralDeposited(uint indexed termId, address indexed user, uint amount);\n    event OnTermFilled(uint indexed termId);\n    event OnTermExpired(uint indexed termId);\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\n\n    function createTerm(\n        uint totalParticipants,\n        uint registrationPeriod,\n        uint cycleTime,\n        uint contributionAmount, // in stable token, without decimals\n        uint contributionPeriod,\n        address stableTokenAddress\n    ) external returns (uint) {\n        return\n            _createTerm(\n                totalParticipants,\n                registrationPeriod,\n                cycleTime,\n                contributionAmount,\n                contributionPeriod,\n                stableTokenAddress\n            );\n    }\n\n    function joinTerm(uint termId, bool optYield) external payable {\n        _joinTerm(termId, optYield);\n    }\n\n    function startTerm(uint termId) external {\n        _startTerm(termId);\n    }\n\n    function expireTerm(uint termId) external {\n        _expireTerm(termId);\n    }\n\n    function _createTerm(\n        uint _totalParticipants,\n        uint _registrationPeriod,\n        uint _cycleTime,\n        uint _contributionAmount,\n        uint _contributionPeriod,\n        address _stableTokenAddress\n    ) internal returns (uint) {\n        require(\n            _cycleTime != 0 &&\n                _contributionAmount != 0 &&\n                _contributionPeriod != 0 &&\n                _totalParticipants != 0 &&\n                _registrationPeriod != 0 &&\n                _contributionPeriod < _cycleTime &&\n                _stableTokenAddress != address(0),\n            \"Invalid inputs\"\n        );\n\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint termId = termStorage.nextTermId;\n\n        LibTermStorage.Term memory newTerm;\n\n        newTerm.termId = termId;\n        newTerm.totalParticipants = _totalParticipants;\n        newTerm.registrationPeriod = _registrationPeriod;\n        newTerm.cycleTime = _cycleTime;\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\n        newTerm.contributionPeriod = _contributionPeriod;\n        newTerm.stableTokenAddress = _stableTokenAddress;\n        newTerm.termOwner = msg.sender;\n        newTerm.creationTime = block.timestamp;\n        newTerm.initialized = true;\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\n\n        termStorage.terms[termId] = newTerm;\n        termStorage.nextTermId++;\n\n        _createCollateral(termId, _totalParticipants);\n\n        emit OnTermCreated(termId, msg.sender);\n\n        return termId;\n    }\n\n    function _joinTerm(uint _termId, bool _optYield) internal {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        require(LibTermStorage._termExists(_termId), \"Term doesn't exist\");\n\n        require(\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\n            \"Closed\"\n        );\n\n        require(collateral.counterMembers < term.totalParticipants, \"No space\");\n\n        require(!collateral.isCollateralMember[msg.sender], \"Reentry\");\n\n        uint memberIndex = collateral.counterMembers;\n\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, memberIndex);\n        require(msg.value >= minAmount, \"Eth payment too low\");\n\n        collateral.collateralMembersBank[msg.sender] += msg.value;\n        collateral.isCollateralMember[msg.sender] = true;\n        collateral.depositors[memberIndex] = msg.sender;\n        collateral.counterMembers++;\n        collateral.collateralDepositByUser[msg.sender] += msg.value;\n\n        termStorage.participantToTermId[msg.sender].push(_termId);\n\n        // If the lock is false, I accept the opt in\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\n            yield.hasOptedIn[msg.sender] = _optYield;\n        } else {\n            // If the lock is true, opt in is always false\n            yield.hasOptedIn[msg.sender] = false;\n        }\n\n        emit OnCollateralDeposited(_termId, msg.sender, msg.value);\n\n        if (collateral.counterMembers == 1) {\n            collateral.firstDepositTime = block.timestamp;\n        }\n\n        // If all the spots are filled, change the collateral\n        if (collateral.counterMembers == term.totalParticipants) {\n            emit OnTermFilled(_termId);\n        }\n    }\n\n    function _startTerm(uint _termId) internal {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n        address[] memory depositors = collateral.depositors;\n\n        uint depositorsArrayLength = depositors.length;\n\n        require(\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\n            \"Term not ready to start\"\n        );\n\n        require(collateral.counterMembers == term.totalParticipants, \"All spots are not filled\");\n\n        // Need to check each user because they can have different collateral amounts\n        for (uint i; i < depositorsArrayLength; ) {\n            require(\n                !LibCollateral._isUnderCollaterized(term.termId, depositors[i]),\n                \"Eth prices dropped\"\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Actually create and initialize the fund\n        _createFund(term, collateral);\n\n        // If the lock is false\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\n            // Check on each depositor if they opted in for yield generation\n            for (uint i; i < depositorsArrayLength; ) {\n                if (yield.hasOptedIn[depositors[i]]) {\n                    // If someone opted in, create the yield generator\n                    _createYieldGenerator(term, collateral);\n                    break;\n                }\n                unchecked {\n                    ++i;\n                }\n            }\n        } else {\n            // If the lock is set to true, before the term starts and after users have joined term\n            // There is a chance that somebody has opted in for yield generation\n            for (uint i; i < depositorsArrayLength; ) {\n                if (yield.hasOptedIn[depositors[i]]) {\n                    yield.hasOptedIn[depositors[i]] = false;\n                }\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        // Tell the collateral that the term has started\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\n\n        term.state = LibTermStorage.TermStates.ActiveTerm;\n    }\n\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\n        //require(!LibCollateralStorage._collateralExists(termId), \"Collateral already exists\");\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        newCollateral.initialized = true;\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\n        newCollateral.depositors = new address[](_totalParticipants);\n    }\n\n    function _createFund(\n        LibTermStorage.Term memory _term,\n        LibCollateralStorage.Collateral storage _collateral\n    ) internal {\n        require(!LibFundStorage._fundExists(_term.termId), \"Fund already exists\");\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\n\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\n        newFund.beneficiariesOrder = _collateral.depositors;\n        newFund.initialized = true;\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\n\n        LibFund._initFund(_term.termId);\n    }\n\n    function _expireTerm(uint _termId) internal {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        require(\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\n        );\n\n        require(\n            collateral.firstDepositTime != 0 &&\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\n            \"Registration period not ended\"\n        );\n\n        require(\n            collateral.counterMembers < term.totalParticipants,\n            \"All spots are filled, can't expire\"\n        );\n\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \"Term already expired\");\n\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\n\n        emit OnTermExpired(_termId);\n    }\n\n    function _createYieldGenerator(\n        LibTermStorage.Term memory _term,\n        LibCollateralStorage.Collateral storage _collateral\n    ) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_term.termId];\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        uint amountToYield;\n\n        address[] memory depositors = _collateral.depositors;\n        uint depositorsArrayLength = depositors.length;\n\n        for (uint i; i < depositorsArrayLength; ) {\n            if (yield.hasOptedIn[depositors[i]]) {\n                yield.yieldUsers.push(depositors[i]);\n                yield.depositedCollateralByUser[depositors[i]] =\n                    (_collateral.collateralMembersBank[depositors[i]] * 90) /\n                    100;\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (amountToYield > 0) {\n            yield.startTimeStamp = block.timestamp;\n            yield.initialized = true;\n            yield.providerAddresses[\"ZaynZap\"] = yieldProviders.providerAddresses[\"ZaynZap\"];\n            yield.providerAddresses[\"ZaynVault\"] = yieldProviders.providerAddresses[\"ZaynVault\"];\n\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\n        }\n    }\n}\n"
    },
    "contracts/facets/WithdrawGoerliEthFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/// @notice: This contract is used for test only, it is not used in the mainnet\n\npragma solidity 0.8.18;\n\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {LibWithdrawGoerliEth} from \"../libraries/LibWithdrawGoerliEth.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\n\ncontract WithdrawTestEthFacet {\n    event OnGoerliEthWithdraw(uint indexed amount, address indexed receiver);\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyManager(address managerCheck) {\n        LibWithdrawGoerliEth._enforceIsTrustedManager(managerCheck);\n        _;\n    }\n\n    function withdrawTestEth() external onlyOwner onlyManager(msg.sender) {\n        uint balance = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\n        require(success, \"Withdraw failed\");\n        emit OnGoerliEthWithdraw(balance, msg.sender);\n    }\n\n    function addTrustedAddress(address newManager) external onlyOwner onlyManager(msg.sender) {\n        LibWithdrawGoerliEth._addTrustedAddress(newManager);\n    }\n\n    // The next function is to test the error InsufficientBalance on FundFacet is working\n    function testInsufficientBalance(uint termId) external onlyOwner onlyManager(msg.sender) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        uint balance = fund.stableToken.balanceOf(address(this));\n        bool success = fund.stableToken.transfer(msg.sender, balance);\n        require(success, \"Transfer failed\");\n    }\n}\n"
    },
    "contracts/facets/YGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\n\ncontract YGFacetZaynFi is IYGFacetZaynFi {\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\n    event OnYieldClaimed(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user claims their yield\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    function claimAvailableYield(uint termId) external {\n        _claimAvailableYield(termId, msg.sender);\n    }\n\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    /// @param user The user address that is claiming the yield\n    function claimAvailableYield(uint termId, address user) external {\n        _claimAvailableYield(termId, user);\n    }\n\n    /// @notice This function allows a user to toggle their yield generation\n    /// @dev only allowed before the term starts\n    /// @param termId The term id for which the yield is being claimed\n    function toggleOptInYG(uint termId) external {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        require(\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\n            \"Too late to change YG opt in\"\n        );\n        require(\n            collateral.isCollateralMember[msg.sender],\n            \"Pay the collateral security deposit first\"\n        );\n\n        bool optIn = !yield.hasOptedIn[msg.sender];\n        yield.hasOptedIn[msg.sender] = optIn;\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\n    }\n\n    /// @notice This function allows the owner to update the global variable for new yield provider\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateYieldProvider(\n        string memory providerString,\n        address providerAddress\n    ) external onlyOwner {\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        yieldProvider.providerAddresses[providerString] = providerAddress;\n    }\n\n    function _claimAvailableYield(uint termId, address user) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint availableYield = yield.availableYield[user];\n\n        require(availableYield > 0, \"No yield to withdraw\");\n\n        yield.availableYield[user] = 0;\n        (bool success, ) = payable(user).call{value: availableYield}(\"\");\n        require(success);\n\n        emit OnYieldClaimed(termId, user, availableYield);\n    }\n\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\n    function toggleYieldLock() external onlyOwner returns (bool) {\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\n\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\n    }\n\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\n    /// @param termId The term id for which the yield is being claimed\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateProviderAddressOnTerms(\n        uint termId,\n        string memory providerString,\n        address providerAddress\n    ) external onlyOwner {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        require(LibFundStorage._fundExists(termId), \"Fund does not exist\");\n        require(providerAddress != address(0), \"Invalid provider address\");\n        require(\n            yield.providerAddresses[providerString] != providerAddress,\n            \"Same provider address\"\n        );\n\n        yield.providerAddresses[providerString] = providerAddress;\n    }\n}\n"
    },
    "contracts/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\n/// @title Takaturn Collateral Interface\n/// @author Aisha EL Allam\n/// @notice This is used to allow fund to easily communicate with collateral\n/// @dev v2.0 (post-deploy)\n\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\ninterface ICollateral {\n    // Function cannot be called at this time.\n    error FunctionInvalidAtThisState();\n\n    /// @notice Called from Fund contract when someone defaults\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\n    /// @param term the term object\n    /// @param defaulters Address that was randomly selected for the current cycle\n    function requestContribution(\n        LibTermStorage.Term memory term,\n        address[] calldata defaulters\n    ) external returns (address[] memory);\n\n    /// @notice Called by each member after the end of the cycle to withraw collateral\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId The term id\n    function withdrawCollateral(uint termId) external;\n\n    /// @param termId The term id\n    function releaseCollateral(uint termId) external;\n\n    /// @notice allow the owner to empty the Collateral after 180 days\n    function emptyCollateralAfterEnd(uint termId) external;\n}\n"
    },
    "contracts/interfaces/IFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\n/// @title Takaturn Fund Interface\n/// @author Mohammed Haddouti\n/// @notice This is used to allow collateral to easily communicate with fund\n/// @dev v2.0 (post-deploy)\n\nimport {LibFund} from \"../libraries/LibFund.sol\";\n\ninterface IFund {\n    // function initFund(uint termId) external;\n\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\n    function startNewCycle(uint termId) external;\n\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\n    function closeFundingPeriod(uint termId) external;\n\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\n    //         and prevent the fund to be stuck in limbo\n    function emptyFundAfterEnd(uint termId) external;\n\n    /// @notice function to enable/disable autopay\n    function toggleAutoPay(uint termId) external;\n\n    /// @notice This is the function participants call to pay the contribution\n    function payContribution(uint termId) external;\n\n    /// @notice This function is here to give the possibility to pay using a different wallet\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\n    function payContributionOnBehalfOf(uint termId, address participant) external;\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    function withdrawFund(uint termId) external;\n}\n"
    },
    "contracts/interfaces/IGetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\n\ninterface IGetters {\n    // TERM GETTERS\n\n    /// @notice Gets the current and next term id\n    /// @return current termID\n    /// @return next termID\n    function getTermsId() external view returns (uint, uint);\n\n    /// @notice Must return 0 before starting the fund\n    /// @param termId the id of the term\n    /// @return remaining registration time in seconds\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\n\n    /// @notice Get current information of a term\n    /// @param termId the id of the term\n    /// @return Term Struct, see LibTermStorage.sol\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\n\n    /// @notice Gets all terms a user has previously joined\n    /// @param participant address\n    /// @return List of termIDs\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\n\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\n    /// @param participant address\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\n    /// @return List of termIDs\n    function getJoinedTermsByState(\n        address participant,\n        LibTermStorage.TermStates state\n    ) external view returns (uint[] memory);\n\n    /// @notice Gets all terms a user was previously expelled from\n    /// @param participant address\n    /// @return List of termIDs\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\n\n    /// @notice Gets all remaining cycles of a term\n    /// @param termId the id of the term\n    /// @return remaining cycles\n    function getRemainingCycles(uint termId) external view returns (uint);\n\n    /// @notice Must be 0 before starting a new cycle\n    /// @param termId the id of the term\n    /// @return remaining cycle time in seconds\n    function getRemainingCycleTime(uint termId) external view returns (uint);\n\n    /// @notice Gets the expected remaining contribution amount for users in a term\n    /// @param termId the id of the term\n    /// @return total remaining contribution in wei\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\n\n    /// @notice a function to get the needed allowance\n    /// @param user the user address\n    /// @return the needed allowance\n    function getNeededAllowance(address user) external view returns (uint);\n\n    // COLLATERAL GETTERS\n\n    /// @notice Gets a users collateral summary\n    /// @param depositor address\n    /// @param termId the id of the term\n    /// @return if the user is a true member of the term\n    /// @return current users locked collateral balance in wei\n    /// @return current users unlocked collateral balance in wei\n    /// @return initial users deposit in wei\n    /// @return expulsion limit\n    function getDepositorCollateralSummary(\n        address depositor,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint);\n\n    /// @notice Gets the collateral summary of a term\n    /// @param termId the id of the term\n    /// @return if collateral is initialized\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\n    /// @return current member count\n    /// @return list of depositors\n    function getCollateralSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\n\n    /// @notice Gets the required minimum collateral deposit based on the position\n    /// @param termId the term id\n    /// @param depositorIndex the index of the depositor\n    /// @return required minimum in wei\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\n\n    /// @notice Called to check how much collateral a user can withdraw\n    /// @param termId term id\n    /// @param user depositor address\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\n    function getWithdrawableUserBalance(\n        uint termId,\n        address user\n    ) external view returns (uint allowedWithdrawal);\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param termId The term id\n    /// @param member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\n\n    // FUND GETTERS\n    /// @notice Gets the fund summary of a term\n    /// @param termId the id of the term\n    /// @return if fund is initialized\n    /// @return current state of the fund, see States struct in LibFund.sol\n    /// @return stablecoin address used\n    /// @return list for order of beneficiaries\n    /// @return when the fund started in seconds\n    /// @return when the fund ended in seconds, 0 otherwise\n    /// @return current cycle of fund\n    /// @return total amount of cycles in this fund/term\n    function getFundSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\n\n    /// @notice Gets the current beneficiary of a term\n    /// @param termId the id of the term\n    /// @return user address\n    function getCurrentBeneficiary(uint termId) external view returns (address);\n\n    /// @notice Gets if a user is expelled from a specefic term\n    /// @param termId the id of the term\n    /// @param user address\n    /// @return true or false\n    function wasExpelled(uint termId, address user) external view returns (bool);\n\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\n    /// @param termId the id of the term\n    /// @param cycle number\n    /// @param user address\n    /// @return true or false\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\n\n    /// @notice Gets a user information of in a fund\n    /// @param participant address\n    /// @param termId the id of the term\n    /// @return if the user is a true member of the fund/term\n    /// @return if the user was beneficiary in the past\n    /// @return if the user paid for the current cycle\n    /// @return if the user has autopay enabled\n    /// @return users money pot balance\n    function getParticipantFundSummary(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool, bool, bool, uint, bool);\n\n    /// @notice Must return 0 before closing a contribution period\n    /// @param termId the id of the term\n    /// @return remaining contribution time in seconds\n    function getRemainingContributionTime(uint termId) external view returns (uint);\n\n    /// @param termId the id of the term\n    /// @param beneficiary the address of the participant to check\n    /// @return true if the participant is a beneficiary\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\n\n    /// @param termId the id of the term\n    /// @param user the address of the participant to check\n    /// @return true if the participant is expelled before being a beneficiary\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\n\n    // CONVERSION GETTERS\n\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\n\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\n\n    // YIELD GENERATION GETTERS\n\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\n\n    function userAPY(uint termId, address user) external view returns (uint256);\n\n    function termAPY(uint termId) external view returns (uint256);\n\n    function totalYieldGenerated(uint termId) external view returns (uint);\n\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return hasOptedIn\n    /// @return withdrawnYield\n    /// @return withdrawnCollateral\n    /// @return availableYield\n    /// @return depositedCollateralByUser\n    /// @return yieldDistributed\n    function getUserYieldSummary(\n        address user,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, uint);\n\n    /// @param termId the collateral id\n    /// @return initialized\n    /// @return startTimeStamp\n    /// @return totalDeposit\n    /// @return currentTotalDeposit\n    /// @return totalShares\n    /// @return yieldUsers\n    /// @return vaultAddress\n    /// @return zapAddress\n    function getYieldSummary(\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\n\n    function getYieldLockState() external view returns (bool);\n\n    /// @notice This function return the current constant values for oracles and yield providers\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\n    function getConstants(\n        string memory firstAggregator,\n        string memory secondAggregator,\n        string memory zapAddress,\n        string memory vaultAddress\n    ) external view returns (address, address, address, address);\n}\n"
    },
    "contracts/interfaces/ITerm.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\ninterface ITerm {\n    function createTerm(\n        uint totalParticipants,\n        uint registrationPeriod,\n        uint cycleTime,\n        uint contributionAmount,\n        uint contributionPeriod,\n        address stableTokenAddress\n    ) external returns (uint);\n\n    function joinTerm(uint termId, bool optYield) external payable;\n\n    function startTerm(uint termId) external;\n\n    function expireTerm(uint termId) external;\n}\n"
    },
    "contracts/interfaces/IYGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\ninterface IYGFacetZaynFi {\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    function claimAvailableYield(uint termId) external;\n\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    /// @param user The user address that is claiming the yield\n    function claimAvailableYield(uint termId, address user) external;\n\n    /// @notice This function allows a user to toggle their yield generation\n    /// @dev only allowed before the term starts\n    /// @param termId The term id for which the yield is being claimed\n    function toggleOptInYG(uint termId) external;\n\n    /// @notice This function allows the owner to update the global variable for new yield provider\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\n\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\n    function toggleYieldLock() external returns (bool);\n\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\n    /// @param termId The term id for which the yield is being claimed\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateProviderAddressOnTerms(\n        uint termId,\n        string memory providerString,\n        address providerAddress\n    ) external;\n}\n"
    },
    "contracts/interfaces/IZaynVaultV2TakaDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynVaultV2TakaDao {\n    function totalSupply() external view returns (uint256);\n\n    function depositZap(uint256 _amount, uint256 _term) external;\n\n    function withdrawZap(uint256 _shares, uint256 _term) external;\n\n    function want() external view returns (address);\n\n    function balance() external view returns (uint256);\n\n    function strategy() external view returns (address);\n\n    function balanceOf(uint256 term) external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IZaynZapV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynZapV2TakaDAO {\n    function zapInEth(address vault, uint256 termID) external payable;\n\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\n\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\n}\n"
    },
    "contracts/libraries/LibCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {LibCollateralStorage} from \"./LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\n\nlibrary LibCollateral {\n    event OnCollateralStateChanged(\n        uint indexed termId,\n        LibCollateralStorage.CollateralStates indexed oldState,\n        LibCollateralStorage.CollateralStates indexed newState\n    );\n    event OnReimbursementWithdrawn(uint indexed termId, address indexed user, uint indexed amount);\n\n    /// @param _termId term id\n    /// @param _newState collateral state\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\n        collateral.state = _newState;\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\n    }\n\n    /// @param _termId term id\n    /// @param _depositor Address of the depositor\n    function _withdrawReimbursement(uint _termId, address _depositor) internal {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        uint amount = collateral.collateralPaymentBank[_depositor];\n        require(amount > 0, \"Nothing to claim\");\n        collateral.collateralPaymentBank[_depositor] = 0;\n\n        (bool success, ) = payable(_depositor).call{value: amount}(\"\");\n        require(success);\n\n        emit OnReimbursementWithdrawn(_termId, _depositor, amount);\n    }\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param _termId The fund id\n    /// @param _member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        uint collateralLimit;\n        uint memberCollateral = collateral.collateralMembersBank[_member];\n\n        if (!LibFundStorage._fundExists(_termId)) {\n            // Only check here when starting the term\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\n                _member,\n                _termId\n            );\n        } else {\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\n        }\n\n        return (memberCollateral < collateralLimit);\n    }\n}\n"
    },
    "contracts/libraries/LibCollateralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibCollateralStorage {\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\n\n    enum CollateralStates {\n        AcceptingCollateral, // Initial state where collateral are deposited\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\n        ReleasingCollateral, // Triggered when the fund closes\n        Closed // Triggered when all depositors withdraw their collaterals\n    }\n\n    struct DefaulterState {\n        bool payWithCollateral;\n        bool payWithFrozenPool;\n        bool gettingExpelled;\n        bool isBeneficiary;\n    }\n\n    struct Collateral {\n        bool initialized;\n        CollateralStates state;\n        uint firstDepositTime;\n        uint counterMembers;\n        address[] depositors;\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\n        mapping(address => uint) collateralMembersBank; // Users main balance\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\n    }\n\n    struct CollateralStorage {\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\n    }\n\n    function _collateralExists(uint termId) internal view returns (bool) {\n        return _collateralStorage().collaterals[termId].initialized;\n    }\n\n    function _collateralStorage()\n        internal\n        pure\n        returns (CollateralStorage storage collateralStorage)\n    {\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\n        assembly {\n            collateralStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {LibTermStorage} from \"./LibTermStorage.sol\";\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\n\nlibrary LibFund {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\n    event OnFundStateChanged(\n        uint indexed termId,\n        uint indexed currentCycle,\n        LibFundStorage.FundStates indexed newState\n    ); // Emits when state has updated\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\n\n    /// @notice called by the term to init the fund\n    /// @param termId the id of the term\n    function _initFund(uint termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\n        // Set and track participants\n        for (uint i; i < participantsArrayLength; ) {\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Starts the first cycle\n        _startNewCycle(termId);\n\n        // Set timestamp of deployment, which will be used to determine cycle times\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\n        fund.fundStart = block.timestamp;\n        //emit LibFund.OnTermStart(termId);\n        emit OnTermStart(termId);\n    }\n\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\n    /// @param _termId The id of the term\n    function _startNewCycle(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        // currentCycle is 0 when this is called for the first time\n        require(\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\n            \"Too early to start new cycle\"\n        );\n        require(\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\n            \"Wrong state\"\n        );\n\n        ++fund.currentCycle;\n        uint length = fund.beneficiariesOrder.length;\n        for (uint i; i < length; ) {\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\n            unchecked {\n                ++i;\n            }\n        }\n\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\n\n        // We attempt to make the autopayers pay their contribution right away\n        _autoPay(_termId);\n    }\n\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\n    /// @param _termId The id of the term\n    /// @param _newState The new state of the fund\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"Fund closed\");\n        fund.currentState = _newState;\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\n    }\n\n    /// @notice function to attempt to make autopayers pay their contribution\n    /// @param _termId the id of the term\n    function _autoPay(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n\n        // Get the beneficiary for this cycle\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\n\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\n        uint autoPayersArray = autoPayers.length;\n\n        for (uint i; i < autoPayersArray; ) {\n            address autoPayer = autoPayers[i];\n            // The beneficiary doesn't pay\n            if (currentBeneficiary == autoPayer) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            if (\n                fund.autoPayEnabled[autoPayer] &&\n                !fund.paidThisCycle[autoPayer] &&\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\n            ) {\n                _payContributionSafe(_termId, autoPayer, autoPayer);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\n    /// @param _termId the id of the term\n    /// @param _payer the address that's paying\n    /// @param _participant the (participant) address that's being paid for\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n\n        // Get the amount and do the actual transfer\n        // This will only succeed if the sender approved this contract address beforehand\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\n            if (success) {\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\n                fund.paidThisCycle[_participant] = true;\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\n            }\n        } catch {}\n    }\n}\n"
    },
    "contracts/libraries/LibFundStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary LibFundStorage {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\n\n    enum FundStates {\n        InitializingFund, // Time before the first cycle has started\n        AcceptingContributions, // Triggers at the start of a cycle\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\n    }\n\n    struct PayExemption {\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\n    }\n\n    struct Fund {\n        bool initialized;\n        FundStates currentState; // Variable to keep track of the different FundStates\n        IERC20 stableToken; // Instance of the stable token\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\n        uint fundStart; // Timestamp of the start of the fund\n        uint fundEnd; // Timestamp of the end of the fund\n        uint currentCycle; // Index of current cycle\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\n        uint totalAmountOfCycles;\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\n    }\n\n    struct FundStorage {\n        mapping(uint => Fund) funds; // termId => Fund struct\n    }\n\n    function _fundExists(uint termId) internal view returns (bool) {\n        return _fundStorage().funds[termId].initialized;\n    }\n\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\n        bytes32 position = FUND_STORAGE_POSITION;\n        assembly {\n            fundStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibTermOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\nlibrary LibTermOwnership {\n    /**\n     * @dev Throws if the sender is not the term owner.\n     * @dev Used for internal calls\n     */\n    function _ensureTermOwner(uint termId) internal view {\n        require(\n            LibTermStorage._termStorage().terms[termId].termOwner == msg.sender,\n            \"TermOwnable: caller is not the owner\"\n        );\n    }\n}\n"
    },
    "contracts/libraries/LibTermStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibTermStorage {\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\n\n    enum TermStates {\n        InitializingTerm,\n        ActiveTerm,\n        ExpiredTerm,\n        ClosedTerm\n    }\n\n    struct TermConsts {\n        mapping(string => address) aggregatorsAddresses; // \"ETH/USD\" => address , \"USDC/USD\" => address\n    }\n\n    struct Term {\n        bool initialized;\n        TermStates state;\n        address termOwner;\n        uint creationTime;\n        uint termId;\n        uint registrationPeriod; // Time for registration (seconds)\n        uint totalParticipants; // Max number of participants\n        uint cycleTime; // Time for single cycle (seconds)\n        uint contributionAmount; // Amount user must pay per cycle (USD)\n        uint contributionPeriod; // The portion of cycle user must make payment\n        address stableTokenAddress;\n    }\n\n    struct TermStorage {\n        uint nextTermId;\n        mapping(uint => Term) terms; // termId => Term struct\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\n    }\n\n    function _termExists(uint termId) internal view returns (bool) {\n        return _termStorage().terms[termId].initialized;\n    }\n\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\n        bytes32 position = TERM_CONSTS_POSITION;\n        assembly {\n            termConsts.slot := position\n        }\n    }\n\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\n        bytes32 position = TERM_STORAGE_POSITION;\n        assembly {\n            termStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibWithdrawGoerliEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibWithdrawGoerliEth {\n    bytes32 constant TRUSTED_MANAGERS_POSITION = keccak256(\"diamond.standard.trusted.managers\");\n\n    struct TrustedManagers {\n        address[] managers;\n    }\n\n    function _trustedManagers() internal pure returns (TrustedManagers storage trustedManagers) {\n        bytes32 position = TRUSTED_MANAGERS_POSITION;\n        assembly {\n            trustedManagers.slot := position\n        }\n    }\n\n    function _addTrustedAddress(address newManager) internal {\n        require(newManager != address(0), \"Invalid address\");\n        TrustedManagers storage managers = _trustedManagers();\n        managers.managers.push(newManager);\n    }\n\n    function _enforceIsTrustedManager(address managerCheck) internal view returns (bool) {\n        TrustedManagers storage managers = _trustedManagers();\n        uint length = managers.managers.length;\n        for (uint i; i < length; ) {\n            if (managers.managers[i] == managerCheck) {\n                return true;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/libraries/LibYieldGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\n\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\n\nlibrary LibYieldGeneration {\n    /// @notice This function is used to deposit collateral for yield generation\n    /// @param _termId The term id for which the collateral is being deposited\n    /// @param _ethAmount The amount of collateral being deposited\n    function _depositYG(uint _termId, uint _ethAmount) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        yield.totalDeposit = _ethAmount;\n        yield.currentTotalDeposit = _ethAmount;\n\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n\n        IZaynZapV2TakaDAO(yield.providerAddresses[\"ZaynZap\"]).zapInEth{value: _ethAmount}(\n            vaultAddress,\n            _termId\n        );\n\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\n    }\n\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\n    /// @param _termId The term id for which the collateral is being withdrawn\n    /// @param _collateralAmount The amount of collateral being withdrawn\n    /// @param _user The user address that is withdrawing the collateral\n    function _withdrawYG(\n        uint _termId,\n        uint256 _collateralAmount,\n        address _user\n    ) internal returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        uint neededShares = _ethToShares(_collateralAmount, yield);\n\n        yield.withdrawnCollateral[_user] += _collateralAmount;\n        yield.currentTotalDeposit -= _collateralAmount;\n\n        address zapAddress = yield.providerAddresses[\"ZaynZap\"];\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n            vaultAddress,\n            neededShares,\n            _termId\n        );\n\n        if (withdrawnAmount < _collateralAmount) {\n            return 0;\n        } else {\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\n            yield.withdrawnYield[_user] += withdrawnYield;\n            yield.availableYield[_user] += withdrawnYield;\n\n            return withdrawnYield;\n        }\n    }\n\n    /// @notice Conversion from shares to eth\n    /// @param _termId The term id\n    /// @param _yield The yield generation struct\n    function _sharesToEth(\n        uint _termId,\n        LibYieldGenerationStorage.YieldGeneration storage _yield\n    ) internal view returns (uint) {\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"]).balanceOf(\n            _termId\n        );\n\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\n            .getPricePerFullShare();\n\n        return (termBalance * pricePerShare) / 10 ** 18;\n    }\n\n    /// @notice Conversion from eth to shares\n    /// @param _collateralAmount The amount of collateral to withdraw\n    /// @param _yield The yield generation struct\n    function _ethToShares(\n        uint _collateralAmount,\n        LibYieldGenerationStorage.YieldGeneration storage _yield\n    ) internal view returns (uint) {\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\n            .getPricePerFullShare();\n\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\n    }\n\n    /// @notice This function is used to get the current total yield generated for a term\n    /// @param _termId The term id for which the yield is being calculated\n    /// @return The total yield generated for the term\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"]).balanceOf(\n            _termId\n        );\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"])\n            .getPricePerFullShare();\n\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\n        if (sharesInEth > yield.currentTotalDeposit) {\n            return sharesInEth - yield.currentTotalDeposit;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice This function is used to get the yield distribution ratio for a user\n    /// @param _termId The term id for which the ratio is being calculated\n    /// @param _user The user for which the ratio is being calculated\n    /// @return The yield distribution ratio for the user\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        if (yield.currentTotalDeposit == 0) {\n            return 0;\n        } else {\n            return\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\n                    10 ** 18) / yield.currentTotalDeposit;\n        }\n    }\n\n    /// @notice This function is used to get the total yield generated for a user\n    /// @param termId The term id for which the yield is being calculated\n    /// @param user The user for which the yield is being calculated\n    /// @return The total yield generated for the user\n    function _unwithdrawnUserYieldGenerated(\n        uint termId,\n        address user\n    ) internal view returns (uint) {\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\n\n        return yieldDistributed;\n    }\n}\n"
    },
    "contracts/libraries/LibYieldGenerationStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibYieldGenerationStorage {\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\"diamond.standard.yield.providers\");\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\"diamond.standard.yield.storage\");\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\"diamond.standard.yield.lock\");\n\n    enum YGProviders {\n        InHouse,\n        ZaynFi\n    }\n\n    struct YieldLock {\n        bool yieldLock;\n    }\n\n    // Both index 0 are reserved for ZaynFi\n    struct YieldProviders {\n        mapping(string => address) providerAddresses;\n    }\n\n    struct YieldGeneration {\n        bool initialized;\n        YGProviders provider;\n        mapping(string => address) providerAddresses;\n        uint startTimeStamp;\n        uint totalDeposit;\n        uint currentTotalDeposit;\n        uint totalShares;\n        address[] yieldUsers;\n        mapping(address => bool) hasOptedIn;\n        mapping(address => uint256) withdrawnYield;\n        mapping(address => uint256) withdrawnCollateral;\n        mapping(address => uint256) availableYield;\n        mapping(address => uint256) depositedCollateralByUser;\n    }\n\n    struct YieldStorage {\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\n    }\n\n    function _yieldExists(uint termId) internal view returns (bool) {\n        return _yieldStorage().yields[termId].initialized;\n    }\n\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\n        bytes32 position = YIELD_LOCK_POSITION;\n        assembly {\n            yieldLock.slot := position\n        }\n    }\n\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\n        bytes32 position = YIELD_PROVIDERS_POSITION;\n        assembly {\n            yieldProviders.slot := position\n        }\n    }\n\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\n        bytes32 position = YIELD_STORAGE_POSITION;\n        assembly {\n            yieldStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockV3Aggregator is AggregatorV3Interface {\n    int256 price;\n    uint8 numDecimals;\n    uint256 age;\n\n    constructor(uint8 _numDecimals, int256 _price) {\n        price = _price;\n        numDecimals = _numDecimals;\n        age = 30;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return numDecimals;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"Mock Chainlink Oracle Feed\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function setPrice(int256 _price) public {\n        price = _price;\n    }\n\n    function setDecimals(uint8 _decimals) public {\n        numDecimals = _decimals;\n    }\n\n    function setAge(uint256 _age) public {\n        age = _age;\n    }\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = _roundId;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = 0;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}