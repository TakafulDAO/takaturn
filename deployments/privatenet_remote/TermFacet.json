{
  "address": "0xC64Fff983Ee89E3EFf5346a45d327A78cE43d2Ab",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "termOwner",
          "type": "address"
        }
      ],
      "name": "OnTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registrationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "expireTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9d246e51b9e9c93ec34be6ccc3faf48eb1c424fb5f74e2884a2618c39c4c564",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1906529",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x101a7ca8b3964257ea57d5a5ec1db4f25aba7dad7a8602392dd17f8e906c3c36",
    "transactionHash": "0xb9d246e51b9e9c93ec34be6ccc3faf48eb1c424fb5f74e2884a2618c39c4c564",
    "logs": [],
    "blockNumber": 104,
    "cumulativeGasUsed": "1906529",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a133ef428f5746b5a2c4256d3a41d4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"}],\"name\":\"OnTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"expireTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Takaturn Term\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is used to deploy the collateral & fund contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TermFacet.sol\":\"TermFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/TermFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ITerm} from \\\"../interfaces/ITerm.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\n\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\n\\n/// @title Takaturn Term\\n/// @author Mohammed Haddouti\\n/// @notice This is used to deploy the collateral & fund contracts\\n/// @dev v3.0 (Diamond)\\ncontract TermFacet is ITerm {\\n    event OnTermCreated(uint indexed termId, address indexed termOwner);\\n    event OnCollateralDeposited(uint indexed termId, address indexed user, uint amount);\\n    event OnTermFilled(uint indexed termId);\\n    event OnTermExpired(uint indexed termId);\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\n\\n    function createTerm(\\n        uint totalParticipants,\\n        uint registrationPeriod,\\n        uint cycleTime,\\n        uint contributionAmount, // in stable token, without decimals\\n        uint contributionPeriod,\\n        address stableTokenAddress\\n    ) external returns (uint) {\\n        return\\n            _createTerm(\\n                totalParticipants,\\n                registrationPeriod,\\n                cycleTime,\\n                contributionAmount,\\n                contributionPeriod,\\n                stableTokenAddress\\n            );\\n    }\\n\\n    function joinTerm(uint termId, bool optYield) external payable {\\n        _joinTerm(termId, optYield);\\n    }\\n\\n    function startTerm(uint termId) external {\\n        _startTerm(termId);\\n    }\\n\\n    function expireTerm(uint termId) external {\\n        _expireTerm(termId);\\n    }\\n\\n    function _createTerm(\\n        uint _totalParticipants,\\n        uint _registrationPeriod,\\n        uint _cycleTime,\\n        uint _contributionAmount,\\n        uint _contributionPeriod,\\n        address _stableTokenAddress\\n    ) internal returns (uint) {\\n        require(\\n            _cycleTime != 0 &&\\n                _contributionAmount != 0 &&\\n                _contributionPeriod != 0 &&\\n                _totalParticipants != 0 &&\\n                _registrationPeriod != 0 &&\\n                _contributionPeriod < _cycleTime &&\\n                _stableTokenAddress != address(0),\\n            \\\"Invalid inputs\\\"\\n        );\\n\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint termId = termStorage.nextTermId;\\n\\n        LibTermStorage.Term memory newTerm;\\n\\n        newTerm.termId = termId;\\n        newTerm.totalParticipants = _totalParticipants;\\n        newTerm.registrationPeriod = _registrationPeriod;\\n        newTerm.cycleTime = _cycleTime;\\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\\n        newTerm.contributionPeriod = _contributionPeriod;\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\n        newTerm.termOwner = msg.sender;\\n        newTerm.creationTime = block.timestamp;\\n        newTerm.initialized = true;\\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\\n\\n        termStorage.terms[termId] = newTerm;\\n        termStorage.nextTermId++;\\n\\n        _createCollateral(termId, _totalParticipants);\\n\\n        emit OnTermCreated(termId, msg.sender);\\n\\n        return termId;\\n    }\\n\\n    function _joinTerm(uint _termId, bool _optYield) internal {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        require(LibTermStorage._termExists(_termId), \\\"Term doesn't exist\\\");\\n\\n        require(\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\n            \\\"Closed\\\"\\n        );\\n\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\n\\n        require(!collateral.isCollateralMember[msg.sender], \\\"Reentry\\\");\\n\\n        uint memberIndex = collateral.counterMembers;\\n\\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, memberIndex);\\n        require(msg.value >= minAmount, \\\"Eth payment too low\\\");\\n\\n        collateral.collateralMembersBank[msg.sender] += msg.value;\\n        collateral.isCollateralMember[msg.sender] = true;\\n        collateral.depositors[memberIndex] = msg.sender;\\n        collateral.counterMembers++;\\n        collateral.collateralDepositByUser[msg.sender] += msg.value;\\n\\n        termStorage.participantToTermId[msg.sender].push(_termId);\\n\\n        // If the lock is false, I accept the opt in\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\n            yield.hasOptedIn[msg.sender] = _optYield;\\n        } else {\\n            // If the lock is true, opt in is always false\\n            yield.hasOptedIn[msg.sender] = false;\\n        }\\n\\n        emit OnCollateralDeposited(_termId, msg.sender, msg.value);\\n\\n        if (collateral.counterMembers == 1) {\\n            collateral.firstDepositTime = block.timestamp;\\n        }\\n\\n        // If all the spots are filled, change the collateral\\n        if (collateral.counterMembers == term.totalParticipants) {\\n            emit OnTermFilled(_termId);\\n        }\\n    }\\n\\n    function _startTerm(uint _termId) internal {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n        address[] memory depositors = collateral.depositors;\\n\\n        uint depositorsArrayLength = depositors.length;\\n\\n        require(\\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\n            \\\"Term not ready to start\\\"\\n        );\\n\\n        require(collateral.counterMembers == term.totalParticipants, \\\"All spots are not filled\\\");\\n\\n        // Need to check each user because they can have different collateral amounts\\n        for (uint i; i < depositorsArrayLength; ) {\\n            require(\\n                !LibCollateral._isUnderCollaterized(term.termId, depositors[i]),\\n                \\\"Eth prices dropped\\\"\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Actually create and initialize the fund\\n        _createFund(term, collateral);\\n\\n        // If the lock is false\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\n            // Check on each depositor if they opted in for yield generation\\n            for (uint i; i < depositorsArrayLength; ) {\\n                if (yield.hasOptedIn[depositors[i]]) {\\n                    // If someone opted in, create the yield generator\\n                    _createYieldGenerator(term, collateral);\\n                    break;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            // If the lock is set to true, before the term starts and after users have joined term\\n            // There is a chance that somebody has opted in for yield generation\\n            for (uint i; i < depositorsArrayLength; ) {\\n                if (yield.hasOptedIn[depositors[i]]) {\\n                    yield.hasOptedIn[depositors[i]] = false;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Tell the collateral that the term has started\\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\\n\\n        term.state = LibTermStorage.TermStates.ActiveTerm;\\n    }\\n\\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\\n        //require(!LibCollateralStorage._collateralExists(termId), \\\"Collateral already exists\\\");\\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        newCollateral.initialized = true;\\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\\n        newCollateral.depositors = new address[](_totalParticipants);\\n    }\\n\\n    function _createFund(\\n        LibTermStorage.Term memory _term,\\n        LibCollateralStorage.Collateral storage _collateral\\n    ) internal {\\n        require(!LibFundStorage._fundExists(_term.termId), \\\"Fund already exists\\\");\\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\\n\\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\\n        newFund.beneficiariesOrder = _collateral.depositors;\\n        newFund.initialized = true;\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\\n\\n        LibFund._initFund(_term.termId);\\n    }\\n\\n    function _expireTerm(uint _termId) internal {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        require(\\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\\n        );\\n\\n        require(\\n            collateral.firstDepositTime != 0 &&\\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\n            \\\"Registration period not ended\\\"\\n        );\\n\\n        require(\\n            collateral.counterMembers < term.totalParticipants,\\n            \\\"All spots are filled, can't expire\\\"\\n        );\\n\\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \\\"Term already expired\\\");\\n\\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\\n\\n        emit OnTermExpired(_termId);\\n    }\\n\\n    function _createYieldGenerator(\\n        LibTermStorage.Term memory _term,\\n        LibCollateralStorage.Collateral storage _collateral\\n    ) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_term.termId];\\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        uint amountToYield;\\n\\n        address[] memory depositors = _collateral.depositors;\\n        uint depositorsArrayLength = depositors.length;\\n\\n        for (uint i; i < depositorsArrayLength; ) {\\n            if (yield.hasOptedIn[depositors[i]]) {\\n                yield.yieldUsers.push(depositors[i]);\\n                yield.depositedCollateralByUser[depositors[i]] =\\n                    (_collateral.collateralMembersBank[depositors[i]] * 90) /\\n                    100;\\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (amountToYield > 0) {\\n            yield.startTimeStamp = block.timestamp;\\n            yield.initialized = true;\\n            yield.providerAddresses[\\\"ZaynZap\\\"] = yieldProviders.providerAddresses[\\\"ZaynZap\\\"];\\n            yield.providerAddresses[\\\"ZaynVault\\\"] = yieldProviders.providerAddresses[\\\"ZaynVault\\\"];\\n\\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x073a6f316e1161e44018b9de13bf0c8bb032f8511f3f351dca011d77ec4a51b4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Takaturn Collateral Interface\\n/// @author Aisha EL Allam\\n/// @notice This is used to allow fund to easily communicate with collateral\\n/// @dev v2.0 (post-deploy)\\n\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface ICollateral {\\n    // Function cannot be called at this time.\\n    error FunctionInvalidAtThisState();\\n\\n    /// @notice Called from Fund contract when someone defaults\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\n    /// @param term the term object\\n    /// @param defaulters Address that was randomly selected for the current cycle\\n    function requestContribution(\\n        LibTermStorage.Term memory term,\\n        address[] calldata defaulters\\n    ) external returns (address[] memory);\\n\\n    /// @notice Called by each member after the end of the cycle to withraw collateral\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId The term id\\n    function withdrawCollateral(uint termId) external;\\n\\n    /// @param termId The term id\\n    function releaseCollateral(uint termId) external;\\n\\n    /// @notice allow the owner to empty the Collateral after 180 days\\n    function emptyCollateralAfterEnd(uint termId) external;\\n}\\n\",\"keccak256\":\"0xa4c1aaa0bcea73659ab81292304b9ac36068371451d3f2b8c71b2a01f7ef7e97\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Takaturn Fund Interface\\n/// @author Mohammed Haddouti\\n/// @notice This is used to allow collateral to easily communicate with fund\\n/// @dev v2.0 (post-deploy)\\n\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\n\\ninterface IFund {\\n    // function initFund(uint termId) external;\\n\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\n    function startNewCycle(uint termId) external;\\n\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\n    function closeFundingPeriod(uint termId) external;\\n\\n    // @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\n    //         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\n    //         and prevent the fund to be stuck in limbo\\n    function emptyFundAfterEnd(uint termId) external;\\n\\n    /// @notice function to enable/disable autopay\\n    function toggleAutoPay(uint termId) external;\\n\\n    /// @notice This is the function participants call to pay the contribution\\n    function payContribution(uint termId) external;\\n\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\n\\n    /// @notice Called by the beneficiary to withdraw the fund\\n    /// @dev This follows the pull-over-push pattern.\\n    function withdrawFund(uint termId) external;\\n}\\n\",\"keccak256\":\"0xad7f6eaf9ef3e4a0a68f2007180c13734d6f41b09975475303273493599d73e5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ninterface IGetters {\\n    // TERM GETTERS\\n\\n    /// @notice Gets the current and next term id\\n    /// @return current termID\\n    /// @return next termID\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Must return 0 before starting the fund\\n    /// @param termId the id of the term\\n    /// @return remaining registration time in seconds\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Get current information of a term\\n    /// @param termId the id of the term\\n    /// @return Term Struct, see LibTermStorage.sol\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets all terms a user has previously joined\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\n    /// @param participant address\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\n    /// @return List of termIDs\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user was previously expelled from\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    // COLLATERAL GETTERS\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the required minimum collateral deposit based on the position\\n    /// @param termId the term id\\n    /// @param depositorIndex the index of the depositor\\n    /// @return required minimum in wei\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    // FUND GETTERS\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the current beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice Gets a user information of in a fund\\n    /// @param participant address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the fund/term\\n    /// @return if the user was beneficiary in the past\\n    /// @return if the user paid for the current cycle\\n    /// @return if the user has autopay enabled\\n    /// @return users money pot balance\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    // CONVERSION GETTERS\\n\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    // YIELD GENERATION GETTERS\\n\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return hasOptedIn\\n    /// @return withdrawnYield\\n    /// @return withdrawnCollateral\\n    /// @return availableYield\\n    /// @return depositedCollateralByUser\\n    /// @return yieldDistributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @param termId the collateral id\\n    /// @return initialized\\n    /// @return startTimeStamp\\n    /// @return totalDeposit\\n    /// @return currentTotalDeposit\\n    /// @return totalShares\\n    /// @return yieldUsers\\n    /// @return vaultAddress\\n    /// @return zapAddress\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n}\\n\",\"keccak256\":\"0x30af7c1416a0df52d5360ac5fd83a66735db5155e08a64c908b1676aae0f9849\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITerm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\ninterface ITerm {\\n    function createTerm(\\n        uint totalParticipants,\\n        uint registrationPeriod,\\n        uint cycleTime,\\n        uint contributionAmount,\\n        uint contributionPeriod,\\n        address stableTokenAddress\\n    ) external returns (uint);\\n\\n    function joinTerm(uint termId, bool optYield) external payable;\\n\\n    function startTerm(uint termId) external;\\n\\n    function expireTerm(uint termId) external;\\n}\\n\",\"keccak256\":\"0x4515ae301cec501c19c942bcda98e2eb0543de91d41630a6bb00ab5e7ba51766\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface IYGFacetZaynFi {\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    function claimAvailableYield(uint termId, address receiver) external;\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external;\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external returns (bool);\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf56dd1c20333c177d123190b7f854360fc8e6e925f49ad1fe9781a4e5ad56895\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    );\\n    event OnReimbursementWithdrawn(\\n        uint indexed termId,\\n        address indexed participant,\\n        address receiver,\\n        uint indexed amount\\n    );\\n\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @param _termId term id\\n    /// @param _participant Address of the depositor\\n    function _withdrawReimbursement(\\n        uint _termId,\\n        address _participant,\\n        address _receiver\\n    ) internal {\\n        require(LibFundStorage._fundExists(_termId), \\\"Fund does not exists\\\");\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_participant];\\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        collateral.collateralPaymentBank[_participant] = 0;\\n\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0xef94d70b5c60914d012b7e6cac49b045f16e80b768b4304c06f72007fba9a951\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime;\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e38e087f7ab23dfb967d6fae65a7676851fd31a1d2b61d6b63d760ead53f86f\",\"license\":\"MIT\"},\"contracts/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibTermStorage} from \\\"./LibTermStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibFund {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\n    event OnFundStateChanged(\\n        uint indexed termId,\\n        uint indexed currentCycle,\\n        LibFundStorage.FundStates indexed newState\\n    ); // Emits when state has updated\\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\\n\\n    /// @notice called by the term to init the fund\\n    /// @param termId the id of the term\\n    function _initFund(uint termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\\n        // Set and track participants\\n        for (uint i; i < participantsArrayLength; ) {\\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Starts the first cycle\\n        _startNewCycle(termId);\\n\\n        // Set timestamp of deployment, which will be used to determine cycle times\\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\\n        fund.fundStart = block.timestamp;\\n        //emit LibFund.OnTermStart(termId);\\n        emit OnTermStart(termId);\\n    }\\n\\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\\n    /// @param _termId The id of the term\\n    function _startNewCycle(uint _termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        // currentCycle is 0 when this is called for the first time\\n        require(\\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\\n            \\\"Too early to start new cycle\\\"\\n        );\\n        require(\\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\\n            \\\"Wrong state\\\"\\n        );\\n\\n        ++fund.currentCycle;\\n        uint length = fund.beneficiariesOrder.length;\\n        for (uint i; i < length; ) {\\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\\n\\n        // We attempt to make the autopayers pay their contribution right away\\n        _autoPay(_termId);\\n    }\\n\\n    /// @notice updates the state according to the input and makes sure the state can't be changed if the fund is closed. Also emits an event that this happened\\n    /// @param _termId The id of the term\\n    /// @param _newState The new state of the fund\\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \\\"Fund closed\\\");\\n        fund.currentState = _newState;\\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\\n    }\\n\\n    /// @notice function to attempt to make autopayers pay their contribution\\n    /// @param _termId the id of the term\\n    function _autoPay(uint _termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n\\n        // Get the beneficiary for this cycle\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\\n\\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\\n        uint autoPayersArray = autoPayers.length;\\n\\n        for (uint i; i < autoPayersArray; ) {\\n            address autoPayer = autoPayers[i];\\n            // The beneficiary doesn't pay\\n            if (currentBeneficiary == autoPayer) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            if (\\n                fund.autoPayEnabled[autoPayer] &&\\n                !fund.paidThisCycle[autoPayer] &&\\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\\n            ) {\\n                _payContributionSafe(_termId, autoPayer, autoPayer);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\\n    /// @param _termId the id of the term\\n    /// @param _payer the address that's paying\\n    /// @param _participant the (participant) address that's being paid for\\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n\\n        // Get the amount and do the actual transfer\\n        // This will only succeed if the sender approved this contract address beforehand\\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\\n            if (success) {\\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\n                fund.paidThisCycle[_participant] = true;\\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\\n            }\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x1cd554e1d5a22cfe340c5350d57c1d35d8f6ed9c1b784fa9c8d3cf712c90c3df\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8da9bfc4ef1154e188e9fb8249c6314e020355e42dd59830507c122f4ff4d029\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime;\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc48faf4702ebe6ad8376ea4fd6f6911c1ee9558c71acee41ba438723780cd\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _ethToShares(_collateralAmount, yield);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _yield The yield generation struct\\n    function _ethToShares(\\n        uint _collateralAmount,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.currentTotalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x9c8d68f0bd73bb2dffe563b2243b519a92621526daf4a77a41e21f994ca60bef\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp;\\n        uint totalDeposit;\\n        uint currentTotalDeposit;\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield;\\n        mapping(address => uint256) withdrawnCollateral;\\n        mapping(address => uint256) availableYield;\\n        mapping(address => uint256) depositedCollateralByUser;\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1c7ea8a7018a0d03d382bb84f31fb6bfabd585315545f9d7bf09475c3f6dcef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {},
    "title": "Takaturn Term",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is used to deploy the collateral & fund contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}