{
  "address": "0xb382Db307dAa7aa536864e28578D6A75ecB6967b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wantUnderlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unirouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zaynFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "contract IWombatRouter",
          "name": "_wombatRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddedLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revShareFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zaynFees",
          "type": "uint256"
        }
      ],
      "name": "ChargedFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "zaynFees",
          "type": "uint256"
        }
      ],
      "name": "ManagementFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Migrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        }
      ],
      "name": "StratHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ROUTER",
      "outputs": [
        {
          "internalType": "contract IWombatRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardToUnderlyingRoute",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "addRewardV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chargeManagementFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chargePerDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRevShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IZaynReferrerV2",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "enableRevShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeCharge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mgmtFeeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetRewardsV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revShareEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revShareFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revShareToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_perDay",
          "type": "uint256"
        }
      ],
      "name": "setChargePerDay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seconds",
          "type": "uint256"
        }
      ],
      "name": "setMgmtFeeDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_revShareFees",
          "type": "uint256"
        }
      ],
      "name": "setRevShareFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unirouter",
          "type": "address"
        }
      ],
      "name": "setUnirouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setZaynFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zaynFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setZaynFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unirouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_booster",
          "type": "address"
        }
      ],
      "name": "updateBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantUnderlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zaynFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zaynFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zaynReferrer",
      "outputs": [
        {
          "internalType": "contract IZaynReferrerV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ba3571f7600f125ae0deffa8b8b6d6d474ea44bc3821d54c55c33d0ebdd6b69",
  "receipt": {
    "to": null,
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": "0xb382Db307dAa7aa536864e28578D6A75ecB6967b",
    "transactionIndex": 0,
    "gasUsed": "1702386",
    "logsBloom": "0x
    "blockHash": "0x7c772f0a12924ee0a037f2dd139a7da65b26e10a01c8b46963d5704b3cfb0d4d",
    "transactionHash": "0x6ba3571f7600f125ae0deffa8b8b6d6d474ea44bc3821d54c55c33d0ebdd6b69",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 88,
        "transactionHash": "0x6ba3571f7600f125ae0deffa8b8b6d6d474ea44bc3821d54c55c33d0ebdd6b69",
        "address": "0xb382Db307dAa7aa536864e28578D6A75ecB6967b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003904f59df9199e0d6dc3800af9f6794c9d037eb1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7c772f0a12924ee0a037f2dd139a7da65b26e10a01c8b46963d5704b3cfb0d4d"
      }
    ],
    "blockNumber": 88,
    "cumulativeGasUsed": "1702386",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b9f2C8d7FD305D1C7FE8eb132865d1252F42D37",
    "0x0b9f2C8d7FD305D1C7FE8eb132865d1252F42D37",
    15,
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "0x0000000000000000000000000000000000000000",
    "0x0b9f2C8d7FD305D1C7FE8eb132865d1252F42D37"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a133ef428f5746b5a2c4256d3a41d4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantUnderlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zaynFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"contract IWombatRouter\",\"name\":\"_wombatRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revShareFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zaynFees\",\"type\":\"uint256\"}],\"name\":\"ChargedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zaynFees\",\"type\":\"uint256\"}],\"name\":\"ManagementFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOMBAT_ROUTER\",\"outputs\":[{\"internalType\":\"contract IWombatRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardToUnderlyingRoute\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"addRewardV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargeManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRevShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZaynReferrerV2\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"enableRevShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mgmtFeeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetRewardsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perDay\",\"type\":\"uint256\"}],\"name\":\"setChargePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setMgmtFeeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_revShareFees\",\"type\":\"uint256\"}],\"name\":\"setRevShareFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setZaynFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zaynFeeRecipient\",\"type\":\"address\"}],\"name\":\"setZaynFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"}],\"name\":\"updateBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantUnderlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zaynFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zaynFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zaynReferrer\",\"outputs\":[{\"internalType\":\"contract IZaynReferrerV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"beforeDeposit()\":{\"details\":\"Function to synchronize balances before new user deposit. Can be overridden in the strategy.\"},\"migrate()\":{\"details\":\"Function to synchronize different want tokens if strategy is changed in vault Can be overridden in the strategy.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setStrategist(address)\":{\"details\":\"Updates address where strategist fee earnings will go.\",\"params\":{\"_strategist\":\"new strategist address.\"}},\"setUnirouter(address)\":{\"details\":\"Updates router that will be used for swaps.\",\"params\":{\"_unirouter\":\"new unirouter address.\"}},\"setVault(address)\":{\"details\":\"Updates parent vault.\",\"params\":{\"_vault\":\"new vault address.\"}},\"setZaynFeeRecipient(address)\":{\"details\":\"Updates Zayn's fee recipient.\",\"params\":{\"_zaynFeeRecipient\":\"new Zayn's fee recipient address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol\":\"StrategyV2Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/interfaces/IMasterWombatV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    )\\n        external\\n        view\\n        returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    )\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[][] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2d6e6098457a1dc62c64f82479e76de82ef1f667bed42f95a59dbd15ff3e70a9\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x97f61115b32d97ee057cea0c3a7a28ab516927da9cb65d79cf77382f30bcfe8d\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/interfaces/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IUniswapRouter {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9497a205c986c236a3b57e3851893c3ea3b3dda506a7db8bacb1d6f17c97fa32\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/interfaces/IWombatRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xf29c1801f83bc458fd657bad4bfac7eef95e43c964dcaf93ce911915afe8d582\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/interfaces/IWombexInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IConvexBooster {\\n    function deposit(uint256 pid, uint256 amount, bool stake) external returns (bool);\\n\\n    function poolInfo(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (address lptoken, address token, address gauge, address crvRewards, bool shutdown);\\n}\\n\\ninterface IConvexRewardPool {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function withdrawAndUnwrap(uint256 _amount, bool claim) external;\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n}\\n\",\"keccak256\":\"0x2cd3fc52f0b5a7229eb26d30bf8d2bce140a8a8fb12559896262d9089cf9aaf6\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/interfaces/IZaynReferrerV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZaynReferrerV2 {\\n    function recordDeposit(address referrer, uint256 amount) external;\\n\\n    function recordWithdraw(address referrer, uint256 amount) external;\\n\\n    function recordFeeShare(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9f2d683df21bebc2d5e22e24b94f48123cf854cbb8025a1e65aeb31b061d2b66\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/interfaces/IZaynStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynStrategyV2 {\\n    function wantUnderlyingToken() external view returns (address);\\n\\n    function revShareToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce464548aeebd1f70855d9ff43b382f99c73fdb0795be56821154b2cb4cda8fe\",\"license\":\"GPL-3.0\"},\"contracts/mocks/zaynfi/protocol/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StratManager.sol\\\";\\n\\nabstract contract FeeManager is StratManager {\\n    uint public constant MAX_FEE = 5000;\\n    uint public constant FEE_DIVISOR = 1000;\\n    uint public zaynFee = 200;\\n    uint public mgmtFeeDelay = 43200; // 12 hours\\n    uint public chargePerDay = 54794520000000; // 0.02 / 365\\n    uint public revShareFees = 50; // 0.05 or 5%\\n\\n    function setZaynFee(uint256 _fee) public onlyManager {\\n        require(_fee <= MAX_FEE, \\\"!cap\\\");\\n        zaynFee = _fee;\\n    }\\n\\n    function setMgmtFeeDelay(uint256 _seconds) public onlyManager {\\n        mgmtFeeDelay = _seconds;\\n    }\\n\\n    function setChargePerDay(uint256 _perDay) public onlyManager {\\n        chargePerDay = _perDay;\\n    }\\n\\n    function setRevShareFees(uint256 _revShareFees) public onlyManager {\\n        revShareFees = _revShareFees;\\n    }\\n}\\n\",\"keccak256\":\"0xffcb2e48c4bae0937f7f760047dab642319c114e002bb9b98e7cc704207ef008\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/protocol/StratManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract StratManager is Ownable, Pausable {\\n    /**\\n     * @dev Zayn Fi Contracts:\\n     * {manager} - Address to manage a few lower risk features of the strat\\n     * {strategist} - Address of the strategy author/deployer where strategist fee will go.\\n     * {vault} - Address of the vault that controls the strategy's funds.\\n     * {unirouter} - Address of exchange to execute swaps.\\n     */\\n    address public manager;\\n    address public strategist;\\n    address public unirouter;\\n    address public vault;\\n    address public zaynFeeRecipient;\\n\\n    /**\\n     * @dev Initializes the base strategy.\\n     * @param _manager address to use as alternative owner.\\n     * @param _strategist address where strategist fees go.\\n     * @param _unirouter router to use for swaps\\n     * @param _vault address of parent vault.\\n     * @param _zaynFeeRecipient address where to send Zayn's fees.\\n     */\\n    constructor(\\n        address _manager,\\n        address _strategist,\\n        address _unirouter,\\n        address _vault,\\n        address _zaynFeeRecipient\\n    ) {\\n        manager = _manager;\\n        strategist = _strategist;\\n        unirouter = _unirouter;\\n        vault = _vault;\\n        zaynFeeRecipient = _zaynFeeRecipient;\\n    }\\n\\n    // checks that caller is either owner or manager.\\n    modifier onlyManager() {\\n        require(msg.sender == owner() || msg.sender == manager, \\\"!manager\\\");\\n        _;\\n    }\\n\\n    function setManager(address _manager) external onlyManager {\\n        manager = _manager;\\n    }\\n\\n    /**\\n     * @dev Updates address where strategist fee earnings will go.\\n     * @param _strategist new strategist address.\\n     */\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\n        strategist = _strategist;\\n    }\\n\\n    /**\\n     * @dev Updates router that will be used for swaps.\\n     * @param _unirouter new unirouter address.\\n     */\\n    function setUnirouter(address _unirouter) external onlyOwner {\\n        unirouter = _unirouter;\\n    }\\n\\n    /**\\n     * @dev Updates parent vault.\\n     * @param _vault new vault address.\\n     */\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Updates Zayn's fee recipient.\\n     * @param _zaynFeeRecipient new Zayn's fee recipient address.\\n     */\\n    function setZaynFeeRecipient(address _zaynFeeRecipient) external onlyOwner {\\n        zaynFeeRecipient = _zaynFeeRecipient;\\n    }\\n\\n    /**\\n     * @dev Function to synchronize balances before new user deposit.\\n     * Can be overridden in the strategy.\\n     */\\n    function beforeDeposit() external virtual {}\\n\\n    /**\\n     * @dev Function to synchronize different want tokens if strategy is changed in vault\\n     * Can be overridden in the strategy.\\n     */\\n    function migrate() external virtual {}\\n}\\n\",\"keccak256\":\"0xdb7317dbb425aeafbcebe786d99d498b011c707a1164a32f4ebc319869f79176\",\"license\":\"MIT\"},\"contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapRouter.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IMasterWombatV2.sol\\\";\\nimport \\\"./StratManager.sol\\\";\\nimport \\\"./FeeManager.sol\\\";\\nimport \\\"../interfaces/IZaynReferrerV2.sol\\\";\\nimport \\\"../interfaces/IWombexInterfaces.sol\\\";\\nimport \\\"../interfaces/IZaynStrategyV2.sol\\\";\\nimport \\\"../interfaces/IWombatRouter.sol\\\";\\n\\ncontract StrategyV2Mock is StratManager, FeeManager, IZaynStrategyV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Tokens used\\n    address public want;\\n    address public override wantUnderlyingToken;\\n\\n    // Third party contracts\\n    // IConvexBooster public booster = IConvexBooster(0x0A251FA652B59592E60f4bfBce3cD9Cb3d3bd5E9);\\n    // IPool public wombatPool;\\n    // address public rewardPool; // convex base reward pool\\n    uint256 public poolId;\\n\\n    struct RewardV2 {\\n        address token;\\n        address router; // uniswap v2 router\\n        address[] toWantUnderlyingRoute; // uniswap route\\n        uint minAmount; // minimum amount to be swapped to native\\n    }\\n    RewardV2[] public rewards;\\n\\n    // Zayn settings\\n    uint256 public lastFeeCharge;\\n    bool public revShareEnabled = false;\\n    IZaynReferrerV2 public zaynReferrer;\\n    IWombatRouter public WOMBAT_ROUTER;\\n    address public WETH;\\n    // events\\n    event Deposit(uint256 tvl);\\n    event Withdraw(uint256 tvl);\\n    event AddedLiquidity(uint256 amount);\\n    event ChargedFees(uint256 revShareFees, uint256 zaynFees);\\n    event ManagementFees(uint256 zaynFees);\\n    event StratHarvest(address indexed harvester);\\n    event Migrated();\\n\\n    constructor(\\n        address _want,\\n        address _wantUnderlyingToken,\\n        // IPool _wombatPool,\\n        uint256 _poolId,\\n        address _vault,\\n        address _unirouter,\\n        address _manager,\\n        address _strategist,\\n        address _zaynFeeRecipient,\\n        IWombatRouter _wombatRouter,\\n        address _weth\\n    ) StratManager(_manager, _strategist, _unirouter, _vault, _zaynFeeRecipient) {\\n        want = _want;\\n        wantUnderlyingToken = _wantUnderlyingToken;\\n        // wombatPool = _wombatPool;\\n        poolId = _poolId;\\n        lastFeeCharge = block.timestamp;\\n        WOMBAT_ROUTER = _wombatRouter;\\n        WETH = _weth;\\n        // Wombex\\n        // (,,,rewardPool,) = booster.poolInfo(poolId);\\n        // _giveAllowances();\\n    }\\n\\n    // puts the funds to work\\n    function deposit() public whenNotPaused {\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n        if (wantBal > 0) {\\n            // booster.deposit(poolId, wantBal, true);\\n            emit Deposit(wantBal);\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n        if (wantBal < _amount) {\\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(_amount - wantBal, false);\\n            wantBal = IERC20(want).balanceOf(address(this));\\n        }\\n\\n        if (wantBal > _amount) {\\n            wantBal = _amount;\\n        }\\n\\n        IERC20(want).safeTransfer(vault, wantBal);\\n        emit Withdraw(wantBal);\\n    }\\n\\n    // compounds earnings and charges performance fee\\n    function harvest() external whenNotPaused {\\n        // IConvexRewardPool(rewardPool).getReward(); // harvest\\n        // swapRewardsToUnderlying();\\n\\n        uint256 swapped = IERC20(wantUnderlyingToken).balanceOf(address(this));\\n        if (swapped > 0) {\\n            // chargeFees(swapped);\\n            // addLiquidity();\\n            // deposit();\\n        }\\n\\n        emit StratHarvest(msg.sender);\\n    }\\n\\n    function swapRewardsToUnderlying() internal view {\\n        for (uint i; i < rewards.length; ++i) {\\n            // uint bal = IERC20(rewards[i].token).balanceOf(address(this));\\n            // if (bal >= rewards[i].minAmount) {\\n            //     uint256[] memory amountOuts = IUniswapRouter(rewards[i].router).getAmountsOut(bal, rewards[i].toWantUnderlyingRoute);\\n            //     uint256 _outputAmount = amountOuts[amountOuts.length - 1];\\n            //     uint256 _slippage = _outputAmount.mul(5 * 10 ** 15).div((1e18));\\n            //     uint256 _outputAmountAfterSlippage =  _outputAmount.sub(_slippage);\\n            //     IUniswapRouter(rewards[i].router).swapExactTokensForTokens(\\n            //         bal,\\n            //         _outputAmountAfterSlippage,\\n            //         rewards[i].toWantUnderlyingRoute,\\n            //         address(this),\\n            //         block.timestamp\\n            //     );\\n            // }\\n        }\\n    }\\n\\n    function swapEthToUnderlying(\\n        address _token,\\n        address _underlyingToken,\\n        uint256 _amount\\n    ) internal returns (uint256 swappedAmount) {\\n        // address[] memory _path = new address[](2);\\n        // _path[0] = address(_token);\\n        // _path[1] = address(_underlyingToken);\\n        // address[] memory _poolPathArr = new address[](1);\\n        // _poolPathArr[0] = address(poolPath);\\n        // (uint256 minDepositOut,) = getAmountOut(_path, _poolPathArr, int256(_amount));\\n        // uint256 _before = IERC20(_underlyingToken).balanceOf(address(this));\\n        // WOMBAT_ROUTER.swapExactTokensForTokens(\\n        //     _path,\\n        //     _poolPathArr,\\n        //     _amount,\\n        //     minDepositOut,\\n        //     address(this),\\n        //     block.timestamp\\n        // );\\n        // uint256 _after = IERC20(_underlyingToken).balanceOf(address(this));\\n    }\\n\\n    // performance fees\\n    function chargeFees(uint256 swapped) internal {\\n        uint256 zaynFee = swapped.mul(zaynFee).div(FEE_DIVISOR);\\n        if (revShareEnabled) {\\n            uint256 revShareFees = zaynFee.mul(revShareFees).div(FEE_DIVISOR);\\n            zaynReferrer.recordFeeShare(revShareFees);\\n            IERC20(wantUnderlyingToken).safeTransfer(address(zaynReferrer), revShareFees);\\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee.sub(revShareFees));\\n            emit ChargedFees(revShareFees, zaynFee.sub(revShareFees));\\n        } else {\\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee);\\n            emit ChargedFees(0, zaynFee);\\n        }\\n    }\\n\\n    // Adds liquidity to AMM and gets more LP tokens.\\n    function addLiquidity() internal view {\\n        // uint256 underlyingAmount = IERC20(wantUnderlyingToken).balanceOf(address(this));\\n        // (uint256 minLiq,) = wombatPool.quotePotentialDeposit(wantUnderlyingToken, underlyingAmount);\\n        // (uint256 liquidity) = wombatPool.deposit(wantUnderlyingToken, underlyingAmount, 0, address(this), block.timestamp, false);\\n        // emit AddedLiquidity(liquidity);\\n    }\\n\\n    // calculate the total underlaying 'want' held by the strat.\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    // it calculates how much 'want' this contract holds.\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    // it calculates how much 'want' the strategy has working in the farm.\\n    function balanceOfPool() public pure returns (uint256) {\\n        return 0;\\n        // return IConvexRewardPool(rewardPool).balanceOf(address(this));\\n    }\\n\\n    function revShareToken() public view override returns (address) {\\n        return wantUnderlyingToken;\\n    }\\n\\n    // called as part of strat migration. Sends all the available funds back to the vault.\\n    function retireStrat() external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n        IERC20(want).safeTransfer(vault, wantBal);\\n    }\\n\\n    // pauses deposits and withdraws all funds from third party systems.\\n    function panic() public onlyManager {\\n        pause();\\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\\n    }\\n\\n    function pause() public onlyManager {\\n        _pause();\\n\\n        _removeAllowances();\\n    }\\n\\n    function unpause() external onlyManager {\\n        _unpause();\\n\\n        _giveAllowances();\\n\\n        deposit();\\n    }\\n\\n    function _giveAllowances() internal {\\n        // IERC20(want).safeApprove(address(booster), type(uint256).max);\\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), type(uint256).max);\\n    }\\n\\n    function _removeAllowances() internal {\\n        // IERC20(want).safeApprove(address(booster), 0);\\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), 0);\\n    }\\n\\n    // charges 2% annual management fee per 12 hours.\\n    function chargeManagementFees() external {\\n        if (block.timestamp >= lastFeeCharge.add(mgmtFeeDelay)) {\\n            uint secondsElapsed = block.timestamp - lastFeeCharge;\\n            uint chargeAmount = chargePerDay.div(86400).mul(secondsElapsed); // getting 0.02 / 365 / 86400\\n\\n            uint256 tvl = balanceOf();\\n            uint256 fees = tvl.mul(chargeAmount).div(1e18);\\n\\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(fees, false);\\n            IERC20(want).safeTransfer(zaynFeeRecipient, fees);\\n            lastFeeCharge = block.timestamp;\\n            emit ManagementFees(fees);\\n        }\\n    }\\n\\n    function enableRevShare(IZaynReferrerV2 _referrer) external onlyOwner {\\n        revShareEnabled = true;\\n        zaynReferrer = _referrer;\\n    }\\n\\n    function disableRevShare() external onlyOwner {\\n        revShareEnabled = false;\\n    }\\n\\n    function migrate() external virtual override {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n        emit Migrated();\\n    }\\n\\n    function addRewardV2(\\n        address _router,\\n        address[] calldata _rewardToUnderlyingRoute,\\n        uint _minAmount\\n    ) external onlyOwner {\\n        // address token = _rewardToUnderlyingRoute[0];\\n        // require(token != want, \\\"!want\\\");\\n        // require(_rewardToUnderlyingRoute[_rewardToUnderlyingRoute.length - 1] == wantUnderlyingToken, \\\"!want\\\");\\n        // rewards.push(RewardV2(token, _router, _rewardToUnderlyingRoute, _minAmount));\\n        // IERC20(token).safeApprove(_router, 0);\\n        // IERC20(token).safeApprove(_router, type(uint).max);\\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), 0);\\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), type(uint).max);\\n    }\\n\\n    function resetRewardsV2() external onlyManager {\\n        delete rewards;\\n    }\\n\\n    function updateBooster(address _booster) external onlyOwner {\\n        // booster = IConvexBooster(_booster);\\n    }\\n}\\n\",\"keccak256\":\"0x52c4071dca0b99bf80fc5370a27fb9e9278f62866c0f176c241989286137c348\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260c860065561a8c06007556531d5d7e676006008556032600955600f805460ff191690553480156200003557600080fd5b5060405162001ab538038062001ab5833981016040819052620000589162000192565b8484878986620000683362000129565b6000805460ff60a01b19169055600180546001600160a01b03199081166001600160a01b03978816179091556002805482169587169590951790945560038054851693861693909317909255600480548416918516919091179055600580548316918416919091179055600a805482169c83169c909c17909b55600b80548c169a82169a909a17909955600c9790975542600e55601080548a1691891691909117905550506011805490961693909416929092179093555062000274915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200018f57600080fd5b50565b6000806000806000806000806000806101408b8d031215620001b357600080fd5b8a51620001c08162000179565b60208c0151909a50620001d38162000179565b60408c015160608d0151919a509850620001ed8162000179565b60808c0151909750620002008162000179565b60a08c0151909650620002138162000179565b60c08c0151909550620002268162000179565b60e08c0151909450620002398162000179565b6101008c01519093506200024d8162000179565b6101208c0151909250620002618162000179565b809150509295989b9194979a5092959850565b61183180620002846000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80638456cb591161019d578063c7b9d530116100e9578063e2eafe67116100a2578063f301af421161007c578063f301af42146105e1578063fb6177871461061a578063fbfa77cf14610622578063fe81e6ca1461063557600080fd5b8063e2eafe67146105b3578063f162f395146105bb578063f2fde38b146105ce57600080fd5b8063c7b9d53014610557578063d0e30db01461056a578063d0ebdbe714610572578063d92f3d7314610585578063da1c755014610598578063dce4f84f146105ab57600080fd5b8063a801158e11610156578063b61761bb11610130578063b61761bb1461052b578063b7fda72314610533578063bc063e1a14610546578063c1a3d44c1461054f57600080fd5b8063a801158e146104f2578063ace274ea14610505578063ad5c46481461051857600080fd5b80638456cb59146104a85780638da5cb5b146104b05780638fd3ab80146104c15780639d7e680c146104c95780639e93ad8e146104dc578063a0383885146104e557600080fd5b80633f4ba83a1161025c57806364c9752f11610215578063715018a6116101ef578063715018a614610486578063722713f71461048e57806376120890146104965780637d6496b41461049f57600080fd5b806364c9752f146104595780636571a2ee1461046a5780636817031b1461047357600080fd5b80633f4ba83a146104105780634641257d146104185780634700d30514610420578063481c6a7514610428578063573fef0a146103475780635c975abb1461043b57600080fd5b806320b9f331116102c95780633a8d72de116102a35780633a8d72de146103d35780633aa14a5e146103e65780633da7463f146103fe5780633e0dc34e1461040757600080fd5b806320b9f3311461039a578063257ae0de146103ad5780632e1a7d4d146103c057600080fd5b8063047de88714610311578063115880861461032d57806312e0e33f14610334578063194b8f59146103495780631f1fcd511461035c5780631fe4a68614610387575b600080fd5b61031a60075481565b6040519081526020015b60405180910390f35b600061031a565b6103476103423660046115b6565b610648565b005b6103476103573660046115b6565b6106d0565b600a5461036f906001600160a01b031681565b6040516001600160a01b039091168152602001610324565b60025461036f906001600160a01b031681565b6103476103a83660046115b6565b610714565b60035461036f906001600160a01b031681565b6103476103ce3660046115b6565b610758565b6103476103e13660046115b6565b6108c7565b600f5461036f9061010090046001600160a01b031681565b61031a600e5481565b61031a600c5481565b61034761090b565b61034761095c565b610347610a01565b60015461036f906001600160a01b031681565b600054600160a01b900460ff165b6040519015158152602001610324565b600b546001600160a01b031661036f565b61031a60065481565b6103476104813660046115e4565b610a48565b610347610a72565b61031a610a84565b61031a60085481565b61031a60095481565b610347610a9d565b6000546001600160a01b031661036f565b610347610ae4565b60055461036f906001600160a01b031681565b61031a6103e881565b600f546104499060ff1681565b610347610500366004611608565b610b39565b6103476105133660046115e4565b610b47565b60115461036f906001600160a01b031681565b610347610b71565b6103476105413660046115e4565b610b85565b61031a61138881565b61031a610bb7565b6103476105653660046115e4565b610c24565b610347610c8e565b6103476105803660046115e4565b610d42565b6103476105933660046115e4565b610da3565b6103476105a63660046115e4565b610dcd565b610347610dd5565b610347610e20565b600b5461036f906001600160a01b031681565b6103476105dc3660046115e4565b610ef4565b6105f46105ef3660046115b6565b610f6a565b604080516001600160a01b03948516815293909216602084015290820152606001610324565b610347610faa565b60045461036f906001600160a01b031681565b60105461036f906001600160a01b031681565b6000546001600160a01b031633148061066b57506001546001600160a01b031633145b6106905760405162461bcd60e51b815260040161068790611696565b60405180910390fd5b6113888111156106cb5760405162461bcd60e51b8152600401610687906020808252600490820152630216361760e41b604082015260600190565b600655565b6000546001600160a01b03163314806106f357506001546001600160a01b031633145b61070f5760405162461bcd60e51b815260040161068790611696565b600855565b6000546001600160a01b031633148061073757506001546001600160a01b031633145b6107535760405162461bcd60e51b815260040161068790611696565b600755565b6004546001600160a01b031633146107825760405162461bcd60e51b8152600401610687906116b8565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906116d8565b90508181101561086857600a546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906116d8565b90505b818111156108735750805b600454600a54610890916001600160a01b0391821691168361105d565b6040518181527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9060200160405180910390a15050565b6000546001600160a01b03163314806108ea57506001546001600160a01b031633145b6109065760405162461bcd60e51b815260040161068790611696565b600955565b6000546001600160a01b031633148061092e57506001546001600160a01b031633145b61094a5760405162461bcd60e51b815260040161068790611696565b6109526110b4565b61095a610c8e565b565b610964611109565b600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d191906116d8565b905060405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a250565b6000546001600160a01b0316331480610a2457506001546001600160a01b031633145b610a405760405162461bcd60e51b815260040161068790611696565b61095a610a9d565b610a50611156565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a7a611156565b61095a60006111b0565b6000610a9881610a92610bb7565b90611200565b905090565b6000546001600160a01b0316331480610ac057506001546001600160a01b031633145b610adc5760405162461bcd60e51b815260040161068790611696565b61095a611215565b6004546001600160a01b03163314610b0e5760405162461bcd60e51b8152600401610687906116b8565b6040517fe0551aa959c554328fc6360bc1cabcb750605f1513a7070d506eaed027066dbf90600090a1565b610b41611156565b50505050565b610b4f611156565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610b79611156565b600f805460ff19169055565b610b8d611156565b600f80546001600160a01b03909216610100026001600160a81b0319909216919091176001179055565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906116d8565b6002546001600160a01b03163314610c6c5760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b6044820152606401610687565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610c96611109565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906116d8565b90508015610d3f576040518181527f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e384269060200160405180910390a15b50565b6000546001600160a01b0316331480610d6557506001546001600160a01b031633145b610d815760405162461bcd60e51b815260040161068790611696565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610dab611156565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610d3f611156565b6000546001600160a01b0316331480610df857506001546001600160a01b031633145b610e145760405162461bcd60e51b815260040161068790611696565b61095a600d6000611525565b600754600e54610e2f91611200565b421061095a576000600e5442610e459190611707565b90506000610e6b82610e656201518060085461125890919063ffffffff16565b90611264565b90506000610e77610a84565b90506000610e97670de0b6b3a7640000610e918486611264565b90611258565b600554600a54919250610eb7916001600160a01b0390811691168361105d565b42600e556040518181527fd13b87345b53a68e0bbddcd2337ecb5b61f13a045e0a47f3e54464653107fb7a9060200160405180910390a150505050565b610efc611156565b6001600160a01b038116610f615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610687565b610d3f816111b0565b600d8181548110610f7a57600080fd5b60009182526020909120600490910201805460018201546003909201546001600160a01b03918216935091169083565b6004546001600160a01b03163314610fd45760405162461bcd60e51b8152600401610687906116b8565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104191906116d8565b600454600a54919250610d3f916001600160a01b039081169116835b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110af908490611270565b505050565b6110bc611345565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff161561095a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610687565b6000546001600160a01b0316331461095a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610687565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061120c828461171a565b90505b92915050565b61121d611109565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110ec3390565b600061120c828461172d565b600061120c828461174f565b60006112c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113959092919063ffffffff16565b90508051600014806112e65750808060200190518101906112e69190611766565b6110af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610687565b600054600160a01b900460ff1661095a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610687565b60606113a484846000856113ac565b949350505050565b60608247101561140d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610687565b600080866001600160a01b0316858760405161142991906117ac565b60006040518083038185875af1925050503d8060008114611466576040519150601f19603f3d011682016040523d82523d6000602084013e61146b565b606091505b509150915061147c87838387611487565b979650505050505050565b606083156114f65782516000036114ef576001600160a01b0385163b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610687565b50816113a4565b6113a4838381511561150b5781518083602001fd5b8060405162461bcd60e51b815260040161068791906117c8565b5080546000825560040290600052602060002090810190610d3f91905b808211156115845780546001600160a01b03199081168255600182018054909116905560006115746002830182611588565b5060006003820155600401611542565b5090565b5080546000825590600052602060002090810190610d3f91905b8082111561158457600081556001016115a2565b6000602082840312156115c857600080fd5b5035919050565b6001600160a01b0381168114610d3f57600080fd5b6000602082840312156115f657600080fd5b8135611601816115cf565b9392505050565b6000806000806060858703121561161e57600080fd5b8435611629816115cf565b9350602085013567ffffffffffffffff8082111561164657600080fd5b818701915087601f83011261165a57600080fd5b81358181111561166957600080fd5b8860208260051b850101111561167e57600080fd5b95986020929092019750949560400135945092505050565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6000602082840312156116ea57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561120f5761120f6116f1565b8082018082111561120f5761120f6116f1565b60008261174a57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761120f5761120f6116f1565b60006020828403121561177857600080fd5b8151801515811461160157600080fd5b60005b838110156117a357818101518382015260200161178b565b50506000910152565b600082516117be818460208701611788565b9190910192915050565b60208152600082518060208401526117e7816040850160208701611788565b601f01601f1916919091016040019291505056fea2646970667358221220e89181938dbda58dc040f3b1bda3e0d316206a6511e86fbcfcc237fe06223b4464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80638456cb591161019d578063c7b9d530116100e9578063e2eafe67116100a2578063f301af421161007c578063f301af42146105e1578063fb6177871461061a578063fbfa77cf14610622578063fe81e6ca1461063557600080fd5b8063e2eafe67146105b3578063f162f395146105bb578063f2fde38b146105ce57600080fd5b8063c7b9d53014610557578063d0e30db01461056a578063d0ebdbe714610572578063d92f3d7314610585578063da1c755014610598578063dce4f84f146105ab57600080fd5b8063a801158e11610156578063b61761bb11610130578063b61761bb1461052b578063b7fda72314610533578063bc063e1a14610546578063c1a3d44c1461054f57600080fd5b8063a801158e146104f2578063ace274ea14610505578063ad5c46481461051857600080fd5b80638456cb59146104a85780638da5cb5b146104b05780638fd3ab80146104c15780639d7e680c146104c95780639e93ad8e146104dc578063a0383885146104e557600080fd5b80633f4ba83a1161025c57806364c9752f11610215578063715018a6116101ef578063715018a614610486578063722713f71461048e57806376120890146104965780637d6496b41461049f57600080fd5b806364c9752f146104595780636571a2ee1461046a5780636817031b1461047357600080fd5b80633f4ba83a146104105780634641257d146104185780634700d30514610420578063481c6a7514610428578063573fef0a146103475780635c975abb1461043b57600080fd5b806320b9f331116102c95780633a8d72de116102a35780633a8d72de146103d35780633aa14a5e146103e65780633da7463f146103fe5780633e0dc34e1461040757600080fd5b806320b9f3311461039a578063257ae0de146103ad5780632e1a7d4d146103c057600080fd5b8063047de88714610311578063115880861461032d57806312e0e33f14610334578063194b8f59146103495780631f1fcd511461035c5780631fe4a68614610387575b600080fd5b61031a60075481565b6040519081526020015b60405180910390f35b600061031a565b6103476103423660046115b6565b610648565b005b6103476103573660046115b6565b6106d0565b600a5461036f906001600160a01b031681565b6040516001600160a01b039091168152602001610324565b60025461036f906001600160a01b031681565b6103476103a83660046115b6565b610714565b60035461036f906001600160a01b031681565b6103476103ce3660046115b6565b610758565b6103476103e13660046115b6565b6108c7565b600f5461036f9061010090046001600160a01b031681565b61031a600e5481565b61031a600c5481565b61034761090b565b61034761095c565b610347610a01565b60015461036f906001600160a01b031681565b600054600160a01b900460ff165b6040519015158152602001610324565b600b546001600160a01b031661036f565b61031a60065481565b6103476104813660046115e4565b610a48565b610347610a72565b61031a610a84565b61031a60085481565b61031a60095481565b610347610a9d565b6000546001600160a01b031661036f565b610347610ae4565b60055461036f906001600160a01b031681565b61031a6103e881565b600f546104499060ff1681565b610347610500366004611608565b610b39565b6103476105133660046115e4565b610b47565b60115461036f906001600160a01b031681565b610347610b71565b6103476105413660046115e4565b610b85565b61031a61138881565b61031a610bb7565b6103476105653660046115e4565b610c24565b610347610c8e565b6103476105803660046115e4565b610d42565b6103476105933660046115e4565b610da3565b6103476105a63660046115e4565b610dcd565b610347610dd5565b610347610e20565b600b5461036f906001600160a01b031681565b6103476105dc3660046115e4565b610ef4565b6105f46105ef3660046115b6565b610f6a565b604080516001600160a01b03948516815293909216602084015290820152606001610324565b610347610faa565b60045461036f906001600160a01b031681565b60105461036f906001600160a01b031681565b6000546001600160a01b031633148061066b57506001546001600160a01b031633145b6106905760405162461bcd60e51b815260040161068790611696565b60405180910390fd5b6113888111156106cb5760405162461bcd60e51b8152600401610687906020808252600490820152630216361760e41b604082015260600190565b600655565b6000546001600160a01b03163314806106f357506001546001600160a01b031633145b61070f5760405162461bcd60e51b815260040161068790611696565b600855565b6000546001600160a01b031633148061073757506001546001600160a01b031633145b6107535760405162461bcd60e51b815260040161068790611696565b600755565b6004546001600160a01b031633146107825760405162461bcd60e51b8152600401610687906116b8565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906116d8565b90508181101561086857600a546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906116d8565b90505b818111156108735750805b600454600a54610890916001600160a01b0391821691168361105d565b6040518181527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9060200160405180910390a15050565b6000546001600160a01b03163314806108ea57506001546001600160a01b031633145b6109065760405162461bcd60e51b815260040161068790611696565b600955565b6000546001600160a01b031633148061092e57506001546001600160a01b031633145b61094a5760405162461bcd60e51b815260040161068790611696565b6109526110b4565b61095a610c8e565b565b610964611109565b600b546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d191906116d8565b905060405133907f577a37fdb49a88d66684922c6f913df5239b4f214b2b97c53ef8e3bbb2034cb590600090a250565b6000546001600160a01b0316331480610a2457506001546001600160a01b031633145b610a405760405162461bcd60e51b815260040161068790611696565b61095a610a9d565b610a50611156565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a7a611156565b61095a60006111b0565b6000610a9881610a92610bb7565b90611200565b905090565b6000546001600160a01b0316331480610ac057506001546001600160a01b031633145b610adc5760405162461bcd60e51b815260040161068790611696565b61095a611215565b6004546001600160a01b03163314610b0e5760405162461bcd60e51b8152600401610687906116b8565b6040517fe0551aa959c554328fc6360bc1cabcb750605f1513a7070d506eaed027066dbf90600090a1565b610b41611156565b50505050565b610b4f611156565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610b79611156565b600f805460ff19169055565b610b8d611156565b600f80546001600160a01b03909216610100026001600160a81b0319909216919091176001179055565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9891906116d8565b6002546001600160a01b03163314610c6c5760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b6044820152606401610687565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610c96611109565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906116d8565b90508015610d3f576040518181527f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e384269060200160405180910390a15b50565b6000546001600160a01b0316331480610d6557506001546001600160a01b031633145b610d815760405162461bcd60e51b815260040161068790611696565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610dab611156565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610d3f611156565b6000546001600160a01b0316331480610df857506001546001600160a01b031633145b610e145760405162461bcd60e51b815260040161068790611696565b61095a600d6000611525565b600754600e54610e2f91611200565b421061095a576000600e5442610e459190611707565b90506000610e6b82610e656201518060085461125890919063ffffffff16565b90611264565b90506000610e77610a84565b90506000610e97670de0b6b3a7640000610e918486611264565b90611258565b600554600a54919250610eb7916001600160a01b0390811691168361105d565b42600e556040518181527fd13b87345b53a68e0bbddcd2337ecb5b61f13a045e0a47f3e54464653107fb7a9060200160405180910390a150505050565b610efc611156565b6001600160a01b038116610f615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610687565b610d3f816111b0565b600d8181548110610f7a57600080fd5b60009182526020909120600490910201805460018201546003909201546001600160a01b03918216935091169083565b6004546001600160a01b03163314610fd45760405162461bcd60e51b8152600401610687906116b8565b600a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104191906116d8565b600454600a54919250610d3f916001600160a01b039081169116835b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110af908490611270565b505050565b6110bc611345565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff161561095a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610687565b6000546001600160a01b0316331461095a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610687565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061120c828461171a565b90505b92915050565b61121d611109565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110ec3390565b600061120c828461172d565b600061120c828461174f565b60006112c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113959092919063ffffffff16565b90508051600014806112e65750808060200190518101906112e69190611766565b6110af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610687565b600054600160a01b900460ff1661095a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610687565b60606113a484846000856113ac565b949350505050565b60608247101561140d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610687565b600080866001600160a01b0316858760405161142991906117ac565b60006040518083038185875af1925050503d8060008114611466576040519150601f19603f3d011682016040523d82523d6000602084013e61146b565b606091505b509150915061147c87838387611487565b979650505050505050565b606083156114f65782516000036114ef576001600160a01b0385163b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610687565b50816113a4565b6113a4838381511561150b5781518083602001fd5b8060405162461bcd60e51b815260040161068791906117c8565b5080546000825560040290600052602060002090810190610d3f91905b808211156115845780546001600160a01b03199081168255600182018054909116905560006115746002830182611588565b5060006003820155600401611542565b5090565b5080546000825590600052602060002090810190610d3f91905b8082111561158457600081556001016115a2565b6000602082840312156115c857600080fd5b5035919050565b6001600160a01b0381168114610d3f57600080fd5b6000602082840312156115f657600080fd5b8135611601816115cf565b9392505050565b6000806000806060858703121561161e57600080fd5b8435611629816115cf565b9350602085013567ffffffffffffffff8082111561164657600080fd5b818701915087601f83011261165a57600080fd5b81358181111561166957600080fd5b8860208260051b850101111561167e57600080fd5b95986020929092019750949560400135945092505050565b60208082526008908201526710b6b0b730b3b2b960c11b604082015260600190565b602080825260069082015265085d985d5b1d60d21b604082015260600190565b6000602082840312156116ea57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561120f5761120f6116f1565b8082018082111561120f5761120f6116f1565b60008261174a57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761120f5761120f6116f1565b60006020828403121561177857600080fd5b8151801515811461160157600080fd5b60005b838110156117a357818101518382015260200161178b565b50506000910152565b600082516117be818460208701611788565b9190910192915050565b60208152600082518060208401526117e7816040850160208701611788565b601f01601f1916919091016040019291505056fea2646970667358221220e89181938dbda58dc040f3b1bda3e0d316206a6511e86fbcfcc237fe06223b4464736f6c63430008120033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "beforeDeposit()": {
        "details": "Function to synchronize balances before new user deposit. Can be overridden in the strategy."
      },
      "migrate()": {
        "details": "Function to synchronize different want tokens if strategy is changed in vault Can be overridden in the strategy."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setStrategist(address)": {
        "details": "Updates address where strategist fee earnings will go.",
        "params": {
          "_strategist": "new strategist address."
        }
      },
      "setUnirouter(address)": {
        "details": "Updates router that will be used for swaps.",
        "params": {
          "_unirouter": "new unirouter address."
        }
      },
      "setVault(address)": {
        "details": "Updates parent vault.",
        "params": {
          "_vault": "new vault address."
        }
      },
      "setZaynFeeRecipient(address)": {
        "details": "Updates Zayn's fee recipient.",
        "params": {
          "_zaynFeeRecipient": "new Zayn's fee recipient address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13114,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "manager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13116,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "strategist",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13118,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "unirouter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 13120,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13122,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "zaynFeeRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13038,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "zaynFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13041,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "mgmtFeeDelay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13044,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "chargePerDay",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13047,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "revShareFees",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13285,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "want",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 13288,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "wantUnderlyingToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 13290,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "poolId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13304,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(RewardV2)13300_storage)dyn_storage"
      },
      {
        "astId": 13306,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "lastFeeCharge",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13309,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "revShareEnabled",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 13312,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "zaynReferrer",
        "offset": 1,
        "slot": "15",
        "type": "t_contract(IZaynReferrerV2)12969"
      },
      {
        "astId": 13315,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "WOMBAT_ROUTER",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IWombatRouter)12875"
      },
      {
        "astId": 13317,
        "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
        "label": "WETH",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardV2)13300_storage)dyn_storage": {
        "base": "t_struct(RewardV2)13300_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyV2Mock.RewardV2[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWombatRouter)12875": {
        "encoding": "inplace",
        "label": "contract IWombatRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IZaynReferrerV2)12969": {
        "encoding": "inplace",
        "label": "contract IZaynReferrerV2",
        "numberOfBytes": "20"
      },
      "t_struct(RewardV2)13300_storage": {
        "encoding": "inplace",
        "label": "struct StrategyV2Mock.RewardV2",
        "members": [
          {
            "astId": 13292,
            "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13294,
            "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
            "label": "router",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13297,
            "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
            "label": "toWantUnderlyingRoute",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13299,
            "contract": "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol:StrategyV2Mock",
            "label": "minAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}