{
  "address": "0x112a01F6F25dB69727ED0E80c6D7A5C671A73663",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleYieldLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateProviderAddressOnTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateYieldProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88696f16f8a99a236af6e7c527fc2205a1daadb0448377e62c5287c22ecffeb4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "609823",
    "logsBloom": "0x
    "blockHash": "0x6461c03e6c8dd5ed4eb28e04ccaa2b61d23ed56769a5314ecbc9d6b704b1c882",
    "transactionHash": "0x88696f16f8a99a236af6e7c527fc2205a1daadb0448377e62c5287c22ecffeb4",
    "logs": [],
    "blockNumber": 109,
    "cumulativeGasUsed": "609823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a133ef428f5746b5a2c4256d3a41d4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleYieldLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateProviderAddressOnTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateYieldProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"details\":\"for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\",\"params\":{\"receiver\":\"The address of the user who will receive the yield\",\"termId\":\"The term id for which the yield is being claimed\"}},\"toggleOptInYG(uint256)\":{\"details\":\"only allowed before the term starts\",\"params\":{\"termId\":\"The term id for which the yield is being claimed\"}},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\",\"termId\":\"The term id for which the yield is being claimed\"}},\"updateYieldProvider(string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"toggleOptInYG(uint256)\":{\"notice\":\"This function allows a user to toggle their yield generation\"},\"toggleYieldLock()\":{\"notice\":\"This function allows the owner to disable the yield generation feature in case of emergency\"},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"notice\":\"To be used in case of emergency, when the provider needs to change the zap or the vault\"},\"updateYieldProvider(string,address)\":{\"notice\":\"This function allows the owner to update the global variable for new yield provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ncontract YGFacetZaynFi is IYGFacetZaynFi {\\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\\n    function claimAvailableYield(uint termId, address receiver) external {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        address[] memory participants = fund.beneficiariesOrder;\\n        uint participantsLength = participants.length;\\n        bool canCall;\\n\\n        for (uint i; i < participantsLength; ) {\\n            if (participants[i] == msg.sender) {\\n                canCall = true;\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        require(canCall, \\\"The caller must be a participant\\\");\\n\\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\\n    }\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        require(\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\n            \\\"Too late to change YG opt in\\\"\\n        );\\n        require(\\n            collateral.isCollateralMember[msg.sender],\\n            \\\"Pay the collateral security deposit first\\\"\\n        );\\n\\n        bool optIn = !yield.hasOptedIn[msg.sender];\\n        yield.hasOptedIn[msg.sender] = optIn;\\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\\n    }\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(\\n        string memory providerString,\\n        address providerAddress\\n    ) external onlyOwner {\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        yieldProvider.providerAddresses[providerString] = providerAddress;\\n    }\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external onlyOwner returns (bool) {\\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\\n\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\n    }\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external onlyOwner {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        require(LibFundStorage._fundExists(termId), \\\"Fund does not exist\\\");\\n        require(providerAddress != address(0), \\\"Invalid provider address\\\");\\n        require(\\n            yield.providerAddresses[providerString] != providerAddress,\\n            \\\"Same provider address\\\"\\n        );\\n\\n        yield.providerAddresses[providerString] = providerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xf597e7dc21f34d4be309a4107a76df38d627c72421cf59919ecd543f5ed953c6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface IYGFacetZaynFi {\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    function claimAvailableYield(uint termId, address receiver) external;\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external;\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external returns (bool);\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf56dd1c20333c177d123190b7f854360fc8e6e925f49ad1fe9781a4e5ad56895\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime;\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e38e087f7ab23dfb967d6fae65a7676851fd31a1d2b61d6b63d760ead53f86f\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8da9bfc4ef1154e188e9fb8249c6314e020355e42dd59830507c122f4ff4d029\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime;\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc48faf4702ebe6ad8376ea4fd6f6911c1ee9558c71acee41ba438723780cd\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _ethToShares(_collateralAmount, yield);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _yield The yield generation struct\\n    function _ethToShares(\\n        uint _collateralAmount,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return ((_collateralAmount * 10 ** 18) / pricePerShare);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.currentTotalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x9c8d68f0bd73bb2dffe563b2243b519a92621526daf4a77a41e21f994ca60bef\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp;\\n        uint totalDeposit;\\n        uint currentTotalDeposit;\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield;\\n        mapping(address => uint256) withdrawnCollateral;\\n        mapping(address => uint256) availableYield;\\n        mapping(address => uint256) depositedCollateralByUser;\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1c7ea8a7018a0d03d382bb84f31fb6bfabd585315545f9d7bf09475c3f6dcef\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a0c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806327ff9f351461005c57806383da1d7614610071578063c8eeb57814610084578063efbb9761146100a0578063f6a40d2a146100b3575b600080fd5b61006f61006a3660046107db565b6100c6565b005b61006f61007f3660046108b3565b610257565b61008c6102c7565b604051901515815260200160405180910390f35b61006f6100ae366004610901565b61030a565b61006f6100c1366004610958565b6104c7565b60008181527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff16600381111561013b5761013b61097b565b1461018d5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102005760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b6064820152608401610184565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b61025f610608565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b89779082908290610293908690610991565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b60006102d1610608565b507f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f3805460ff19811660ff918216159081179092551690565b610312610608565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9092529091205460ff166103af5760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610184565b6001600160a01b0382166104055760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606401610184565b816001600160a01b031681600101846040516104219190610991565b908152604051908190036020019020546001600160a01b03160361047f5760405162461bcd60e51b815260206004820152601560248201527453616d652070726f7669646572206164647265737360581b6044820152606401610184565b8181600101846040516104929190610991565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050565b60008281527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c6020908152604080832060018101805483518186028101860190945280845291949390919083018282801561054b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161052d575b505050505090506000815190506000805b828110156105a757336001600160a01b0316848281518110610580576105806109c0565b60200260200101516001600160a01b03160361059f57600191506105a7565b60010161055c565b50806105f55760405162461bcd60e51b815260206004820181905260248201527f5468652063616c6c6572206d7573742062652061207061727469636970616e746044820152606401610184565b610600863387610691565b505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461068f5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610184565b565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083206001600160a01b0386168452600a8101909252909120548061071c5760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610184565b6001600160a01b038481166000908152600a8401602052604080822082905551909185169083908381818185875af1925050503d806000811461077b576040519150601f19603f3d011682016040523d82523d6000602084013e610780565b606091505b505090508061078e57600080fd5b6040516001600160a01b03858116825283919087169088907fdb2460ca9a22614b8fe3f598b727569022250e691340edbbaf8ff069969155f09060200160405180910390a4505050505050565b6000602082840312156107ed57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261081b57600080fd5b813567ffffffffffffffff80821115610836576108366107f4565b604051601f8301601f19908116603f0116810190828211818310171561085e5761085e6107f4565b8160405283815286602085880101111561087757600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146108ae57600080fd5b919050565b600080604083850312156108c657600080fd5b823567ffffffffffffffff8111156108dd57600080fd5b6108e98582860161080a565b9250506108f860208401610897565b90509250929050565b60008060006060848603121561091657600080fd5b83359250602084013567ffffffffffffffff81111561093457600080fd5b6109408682870161080a565b92505061094f60408501610897565b90509250925092565b6000806040838503121561096b57600080fd5b823591506108f860208401610897565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156109b25760208186018101518583015201610998565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c796650d0edc5e6a9f2eab7069f49dccb8bb36c97284d0f34db11363dd1adbde64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806327ff9f351461005c57806383da1d7614610071578063c8eeb57814610084578063efbb9761146100a0578063f6a40d2a146100b3575b600080fd5b61006f61006a3660046107db565b6100c6565b005b61006f61007f3660046108b3565b610257565b61008c6102c7565b604051901515815260200160405180910390f35b61006f6100ae366004610901565b61030a565b61006f6100c1366004610958565b6104c7565b60008181527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff16600381111561013b5761013b61097b565b1461018d5760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff166102005760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b6064820152608401610184565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b61025f610608565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b89779082908290610293908690610991565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b60006102d1610608565b507f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f3805460ff19811660ff918216159081179092551690565b610312610608565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9092529091205460ff166103af5760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610184565b6001600160a01b0382166104055760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606401610184565b816001600160a01b031681600101846040516104219190610991565b908152604051908190036020019020546001600160a01b03160361047f5760405162461bcd60e51b815260206004820152601560248201527453616d652070726f7669646572206164647265737360581b6044820152606401610184565b8181600101846040516104929190610991565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050565b60008281527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c6020908152604080832060018101805483518186028101860190945280845291949390919083018282801561054b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161052d575b505050505090506000815190506000805b828110156105a757336001600160a01b0316848281518110610580576105806109c0565b60200260200101516001600160a01b03160361059f57600191506105a7565b60010161055c565b50806105f55760405162461bcd60e51b815260206004820181905260248201527f5468652063616c6c6572206d7573742062652061207061727469636970616e746044820152606401610184565b610600863387610691565b505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461068f5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610184565b565b60008381527f29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9602090815260408083206001600160a01b0386168452600a8101909252909120548061071c5760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610184565b6001600160a01b038481166000908152600a8401602052604080822082905551909185169083908381818185875af1925050503d806000811461077b576040519150601f19603f3d011682016040523d82523d6000602084013e610780565b606091505b505090508061078e57600080fd5b6040516001600160a01b03858116825283919087169088907fdb2460ca9a22614b8fe3f598b727569022250e691340edbbaf8ff069969155f09060200160405180910390a4505050505050565b6000602082840312156107ed57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261081b57600080fd5b813567ffffffffffffffff80821115610836576108366107f4565b604051601f8301601f19908116603f0116810190828211818310171561085e5761085e6107f4565b8160405283815286602085880101111561087757600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146108ae57600080fd5b919050565b600080604083850312156108c657600080fd5b823567ffffffffffffffff8111156108dd57600080fd5b6108e98582860161080a565b9250506108f860208401610897565b90509250929050565b60008060006060848603121561091657600080fd5b83359250602084013567ffffffffffffffff81111561093457600080fd5b6109408682870161080a565b92505061094f60408501610897565b90509250925092565b6000806040838503121561096b57600080fd5b823591506108f860208401610897565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156109b25760208186018101518583015201610998565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c796650d0edc5e6a9f2eab7069f49dccb8bb36c97284d0f34db11363dd1adbde64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "details": "for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral",
        "params": {
          "receiver": "The address of the user who will receive the yield",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "toggleOptInYG(uint256)": {
        "details": "only allowed before the term starts",
        "params": {
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateYieldProvider(string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "toggleOptInYG(uint256)": {
        "notice": "This function allows a user to toggle their yield generation"
      },
      "toggleYieldLock()": {
        "notice": "This function allows the owner to disable the yield generation feature in case of emergency"
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "notice": "To be used in case of emergency, when the provider needs to change the zap or the vault"
      },
      "updateYieldProvider(string,address)": {
        "notice": "This function allows the owner to update the global variable for new yield provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}