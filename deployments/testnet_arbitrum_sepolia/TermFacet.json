{
  "address": "0x017635F87514A1eDc3d8088D3D10eB5a9F91dadE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "termOwner",
          "type": "address"
        }
      ],
      "name": "OnTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registrationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "expireTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "newParticipant",
          "type": "address"
        }
      ],
      "name": "paySecurityOnBehalfOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "newParticipant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "paySecurityOnBehalfOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f8a172bf02573534c61f0db08874ed587706288ec37fc8cca415a5329a7dc26",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "2339815",
    "logsBloom": "0x
    "blockHash": "0x6f8d364133d2756a9881a97528619fa63334528a6c03a9d8b909635a24640c12",
    "transactionHash": "0x8f8a172bf02573534c61f0db08874ed587706288ec37fc8cca415a5329a7dc26",
    "logs": [],
    "blockNumber": 26527318,
    "cumulativeGasUsed": "5021827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "70fa51dc678758a2f3df34746017ca3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"}],\"name\":\"OnTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"expireTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newParticipant\",\"type\":\"address\"}],\"name\":\"paySecurityOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newParticipant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"paySecurityOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"createTerm(uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"contributionAmount\":\"The amount of stable token that each participant will have to contribute\",\"contributionPeriod\":\"The time in seconds that the participants will have to contribute\",\"cycleTime\":\"The time in seconds that the term will last\",\"registrationPeriod\":\"The time in seconds that the term will be open for registration\",\"stableTokenAddress\":\"The address of the stable token\",\"totalParticipants\":\"The number of participants in the term\"},\"returns\":{\"_0\":\"termId The id of the new term\"}},\"expireTerm(uint256)\":{\"params\":{\"termId\":\"The id of the term\"}},\"joinTerm(uint256,bool)\":{\"params\":{\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"termId\":\"The id of the term\"}},\"joinTerm(uint256,bool,uint256)\":{\"params\":{\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"position\":\"The position in the term\",\"termId\":\"The id of the term\"}},\"paySecurityOnBehalfOf(uint256,bool,address)\":{\"params\":{\"newParticipant\":\"The address of the new participant\",\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"termId\":\"The id of the term\"}},\"paySecurityOnBehalfOf(uint256,bool,address,uint256)\":{\"params\":{\"newParticipant\":\"The address of the new participant\",\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"position\":\"The position in the term\",\"termId\":\"The id of the term\"}},\"startTerm(uint256)\":{\"params\":{\"termId\":\"The id of the term\"}}},\"title\":\"Takaturn Term Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTerm(uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Create a new term\"},\"expireTerm(uint256)\":{\"notice\":\"Expire a term\"},\"joinTerm(uint256,bool)\":{\"notice\":\"Join a term at the next available position\"},\"joinTerm(uint256,bool,uint256)\":{\"notice\":\"Join a term at a specific position\"},\"paySecurityOnBehalfOf(uint256,bool,address)\":{\"notice\":\"Pay security deposit on behalf of someone else, at the next available position\"},\"paySecurityOnBehalfOf(uint256,bool,address,uint256)\":{\"notice\":\"Pay security deposit on behalf of someone else, at a specific position\"},\"startTerm(uint256)\":{\"notice\":\"Start a term\"}},\"notice\":\"This is used to create terms\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TermFacet.sol\":\"TermFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/TermFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ITerm} from \\\"../interfaces/ITerm.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\n\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\n\\n/// @title Takaturn Term Facet\\n/// @author Mohammed Haddouti\\n/// @notice This is used to create terms\\n/// @dev v3.0 (Diamond)\\ncontract TermFacet is ITerm {\\n    event OnTermCreated(uint indexed termId, address indexed termOwner); // Emits when a new term is created\\n    event OnCollateralDeposited(\\n        uint indexed termId,\\n        address payer,\\n        address indexed user,\\n        uint amount,\\n        uint indexed position\\n    ); // Emits when a user joins a term\\n    event OnTermFilled(uint indexed termId); // Emits when all the spots are filled\\n    event OnTermExpired(uint indexed termId); // Emits when a term expires\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\n\\n    /// @notice Create a new term\\n    /// @param totalParticipants The number of participants in the term\\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\\n    /// @param cycleTime The time in seconds that the term will last\\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\\n    /// @param stableTokenAddress The address of the stable token\\n    /// @return termId The id of the new term\\n    function createTerm(\\n        uint totalParticipants,\\n        uint registrationPeriod,\\n        uint cycleTime,\\n        uint contributionAmount, // in stable token, without decimals\\n        uint contributionPeriod,\\n        address stableTokenAddress\\n    ) external returns (uint) {\\n        return\\n            _createTerm(\\n                totalParticipants,\\n                registrationPeriod,\\n                cycleTime,\\n                contributionAmount,\\n                contributionPeriod,\\n                stableTokenAddress\\n            );\\n    }\\n\\n    /// @notice Join a term at the next available position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    function joinTerm(uint termId, bool optYield) external payable {\\n        _joinTerm(termId, optYield, msg.sender);\\n    }\\n\\n    /// @notice Join a term at a specific position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param position The position in the term\\n    function joinTerm(uint termId, bool optYield, uint position) external payable {\\n        _joinTermByPosition(termId, optYield, position, msg.sender);\\n    }\\n\\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param newParticipant The address of the new participant\\n    function paySecurityOnBehalfOf(\\n        uint termId,\\n        bool optYield,\\n        address newParticipant\\n    ) external payable {\\n        _joinTerm(termId, optYield, newParticipant);\\n    }\\n\\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param newParticipant The address of the new participant\\n    /// @param position The position in the term\\n    function paySecurityOnBehalfOf(\\n        uint termId,\\n        bool optYield,\\n        address newParticipant,\\n        uint position\\n    ) external payable {\\n        _joinTermByPosition(termId, optYield, position, newParticipant);\\n    }\\n\\n    /// @notice Start a term\\n    /// @param termId The id of the term\\n    function startTerm(uint termId) external {\\n        _startTerm(termId);\\n    }\\n\\n    /// @notice Expire a term\\n    /// @param termId The id of the term\\n    function expireTerm(uint termId) external {\\n        _expireTerm(termId);\\n    }\\n\\n    /// @dev Revert if the cycle time is 0\\n    /// @dev Revert if the contribution amount is 0\\n    /// @dev Revert if the contribution period is 0\\n    /// @dev Revert if the total participants is 0\\n    /// @dev Revert if the registration period is 0\\n    /// @dev Revert if the contribution period is greater than the cycle time\\n    /// @dev Revert if the stable token address is 0\\n    function _createTerm(\\n        uint _totalParticipants,\\n        uint _registrationPeriod,\\n        uint _cycleTime,\\n        uint _contributionAmount,\\n        uint _contributionPeriod,\\n        address _stableTokenAddress\\n    ) internal returns (uint) {\\n        require(\\n            _cycleTime != 0 &&\\n                _contributionAmount != 0 &&\\n                _contributionPeriod != 0 &&\\n                _totalParticipants != 0 &&\\n                _registrationPeriod != 0 &&\\n                _contributionPeriod < _cycleTime &&\\n                _stableTokenAddress != address(0),\\n            \\\"Invalid inputs\\\"\\n        );\\n\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint termId = termStorage.nextTermId;\\n\\n        LibTermStorage.Term memory newTerm;\\n\\n        newTerm.termId = termId;\\n        newTerm.totalParticipants = _totalParticipants;\\n        newTerm.registrationPeriod = _registrationPeriod;\\n        newTerm.cycleTime = _cycleTime;\\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\\n        newTerm.contributionPeriod = _contributionPeriod;\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\n        newTerm.termOwner = msg.sender;\\n        newTerm.creationTime = block.timestamp;\\n        newTerm.initialized = true;\\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\\n\\n        termStorage.terms[termId] = newTerm;\\n        termStorage.nextTermId++;\\n\\n        _createCollateral(termId, _totalParticipants);\\n\\n        emit OnTermCreated(termId, msg.sender);\\n\\n        return termId;\\n    }\\n\\n    /// @dev Revert if the term doesn't exist\\n    /// @dev Revert if the collateral is not accepting collateral\\n    /// @dev Revert if the collateral is full\\n    /// @dev Revert if the new participant is already a collateral member\\n    function _joinTerm(uint _termId, bool _optYield, address _newParticipant) internal {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        require(LibTermStorage._termExists(_termId), \\\"Term doesn't exist\\\");\\n\\n        require(\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\n            \\\"Closed\\\"\\n        );\\n\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\n\\n        require(!collateral.isCollateralMember[_newParticipant], \\\"Reentry\\\");\\n\\n        uint memberIndex;\\n\\n        for (uint i; i < term.totalParticipants; ) {\\n            if (collateral.depositors[i] == address(0)) {\\n                memberIndex = i;\\n                break;\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than term total participants\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _joinTermByPosition(_termId, _optYield, memberIndex, _newParticipant);\\n    }\\n\\n    /// @dev Revert if the term doesn't exist\\n    /// @dev Revert if the collateral is not accepting collateral\\n    /// @dev Revert if the collateral is full\\n    /// @dev Revert if the new participant is already a collateral member\\n    /// @dev Revert if the position is higher than the total participants\\n    /// @dev Revert if the position is already taken\\n    /// @dev Revert if the msg.value is lower than the min amount\\n    function _joinTermByPosition(\\n        uint _termId,\\n        bool _optYield,\\n        uint _position,\\n        address _newParticipant\\n    ) internal {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        require(LibTermStorage._termExists(_termId), \\\"Term doesn't exist\\\");\\n\\n        require(\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\n            \\\"Closed\\\"\\n        );\\n\\n        require(collateral.counterMembers < term.totalParticipants, \\\"No space\\\");\\n\\n        require(!collateral.isCollateralMember[_newParticipant], \\\"Reentry\\\");\\n\\n        require(_position <= term.totalParticipants - 1, \\\"Invalid position\\\");\\n\\n        require(collateral.depositors[_position] == address(0), \\\"Position already taken\\\");\\n\\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, _position);\\n        require(msg.value >= minAmount, \\\"Eth payment too low\\\");\\n\\n        collateral.collateralMembersBank[_newParticipant] += msg.value;\\n        collateral.isCollateralMember[_newParticipant] = true;\\n        collateral.depositors[_position] = _newParticipant;\\n        collateral.counterMembers++;\\n        collateral.collateralDepositByUser[_newParticipant] += msg.value;\\n\\n        termStorage.participantToTermId[_newParticipant].push(_termId);\\n\\n        // If the lock is false, I accept the opt in\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\n            yield.hasOptedIn[_newParticipant] = _optYield;\\n        } else {\\n            // If the lock is true, opt in is always false\\n            yield.hasOptedIn[_newParticipant] = false;\\n        }\\n\\n        emit OnCollateralDeposited(_termId, msg.sender, _newParticipant, msg.value, _position);\\n\\n        if (collateral.counterMembers == 1) {\\n            collateral.firstDepositTime = block.timestamp;\\n        }\\n\\n        // If all the spots are filled, change the collateral\\n        if (collateral.counterMembers == term.totalParticipants) {\\n            emit OnTermFilled(_termId);\\n        }\\n    }\\n\\n    /// @dev Revert if the term doesn't exist\\n    /// @dev Revert if the term is not ready to start\\n    /// @dev Revert if the term is already active\\n    /// @dev Revert if someone is undercollaterized\\n    function _startTerm(uint _termId) internal {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n        address[] memory depositors = collateral.depositors;\\n\\n        uint depositorsArrayLength = depositors.length;\\n\\n        require(\\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\n            \\\"Term not ready to start\\\"\\n        );\\n\\n        require(collateral.counterMembers == term.totalParticipants, \\\"All spots are not filled\\\");\\n\\n        // Need to check each user because they can have different collateral amounts\\n        for (uint i; i < depositorsArrayLength; ) {\\n            require(\\n                !LibCollateral._isUnderCollaterized(term.termId, depositors[i]),\\n                \\\"Eth prices dropped\\\"\\n            );\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Actually create and initialize the fund\\n        _createFund(term, collateral);\\n\\n        // If the lock is false\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\n            // Check on each depositor if they opted in for yield generation\\n            for (uint i; i < depositorsArrayLength; ) {\\n                if (yield.hasOptedIn[depositors[i]]) {\\n                    // If someone opted in, create the yield generator\\n                    _createYieldGenerator(term, collateral);\\n                    break;\\n                }\\n\\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            // If the lock is set to true, before the term starts and after users have joined term\\n            // There is a chance that somebody has opted in for yield generation\\n            for (uint i; i < depositorsArrayLength; ) {\\n                if (yield.hasOptedIn[depositors[i]]) {\\n                    yield.hasOptedIn[depositors[i]] = false;\\n                }\\n\\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Tell the collateral that the term has started\\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\\n\\n        term.state = LibTermStorage.TermStates.ActiveTerm;\\n    }\\n\\n    /// @notice Create a new collateral\\n    /// @param _termId The id of the term\\n    /// @param _totalParticipants The number of participants in the term\\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\\n        //require(!LibCollateralStorage._collateralExists(termId), \\\"Collateral already exists\\\");\\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        newCollateral.initialized = true;\\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\\n        newCollateral.depositors = new address[](_totalParticipants);\\n    }\\n\\n    /// @notice Create a new fund\\n    /// @dev Revert if the fund already exists\\n    /// @param _term The term\\n    /// @param _collateral The collateral object\\n    function _createFund(\\n        LibTermStorage.Term memory _term,\\n        LibCollateralStorage.Collateral storage _collateral\\n    ) internal {\\n        require(!LibFundStorage._fundExists(_term.termId), \\\"Fund already exists\\\");\\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\\n\\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\\n        newFund.beneficiariesOrder = _collateral.depositors;\\n        newFund.initialized = true;\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\\n\\n        LibFund._initFund(_term.termId);\\n    }\\n\\n    /// @dev Revert if the term or collateral doesn't exist\\n    /// @dev Revert if registration period is not ended\\n    /// @dev Revert if all spots are filled\\n    /// @dev Revert if the term is already expired\\n    function _expireTerm(uint _termId) internal {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        require(\\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\\n        );\\n\\n        require(\\n            collateral.firstDepositTime != 0 &&\\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\n            \\\"Registration period not ended\\\"\\n        );\\n\\n        require(\\n            collateral.counterMembers < term.totalParticipants,\\n            \\\"All spots are filled, can't expire\\\"\\n        );\\n\\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \\\"Term already expired\\\");\\n\\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\\n\\n        emit OnTermExpired(_termId);\\n    }\\n\\n    /// @notice Create a new yield generator\\n    /// @param _term The term object\\n    /// @param _collateral The collateral object\\n    function _createYieldGenerator(\\n        LibTermStorage.Term memory _term,\\n        LibCollateralStorage.Collateral storage _collateral\\n    ) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_term.termId];\\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        uint amountToYield;\\n\\n        address[] memory depositors = _collateral.depositors;\\n        uint depositorsArrayLength = depositors.length;\\n\\n        for (uint i; i < depositorsArrayLength; ) {\\n            if (yield.hasOptedIn[depositors[i]]) {\\n                yield.yieldUsers.push(depositors[i]);\\n                yield.depositedCollateralByUser[depositors[i]] =\\n                    (_collateral.collateralMembersBank[depositors[i]] * 95) /\\n                    100;\\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (amountToYield > 0) {\\n            yield.startTimeStamp = block.timestamp;\\n            yield.initialized = true;\\n            yield.providerAddresses[\\\"ZaynZap\\\"] = yieldProviders.providerAddresses[\\\"ZaynZap\\\"];\\n            yield.providerAddresses[\\\"ZaynVault\\\"] = yieldProviders.providerAddresses[\\\"ZaynVault\\\"];\\n\\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcce6445cdcf23dc9853d82ea22872061184ebf4392e458d4349c26443dfc45ff\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Takaturn Collateral Interface\\n/// @author Aisha EL Allam\\n/// @notice This is used to allow fund to easily communicate with collateral\\n/// @dev v2.0 (post-deploy)\\n\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface ICollateral {\\n    /// @notice Called from Fund contract when someone defaults\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\n    /// @dev Revert if the caller is not the Diamond proxy\\n    /// @param term Term object\\n    /// @param defaulters Addressess of all defaulters of the current cycle\\n    /// @return expellants array of addresses that were expelled\\n    function requestContribution(\\n        LibTermStorage.Term memory term,\\n        address[] calldata defaulters\\n    ) external returns (address[] memory);\\n\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId term id\\n    function withdrawCollateral(uint termId) external;\\n\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral to a different address than the caller\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @dev Revert if the caller is not a participant\\n    /// @param termId term id\\n    /// @param receiver receiver address\\n    function withdrawCollateralToAnotherAddress(uint termId, address receiver) external;\\n\\n    /// @notice Allows to withdraw all collateral from the at the term's end\\n    /// @dev Does not withdraw anything, just set the state for users to withdraw\\n    /// @dev Revert if the fund is not closed\\n    /// @param termId term id\\n    function releaseCollateral(uint termId) external;\\n\\n    /// @notice allow the owner to empty the Collateral after 180 days\\n    /// @dev Revert if the collateral is not at releasing collateral\\n    /// @dev Revert if the caller is not the term owner\\n    /// @dev Revert if the time is not met\\n    /// @param termId The term id\\n    function emptyCollateralAfterEnd(uint termId) external;\\n}\\n\",\"keccak256\":\"0xa0f23aa069bc6341e9823dfd8ee5f16fd4b9883c7d3a7bf1d9a60dba71f7442f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Takaturn Fund Interface\\n/// @author Mohammed Haddouti\\n/// @notice This is used to allow collateral to easily communicate with fund\\n/// @dev v2.0 (post-deploy)\\n\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\n\\ninterface IFund {\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\n    /// @param termId the id of the term\\n    function startNewCycle(uint termId) external;\\n\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\n    /// @dev Revert if still time to contribute\\n    /// @dev Revert if Fund is not accepting contributions\\n    /// @param termId the id of the term\\n    function closeFundingPeriod(uint termId) external;\\n\\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\n    ///         and prevent the fund to be stuck in limbo\\n    /// @dev Revert if the caller is not the term owner\\n    /// @dev Revert if the time is not met (180 days)\\n    /// @param termId the id of the term\\n    function emptyFundAfterEnd(uint termId) external;\\n\\n    /// @notice function to enable/disable autopay\\n    /// @dev Revert if the user is not a collateral member\\n    /// @dev Revert if the Fund is closed\\n    /// @dev It needs the user to have enough tokens and allow the contract as spender\\n    /// @dev Can be set before the Fund starts\\n    /// @param termId the id of the term\\n    function toggleAutoPay(uint termId) external;\\n\\n    /// @notice This is the function participants call to pay the contribution\\n    /// @param termId the id of the term\\n    function payContribution(uint termId) external;\\n\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\n    /// @param termId the id of the term\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\n\\n    /// @notice Called by the beneficiary to withdraw the fund\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId the id of the term\\n    function withdrawFund(uint termId) external;\\n\\n    /// @notice Called by the beneficiary to withdraw the fund\\n    /// @dev This follows the pull-over-push pattern.\\n    /// @param termId the id of the term\\n    /// @param receiver the address that will receive the fund\\n    function withdrawFundOnAnotherWallet(uint termId, address receiver) external;\\n}\\n\",\"keccak256\":\"0x08fc03a030215f00afa7aa894aed9543b5c32c58412fa74a923e43cd9f7e6e07\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ninterface IGetters {\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    /// @return The addresses of the oracles and yield providers\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    /// @return The current state of the yield lock\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Gets the term object\\n    /// @param termId the term id\\n    /// @return the term object\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the yield object\\n    /// @param termId the collateral id\\n    /// @return if the yield is initialized\\n    /// @return start time stamp for yield deposit\\n    /// @return total deposit\\n    /// @return current amount in yield\\n    /// @return amount of total shares\\n    /// @return list of yield users\\n    /// @return address of vault\\n    /// @return address of zap\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\n    /// @param termId the term id\\n    /// @dev Available positions starts at 0\\n    /// @return availablePositions an array with the available positions\\n    /// @return securityAmount an array with the security amount for each available position\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) external view returns (uint[] memory, uint[] memory);\\n\\n    /// @notice Gets the remaining registration period for a term\\n    /// @dev Revert if nobody have deposited\\n    /// @param termId the term id\\n    /// @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    /// @notice function to get the beneficiary from the current cycle\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets the next beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getNextBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return isParticipant, true if is participant\\n    /// @return isBeneficiary, true if has been beneficiary\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return autoPayEnabled, true if auto pay is enabled\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Gets the user yield summary\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user opted in for yield\\n    /// @return amount withdrawn from yield\\n    /// @return amount withdrawn from collateral\\n    /// @return amount available in yield\\n    /// @return amount deposited by user in yield\\n    /// @return amount of yield distributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Get all the terms a participant was expelled from\\n    /// @param participant the participant address\\n    /// @return an array the term ids on which the participant was expelled\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return paidNextCycle, true if has paid the next cycle\\n    function currentOrNextCyclePaid(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @param termId term id\\n    /// @param depositorIndex the index the depositor wants to join\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @dev Revert if there is problem with chainlink data\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() external view returns (uint);\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @notice Get all the terms a participant is part of\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Get all the terms a participant is part of by a given state\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n}\\n\",\"keccak256\":\"0xfdb9cbdf236afcfae49f3c5fcd9d9caab724c98f6a6972c2f28f9f9183a120e7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITerm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\ninterface ITerm {\\n    /// @notice Create a new term\\n    /// @param totalParticipants The number of participants in the term\\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\\n    /// @param cycleTime The time in seconds that the term will last\\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\\n    /// @param stableTokenAddress The address of the stable token\\n    /// @return termId The id of the new term\\n    function createTerm(\\n        uint totalParticipants,\\n        uint registrationPeriod,\\n        uint cycleTime,\\n        uint contributionAmount,\\n        uint contributionPeriod,\\n        address stableTokenAddress\\n    ) external returns (uint);\\n\\n    /// @notice Join a term at the next available position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    function joinTerm(uint termId, bool optYield) external payable;\\n\\n    /// @notice Join a term at a specific position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param position The position in the term\\n    function joinTerm(uint termId, bool optYield, uint position) external payable;\\n\\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param newParticipant The address of the new participant\\n    function paySecurityOnBehalfOf(\\n        uint termId,\\n        bool optYield,\\n        address newParticipant\\n    ) external payable;\\n\\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\\n    /// @param termId The id of the term\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\n    /// @param newParticipant The address of the new participant\\n    /// @param position The position in the term\\n    function paySecurityOnBehalfOf(\\n        uint termId,\\n        bool optYield,\\n        address newParticipant,\\n        uint position\\n    ) external payable;\\n\\n    /// @notice Start a term\\n    /// @param termId The id of the term\\n    function startTerm(uint termId) external;\\n\\n    /// @notice Expire a term\\n    /// @param termId The id of the term\\n    function expireTerm(uint termId) external;\\n}\\n\",\"keccak256\":\"0x058b4513d6cf56cc07480319a68e5b7ac2c60eeace89932f0a737fa91f509443\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface IYGFacetZaynFi {\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\\n    function claimAvailableYield(uint termId, address receiver) external;\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @dev Revert if the user has not paid the collateral security deposit\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external;\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    /// @return The new value of the yield lock\\n    function toggleYieldLock() external returns (bool);\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc0903ab2854bc79b3c49257347abd913fcd75b8da34bd0ece7da7f0d1146bc1f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    ); // Emits when the state of the collateral changes\\n    event OnReimbursementWithdrawn(\\n        uint indexed termId,\\n        address indexed participant,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a participant withdraws their reimbursement\\n\\n    /// @notice Sets the state of the collateral\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @notice Allow a user to withdraw their reimbursement\\n    /// @dev Reverts if the fund does not exists or if the user has nothing to claim\\n    /// @param _termId term id\\n    /// @param _participant Address of the depositor\\n    /// @param _receiver Address of the receiver\\n    function _withdrawReimbursement(\\n        uint _termId,\\n        address _participant,\\n        address _receiver\\n    ) internal {\\n        require(LibFundStorage._fundExists(_termId), \\\"Fund does not exists\\\");\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_participant];\\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        collateral.collateralPaymentBank[_participant] = 0;\\n\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x46b7c65dcde54c215ab69f9ed0c5207954d498494472a4071650c00b1d3c9879\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime; // Time when the first deposit was made in seconds\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0346bf8df22a8caf2c15afd027d7d3001681e6e169af5f20df4f99e7bd79f23b\",\"license\":\"MIT\"},\"contracts/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibTermStorage} from \\\"./LibTermStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibFund {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\n    event OnFundStateChanged(\\n        uint indexed termId,\\n        uint indexed currentCycle,\\n        LibFundStorage.FundStates indexed newState\\n    ); // Emits when state has updated\\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\\n\\n    /// @notice called by the term to init the fund\\n    /// @param termId the id of the term\\n    function _initFund(uint termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\\n        // Set and track participants\\n        for (uint i; i < participantsArrayLength; ) {\\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Starts the first cycle\\n        _startNewCycle(termId);\\n\\n        // Set timestamp of deployment, which will be used to determine cycle times\\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\\n        fund.fundStart = block.timestamp;\\n        //emit LibFund.OnTermStart(termId);\\n        emit OnTermStart(termId);\\n    }\\n\\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\\n    /// @dev Rever if the fund is not in the right state or if it's too early to start a new cycle\\n    /// @param _termId The id of the term\\n    function _startNewCycle(uint _termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n        // currentCycle is 0 when this is called for the first time\\n        require(\\n            block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart,\\n            \\\"Too early to start new cycle\\\"\\n        );\\n        require(\\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\\n            \\\"Wrong state\\\"\\n        );\\n\\n        ++fund.currentCycle;\\n        uint length = fund.beneficiariesOrder.length;\\n        for (uint i; i < length; ) {\\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = fund.paidNextCycle[\\n                fund.beneficiariesOrder[i]\\n            ];\\n            fund.paidNextCycle[fund.beneficiariesOrder[i]] = false;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\\n\\n        // We attempt to make the autopayers pay their contribution right away\\n        _autoPay(_termId);\\n    }\\n\\n    /// @notice updates the state according to the input and makes sure the state can't be changed if\\n    ///         the fund is closed. Also emits an event that this happened\\n    /// @dev Reverts if the fund is closed\\n    /// @param _termId The id of the term\\n    /// @param _newState The new state of the fund\\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \\\"Fund closed\\\");\\n        fund.currentState = _newState;\\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\\n    }\\n\\n    /// @notice function to attempt to make autopayers pay their contribution\\n    /// @param _termId the id of the term\\n    function _autoPay(uint _termId) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n\\n        // Get the beneficiary for this cycle\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\\n\\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\\n        uint autoPayersArray = autoPayers.length;\\n\\n        for (uint i; i < autoPayersArray; ) {\\n            address autoPayer = autoPayers[i];\\n            // The beneficiary doesn't pay\\n            if (currentBeneficiary == autoPayer) {\\n                /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            if (\\n                fund.autoPayEnabled[autoPayer] &&\\n                !fund.paidThisCycle[autoPayer] &&\\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\\n            ) {\\n                _payContributionSafe(_termId, autoPayer, autoPayer);\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\\n    /// @param _termId the id of the term\\n    /// @param _payer the address that's paying\\n    /// @param _participant the (participant) address that's being paid for\\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\n\\n        // Get the amount and do the actual transfer\\n        // This will only succeed if the sender approved this contract address beforehand\\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\\n            if (success) {\\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\n                fund.paidThisCycle[_participant] = true;\\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\\n            }\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x0f200025c8234fd42124e4866822e83d3d8499cba1ea66388b189cd69ff2f5ef\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7190084bd2a279424a536b51ac7fa2bccda2b2914d8da928a318f3a20dc1e489\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime; // In seconds\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc671ba65f7ac40f73277faaa02649273153214e4a47aa5557b8b63b08270f6da\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    /// @return The amount of yield withdrawn\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n\\n        // Prevent rounding errors\\n        if (neededShares > sharesBalance) {\\n            if (neededShares - sharesBalance < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        } else {\\n            if (sharesBalance - neededShares < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        }\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    /// @return Wei equivalent of the shares\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _totalShares The total shares in the yield from the term\\n    /// @param _totalDeposit The total deposit in the yield from the term\\n    /// @return The amount of shares equivalent to a collateral amount\\n    function _neededShares(\\n        uint _collateralAmount,\\n        uint _totalShares,\\n        uint _totalDeposit\\n    ) internal pure returns (uint) {\\n        if (_totalDeposit == 0) return 0;\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.totalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    /// @notice This function is used to claim the available yield for a user\\n    /// @param _termId The term id for which the yield is being claimed\\n    /// @param _user The user for which the yield is being claimed\\n    /// @param _receiver The receiver of the yield\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x9d4a841116b93a7364e8df07e823ca015897b7d77a65fb9b3fd3d44149bb0156\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp; // In seconds\\n        uint totalDeposit; // In wei\\n        uint currentTotalDeposit; // In wei\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield; // In wei\\n        mapping(address => uint256) withdrawnCollateral; // In wei\\n        mapping(address => uint256) availableYield; // In wei\\n        mapping(address => uint256) depositedCollateralByUser; // In wei\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x303632621c5f7451ec19c0b69f50cb02c559e4e037bc2dce99218ec48a650234\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061275e806100206000396000f3fe6080604052600436106100705760003560e01c8063692d8ba71161004e578063692d8ba7146100bd578063aa31ef32146100d0578063b1705fa214610102578063c31cd44f1461012257600080fd5b80631bef083b146100755780632352a6761461008a578063485fd0761461009d575b600080fd5b6100886100833660046123dc565b610135565b005b61008861009836600461241e565b610145565b3480156100a957600080fd5b506100886100b8366004612466565b610157565b6100886100cb36600461247f565b610163565b3480156100dc57600080fd5b506100f06100eb3660046124af565b610172565b60405190815260200160405180910390f35b34801561010e57600080fd5b5061008861011d366004612466565b61018d565b610088610130366004612504565b610196565b6101408383836101a2565b505050565b61015184848385610461565b50505050565b61016081610a69565b50565b61016e8282336101a2565b5050565b6000610182878787878787610f30565b979650505050505050565b61016081611182565b61014083838333610461565b60008381526000805160206126e98339815191526020908152604080832081516101608101909252805460ff808216151584527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89959484019161010090041660038111156102125761021261253c565b60038111156102235761022361253c565b815281546201000090046001600160a01b039081166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e08301526007830154610100830152600890920154909116610120909101529050600060008051602061270983398151915260008781526020919091526040902090506102c186611353565b6103075760405162461bcd60e51b815260206004820152601260248201527115195c9b48191bd95cdb89dd08195e1a5cdd60721b60448201526064015b60405180910390fd5b60008154610100900460ff1660038111156103245761032461253c565b1461035a5760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b60448201526064016102fe565b8160c0015181600201541061039c5760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064016102fe565b6001600160a01b038416600090815260048201602052604090205460ff16156103f15760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b60448201526064016102fe565b6000805b8360c0015181101561044b5760006001600160a01b031683600301828154811061042157610421612552565b6000918252602090912001546001600160a01b0316036104435780915061044b565b6001016103f5565b5061045887878388610461565b50505050505050565b60008481526000805160206126e98339815191526020908152604080832081516101608101909252805460ff808216151584527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89959484019161010090041660038111156104d1576104d161253c565b60038111156104e2576104e261253c565b815281546201000090046001600160a01b039081166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e08301526007830154610100830152600890920154909116610120909101529050600060008051602061270983398151915260008881526020919091526040812091506000805160206126a983398151915260008981526020919091526040902090506105a088611353565b6105e15760405162461bcd60e51b815260206004820152601260248201527115195c9b48191bd95cdb89dd08195e1a5cdd60721b60448201526064016102fe565b60008254610100900460ff1660038111156105fe576105fe61253c565b146106345760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b60448201526064016102fe565b8260c001518260020154106106765760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064016102fe565b6001600160a01b038516600090815260048301602052604090205460ff16156106cb5760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b60448201526064016102fe565b60018360c001516106dc919061257e565b86111561071e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b60448201526064016102fe565b60006001600160a01b031682600301878154811061073e5761073e612552565b6000918252602090912001546001600160a01b0316146107995760405162461bcd60e51b81526020600482015260166024820152752837b9b4ba34b7b71030b63932b0b23c903a30b5b2b760511b60448201526064016102fe565b604051630c64c69760e01b815260048101899052602481018790526000903090630c64c69790604401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612591565b90508034101561084b5760405162461bcd60e51b8152602060048201526013602482015272457468207061796d656e7420746f6f206c6f7760681b60448201526064016102fe565b6001600160a01b0386166000908152600584016020526040812080543492906108759084906125aa565b90915550506001600160a01b03861660009081526004840160205260409020805460ff19166001179055600383018054879190899081106108b8576108b8612552565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155600284018054916108f1836125bd565b90915550506001600160a01b0386166000908152600784016020526040812080543492906109209084906125aa565b90915550506001600160a01b03861660009081526002860160209081526040822080546001810182559083529120018990557f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff166109a6576001600160a01b03861660009081526007830160205260409020805460ff19168915151790556109c9565b6001600160a01b03861660009081526007830160205260409020805460ff191690555b6040805133815234602082015288916001600160a01b038916918c917f36398dfd64192e9c5e1cfe6f4d2d2a3a484d831e367ddacda4024ce63671929d910160405180910390a48260020154600103610a23574260018401555b8360c00151836002015403610a5e5760405189907fcb9c59095b121bb2ee6f91e996d96e8937149675a0dd11c12b5d08ec2cc7abba90600090a25b505050505050505050565b60008181526000805160206126e98339815191526020908152604080832060008051602061270983398151915283528184206000805160206126a9833981519152845282852060038201805485518188028101880190965280865293969295919492939091830182828015610b0757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae9575b5050505050905060008151905084600301548460010154610b2891906125aa565b4211610b765760405162461bcd60e51b815260206004820152601760248201527f5465726d206e6f7420726561647920746f20737461727400000000000000000060448201526064016102fe565b8460040154846002015414610bcd5760405162461bcd60e51b815260206004820152601860248201527f416c6c2073706f747320617265206e6f742066696c6c6564000000000000000060448201526064016102fe565b60005b81811015610c4957610bff8660020154848381518110610bf257610bf2612552565b6020026020010151611375565b15610c415760405162461bcd60e51b8152602060048201526012602482015271115d1a081c1c9a58d95cc8191c9bdc1c195960721b60448201526064016102fe565b600101610bd0565b50604080516101608101909152855460ff80821615158352610d0c9291889160208401916101009004166003811115610c8457610c8461253c565b6003811115610c9557610c9561253c565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e0830152600783015461010083015260089092015490911661012090910152856114a1565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff16610e595760005b81811015610e5357836007016000848381518110610d5857610d58612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610e4b57604080516101608101909152865460ff80821615158352610e469291899160208401916101009004166003811115610dbe57610dbe61253c565b6003811115610dcf57610dcf61253c565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015286611574565b610e53565b600101610d38565b50610f0c565b60005b81811015610f0a57836007016000848381518110610e7c57610e7c612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610f02576000846007016000858481518110610ec257610ec2612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101610e5c565b505b610f1b856002015460016118b9565b5050825461ff00191661010017909255505050565b60008415801590610f4057508315155b8015610f4b57508215155b8015610f5657508615155b8015610f6157508515155b8015610f6c57508483105b8015610f8057506001600160a01b03821615155b610fbd5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e7075747360901b60448201526064016102fe565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8980546040805161016081018252600060208083018281526080840186905260c084018e905260a084018d905260e084018c90526101008085018c905261012085018b90526001600160a01b038a166101408601523385870152426060860152600185528684526000805160206126e9833981519152909252939091208251815490151560ff198216811783559451939485949293849261ff001990921661ffff1990921691909117908360038111156110995761109961253c565b02179055506040820151815462010000600160b01b031916620100006001600160a01b0392831602178255606083015160018301556080830151600283015560a0830151600383015560c0830151600483015560e083015160058301556101008301516006830155610120830151600783015561014090920151600890910180546001600160a01b031916919092161790558254836000611139836125bd565b9190505550611148828b611956565b604051339083907f3bff48239db8f29891497cd2efd85d201f5723830e7c8cfaef44cc50a4bc024c90600090a35098975050505050505050565b60008181526000805160206126e9833981519152602090815260408083206000805160206127098339815191529092529091206111be83611353565b80156111ce57506111ce836119d6565b6111d757600080fd5b6001810154158015906111fc5750816003015481600101546111f991906125aa565b42115b6112485760405162461bcd60e51b815260206004820152601d60248201527f526567697374726174696f6e20706572696f64206e6f7420656e64656400000060448201526064016102fe565b81600401548160020154106112aa5760405162461bcd60e51b815260206004820152602260248201527f416c6c2073706f7473206172652066696c6c65642c2063616e27742065787069604482015261726560f01b60648201526084016102fe565b60028254610100900460ff1660038111156112c7576112c761253c565b0361130b5760405162461bcd60e51b815260206004820152601460248201527315195c9b48185b1c9958591e48195e1c1a5c995960621b60448201526064016102fe565b815461020061ff001991821681178455825490911617815560405183907f9983062774b9b7f1b9071acd776af98f78c06bf9ad065553a83395178ef6243a90600090a2505050565b60009081526000805160206126e9833981519152602052604090205460ff1690565b6000828152600080516020612709833981519152602090815260408083206001600160a01b03851684526005810190925282205482906113b4866119fc565b6114335760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142791906125d6565b95506114969350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190612591565b91505b109150505b92915050565b6114ae82608001516119fc565b156114f15760405162461bcd60e51b815260206004820152601360248201527246756e6420616c72656164792065786973747360681b60448201526064016102fe565b608082015160009081526000805160206126c98339815191526020526040902061014083015181546001600160a01b03909116620100000262010000600160b01b031990911617815560038201805461154e9160018401916122ff565b508054600180830154601484015561ffff19909116178155608083015161014090611a12565b608082015160009081526000805160206126a98339815191526020908152604080832060038501805483518186028101860190945280845291947ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977949093849390929183018282801561161057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115f2575b505083519394506000925050505b818110156117b25785600701600084838151811061163e5761163e612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156117aa578560060183828151811061168057611680612552565b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b03909216919091179055835160649160058a01918690859081106116d8576116d8612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054605f61170d919061261f565b6117179190612636565b86600b01600085848151811061172f5761172f612552565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555085600b01600084838151811061177357611773612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054846117a791906125aa565b93505b60010161161e565b50821561045857426002860155845460ff1916600117855560405184906117e6906605a61796e5a61760cc1b815260070190565b908152604051908190036020018120546001600160a01b031690600187019061181c906605a61796e5a61760cc1b815260070190565b9081526040805191829003602001822080546001600160a01b039485166001600160a01b03199091161790556816985e5b95985d5b1d60ba1b808352600980840189905291519283900360290183205490835290921691600188019101908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610458876080015184611b0d565b600082815260008051602061270983398151915260205260409020805461010080820460ff16918491849161ff001916908360038111156118fc576118fc61253c565b02179055508260038111156119135761191361253c565b8160038111156119255761192561253c565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b600082815260008051602061270983398151915260205260409020805461ffff191660011781558167ffffffffffffffff81111561199657611996612658565b6040519080825280602002602001820160405280156119bf578160200160208202803683370190505b50805161015191600384019160209091019061234f565b60006000805160206127098339815191525b600092835260205250604090205460ff1690565b60006000805160206126c98339815191526119e8565b60008181526000805160206126c983398151915260205260408120600181015490915b81811015611acd57611a7383600d01846001018381548110611a5957611a59612552565b6000918252602090912001546001600160a01b0316611c67565b506001836005016000856001018481548110611a9157611a91612552565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611a35565b50611ad783611c83565b42600283015560405183907fc3bfb99b88687651f8e660492ae2ee62a50d40e4131ace07f88ed4639b3a4bc390600090a2505050565b60008281526000805160206126a9833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b158015611bd657600080fd5b505af1158015611bea573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f70892506024019050602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612591565b826005018190555050505050565b6000611c7c836001600160a01b038416611ed0565b9392505050565b60008181526000805160206126c9833981519152602090815260408083206000805160206126e9833981519152909252909120600282015460048301546005830154611ccf919061261f565b611cd991906125aa565b4211611d275760405162461bcd60e51b815260206004820152601c60248201527f546f6f206561726c7920746f207374617274206e6577206379636c650000000060448201526064016102fe565b60008254610100900460ff166004811115611d4457611d4461253c565b1480611d6a575060038254610100900460ff166004811115611d6857611d6861253c565b145b611da45760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064016102fe565b8160040160008154611db5906125bd565b90915550600182015460005b81811015611ebb57836016016000856001018381548110611de457611de4612552565b60009182526020808320909101546001600160a01b0316835282019290925260400181205460018601805460ff90921692600788019290919085908110611e2d57611e2d612552565b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091556001850180546016870191839185908110611e7f57611e7f612552565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611dc1565b50611ec7846001611f1f565b61015184611ffe565b6000818152600183016020526040812054611f175750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561149b565b50600061149b565b60008281526000805160206126c9833981519152602052604090208054600490610100900460ff1681811115611f5757611f5761253c565b03611f925760405162461bcd60e51b815260206004820152600b60248201526a119d5b990818db1bdcd95960aa1b60448201526064016102fe565b80548290829061ff001916610100836004811115611fb257611fb261253c565b0217905550816004811115611fc957611fc961253c565b600482015460405185907fe515107ce875160b9ed93bfd1367820d3ffbf412cd63d05140f6bc5535b51de390600090a4505050565b60006000805160206126c983398151915260008381526020919091526040808220905163d8f8e99160e01b815260048101859052909250309063d8f8e99190602401602060405180830381865afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612081919061266e565b90506000826001018054806020026020016040519081016040528092919081815260200182805480156120dd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120bf575b505083519394506000925050505b818110156121c757600083828151811061210757612107612552565b60200260200101519050806001600160a01b0316856001600160a01b03160361213357506001016120eb565b6001600160a01b038116600090815260088701602052604090205460ff16801561217857506001600160a01b038116600090815260078701602052604090205460ff16155b80156121ae575060048601546000908152600c8701602090815260408083206001600160a01b038516845290915290205460ff16155b156121be576121be8782836121cf565b506001016120eb565b505050505050565b60008381526000805160206126c9833981519152602090815260408083206000805160206126e9833981519152909252822060068101549192909161221790620f424061261f565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935062010000909104909116906323b872dd906064016020604051808303816000875af1925050508015612295575060408051601f3d908101601f191682019092526122929181019061268b565b60015b156121c7578015610458576001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b82805482825590600052602060002090810192821561233f5760005260206000209182015b8281111561233f578254825591600101919060010190612324565b5061234b9291506123a4565b5090565b82805482825590600052602060002090810192821561233f579160200282015b8281111561233f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061236f565b5b8082111561234b57600081556001016123a5565b801515811461016057600080fd5b6001600160a01b038116811461016057600080fd5b6000806000606084860312156123f157600080fd5b833592506020840135612403816123b9565b91506040840135612413816123c7565b809150509250925092565b6000806000806080858703121561243457600080fd5b843593506020850135612446816123b9565b92506040850135612456816123c7565b9396929550929360600135925050565b60006020828403121561247857600080fd5b5035919050565b6000806040838503121561249257600080fd5b8235915060208301356124a4816123b9565b809150509250929050565b60008060008060008060c087890312156124c857600080fd5b863595506020870135945060408701359350606087013592506080870135915060a08701356124f6816123c7565b809150509295509295509295565b60008060006060848603121561251957600080fd5b83359250602084013561252b816123b9565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561149b5761149b612568565b6000602082840312156125a357600080fd5b5051919050565b8082018082111561149b5761149b612568565b6000600182016125cf576125cf612568565b5060010190565b600080600080600060a086880312156125ee57600080fd5b85516125f9816123b9565b602087015160408801516060890151608090990151929a91995097965090945092505050565b808202811582820484141761149b5761149b612568565b60008261265357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561268057600080fd5b8151611c7c816123c7565b60006020828403121561269d57600080fd5b8151611c7c816123b956fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212204e6507f8767ec25db14e66b2319a7f67686ee9d38a9fea77a67cc8be2c61478a64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063692d8ba71161004e578063692d8ba7146100bd578063aa31ef32146100d0578063b1705fa214610102578063c31cd44f1461012257600080fd5b80631bef083b146100755780632352a6761461008a578063485fd0761461009d575b600080fd5b6100886100833660046123dc565b610135565b005b61008861009836600461241e565b610145565b3480156100a957600080fd5b506100886100b8366004612466565b610157565b6100886100cb36600461247f565b610163565b3480156100dc57600080fd5b506100f06100eb3660046124af565b610172565b60405190815260200160405180910390f35b34801561010e57600080fd5b5061008861011d366004612466565b61018d565b610088610130366004612504565b610196565b6101408383836101a2565b505050565b61015184848385610461565b50505050565b61016081610a69565b50565b61016e8282336101a2565b5050565b6000610182878787878787610f30565b979650505050505050565b61016081611182565b61014083838333610461565b60008381526000805160206126e98339815191526020908152604080832081516101608101909252805460ff808216151584527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89959484019161010090041660038111156102125761021261253c565b60038111156102235761022361253c565b815281546201000090046001600160a01b039081166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e08301526007830154610100830152600890920154909116610120909101529050600060008051602061270983398151915260008781526020919091526040902090506102c186611353565b6103075760405162461bcd60e51b815260206004820152601260248201527115195c9b48191bd95cdb89dd08195e1a5cdd60721b60448201526064015b60405180910390fd5b60008154610100900460ff1660038111156103245761032461253c565b1461035a5760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b60448201526064016102fe565b8160c0015181600201541061039c5760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064016102fe565b6001600160a01b038416600090815260048201602052604090205460ff16156103f15760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b60448201526064016102fe565b6000805b8360c0015181101561044b5760006001600160a01b031683600301828154811061042157610421612552565b6000918252602090912001546001600160a01b0316036104435780915061044b565b6001016103f5565b5061045887878388610461565b50505050505050565b60008481526000805160206126e98339815191526020908152604080832081516101608101909252805460ff808216151584527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89959484019161010090041660038111156104d1576104d161253c565b60038111156104e2576104e261253c565b815281546201000090046001600160a01b039081166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e08301526007830154610100830152600890920154909116610120909101529050600060008051602061270983398151915260008881526020919091526040812091506000805160206126a983398151915260008981526020919091526040902090506105a088611353565b6105e15760405162461bcd60e51b815260206004820152601260248201527115195c9b48191bd95cdb89dd08195e1a5cdd60721b60448201526064016102fe565b60008254610100900460ff1660038111156105fe576105fe61253c565b146106345760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b60448201526064016102fe565b8260c001518260020154106106765760405162461bcd60e51b81526020600482015260086024820152674e6f20737061636560c01b60448201526064016102fe565b6001600160a01b038516600090815260048301602052604090205460ff16156106cb5760405162461bcd60e51b81526020600482015260076024820152665265656e74727960c81b60448201526064016102fe565b60018360c001516106dc919061257e565b86111561071e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b60448201526064016102fe565b60006001600160a01b031682600301878154811061073e5761073e612552565b6000918252602090912001546001600160a01b0316146107995760405162461bcd60e51b81526020600482015260166024820152752837b9b4ba34b7b71030b63932b0b23c903a30b5b2b760511b60448201526064016102fe565b604051630c64c69760e01b815260048101899052602481018790526000903090630c64c69790604401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612591565b90508034101561084b5760405162461bcd60e51b8152602060048201526013602482015272457468207061796d656e7420746f6f206c6f7760681b60448201526064016102fe565b6001600160a01b0386166000908152600584016020526040812080543492906108759084906125aa565b90915550506001600160a01b03861660009081526004840160205260409020805460ff19166001179055600383018054879190899081106108b8576108b8612552565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155600284018054916108f1836125bd565b90915550506001600160a01b0386166000908152600784016020526040812080543492906109209084906125aa565b90915550506001600160a01b03861660009081526002860160209081526040822080546001810182559083529120018990557f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff166109a6576001600160a01b03861660009081526007830160205260409020805460ff19168915151790556109c9565b6001600160a01b03861660009081526007830160205260409020805460ff191690555b6040805133815234602082015288916001600160a01b038916918c917f36398dfd64192e9c5e1cfe6f4d2d2a3a484d831e367ddacda4024ce63671929d910160405180910390a48260020154600103610a23574260018401555b8360c00151836002015403610a5e5760405189907fcb9c59095b121bb2ee6f91e996d96e8937149675a0dd11c12b5d08ec2cc7abba90600090a25b505050505050505050565b60008181526000805160206126e98339815191526020908152604080832060008051602061270983398151915283528184206000805160206126a9833981519152845282852060038201805485518188028101880190965280865293969295919492939091830182828015610b0757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae9575b5050505050905060008151905084600301548460010154610b2891906125aa565b4211610b765760405162461bcd60e51b815260206004820152601760248201527f5465726d206e6f7420726561647920746f20737461727400000000000000000060448201526064016102fe565b8460040154846002015414610bcd5760405162461bcd60e51b815260206004820152601860248201527f416c6c2073706f747320617265206e6f742066696c6c6564000000000000000060448201526064016102fe565b60005b81811015610c4957610bff8660020154848381518110610bf257610bf2612552565b6020026020010151611375565b15610c415760405162461bcd60e51b8152602060048201526012602482015271115d1a081c1c9a58d95cc8191c9bdc1c195960721b60448201526064016102fe565b600101610bd0565b50604080516101608101909152855460ff80821615158352610d0c9291889160208401916101009004166003811115610c8457610c8461253c565b6003811115610c9557610c9561253c565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e0830152600783015461010083015260089092015490911661012090910152856114a1565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff16610e595760005b81811015610e5357836007016000848381518110610d5857610d58612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610e4b57604080516101608101909152865460ff80821615158352610e469291899160208401916101009004166003811115610dbe57610dbe61253c565b6003811115610dcf57610dcf61253c565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015286611574565b610e53565b600101610d38565b50610f0c565b60005b81811015610f0a57836007016000848381518110610e7c57610e7c612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610f02576000846007016000858481518110610ec257610ec2612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101610e5c565b505b610f1b856002015460016118b9565b5050825461ff00191661010017909255505050565b60008415801590610f4057508315155b8015610f4b57508215155b8015610f5657508615155b8015610f6157508515155b8015610f6c57508483105b8015610f8057506001600160a01b03821615155b610fbd5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e7075747360901b60448201526064016102fe565b7f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8980546040805161016081018252600060208083018281526080840186905260c084018e905260a084018d905260e084018c90526101008085018c905261012085018b90526001600160a01b038a166101408601523385870152426060860152600185528684526000805160206126e9833981519152909252939091208251815490151560ff198216811783559451939485949293849261ff001990921661ffff1990921691909117908360038111156110995761109961253c565b02179055506040820151815462010000600160b01b031916620100006001600160a01b0392831602178255606083015160018301556080830151600283015560a0830151600383015560c0830151600483015560e083015160058301556101008301516006830155610120830151600783015561014090920151600890910180546001600160a01b031916919092161790558254836000611139836125bd565b9190505550611148828b611956565b604051339083907f3bff48239db8f29891497cd2efd85d201f5723830e7c8cfaef44cc50a4bc024c90600090a35098975050505050505050565b60008181526000805160206126e9833981519152602090815260408083206000805160206127098339815191529092529091206111be83611353565b80156111ce57506111ce836119d6565b6111d757600080fd5b6001810154158015906111fc5750816003015481600101546111f991906125aa565b42115b6112485760405162461bcd60e51b815260206004820152601d60248201527f526567697374726174696f6e20706572696f64206e6f7420656e64656400000060448201526064016102fe565b81600401548160020154106112aa5760405162461bcd60e51b815260206004820152602260248201527f416c6c2073706f7473206172652066696c6c65642c2063616e27742065787069604482015261726560f01b60648201526084016102fe565b60028254610100900460ff1660038111156112c7576112c761253c565b0361130b5760405162461bcd60e51b815260206004820152601460248201527315195c9b48185b1c9958591e48195e1c1a5c995960621b60448201526064016102fe565b815461020061ff001991821681178455825490911617815560405183907f9983062774b9b7f1b9071acd776af98f78c06bf9ad065553a83395178ef6243a90600090a2505050565b60009081526000805160206126e9833981519152602052604090205460ff1690565b6000828152600080516020612709833981519152602090815260408083206001600160a01b03851684526005810190925282205482906113b4866119fc565b6114335760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142791906125d6565b95506114969350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190612591565b91505b109150505b92915050565b6114ae82608001516119fc565b156114f15760405162461bcd60e51b815260206004820152601360248201527246756e6420616c72656164792065786973747360681b60448201526064016102fe565b608082015160009081526000805160206126c98339815191526020526040902061014083015181546001600160a01b03909116620100000262010000600160b01b031990911617815560038201805461154e9160018401916122ff565b508054600180830154601484015561ffff19909116178155608083015161014090611a12565b608082015160009081526000805160206126a98339815191526020908152604080832060038501805483518186028101860190945280845291947ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977949093849390929183018282801561161057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115f2575b505083519394506000925050505b818110156117b25785600701600084838151811061163e5761163e612552565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156117aa578560060183828151811061168057611680612552565b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b03909216919091179055835160649160058a01918690859081106116d8576116d8612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054605f61170d919061261f565b6117179190612636565b86600b01600085848151811061172f5761172f612552565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555085600b01600084838151811061177357611773612552565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054846117a791906125aa565b93505b60010161161e565b50821561045857426002860155845460ff1916600117855560405184906117e6906605a61796e5a61760cc1b815260070190565b908152604051908190036020018120546001600160a01b031690600187019061181c906605a61796e5a61760cc1b815260070190565b9081526040805191829003602001822080546001600160a01b039485166001600160a01b03199091161790556816985e5b95985d5b1d60ba1b808352600980840189905291519283900360290183205490835290921691600188019101908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610458876080015184611b0d565b600082815260008051602061270983398151915260205260409020805461010080820460ff16918491849161ff001916908360038111156118fc576118fc61253c565b02179055508260038111156119135761191361253c565b8160038111156119255761192561253c565b60405186907ffe918112a2fca8c18cc609a5d585d9fc8448267cb7b9d6c19a445fe5c0c199c890600090a450505050565b600082815260008051602061270983398151915260205260409020805461ffff191660011781558167ffffffffffffffff81111561199657611996612658565b6040519080825280602002602001820160405280156119bf578160200160208202803683370190505b50805161015191600384019160209091019061234f565b60006000805160206127098339815191525b600092835260205250604090205460ff1690565b60006000805160206126c98339815191526119e8565b60008181526000805160206126c983398151915260205260408120600181015490915b81811015611acd57611a7383600d01846001018381548110611a5957611a59612552565b6000918252602090912001546001600160a01b0316611c67565b506001836005016000856001018481548110611a9157611a91612552565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611a35565b50611ad783611c83565b42600283015560405183907fc3bfb99b88687651f8e660492ae2ee62a50d40e4131ace07f88ed4639b3a4bc390600090a2505050565b60008281526000805160206126a9833981519152602052604090819020600381018390556004810183905581516816985e5b95985d5b1d60ba1b815260018201600982018190529251908190036029018120546605a61796e5a61760cc1b825291926001600160a01b03909216919060070190815260405190819003602001812054632af34be360e11b82526001600160a01b0383811660048401526024830187905216906355e697c69085906044016000604051808303818588803b158015611bd657600080fd5b505af1158015611bea573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018890526001600160a01b0385169350639cc7f70892506024019050602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612591565b826005018190555050505050565b6000611c7c836001600160a01b038416611ed0565b9392505050565b60008181526000805160206126c9833981519152602090815260408083206000805160206126e9833981519152909252909120600282015460048301546005830154611ccf919061261f565b611cd991906125aa565b4211611d275760405162461bcd60e51b815260206004820152601c60248201527f546f6f206561726c7920746f207374617274206e6577206379636c650000000060448201526064016102fe565b60008254610100900460ff166004811115611d4457611d4461253c565b1480611d6a575060038254610100900460ff166004811115611d6857611d6861253c565b145b611da45760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720737461746560a81b60448201526064016102fe565b8160040160008154611db5906125bd565b90915550600182015460005b81811015611ebb57836016016000856001018381548110611de457611de4612552565b60009182526020808320909101546001600160a01b0316835282019290925260400181205460018601805460ff90921692600788019290919085908110611e2d57611e2d612552565b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091556001850180546016870191839185908110611e7f57611e7f612552565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611dc1565b50611ec7846001611f1f565b61015184611ffe565b6000818152600183016020526040812054611f175750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561149b565b50600061149b565b60008281526000805160206126c9833981519152602052604090208054600490610100900460ff1681811115611f5757611f5761253c565b03611f925760405162461bcd60e51b815260206004820152600b60248201526a119d5b990818db1bdcd95960aa1b60448201526064016102fe565b80548290829061ff001916610100836004811115611fb257611fb261253c565b0217905550816004811115611fc957611fc961253c565b600482015460405185907fe515107ce875160b9ed93bfd1367820d3ffbf412cd63d05140f6bc5535b51de390600090a4505050565b60006000805160206126c983398151915260008381526020919091526040808220905163d8f8e99160e01b815260048101859052909250309063d8f8e99190602401602060405180830381865afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612081919061266e565b90506000826001018054806020026020016040519081016040528092919081815260200182805480156120dd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120bf575b505083519394506000925050505b818110156121c757600083828151811061210757612107612552565b60200260200101519050806001600160a01b0316856001600160a01b03160361213357506001016120eb565b6001600160a01b038116600090815260088701602052604090205460ff16801561217857506001600160a01b038116600090815260078701602052604090205460ff16155b80156121ae575060048601546000908152600c8701602090815260408083206001600160a01b038516845290915290205460ff16155b156121be576121be8782836121cf565b506001016120eb565b505050505050565b60008381526000805160206126c9833981519152602090815260408083206000805160206126e9833981519152909252822060068101549192909161221790620f424061261f565b83546040516323b872dd60e01b81526001600160a01b0388811660048301523060248301526044820184905292935062010000909104909116906323b872dd906064016020604051808303816000875af1925050508015612295575060408051601f3d908101601f191682019092526122929181019061268b565b60015b156121c7578015610458576001600160a01b0385166000818152600786016020526040808220805460ff19166001179055600487015490519092918a917fe1122b3cea22012386ebf236fc23dd8a783b91c046d5dec812901846464624ae9190a450505050505050565b82805482825590600052602060002090810192821561233f5760005260206000209182015b8281111561233f578254825591600101919060010190612324565b5061234b9291506123a4565b5090565b82805482825590600052602060002090810192821561233f579160200282015b8281111561233f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061236f565b5b8082111561234b57600081556001016123a5565b801515811461016057600080fd5b6001600160a01b038116811461016057600080fd5b6000806000606084860312156123f157600080fd5b833592506020840135612403816123b9565b91506040840135612413816123c7565b809150509250925092565b6000806000806080858703121561243457600080fd5b843593506020850135612446816123b9565b92506040850135612456816123c7565b9396929550929360600135925050565b60006020828403121561247857600080fd5b5035919050565b6000806040838503121561249257600080fd5b8235915060208301356124a4816123b9565b809150509250929050565b60008060008060008060c087890312156124c857600080fd5b863595506020870135945060408701359350606087013592506080870135915060a08701356124f6816123c7565b809150509295509295509295565b60008060006060848603121561251957600080fd5b83359250602084013561252b816123b9565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561149b5761149b612568565b6000602082840312156125a357600080fd5b5051919050565b8082018082111561149b5761149b612568565b6000600182016125cf576125cf612568565b5060010190565b600080600080600060a086880312156125ee57600080fd5b85516125f9816123b9565b602087015160408801516060890151608090990151929a91995097965090945092505050565b808202811582820484141761149b5761149b612568565b60008261265357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561268057600080fd5b8151611c7c816123c7565b60006020828403121561269d57600080fd5b8151611c7c816123b956fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e562888a26469706673582212204e6507f8767ec25db14e66b2319a7f67686ee9d38a9fea77a67cc8be2c61478a64736f6c63430008120033",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "createTerm(uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "contributionAmount": "The amount of stable token that each participant will have to contribute",
          "contributionPeriod": "The time in seconds that the participants will have to contribute",
          "cycleTime": "The time in seconds that the term will last",
          "registrationPeriod": "The time in seconds that the term will be open for registration",
          "stableTokenAddress": "The address of the stable token",
          "totalParticipants": "The number of participants in the term"
        },
        "returns": {
          "_0": "termId The id of the new term"
        }
      },
      "expireTerm(uint256)": {
        "params": {
          "termId": "The id of the term"
        }
      },
      "joinTerm(uint256,bool)": {
        "params": {
          "optYield": "Whether the participant wants to opt in for yield generation",
          "termId": "The id of the term"
        }
      },
      "joinTerm(uint256,bool,uint256)": {
        "params": {
          "optYield": "Whether the participant wants to opt in for yield generation",
          "position": "The position in the term",
          "termId": "The id of the term"
        }
      },
      "paySecurityOnBehalfOf(uint256,bool,address)": {
        "params": {
          "newParticipant": "The address of the new participant",
          "optYield": "Whether the participant wants to opt in for yield generation",
          "termId": "The id of the term"
        }
      },
      "paySecurityOnBehalfOf(uint256,bool,address,uint256)": {
        "params": {
          "newParticipant": "The address of the new participant",
          "optYield": "Whether the participant wants to opt in for yield generation",
          "position": "The position in the term",
          "termId": "The id of the term"
        }
      },
      "startTerm(uint256)": {
        "params": {
          "termId": "The id of the term"
        }
      }
    },
    "title": "Takaturn Term Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTerm(uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "Create a new term"
      },
      "expireTerm(uint256)": {
        "notice": "Expire a term"
      },
      "joinTerm(uint256,bool)": {
        "notice": "Join a term at the next available position"
      },
      "joinTerm(uint256,bool,uint256)": {
        "notice": "Join a term at a specific position"
      },
      "paySecurityOnBehalfOf(uint256,bool,address)": {
        "notice": "Pay security deposit on behalf of someone else, at the next available position"
      },
      "paySecurityOnBehalfOf(uint256,bool,address,uint256)": {
        "notice": "Pay security deposit on behalf of someone else, at a specific position"
      },
      "startTerm(uint256)": {
        "notice": "Start a term"
      }
    },
    "notice": "This is used to create terms",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}