{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"./libraries/LibTermStorage.sol\";\nimport {LibYieldGenerationStorage} from \"./libraries/LibYieldGenerationStorage.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\n\ncontract DiamondInit {\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    /// @notice Initialize the contract\n    /// @param _aggregatorAddressEthUsd Chainlink aggregator address for ETH/USD\n    /// @param _aggregatorAddressUsdUsdc Chainlink aggregator address for USDC/USD\n    /// @param _zapAddress Zaynfi Zap address\n    /// @param _vaultAddress Zaynfi Vault address\n    /// @param _yieldLock Yield lock\n    function init(\n        address _aggregatorAddressEthUsd,\n        address _aggregatorAddressUsdUsdc,\n        address _zapAddress,\n        address _vaultAddress,\n        bool _yieldLock\n    ) external onlyOwner {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        termConsts.aggregatorsAddresses[\"ETH/USD\"] = _aggregatorAddressEthUsd;\n        termConsts.aggregatorsAddresses[\"USDC/USD\"] = _aggregatorAddressUsdUsdc;\n\n        yieldProvider.providerAddresses[\"ZaynZap\"] = _zapAddress;\n        yieldProvider.providerAddresses[\"ZaynVault\"] = _vaultAddress;\n\n        LibYieldGenerationStorage._yieldLock().yieldLock = _yieldLock;\n    }\n}\n"
    },
    "contracts/facets/CollateralFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\n\n/// @title Takaturn Collateral Facet\n/// @author Aisha El Allam\n/// @notice This is used to operate the Takaturn collateral\n/// @dev v3.0 (Diamond)\ncontract CollateralFacet is ICollateral {\n    event OnCollateralStateChanged(\n        uint indexed termId,\n        LibCollateralStorage.CollateralStates indexed oldState,\n        LibCollateralStorage.CollateralStates indexed newState\n    ); // Emits when the state of the collateral changes\n    event OnCollateralWithdrawal(\n        uint indexed termId,\n        address indexed user,\n        address receiver,\n        uint indexed collateralAmount\n    ); // Emits when a user withdraws their collateral\n    event OnReimbursementWithdrawn(\n        uint indexed termId,\n        address indexed participant,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a user withdraws their reimbursement\n    event OnCollateralLiquidated(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user's collateral is liquidated due to default\n    event OnFrozenMoneyPotLiquidated(\n        uint indexed termId,\n        address indexed user,\n        uint indexed amount\n    ); // Emits when a user's frozen money pot is liquidated due to a default\n    event OnYieldClaimed(\n        uint indexed termId,\n        address indexed user,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a user claims their yield\n\n    // Function cannot be called at this time.\n    error FunctionInvalidAtThisState();\n\n    /// @param termId term id\n    /// @param _state collateral state\n    modifier atState(uint termId, LibCollateralStorage.CollateralStates _state) {\n        _atState(termId, _state);\n        _;\n    }\n\n    /// @param termId term id\n    modifier onlyTermOwner(uint termId) {\n        LibTermOwnership._ensureTermOwner(termId);\n        _;\n    }\n\n    /// @notice Called from Fund facet when someone defaults\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\n    /// @dev Revert if the caller is not the Diamond proxy\n    /// @param term Term object\n    /// @param defaulters Addressess of all defaulters of the current cycle\n    /// @return expellants array of addresses that were expelled\n    function requestContribution(\n        LibTermStorage.Term memory term,\n        address[] calldata defaulters\n    )\n        external\n        atState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing)\n        returns (address[] memory)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[term.termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[term.termId];\n        require(msg.sender == address(this));\n\n        (uint collateralToDistribute, address[] memory expellants) = _solveDefaulters(\n            collateral,\n            term,\n            fund,\n            defaulters\n        );\n\n        (uint nonBeneficiaryCounter, address[] memory nonBeneficiaries) = _findNonBeneficiaries(\n            collateral,\n            fund\n        );\n\n        if (nonBeneficiaryCounter > 0) {\n            // This case can only happen when what?\n            // Exempt non beneficiaries from paying an early expellant's cycle\n            uint expellantsLength = expellants.length;\n            for (uint i; i < expellantsLength; ) {\n                _exemptNonBeneficiariesFromPaying(\n                    fund,\n                    expellants[i],\n                    nonBeneficiaryCounter,\n                    nonBeneficiaries\n                );\n\n                /// @custom:unchecked-block without risk, i can't be higher than expellants length\n                unchecked {\n                    ++i;\n                }\n            }\n\n            // Finally, divide the share equally among non-beneficiaries\n            collateralToDistribute = collateralToDistribute / nonBeneficiaryCounter;\n            for (uint i; i < nonBeneficiaryCounter; ) {\n                collateral.collateralPaymentBank[nonBeneficiaries[i]] += collateralToDistribute;\n\n                /// @custom:unchecked-block without risk, i can't be higher than nonBeneficiariesCounter\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n        return (expellants);\n    }\n\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId term id\n    function withdrawCollateral(uint termId) external {\n        _withdrawCollateral(termId, msg.sender);\n    }\n\n    /// @notice Called by each member after during or at the end of the term to withraw collateral to a different address than the caller\n    /// @dev This follows the pull-over-push pattern.\n    /// @dev Revert if the caller is not a participant\n    /// @param termId term id\n    /// @param receiver receiver address\n    function withdrawCollateralToAnotherAddress(uint termId, address receiver) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        address[] memory participants = fund.beneficiariesOrder;\n        uint participantsLength = participants.length;\n        bool canCall;\n\n        for (uint i; i < participantsLength; ) {\n            if (participants[i] == msg.sender) {\n                canCall = true;\n                break;\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        require(canCall, \"TT-CF-01\");\n\n        _withdrawCollateral(termId, receiver);\n    }\n\n    /// @notice Allows to withdraw all collateral from the at the term's end\n    /// @dev Does not withdraw anything, just set the state for users to withdraw\n    /// @dev Only succeeds when fund is closed or term is expired\n    /// @param termId term id\n    function releaseCollateral(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(fund.currentState == LibFundStorage.FundStates.FundClosed, \"TT-CF-02\");\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral);\n    }\n\n    /// @notice allow the owner to empty the Collateral after 180 days\n    /// @dev Revert if the collateral is not at releasing collateral\n    /// @dev Revert if the caller is not the term owner\n    /// @dev Revert if the time is not met\n    /// @param termId The term id\n    function emptyCollateralAfterEnd(\n        uint termId\n    )\n        external\n        onlyTermOwner(termId)\n        atState(termId, LibCollateralStorage.CollateralStates.ReleasingCollateral)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        (, , , , , uint fundEnd, , ) = IGetters(address(this)).getFundSummary(termId);\n        require(block.timestamp > fundEnd + 180 days, \"TT-CF-03\");\n\n        uint totalToWithdraw;\n        uint depositorsLength = collateral.depositors.length;\n        for (uint i; i < depositorsLength; ) {\n            address depositor = collateral.depositors[i];\n            uint amount = collateral.collateralMembersBank[depositor];\n            uint paymentAmount = collateral.collateralPaymentBank[depositor];\n\n            collateral.collateralMembersBank[depositor] = 0;\n            collateral.collateralPaymentBank[depositor] = 0;\n            uint withdrawnYield = _withdrawFromYield(termId, depositor, amount, yield);\n\n            totalToWithdraw += (amount + paymentAmount + withdrawnYield);\n\n            /// @custom:unchecked-block without risks. i can't be higher than depositors length\n            unchecked {\n                ++i;\n            }\n        }\n        LibCollateral._setState(termId, LibCollateralStorage.CollateralStates.Closed);\n\n        (bool success, ) = payable(msg.sender).call{value: totalToWithdraw}(\"\");\n        require(success);\n    }\n\n    /// @param _collateral Collateral object\n    /// @param _term Term object\n    /// @param _fund Fund object\n    /// @param _defaulters Defaulters array\n    /// @return share The total amount of collateral to be divided among non-beneficiaries\n    /// @return expellants array of addresses that were expelled\n    function _solveDefaulters(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibTermStorage.Term memory _term,\n        LibFundStorage.Fund storage _fund,\n        address[] memory _defaulters\n    ) internal returns (uint, address[] memory) {\n        address[] memory expellants = new address[](_defaulters.length);\n        uint expellantsCounter;\n        uint distributedCollateral;\n\n        uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\n            _term.contributionAmount * 10 ** 18\n        );\n\n        // Determine who will be expelled and who will just pay the contribution from their collateral.\n        for (uint i; i < _defaulters.length; ) {\n            LibCollateralStorage.DefaulterState memory defaulterState;\n            defaulterState.isBeneficiary = _fund.isBeneficiary[_defaulters[i]];\n            uint collateralAmount = _collateral.collateralMembersBank[_defaulters[i]];\n            if (defaulterState.isBeneficiary) {\n                // Has the user been beneficiary?\n                if (LibCollateral._isUnderCollaterized(_term.termId, _defaulters[i])) {\n                    // Is the collateral below 1.0 X RCC?\n                    if (_fund.beneficiariesFrozenPool[_defaulters[i]]) {\n                        // Is the pool currently frozen?\n                        if (collateralAmount >= contributionAmountWei) {\n                            // Does the user's collateral cover a cycle?\n                            defaulterState.payWithCollateral = true; // Pay with collateral\n                            defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                            defaulterState.gettingExpelled = false; // Not expelled\n                        } else {\n                            // We don't have to check exact amounts because the pool would always be deducted by consistent amounts\n                            if (_fund.beneficiariesPool[_defaulters[i]] > 0) {\n                                // Does the frozen stable token portion of the pool contain anything?\n                                defaulterState.payWithCollateral = false; // Do not pay with collateral\n                                defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                defaulterState.gettingExpelled = false; // Not expelled\n                            } else {\n                                // Is whatever is left from the collateral + received collateral portion of money pool below 1.0 X RCC?\n                                if (\n                                    collateralAmount +\n                                        _collateral.collateralPaymentBank[_defaulters[i]] >=\n                                    IGetters(address(this)).getRemainingCyclesContributionWei(\n                                        _term.termId\n                                    )\n                                ) {\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                    defaulterState.gettingExpelled = false; // Not expelled\n                                } else {\n                                    defaulterState.payWithCollateral = true; // Pay with collateral\n                                    defaulterState.payWithFrozenPool = true; // Pay with frozen pool\n                                    defaulterState.gettingExpelled = true; // Expelled\n                                }\n                            }\n                        }\n                    } else {\n                        defaulterState.payWithCollateral = true; // Pay with collateral\n                        defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                        defaulterState.gettingExpelled = true; // Expelled\n                    }\n                } else {\n                    defaulterState.payWithCollateral = true; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = false; // Not expelled\n                }\n            } else {\n                if (collateralAmount >= contributionAmountWei) {\n                    defaulterState.payWithCollateral = true; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = false; // Not expelled\n                } else {\n                    defaulterState.payWithCollateral = false; // Pay with collateral\n                    defaulterState.payWithFrozenPool = false; // Does not pay with frozen pool\n                    defaulterState.gettingExpelled = true; // Expelled\n                }\n            }\n\n            distributedCollateral += _payDefaulterContribution(\n                _collateral,\n                _fund,\n                _term,\n                _defaulters[i],\n                contributionAmountWei,\n                defaulterState\n            );\n\n            if (defaulterState.gettingExpelled) {\n                expellants[expellantsCounter] = _defaulters[i];\n                _fund.cycleOfExpulsion[expellants[expellantsCounter]] = _fund.currentCycle;\n\n                /// @custom:unchecked-block without risks, expellantsCounter can't be higher than _defaulters length from input\n                unchecked {\n                    ++expellantsCounter;\n                }\n            }\n\n            /// @custom:unchecked-block without risks, i can't be higher than _defaulters length from input\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (distributedCollateral, expellants);\n    }\n\n    /// @notice Called to exempt users from needing to pay\n    /// @param _fund Fund object\n    /// @param _expellant The expellant in question\n    /// @param _nonBeneficiaryCounter The number of non-beneficiaries\n    /// @param _nonBeneficiaries All non-beneficiaries at this time\n    function _exemptNonBeneficiariesFromPaying(\n        LibFundStorage.Fund storage _fund,\n        address _expellant,\n        uint _nonBeneficiaryCounter,\n        address[] memory _nonBeneficiaries\n    ) internal {\n        if (!_fund.isBeneficiary[_expellant]) {\n            uint expellantBeneficiaryCycle;\n\n            uint beneficiariesLength = _fund.beneficiariesOrder.length;\n            for (uint i; i < beneficiariesLength; ) {\n                if (_expellant == _fund.beneficiariesOrder[i]) {\n                    expellantBeneficiaryCycle = i + 1;\n                    break;\n                }\n                /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n                unchecked {\n                    ++i;\n                }\n            }\n\n            for (uint i; i < _nonBeneficiaryCounter; ) {\n                _fund.isExemptedOnCycle[expellantBeneficiaryCycle].exempted[\n                    _nonBeneficiaries[i]\n                ] = true;\n\n                /// @custom:unchecked-block without risk, i can't be higher than nonBeneficiariesCounter from input\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    /// @dev This follows the pull-over-push pattern.\n    /// @dev Revert if the caller has nothing to withdraw\n    /// @param _termId term id\n    /// @param _receiver receiver address\n    function _withdrawCollateral(uint _termId, address _receiver) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        LibTermStorage.Term memory term = LibTermStorage._termStorage().terms[_termId];\n\n        uint allowedWithdrawal = IGetters(address(this)).getWithdrawableUserBalance(\n            _termId,\n            msg.sender\n        );\n        require(allowedWithdrawal > 0, \"TT-CF-04\");\n\n        bool success;\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\n\n        // Withdraw all the user has\n        if (\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\n            expelledBeforeBeneficiary\n        ) {\n            // First case: The collateral is released or the user was expelled before being a beneficiary\n            collateral.collateralMembersBank[msg.sender] = 0;\n\n            // Yield generation has not started during the join period, so we can skip this step if the term expired\n            if (term.state != LibTermStorage.TermStates.ExpiredTerm) {\n                _withdrawFromYield(_termId, msg.sender, allowedWithdrawal, yield);\n            }\n\n            if (collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral) {\n                --collateral.counterMembers;\n            }\n\n            (success, ) = payable(_receiver).call{value: allowedWithdrawal}(\"\");\n\n            emit OnCollateralWithdrawal(_termId, msg.sender, _receiver, allowedWithdrawal);\n        }\n        // Or withdraw partially\n        else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\n            // Second case: The term is on an ongoing cycle, the user has not been expelled\n            // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\n            collateral.collateralMembersBank[msg.sender] -= allowedWithdrawal;\n\n            _withdrawFromYield(_termId, msg.sender, allowedWithdrawal, yield);\n\n            (success, ) = payable(_receiver).call{value: allowedWithdrawal}(\"\");\n\n            emit OnCollateralWithdrawal(_termId, msg.sender, _receiver, allowedWithdrawal);\n        }\n\n        require(success, \"TT-CF-05\");\n        if (yield.hasOptedIn[msg.sender] && yield.availableYield[msg.sender] > 0) {\n            LibYieldGeneration._claimAvailableYield(_termId, msg.sender, _receiver);\n        }\n    }\n\n    /// @notice called internally to pay defaulter contribution\n    /// @param _collateral Collateral object\n    /// @param _fund Fund object\n    /// @param _term Term object\n    /// @param _defaulter The defaulter in question\n    /// @param _contributionAmountWei The contribution amount converted from USDC to wei\n    /// @param _defaulterState Defaulter state object\n    /// @return distributedCollateral The total amount of collateral to be divided among non-beneficiaries\n    function _payDefaulterContribution(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term memory _term,\n        address _defaulter,\n        uint _contributionAmountWei,\n        LibCollateralStorage.DefaulterState memory _defaulterState\n    ) internal returns (uint distributedCollateral) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_term.termId];\n\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\n        if (_defaulterState.payWithCollateral && !_defaulterState.payWithFrozenPool) {\n            if (_defaulterState.gettingExpelled) {\n                if (_defaulterState.isBeneficiary) {\n                    uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\n                    _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\n\n                    distributedCollateral += remainingCollateral; // This will be distributed later\n                    _collateral.collateralMembersBank[_defaulter] = 0;\n                    emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\n                }\n\n                // Expelled\n                _collateral.isCollateralMember[_defaulter] = false;\n            } else {\n                _withdrawFromYield(_term.termId, _defaulter, _contributionAmountWei, yield);\n\n                // Subtract contribution from defaulter and add to beneficiary.\n                _collateral.collateralMembersBank[_defaulter] -= _contributionAmountWei;\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\n\n                emit OnCollateralLiquidated(_term.termId, _defaulter, _contributionAmountWei);\n            }\n        }\n        if (_defaulterState.payWithFrozenPool && !_defaulterState.payWithCollateral) {\n            _fund.beneficiariesPool[_defaulter] -= _term.contributionAmount * 10 ** 6;\n            _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * 10 ** 6;\n\n            emit OnFrozenMoneyPotLiquidated(_term.termId, _defaulter, _term.contributionAmount);\n        }\n        if (_defaulterState.payWithCollateral && _defaulterState.payWithFrozenPool) {\n            uint remainingCollateral = _collateral.collateralMembersBank[_defaulter];\n            uint remainingCollateralFromPayments = _collateral.collateralPaymentBank[_defaulter];\n            uint contributionAmountWei = IGetters(address(this)).getToCollateralConversionRate(\n                _term.contributionAmount * 10 ** 18\n            );\n\n            if (remainingCollateral > 0) {\n                _withdrawFromYield(_term.termId, _defaulter, remainingCollateral, yield);\n\n                emit OnCollateralLiquidated(_term.termId, _defaulter, remainingCollateral);\n            }\n            if (_defaulterState.gettingExpelled) {\n                distributedCollateral += (remainingCollateral + remainingCollateralFromPayments);\n                _collateral.collateralMembersBank[_defaulter] = 0;\n                _collateral.collateralPaymentBank[_defaulter] = 0;\n                emit OnFrozenMoneyPotLiquidated(\n                    _term.termId,\n                    _defaulter,\n                    remainingCollateralFromPayments\n                );\n            } else {\n                // Remaining collateral is always less than contribution amount if/when we reach this\n                if (remainingCollateral > 0) {\n                    // Remove any last remaining collateral\n                    uint toDeductFromPayments = contributionAmountWei - remainingCollateral;\n                    _collateral.collateralMembersBank[_defaulter] = 0;\n                    _collateral.collateralPaymentBank[_defaulter] -= toDeductFromPayments;\n                    emit OnFrozenMoneyPotLiquidated(\n                        _term.termId,\n                        _defaulter,\n                        remainingCollateralFromPayments\n                    );\n                } else {\n                    _collateral.collateralPaymentBank[_defaulter] -= contributionAmountWei;\n                    emit OnFrozenMoneyPotLiquidated(\n                        _term.termId,\n                        _defaulter,\n                        contributionAmountWei\n                    );\n                }\n\n                _collateral.collateralPaymentBank[beneficiary] += _contributionAmountWei;\n            }\n        }\n    }\n\n    /// @param _termId term id\n    /// @param _user user address\n    /// @param _amount amount to withdraw from yield\n    /// @param _yieldStorage YieldGeneration object\n    /// @return withdrawnYield The total amount of yield withdrawn\n    function _withdrawFromYield(\n        uint _termId,\n        address _user,\n        uint _amount,\n        LibYieldGenerationStorage.YieldGeneration storage _yieldStorage\n    ) internal returns (uint withdrawnYield) {\n        if (_yieldStorage.hasOptedIn[_user]) {\n            uint availableWithdraw = _yieldStorage.depositedCollateralByUser[_user] -\n                _yieldStorage.withdrawnCollateral[_user];\n            if (availableWithdraw == 0) {\n                withdrawnYield = 0;\n            } else {\n                if (availableWithdraw > _amount) {\n                    availableWithdraw = _amount;\n                }\n                withdrawnYield = LibYieldGeneration._withdrawYG(_termId, availableWithdraw, _user);\n            }\n        } else {\n            withdrawnYield = 0;\n        }\n    }\n\n    /// @notice Used on modifier\n    /// @param _termId term Id\n    /// @param _state Collateral state\n    /// @dev revert if the state is invalid\n    function _atState(uint _termId, LibCollateralStorage.CollateralStates _state) internal view {\n        LibCollateralStorage.CollateralStates state = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId]\n            .state;\n        if (state != _state) revert FunctionInvalidAtThisState();\n    }\n\n    /// @param _collateral Collateral object\n    /// @param _fund Fund object\n    /// @return nonBeneficiaryCounter The total amount of collateral to be divided among non-beneficiaries\n    /// @return nonBeneficiaries array of addresses that were expelled\n    function _findNonBeneficiaries(\n        LibCollateralStorage.Collateral storage _collateral,\n        LibFundStorage.Fund storage _fund\n    ) internal view returns (uint, address[] memory) {\n        address currentDepositor;\n        address[] memory nonBeneficiaries = new address[](_collateral.depositors.length);\n        uint nonBeneficiaryCounter;\n\n        // Check beneficiaries\n        uint depositorsLength = _collateral.depositors.length;\n        for (uint i; i < depositorsLength; ) {\n            currentDepositor = _collateral.depositors[i];\n            if (\n                !_fund.isBeneficiary[currentDepositor] &&\n                _collateral.isCollateralMember[currentDepositor]\n            ) {\n                nonBeneficiaries[nonBeneficiaryCounter] = currentDepositor;\n                nonBeneficiaryCounter++;\n            }\n\n            /// @custom:unchecked-block without risks, i can't be higher than depositors length\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (nonBeneficiaryCounter, nonBeneficiaries);\n    }\n}\n"
    },
    "contracts/facets/FundFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IFund} from \"../interfaces/IFund.sol\";\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibTermOwnership} from \"../libraries/LibTermOwnership.sol\";\nimport {LibFund} from \"../libraries/LibFund.sol\";\n\n/// @title Takaturn Fund Facet\n/// @author Mohammed Haddouti\n/// @notice This is used to operate the Takaturn fund\n/// @dev v3.0 (Diamond)\ncontract FundFacet is IFund {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OnFundStateChanged(\n        uint indexed termId,\n        uint indexed currentCycle,\n        LibFundStorage.FundStates indexed newState\n    ); // Emits when state has updated\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\n    event OnBeneficiaryAwarded(uint indexed termId, address indexed beneficiary); // Emits when beneficiary is selected for this cycle\n    event OnFundWithdrawn(\n        uint indexed termId,\n        address indexed participant,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a chosen beneficiary claims their fund\n    event OnParticipantDefaulted(\n        uint indexed termId,\n        uint indexed currentCycle,\n        address indexed defaulter\n    ); // Emits when a participant didn't pay this cycle's contribution\n    event OnDefaulterExpelled(\n        uint indexed termId,\n        uint indexed currentCycle,\n        address indexed expellant\n    ); // Emits when a defaulter can't compensate with the collateral\n    event OnAutoPayToggled(uint indexed termId, address indexed participant, bool indexed enabled); // Emits when a participant succesfully toggles autopay\n\n    /// @param termId term Id\n    modifier onlyTermOwner(uint termId) {\n        LibTermOwnership._ensureTermOwner(termId);\n        _;\n    }\n\n    /// @dev Insufficient balance for transfer. Needed `required` but only `available` available.\n    /// @param available balance available.\n    /// @param required requested amount to transfer.\n    error InsufficientBalance(uint available, uint required);\n\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\n    /// @param termId the id of the term\n    function startNewCycle(uint termId) external {\n        LibFund._startNewCycle(termId);\n    }\n\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\n    /// @dev Revert if there is still time to contribute\n    /// @dev Revert if Fund is not accepting contributions\n    /// @param termId the id of the term\n    function closeFundingPeriod(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        // Current cycle minus 1 because we use the previous cycle time as start point then  add contribution period\n        require(\n            block.timestamp >\n                term.cycleTime * (fund.currentCycle - 1) + fund.fundStart + term.contributionPeriod,\n            \"TT-FF-01\"\n        );\n        require(fund.currentState == LibFundStorage.FundStates.AcceptingContributions, \"TT-FF-02\");\n\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(termId);\n\n        // We attempt to make the autopayers pay their contribution right away\n        LibFund._autoPay(termId);\n\n        // Only then award the beneficiary\n        LibFund._setState(termId, LibFundStorage.FundStates.AwardingBeneficiary);\n\n        // We must check who hasn't paid and default them, check all participants based on beneficiariesOrder\n        address[] memory participants = fund.beneficiariesOrder;\n\n        uint participantsLength = participants.length;\n        uint currentCycle = fund.currentCycle;\n        for (uint i; i < participantsLength; ) {\n            address p = participants[i];\n\n            // The current beneficiary or someone who is exempt doesn't pay neither gets defaulted\n            if (p == currentBeneficiary || fund.isExemptedOnCycle[currentCycle].exempted[p]) {\n                if (EnumerableSet.contains(fund._defaulters, p)) {\n                    EnumerableSet.remove(fund._defaulters, p);\n                    if (p == currentBeneficiary) {\n                        EnumerableSet.add(fund._beneficiaries, p);\n                    } else {\n                        EnumerableSet.add(fund._participants, p);\n                    }\n                }\n\n                /// @custom:unchecked-block without risks, i can't be higher than beneficiariesOrder length\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            if (fund.paidThisCycle[p]) {\n                // check where to restore the defaulter to, participants or beneficiaries\n                if (fund.isBeneficiary[p]) {\n                    EnumerableSet.add(fund._beneficiaries, p);\n                } else {\n                    EnumerableSet.add(fund._participants, p);\n                }\n\n                EnumerableSet.remove(fund._defaulters, p);\n            } else if (\n                !EnumerableSet.contains(fund._defaulters, p) &&\n                !IGetters(address(this)).wasExpelled(termId, p)\n            ) {\n                // And we make sure that existing defaulters are ignored\n                // If the current beneficiary is an expelled participant, only check previous beneficiaries,\n                // that have not been expelled\n                if (IGetters(address(this)).wasExpelled(termId, currentBeneficiary)) {\n                    if (fund.isBeneficiary[p]) {\n                        _defaultParticipant(termId, p);\n                    }\n                } else {\n                    _defaultParticipant(termId, p);\n                }\n            }\n\n            /// @custom:unchecked-block without risks, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Once we decided who defaulted and who paid, we can award the beneficiary for this cycle\n        _awardBeneficiary(fund, term);\n        if (!(fund.currentCycle < fund.totalAmountOfCycles)) {\n            // If all cycles have passed, and the last cycle's time has passed, close the fund\n            _closeFund(termId);\n            return;\n        }\n    }\n\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\n    ///         and prevent the fund to be stuck in limbo\n    /// @dev Revert if the caller is not the term owner\n    /// @dev Revert if the time is not met (180 days)\n    /// @param termId the id of the term\n    function emptyFundAfterEnd(uint termId) external onlyTermOwner(termId) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(\n            fund.currentState == LibFundStorage.FundStates.FundClosed &&\n                block.timestamp > fund.fundEnd + 180 days,\n            \"TT-FF-03\"\n        );\n\n        uint balance;\n        uint beneficiariesLength = fund.beneficiariesOrder.length;\n\n        for (uint i; i < beneficiariesLength; ) {\n            if (fund.beneficiariesPool[fund.beneficiariesOrder[i]] > 0) {\n                balance += fund.beneficiariesPool[fund.beneficiariesOrder[i]];\n                fund.beneficiariesPool[fund.beneficiariesOrder[i]] = 0;\n            }\n\n            /// @custom:unchecked-block without risks, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (balance > 0) {\n            bool success = fund.stableToken.transfer(msg.sender, balance);\n            require(success, \"TT-FF-04\");\n        }\n    }\n\n    /// @notice function to enable/disable autopay\n    /// @dev Revert if the user is not a collateral member\n    /// @dev Revert if the Fund is closed\n    /// @dev It needs the user to have enough tokens and allow the contract as spender\n    /// @dev Can be set before the Fund starts\n    /// @param termId the id of the term\n    function toggleAutoPay(uint termId) external {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        require(collateral.isCollateralMember[msg.sender], \"TT-FF-05\");\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"TT-FF-02\");\n        bool enabled = !fund.autoPayEnabled[msg.sender];\n        fund.autoPayEnabled[msg.sender] = enabled;\n\n        emit OnAutoPayToggled(termId, msg.sender, enabled);\n    }\n\n    /// @notice This is the function participants call to pay the contribution\n    /// @param termId the id of the term\n    function payContribution(uint termId) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        bool payNextCycle = _payContributionsChecks(fund, termId, msg.sender);\n\n        _payContribution(termId, msg.sender, msg.sender, payNextCycle);\n    }\n\n    /// @notice This function is here to give the possibility to pay using a different wallet\n    /// @param termId the id of the term\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\n    function payContributionOnBehalfOf(uint termId, address participant) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        bool payNextCycle = _payContributionsChecks(fund, termId, participant);\n\n        _payContribution(termId, msg.sender, participant, payNextCycle);\n    }\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId the id of the term\n    function withdrawFund(uint termId) external {\n        _withdrawFund(termId, msg.sender);\n    }\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId the id of the term\n    /// @param receiver the address that will receive the fund\n    function withdrawFundOnAnotherWallet(uint termId, address receiver) external {\n        _withdrawFund(termId, receiver);\n    }\n\n    /// @notice Default the participant/beneficiary by checking the mapping first, then remove them from the appropriate array\n    /// @param _termId The id of the term\n    /// @param _defaulter The participant to default\n    function _defaultParticipant(uint _termId, address _defaulter) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        // Try removing from participants first\n        bool success = EnumerableSet.remove(fund._participants, _defaulter);\n\n        // If that fails, we try removing from beneficiaries\n        if (!success) {\n            success = EnumerableSet.remove(fund._beneficiaries, _defaulter);\n        }\n\n        require(success, \"TT-FF-06\");\n        EnumerableSet.add(fund._defaulters, _defaulter);\n\n        emit OnParticipantDefaulted(_termId, fund.currentCycle, _defaulter);\n    }\n\n    /// @notice The beneficiary will be awarded here based on the beneficiariesOrder array.\n    /// @notice It will loop through the array and choose the first in line to be eligible to be beneficiary.\n    /// @param _fund Fund object\n    /// @param _term Term object\n    function _awardBeneficiary(\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term storage _term\n    ) internal {\n        address beneficiary = IGetters(address(this)).getCurrentBeneficiary(_term.termId);\n\n        // Request contribution from the collateral for those who have to pay this cycle and haven't paid\n        if (EnumerableSet.length(_fund._defaulters) > 0) {\n            address[] memory expellants = ICollateral(address(this)).requestContribution(\n                _term,\n                EnumerableSet.values(_fund._defaulters)\n            );\n\n            uint expellantsLength = expellants.length;\n            for (uint i; i < expellantsLength; ) {\n                if (expellants[i] == address(0) || expellants[i] == beneficiary) {\n                    /// @custom:unchecked-block without risks, i can't be higher than expellants length\n                    unchecked {\n                        ++i;\n                    }\n                    continue;\n                }\n                _expelDefaulter(_fund, _term, expellants[i]);\n\n                /// @custom:unchecked-block without risks, i can't be higher than expellants length\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        // Remove participant from participants set..\n        if (EnumerableSet.remove(_fund._participants, beneficiary)) {\n            // ..Then add them to the benificiaries set\n            EnumerableSet.add(_fund._beneficiaries, beneficiary);\n        }\n\n        // Update the mapping to track who's been beneficiary\n        _fund.isBeneficiary[beneficiary] = true;\n\n        // Get the amount of participants that paid this cycle, and add that amount to the beneficiary's pool\n        uint paidCount;\n        address[] memory participants = _fund.beneficiariesOrder; // Use beneficiariesOrder here because it contains all active participants in a single array\n        uint participantsLength = participants.length;\n        for (uint i; i < participantsLength; ) {\n            if (_fund.paidThisCycle[participants[i]]) {\n                paidCount++;\n            }\n\n            /// @custom:unchecked-block without risks, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Award the beneficiary with the pool or freeze the pot\n        _freezePot(_term, _fund, beneficiary);\n\n        _fund.beneficiariesPool[beneficiary] += _term.contributionAmount * paidCount * 10 ** 6; // Six decimals\n\n        emit OnBeneficiaryAwarded(_term.termId, beneficiary);\n        LibFund._setState(_term.termId, LibFundStorage.FundStates.CycleOngoing);\n    }\n\n    /// @notice Internal function for close fund which is used by _startNewCycle & _chooseBeneficiary to cover some edge-cases\n    /// @param _termId The id of the term\n    function _closeFund(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        fund.fundEnd = block.timestamp;\n        term.state = LibTermStorage.TermStates.ClosedTerm;\n        LibFund._setState(_termId, LibFundStorage.FundStates.FundClosed);\n        ICollateral(address(this)).releaseCollateral(_termId);\n    }\n\n    /// @notice function to pay the actual contribution for the cycle\n    /// @param _termId the id of the term\n    /// @param _payer the address that's paying\n    /// @param _participant the (participant) address that's being paid for\n    /// @param _payNextCycle whether to pay for the next cycle or not\n    function _payContribution(\n        uint _termId,\n        address _payer,\n        address _participant,\n        bool _payNextCycle\n    ) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n\n        // Get the amount and do the actual transfer\n        // This will only succeed if the sender approved this contract address beforehand\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\n\n        bool success = fund.stableToken.transferFrom(_payer, address(this), amount);\n        require(success, \"TT-FF-07\");\n\n        // Finish up, set that the participant paid for this cycle and emit an event that it's been done\n        if (!_payNextCycle) {\n            fund.paidThisCycle[_participant] = true;\n            emit OnPaidContribution(_termId, _participant, fund.currentCycle);\n        } else {\n            fund.paidNextCycle[_participant] = true;\n            emit OnPaidContribution(_termId, _participant, fund.currentCycle + 1);\n        }\n    }\n\n    /// @param _termId term Id\n    /// @param _receiver address that will receive the money pot\n    /// @dev Revert if Fund is closed\n    /// @dev Revert if the user have not been a beneficiary\n    /// @dev Revert if the user is not a participant\n    /// @dev Revert if there is nothing to withdraw\n    /// @dev Revert if the money pot is frozen\n    function _withdrawFund(uint _termId, address _receiver) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        // To withdraw the fund, the fund must be closed or the participant must be a beneficiary on\n        // any of the past cycles.\n\n        bool expelledBeforeBeneficiary = fund.expelledBeforeBeneficiary[msg.sender];\n\n        require(\n            fund.currentState == LibFundStorage.FundStates.FundClosed ||\n                fund.isBeneficiary[msg.sender] ||\n                expelledBeforeBeneficiary,\n            \"TT-FF-08\"\n        );\n\n        bool hasFundPool = fund.beneficiariesPool[msg.sender] > 0;\n        bool hasFrozenPool = fund.beneficiariesFrozenPool[msg.sender];\n        bool hasCollateralPool = collateral.collateralPaymentBank[msg.sender] > 0;\n\n        require(hasFundPool || hasFrozenPool || hasCollateralPool, \"TT-FF-09\");\n\n        if (hasFrozenPool) {\n            bool freeze = _freezePot(\n                LibTermStorage._termStorage().terms[_termId],\n                fund,\n                msg.sender\n            );\n\n            if (fund.currentState != LibFundStorage.FundStates.FundClosed) {\n                require(!freeze, \"TT-FF-10\");\n            }\n\n            _transferPoolToBeneficiary(_termId, msg.sender, _receiver);\n        } else if (hasFundPool) {\n            _transferPoolToBeneficiary(_termId, msg.sender, _receiver);\n        }\n\n        if (hasCollateralPool) {\n            LibCollateral._withdrawReimbursement(_termId, msg.sender, _receiver);\n        }\n    }\n\n    /// @notice called internally to expel a participant. It should not be possible to expel non-defaulters, so those arrays are not checked.\n    /// @param _fund Fund object\n    /// @param _term Term object\n    /// @param _expellant The address of the defaulter that will be expelled\n    function _expelDefaulter(\n        LibFundStorage.Fund storage _fund,\n        LibTermStorage.Term storage _term,\n        address _expellant\n    ) internal {\n        // Expellants should only be in the defauters set so no need to touch the other sets\n        require(\n            _fund.isParticipant[_expellant] && EnumerableSet.remove(_fund._defaulters, _expellant),\n            \"TT-FF-11\"\n        );\n\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_term.termId];\n\n        _fund.isParticipant[_expellant] = false;\n        collateral.isCollateralMember[_expellant] = false;\n        // If the expellant has not been a beneficiary before, mark them as expelledBeforeBeneficiary\n        if (!_fund.isBeneficiary[_expellant]) {\n            _fund.expelledBeforeBeneficiary[_expellant] = true;\n        }\n\n        // Lastly, lower the amount of participants\n        --_term.totalParticipants;\n        ++_fund.expelledParticipants;\n\n        emit OnDefaulterExpelled(_term.termId, _fund.currentCycle, _expellant);\n    }\n\n    /// @notice Internal function to transfer the pool to the beneficiary\n    /// @dev Revert if the contract does not have enough funds\n    /// @param _termId The id of the term\n    /// @param _participant address\n    /// @param _receiver address\n    function _transferPoolToBeneficiary(\n        uint _termId,\n        address _participant,\n        address _receiver\n    ) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n\n        // Get the amount this beneficiary can withdraw\n        uint transferAmount = fund.beneficiariesPool[_participant];\n        uint contractBalance = fund.stableToken.balanceOf(address(this));\n        if (contractBalance < transferAmount) {\n            revert InsufficientBalance({available: contractBalance, required: transferAmount});\n        } else {\n            fund.beneficiariesPool[_participant] = 0;\n            bool success = fund.stableToken.transfer(_receiver, transferAmount);\n            require(success, \"TT-FF-04\");\n        }\n        emit OnFundWithdrawn(_termId, _participant, _receiver, transferAmount);\n    }\n\n    /// @notice Internal function to freeze the pot for the beneficiary\n    /// @dev Users remaining collateral must be at least 1.1 times remaining cycles contributions\n    /// @param _term Term object\n    /// @param _fund Fund object\n    /// @param _user address\n    function _freezePot(\n        LibTermStorage.Term memory _term,\n        LibFundStorage.Fund storage _fund,\n        address _user\n    ) internal returns (bool) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_term.termId];\n\n        bool expelledBeforeBeneficiary = _fund.expelledBeforeBeneficiary[_user];\n\n        if (expelledBeforeBeneficiary) {\n            _fund.beneficiariesFrozenPool[_user] = false;\n        } else {\n            uint remainingCyclesContribution = IGetters(address(this))\n                .getRemainingCyclesContributionWei(_term.termId);\n\n            uint neededCollateral = (110 * remainingCyclesContribution) / 100; // 1.1 x RCC\n\n            if (collateral.collateralMembersBank[_user] < neededCollateral) {\n                _fund.beneficiariesFrozenPool[_user] = true;\n            } else {\n                _fund.beneficiariesFrozenPool[_user] = false;\n            }\n        }\n        return _fund.beneficiariesFrozenPool[_user];\n    }\n\n    /// @param _fund Fund object\n    /// @param _termId term Id\n    /// @param _participant address\n    /// @dev Revert if the fund is Closed or initializing\n    /// @dev Revert if the caller is not a participant, is exempted, is the beneficiary or has already paid\n    function _payContributionsChecks(\n        LibFundStorage.Fund storage _fund,\n        uint _termId,\n        address _participant\n    ) internal view returns (bool _payNextCycle) {\n        require(\n            _fund.currentState == LibFundStorage.FundStates.AcceptingContributions ||\n                _fund.currentState == LibFundStorage.FundStates.CycleOngoing,\n            \"TT-FF-02\"\n        );\n        require(_fund.isParticipant[_participant], \"TT-FF-12\");\n\n        address _beneficiary;\n        uint _cycle;\n\n        if (_fund.currentState == LibFundStorage.FundStates.AcceptingContributions) {\n            require(!_fund.paidThisCycle[_participant], \"TT-FF-13\");\n\n            _cycle = _fund.currentCycle;\n            _beneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\n            _payNextCycle = false;\n        } else {\n            require(!_fund.paidNextCycle[_participant], \"TT-FF-13\");\n\n            _cycle = _fund.currentCycle + 1;\n            _beneficiary = IGetters(address(this)).getNextBeneficiary(_termId);\n            _payNextCycle = true;\n        }\n\n        require(_beneficiary != _participant, \"TT-FF-14\");\n        require(!_fund.isExemptedOnCycle[_cycle].exempted[_participant], \"TT-FF-15\");\n    }\n}\n"
    },
    "contracts/facets/GettersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {LibGettersHelpers} from \"../libraries/LibGettersHelpers.sol\";\n\n/// @title Takaturn Getters Facet\n/// @author Maikel Ordaz\n/// @notice Getters for Takaturn protocol\n/// @dev v3.0 (Diamond)\ncontract GettersFacet is IGetters {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice This function is used as a helper for front-end implementation\n    /// @param termId The term id for which the summary is being requested\n    /// @return term The term object\n    /// @return collateralState The current state of the collateral\n    /// @return fundState The current state of the fund\n    /// @return nonUserRelated A helper struct with the following values:\n    ///                        available positions, security deposits corresponding to each position,\n    ///                        remaining registration time, remaining contribution time,\n    ///                        remaining cycle time, remaining cycles, remaining cycles\n    ///                        contribution in wei, latest price from Chainlink, collateral\n    ///                        first deposit time in seconds, collateral counter members,\n    ///                        fund start time in seconds, fund end time in seconds, current\n    ///                        cycle, expelled participants, total amount of cycles, yield\n    ///                        start time in seconds, total deposit in wei, current total\n    ///                        deposit in wei, total shares, users opted in for yield\n    function getTermRelatedSummary(\n        uint termId\n    )\n        external\n        view\n        returns (\n            LibTermStorage.Term memory term,\n            LibCollateralStorage.CollateralStates collateralState,\n            LibFundStorage.FundStates fundState,\n            LibGettersHelpers.NonUserRelated memory nonUserRelated\n        )\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        term = LibTermStorage._termStorage().terms[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        (\n            uint[] memory joinPositions,\n            uint[] memory joinAmounts\n        ) = getAvailablePositionsAndSecurityAmount(termId);\n\n        collateralState = collateral.state;\n        fundState = fund.currentState;\n\n        nonUserRelated = LibGettersHelpers.NonUserRelated({\n            availablePositions: joinPositions,\n            securityDeposits: joinAmounts,\n            remainingRegistrationTime: getRemainingRegistrationTime(termId),\n            remainingContributionTime: getRemainingContributionTime(termId),\n            remainingCycleTime: getRemainingCycleTime(termId),\n            remainingCycles: getRemainingCycles(termId),\n            rcc: getRemainingCyclesContributionWei(termId),\n            latestPrice: getLatestPrice(),\n            collateralInitialized: collateral.initialized,\n            collateralFirstDepositTime: collateral.firstDepositTime,\n            collateralCounterMembers: collateral.counterMembers,\n            fundInitialized: fund.initialized,\n            fundStartTime: fund.fundStart,\n            fundEndTime: fund.fundEnd,\n            fundCurrentCycle: fund.currentCycle,\n            fundExpellantsCount: fund.expelledParticipants,\n            fundTotalCycles: fund.totalAmountOfCycles,\n            fundBeneficiariesOrder: fund.beneficiariesOrder,\n            yieldInitialized: yield.initialized,\n            yieldStartTime: yield.startTimeStamp,\n            yieldTotalDeposit: yield.totalDeposit,\n            yieldCurrentTotalDeposit: yield.currentTotalDeposit,\n            yieldTotalShares: yield.totalShares,\n            yieldUsers: yield.yieldUsers\n        });\n    }\n\n    /// @notice This function is used as a helper for front-end implementation\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return userRelated an object that contains the following values:\n    ///                     user is collateral member, user is undercollaterized,\n    ///                     current collateral balance, received collateral from defaults,\n    ///                     initial deposited collateral, collateral expulsion limit,\n    ///                     currently withdrawable balance, is fund member, is or was beneficiary,\n    ///                     user paid current cycle, user paid next cycle in advance,\n    ///                     user enabled autopay, user's money pot is frozen, user is exempted this\n    ///                     cycle, the money pot pool the user can withdraw, the cycle the user got\n    ///                     expelled (if applicable), is yield member, amount of collateral deposited\n    ///                     in yield pool, amount of collateral withdrawn from yield pool, available\n    ///                     yield to withdraw, amount of yield withdrawn, yield to be distributed\n    function getUserRelatedSummary(\n        address user,\n        uint termId\n    ) external view returns (LibGettersHelpers.UserRelated memory userRelated) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        bool beneficiary = fund.isBeneficiary[user]; // true if user has been beneficiary\n\n        userRelated.collateralMember = collateral.isCollateralMember[user]; // true if member\n        userRelated.isUnderCollaterized = LibCollateral._isUnderCollaterized(termId, user); // checks if user is undercollaterized\n        userRelated.membersBank = collateral.collateralMembersBank[user];\n        userRelated.paymentBank = collateral.collateralPaymentBank[user];\n        userRelated.deposited = collateral.collateralDepositByUser[user];\n        userRelated.fundMember = fund.isParticipant[user]; // true if participant\n        userRelated.beneficiary = beneficiary; // true if user has been beneficiary\n        userRelated.currentCyclePaid = fund.paidThisCycle[user]; // true if has paid current cycle\n        userRelated.nextCyclePaid = fund.paidNextCycle[user]; // true if has paid next cycle\n        userRelated.autoPayer = fund.autoPayEnabled[user]; // true if enabled auto pay\n        userRelated.moneyPotFrozen = _checkFrozenMoneyPot(user, termId); // true if money pot is frozen\n        userRelated.exemptedThisCycle = fund.isExemptedOnCycle[fund.currentCycle].exempted[user];\n        userRelated.yieldMember = yield.hasOptedIn[user]; // true if deposit on yield\n        userRelated.withdrawableBalance = getWithdrawableUserBalance(termId, user); // Gets the amount of collateral the user can withdraw right now\n\n        if (collateral.state != LibCollateralStorage.CollateralStates.AcceptingCollateral) {\n            uint limit;\n            if (beneficiary) {\n                // limit is determined by whether the user is beneficiary or not\n                limit = getRemainingCyclesContributionWei(termId);\n            } else {\n                limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\n            }\n\n            userRelated.expulsonLimit = limit;\n            userRelated.pool = fund.beneficiariesPool[user];\n            userRelated.cycleExpelled = fund.cycleOfExpulsion[user];\n\n            if (yield.hasOptedIn[user]) {\n                userRelated.collateralDepositedInYield = yield.depositedCollateralByUser[user];\n                userRelated.collateralWithdrawnFromYield = yield.withdrawnCollateral[user];\n                userRelated.yieldAvailable = yield.availableYield[user];\n                userRelated.yieldWithdrawn = yield.withdrawnYield[user];\n                userRelated.distributedYield = LibYieldGeneration._unwithdrawnUserYieldGenerated(\n                    termId,\n                    user\n                );\n            }\n        }\n    }\n\n    /// @notice This function return the current constant values for oracles and yield providers\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\n    /// @return The addresses of the oracles and yield providers\n    function getConstants(\n        string memory firstAggregator,\n        string memory secondAggregator,\n        string memory zapAddress,\n        string memory vaultAddress\n    ) external view returns (address, address, address, address) {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        return (\n            termConsts.aggregatorsAddresses[firstAggregator],\n            termConsts.aggregatorsAddresses[secondAggregator],\n            yieldProvider.providerAddresses[zapAddress],\n            yieldProvider.providerAddresses[vaultAddress]\n        );\n    }\n\n    /// @notice This function is used to get the current state of the yield lock\n    /// @return The current state of the yield lock\n    function getYieldLockState() external view returns (bool) {\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\n    }\n\n    /// @return the current term id\n    /// @return the next term id\n    function getTermsId() external view returns (uint, uint) {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint lastTermId = termStorage.nextTermId - 1;\n        uint nextTermId = termStorage.nextTermId;\n        return (lastTermId, nextTermId);\n    }\n\n    /// @notice Gets the term object\n    /// @param termId the term id\n    /// @return the term object\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\n        return (LibTermStorage._termStorage().terms[termId]);\n    }\n\n    /// @notice function to get the collateral object\n    /// @param termId the collateral id\n    /// @return if collateral initialized\n    /// @return current collateral state\n    /// @return time of first deposit\n    /// @return current members count\n    /// @return list of depositors\n    function getCollateralSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\n    {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        return (\n            collateral.initialized,\n            collateral.state, // Current state of Collateral\n            collateral.firstDepositTime, // Time when the first deposit was made\n            collateral.counterMembers, // Current member count\n            collateral.depositors // List of depositors\n        );\n    }\n\n    /// @notice function to get the cycle information in one go\n    /// @param termId the fund id\n    /// @return if fund initialized\n    /// @return current fund state\n    /// @return stable token address used\n    /// @return list of beneficiaries order\n    /// @return when the fund starts in seconds\n    /// @return when the fund ended, 0 if not ended\n    /// @return current cycle number\n    /// @return total amount of cycles\n    function getFundSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\n    {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return (\n            fund.initialized,\n            fund.currentState,\n            fund.stableToken,\n            fund.beneficiariesOrder,\n            fund.fundStart,\n            fund.fundEnd,\n            fund.currentCycle,\n            fund.totalAmountOfCycles\n        );\n    }\n\n    /// @notice Gets the yield object\n    /// @param termId the collateral id\n    /// @return if the yield is initialized\n    /// @return start time stamp for yield deposit\n    /// @return total deposit\n    /// @return current amount in yield\n    /// @return amount of total shares\n    /// @return list of yield users\n    /// @return address of vault\n    /// @return address of zap\n    function getYieldSummary(\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        return (\n            yield.initialized,\n            yield.startTimeStamp,\n            yield.totalDeposit,\n            yield.currentTotalDeposit,\n            yield.totalShares,\n            yield.yieldUsers,\n            yield.providerAddresses[\"ZaynVault\"],\n            yield.providerAddresses[\"ZaynZap\"]\n        );\n    }\n\n    /// @notice This function is used to get a term APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @return The APY for the term\n    function termAPY(uint termId) external view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\n\n        return\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\n            elaspedTime;\n    }\n\n    /// @notice a function to get the needed allowance for every active term the user is part of\n    /// @param user the user address\n    /// @return the needed allowance\n    function getNeededAllowance(address user) external view returns (uint) {\n        uint neededAllowance;\n\n        uint[] memory activeTerms = getJoinedTermsByState(\n            user,\n            LibTermStorage.TermStates.ActiveTerm\n        );\n        uint[] memory initializedTerms = getJoinedTermsByState(\n            user,\n            LibTermStorage.TermStates.InitializingTerm\n        );\n\n        uint activeTermsLength = activeTerms.length;\n        uint initializedTermsLength = initializedTerms.length;\n\n        for (uint i; i < activeTermsLength; ) {\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\n            uint remainingPayments = term.contributionAmount *\n                getRemainingCycles(activeTerms[i]) *\n                10 ** 6;\n            neededAllowance += remainingPayments;\n\n            /// @custom:unchecked-block without risk, i can't be higher than activeTerms length\n            unchecked {\n                ++i;\n            }\n        }\n\n        for (uint i; i < initializedTermsLength; ) {\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\n                initializedTerms[i]\n            ];\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\n            neededAllowance += totalPayments;\n\n            /// @custom:unchecked-block without risk, i can't be higher than initializedTerms length\n            unchecked {\n                ++i;\n            }\n        }\n\n        return neededAllowance;\n    }\n\n    /// @notice function to get the beneficiary from the current cycle\n    /// @param termId the fund id\n    /// @return the current beneficiary\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\n    }\n\n    /// @notice function to get the beneficiary from the next cycle\n    /// @param termId the fund id\n    /// @return the next beneficiary\n    function getNextBeneficiary(uint termId) external view returns (address) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.beneficiariesOrder[fund.currentCycle];\n    }\n\n    /// @notice function to get the depositor collateral summary\n    /// @param depositor the depositor address\n    /// @param termId the collateral id\n    /// @return if the user is a true member of the term\n    /// @return current users locked collateral balance in wei\n    /// @return current users unlocked collateral balance in wei\n    /// @return initial users deposit in wei\n    /// @return expulsion limit\n    function getDepositorCollateralSummary(\n        address depositor,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        uint limit;\n        if (!fund.isBeneficiary[depositor]) {\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\n        } else {\n            limit = getRemainingCyclesContributionWei(termId);\n        }\n\n        return (\n            collateral.isCollateralMember[depositor],\n            collateral.collateralMembersBank[depositor],\n            collateral.collateralPaymentBank[depositor],\n            collateral.collateralDepositByUser[depositor],\n            limit\n        );\n    }\n\n    /// @notice function to get fund information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return isParticipant, true if is participant\n    /// @return isBeneficiary, true if has been beneficiary\n    /// @return paidThisCycle, true if has paid the current cycle\n    /// @return autoPayEnabled, true if auto pay is enabled\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\n    function getParticipantFundSummary(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        bool isMoneyPotFrozen = _checkFrozenMoneyPot(participant, termId);\n\n        return (\n            fund.isParticipant[participant],\n            fund.isBeneficiary[participant],\n            fund.paidThisCycle[participant],\n            fund.autoPayEnabled[participant],\n            fund.beneficiariesPool[participant],\n            isMoneyPotFrozen\n        );\n    }\n\n    /// @notice Gets the user yield summary\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return if the user opted in for yield\n    /// @return amount withdrawn from yield\n    /// @return amount withdrawn from collateral\n    /// @return amount available in yield\n    /// @return amount deposited by user in yield\n    /// @return amount of yield distributed\n    function getUserYieldSummary(\n        address user,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\n\n        return (\n            yield.hasOptedIn[user],\n            yield.withdrawnYield[user],\n            yield.withdrawnCollateral[user],\n            yield.availableYield[user],\n            yield.depositedCollateralByUser[user],\n            yieldDistributed\n        );\n    }\n\n    /// @notice function to get cycle information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return on participant set\n    /// @return on beneficiary set\n    /// @return on defaulter set\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\n    }\n\n    /// @notice Called to check how much collateral a user can withdraw\n    /// @param termId term id\n    /// @param user depositor address\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\n    function getWithdrawableUserBalance(\n        uint termId,\n        address user\n    ) public view returns (uint allowedWithdrawal) {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint userCollateral = collateral.collateralMembersBank[user];\n        uint availableYield = yield.availableYield[user];\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\n\n        if (\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\n            expelledBeforeBeingBeneficiary\n        ) {\n            allowedWithdrawal = userCollateral + availableYield;\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\n            uint minRequiredCollateral;\n\n            // Check if the user has paid this cycle or the next\n            if (!fund.paidThisCycle[user] && !fund.paidNextCycle[user]) {\n                // If none have been paid\n                // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\n                minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\n            }\n\n            // If the user has paid only one of the cycles, current or next\n            if (\n                (fund.paidThisCycle[user] && !fund.paidNextCycle[user]) ||\n                (fund.paidNextCycle[user] && !fund.paidThisCycle[user])\n            ) {\n                // We need to check his remaining cycles and get the contribution amount for those\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle;\n                uint contributionAmountWei = getToCollateralConversionRate(\n                    term.contributionAmount * 10 ** 18\n                );\n\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\n            }\n\n            // If the user has paid both cycles, current and next\n            if (fund.paidThisCycle[user] && fund.paidNextCycle[user]) {\n                // We need to check his remaining cycles and get the contribution amount for those\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle - 1;\n                uint contributionAmountWei = getToCollateralConversionRate(\n                    term.contributionAmount * 10 ** 18\n                );\n\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\n            }\n\n            // Collateral must be higher than 1.5 X RCC\n            if (userCollateral > minRequiredCollateral) {\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\n            } else {\n                allowedWithdrawal = 0;\n            }\n        } else {\n            allowedWithdrawal = 0;\n        }\n    }\n\n    /// @notice Get all the terms a participant was expelled from\n    /// @param participant the participant address\n    /// @return an array the term ids on which the participant was expelled\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\n        uint termsCounter;\n        uint joinedTermsLength = joinedTerms.length;\n\n        for (uint i; i < joinedTermsLength; ) {\n            if (wasExpelled(joinedTerms[i], participant)) {\n                temporaryArray[termsCounter] = joinedTerms[i];\n\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\n                unchecked {\n                    ++termsCounter;\n                }\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint[] memory termsExpelled = new uint[](termsCounter);\n\n        for (uint i; i < termsCounter; ) {\n            termsExpelled[i] = temporaryArray[i];\n\n            /// @custom:unchecked-block without risk, i can't be higher than termsCounter\n            unchecked {\n                ++i;\n            }\n        }\n\n        return termsExpelled;\n    }\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param termId The term id\n    /// @param member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\n        return LibCollateral._isUnderCollaterized(termId, member);\n    }\n\n    /// @notice function to see if a user is exempted from paying a cycle\n    /// @param termId the fund id\n    /// @param cycle the cycle to check\n    /// @param user the user to check\n    /// @return true if the user is exempted\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.isExemptedOnCycle[cycle].exempted[user];\n    }\n\n    /// @notice This function is used to check if a user has opted in for yield generation\n    /// @param termId The term id for which the check is being made\n    /// @param user The user for which the check is being made\n    /// @return True if the user has opted in\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        return yield.hasOptedIn[user];\n    }\n\n    /// @notice This function is used to get a user APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @param user The user for which the APY is being calculated\n    /// @return The APY for the user\n    function userAPY(uint termId, address user) external view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\n\n        uint userYieldGenerated = yield.withdrawnYield[user] +\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\n\n        return\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\n                365 days) / elaspedTime;\n    }\n\n    /// @notice function to get fund information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return paidThisCycle, true if has paid the current cycle\n    /// @return paidNextCycle, true if has paid the next cycle\n    function currentOrNextCyclePaid(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        return (fund.paidThisCycle[participant], fund.paidNextCycle[participant]);\n    }\n\n    /// @notice checks if a participant have been a beneficiary\n    /// @param termId the id of the term\n    /// @param beneficiary the address of the participant to check\n    /// @return true if the participant is a beneficiary\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.isBeneficiary[beneficiary];\n    }\n\n    /// @notice function to know if a user was expelled before\n    /// @param termId the fund id\n    /// @param user the user to check\n    /// @return true if the user was expelled before\n    function wasExpelled(uint termId, address user) public view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @notice checks if a participant have been expelled before being a beneficiary\n    /// @param termId the id of the term\n    /// @param user the address of the participant to check\n    /// @return true if the participant is expelled before being a beneficiary\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        return fund.expelledBeforeBeneficiary[user];\n    }\n\n    /// @notice Gets the conversion rate of an amount in ETH to USD\n    /// @param ethAmount The amount in ETH\n    /// @return uint converted amount in USD correct to 18 decimals\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\n        // NOTE: This will be made internal\n        uint ethPrice = getLatestPrice();\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\n        return ethAmountInUSD;\n    }\n\n    /// @notice Get the term's remaining cycles\n    /// @param termId the term id\n    /// @return remaining cycles\n    function getRemainingCycles(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\n    }\n\n    /// @notice Get the term's remaining contribution amount converted from USDC to wei\n    /// @param termId the term id\n    /// @return remaining cycles contribution in wei\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        uint remainingCycles;\n\n        if (fund.currentState == LibFundStorage.FundStates.InitializingFund) {\n            remainingCycles = term.totalParticipants;\n        } else if (\n            fund.currentState == LibFundStorage.FundStates.AcceptingContributions ||\n            fund.currentState == LibFundStorage.FundStates.AwardingBeneficiary\n        ) {\n            remainingCycles = getRemainingCycles(termId);\n        } else if (fund.currentState == LibFundStorage.FundStates.CycleOngoing) {\n            remainingCycles = getRemainingCycles(termId) - 1;\n        } else if (fund.currentState == LibFundStorage.FundStates.FundClosed) {\n            remainingCycles = 0;\n        }\n\n        uint contributionAmountWei = getToCollateralConversionRate(\n            term.contributionAmount * 10 ** 18\n        );\n\n        return remainingCycles * contributionAmountWei;\n    }\n\n    /// @notice Called to check the minimum collateral amount to deposit in wei\n    /// @param termId term id\n    /// @param depositorIndex the index the depositor wants to join\n    /// @return amount the minimum collateral amount to deposit in wei\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\n    function minCollateralToDeposit(\n        uint termId,\n        uint depositorIndex\n    ) public view returns (uint amount) {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n\n        require(depositorIndex < term.totalParticipants, \"TT-GF-01\");\n\n        uint contributionAmountInWei = getToCollateralConversionRate(\n            term.contributionAmount * 10 ** 18\n        );\n\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\n    }\n\n    /// @notice Gets latest ETH / USD price\n    /// @dev Revert if there is problem with chainlink data\n    /// @return uint latest price in Wei Note: 18 decimals\n    function getLatestPrice() public view returns (uint) {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n\n        (\n            uint80 roundID_ethUSD,\n            int256 price_ethUSD,\n            ,\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\n            uint80 answeredInRound_ethUSD\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"ETH/USD\"]).latestRoundData(); //8 decimals\n\n        // Check if chainlink data is not stale or incorrect\n        require(\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\n            \"TT-GF-02\"\n        );\n\n        (\n            uint80 roundID_usdUSDC,\n            int256 price_usdUSDC,\n            ,\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\n            uint80 answeredInRound_usdUSDC\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\"USDC/USD\"]).latestRoundData(); //8 decimals\n\n        require(\n            timeStamp_usdUSDC != 0 &&\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\n                price_usdUSDC > 0,\n            \"TT-GF-02\"\n        );\n\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\n\n        return uint(ethUSDC * 10 ** 18); //18 decimals\n    }\n\n    /// @notice Gets the conversion rate of an amount in USD to ETH\n    /// @param USDAmount The amount in USD with 18 decimals\n    /// @return uint converted amount in wei\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\n        uint ethPrice = getLatestPrice();\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\n        return USDAmountInEth;\n    }\n\n    /// @notice This function is used to get the total yield generated for a term\n    /// @param termId The term id for which the yield is being calculated\n    /// @return The total yield generated for the term\n    function totalYieldGenerated(uint termId) public view returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        uint totalWithdrawnYield;\n\n        address[] memory arrayToCheck = yield.yieldUsers;\n        uint arrayLength = arrayToCheck.length;\n\n        for (uint i; i < arrayLength; ) {\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\n\n            /// @custom:unchecked-block without risk, i can't be higher than arrayLength\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\n\n        if (sharesInEth > yield.currentTotalDeposit) {\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\n        } else {\n            return totalWithdrawnYield;\n        }\n    }\n\n    /// @notice Get all the terms a participant is part of\n    /// @param participant the participant address\n    /// @return an array with the term ids the participant is part of\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\n        return participantTermIds;\n    }\n\n    /// @notice Get all the terms a participant is part of by a given state\n    /// @param participant the participant address\n    /// @param state the term state\n    /// @return an array with the term ids the participant is part of, giving the state of the term\n    function getJoinedTermsByState(\n        address participant,\n        LibTermStorage.TermStates state\n    ) public view returns (uint[] memory) {\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\n        uint termsCounter;\n        uint joinedTermsLength = joinedTerms.length;\n\n        for (uint i; i < joinedTermsLength; ) {\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\n                temporaryArray[termsCounter] = joinedTerms[i];\n\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\n                unchecked {\n                    ++termsCounter;\n                }\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint[] memory userTermsByState = new uint[](termsCounter);\n\n        for (uint i; i < termsCounter; ) {\n            userTermsByState[i] = temporaryArray[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return userTermsByState;\n    }\n\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\n    /// @param termId the term id\n    /// @dev Available positions starts at 0\n    /// @return availablePositions an array with the available positions\n    /// @return securityAmount an array with the security amount for each available position\n    function getAvailablePositionsAndSecurityAmount(\n        uint termId\n    ) public view returns (uint[] memory, uint[] memory) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        if (collateral.state != LibCollateralStorage.CollateralStates.AcceptingCollateral) {\n            return (new uint[](0), new uint[](0));\n        }\n\n        uint depositorsLength = collateral.depositors.length;\n        uint[] memory availablePositions = new uint[](depositorsLength);\n\n        uint availablePositionsCounter;\n\n        // Loop through the depositors array and get the available positions\n        for (uint i; i < depositorsLength; ) {\n            // The position is available if the depositor is address zero\n            if (collateral.depositors[i] == address(0)) {\n                // Add the position to the available positions array\n                availablePositions[availablePositionsCounter] = i;\n\n                // And increment the available positions counter\n                unchecked {\n                    ++availablePositionsCounter;\n                }\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Create the arrays to return\n        // The available positions array will have the length of the available positions counter\n        // The security amount array will have the same length\n        uint[] memory availablePositionsArray = new uint[](availablePositionsCounter);\n        uint[] memory securityAmountArray = new uint[](availablePositionsCounter);\n\n        // Loop through the available positions counter and fill the arrays\n        for (uint i; i < availablePositionsCounter; ) {\n            availablePositionsArray[i] = availablePositions[i];\n            // Get the security amount for the position\n            securityAmountArray[i] = minCollateralToDeposit(termId, availablePositions[i]);\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Return the arrays, the available positions array and the security amount array are coupled\n        // availablePositionsArray[0] will have the securityAmountArray[0] and so on\n        return (availablePositionsArray, securityAmountArray);\n    }\n\n    /// @notice Gets the remaining registration period for a term\n    /// @dev Revert if nobody has deposited\n    /// @param termId the term id\n    /// @return remaining contribution period\n    function getRemainingRegistrationTime(uint termId) public view returns (uint) {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n        if (\n            collateral.firstDepositTime == 0 ||\n            block.timestamp >= collateral.firstDepositTime + term.registrationPeriod\n        ) {\n            return 0;\n        } else {\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\n        }\n    }\n\n    /// @notice returns the time left to contribute for this cycle\n    /// @param termId the fund id\n    /// @return the time left to contribute\n    function getRemainingContributionTime(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\n            return 0;\n        }\n\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\n        uint contributionEndTimestamp = term.cycleTime *\n            (fund.currentCycle - 1) +\n            fund.fundStart +\n            term.contributionPeriod;\n        if (block.timestamp > contributionEndTimestamp) {\n            return 0;\n        } else {\n            return contributionEndTimestamp - block.timestamp;\n        }\n    }\n\n    /// @notice Get the term's remaining time in the current cycle\n    /// @param termId the term id\n    /// @return remaining time in the current cycle\n    function getRemainingCycleTime(uint termId) public view returns (uint) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\n        if (block.timestamp > cycleEndTimestamp) {\n            return 0;\n        } else {\n            return cycleEndTimestamp - block.timestamp;\n        }\n    }\n\n    /// @notice checks if the money pot is frozen for a participant\n    /// @param _participant the user to check\n    /// @param _termId the fund id\n    /// @return _isMoneyPotFrozen true if the money pot is frozen\n    function _checkFrozenMoneyPot(\n        address _participant,\n        uint _termId\n    ) internal view returns (bool _isMoneyPotFrozen) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        if (fund.expelledBeforeBeneficiary[_participant]) {\n            _isMoneyPotFrozen = false;\n        } else {\n            uint neededCollateral = (110 * getRemainingCyclesContributionWei(_termId)) / 100; // 1.1 x RCC\n\n            if (collateral.collateralMembersBank[_participant] < neededCollateral) {\n                _isMoneyPotFrozen = true;\n            } else {\n                _isMoneyPotFrozen = false;\n            }\n        }\n    }\n}\n"
    },
    "contracts/facets/TermFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IFund} from \"../interfaces/IFund.sol\";\nimport {ICollateral} from \"../interfaces/ICollateral.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ITerm} from \"../interfaces/ITerm.sol\";\nimport {IGetters} from \"../interfaces/IGetters.sol\";\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibFund} from \"../libraries/LibFund.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateral} from \"../libraries/LibCollateral.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\n\n/// @title Takaturn Term Facet\n/// @author Mohammed Haddouti\n/// @notice This is used to create terms\n/// @dev v3.0 (Diamond)\ncontract TermFacet is ITerm {\n    event OnTermCreated(uint indexed termId, address indexed termOwner); // Emits when a new term is created\n    event OnCollateralDeposited(\n        uint indexed termId,\n        address payer,\n        address indexed user,\n        uint amount\n    ); // TODO: To be deprecated, here to ensure backwards compatibility with the old event\n    event OnCollateralDepositedNext(\n        uint indexed termId,\n        address payer,\n        address indexed user,\n        uint amount,\n        uint indexed position\n    ); // Emits when a user joins a term // Todo: To be renamed to OnCollateralDeposited\n    event OnTermFilled(uint indexed termId); // Emits when all the spots are filled\n    event OnTermExpired(uint indexed termId); // Emits when a term expires\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\n\n    /// @notice Create a new term\n    /// @param totalParticipants The number of participants in the term\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\n    /// @param cycleTime The time in seconds that the term will last\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\n    /// @param stableTokenAddress The address of the stable token\n    /// @return termId The id of the new term\n    function createTerm(\n        uint totalParticipants,\n        uint registrationPeriod,\n        uint cycleTime,\n        uint contributionAmount, // in stable token, without decimals\n        uint contributionPeriod,\n        address stableTokenAddress\n    ) external returns (uint) {\n        return\n            _createTerm(\n                totalParticipants,\n                registrationPeriod,\n                cycleTime,\n                contributionAmount,\n                contributionPeriod,\n                stableTokenAddress\n            );\n    }\n\n    /// @notice Join a term at the next available position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    function joinTerm(uint termId, bool optYield) external payable {\n        _joinTerm(termId, optYield, msg.sender);\n    }\n\n    /// @notice Join a term at a specific position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param position The position in the term\n    // TODO: To be renamed to joinTerm, this name only to ensure backwards compatibility\n    function joinTermOnPosition(uint termId, bool optYield, uint position) external payable {\n        _joinTermByPosition(termId, optYield, position, msg.sender);\n    }\n\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param newParticipant The address of the new participant\n    function paySecurityOnBehalfOf(\n        uint termId,\n        bool optYield,\n        address newParticipant\n    ) external payable {\n        _joinTerm(termId, optYield, newParticipant);\n    }\n\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param newParticipant The address of the new participant\n    /// @param position The position in the term\n    function paySecurityOnBehalfOf(\n        uint termId,\n        bool optYield,\n        address newParticipant,\n        uint position\n    ) external payable {\n        _joinTermByPosition(termId, optYield, position, newParticipant);\n    }\n\n    /// @notice Start a term\n    /// @param termId The id of the term\n    function startTerm(uint termId) external {\n        _startTerm(termId);\n    }\n\n    /// @notice Expire a term\n    /// @param termId The id of the term\n    function expireTerm(uint termId) external {\n        _expireTerm(termId);\n    }\n\n    /// @dev Revert if the cycle time is 0\n    /// @dev Revert if the contribution amount is 0\n    /// @dev Revert if the contribution period is 0\n    /// @dev Revert if the total participants is 0\n    /// @dev Revert if the registration period is 0\n    /// @dev Revert if the contribution period is greater than the cycle time\n    /// @dev Revert if the stable token address is 0\n    function _createTerm(\n        uint _totalParticipants,\n        uint _registrationPeriod,\n        uint _cycleTime,\n        uint _contributionAmount,\n        uint _contributionPeriod,\n        address _stableTokenAddress\n    ) internal returns (uint) {\n        require(\n            _cycleTime != 0 &&\n                _contributionAmount != 0 &&\n                _contributionPeriod != 0 &&\n                _totalParticipants != 0 &&\n                _registrationPeriod != 0 &&\n                _contributionPeriod < _cycleTime &&\n                _stableTokenAddress != address(0),\n            \"TT-TF-01\"\n        );\n\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        uint termId = termStorage.nextTermId;\n\n        LibTermStorage.Term memory newTerm;\n\n        newTerm.termId = termId;\n        newTerm.totalParticipants = _totalParticipants;\n        newTerm.registrationPeriod = _registrationPeriod;\n        newTerm.cycleTime = _cycleTime;\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\n        newTerm.contributionPeriod = _contributionPeriod;\n        newTerm.stableTokenAddress = _stableTokenAddress;\n        newTerm.termOwner = msg.sender;\n        newTerm.creationTime = block.timestamp;\n        newTerm.initialized = true;\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\n\n        termStorage.terms[termId] = newTerm;\n        termStorage.nextTermId++;\n\n        _createCollateral(termId, _totalParticipants);\n\n        emit OnTermCreated(termId, msg.sender);\n\n        return termId;\n    }\n\n    /// @dev Revert if the term doesn't exist\n    /// @dev Revert if the collateral is not accepting collateral\n    /// @dev Revert if the collateral is full\n    /// @dev Revert if the new participant is already a collateral member\n    function _joinTerm(uint _termId, bool _optYield, address _newParticipant) internal {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        require(LibTermStorage._termExists(_termId), \"TT-TF-02\");\n\n        require(\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\n            \"TT-TF-03\"\n        );\n\n        require(collateral.counterMembers < term.totalParticipants, \"TT-TF-04\");\n\n        require(!collateral.isCollateralMember[_newParticipant], \"TT-TF-05\");\n\n        uint memberIndex;\n\n        for (uint i; i < term.totalParticipants; ) {\n            if (collateral.depositors[i] == address(0)) {\n                memberIndex = i;\n                break;\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than term total participants\n            unchecked {\n                ++i;\n            }\n        }\n\n        _joinTermByPosition(_termId, _optYield, memberIndex, _newParticipant);\n    }\n\n    /// @dev Revert if the term doesn't exist\n    /// @dev Revert if the collateral is not accepting collateral\n    /// @dev Revert if the collateral is full\n    /// @dev Revert if the new participant is already a collateral member\n    /// @dev Revert if the position is higher than the total participants\n    /// @dev Revert if the position is already taken\n    /// @dev Revert if the msg.value is lower than the min amount\n    function _joinTermByPosition(\n        uint _termId,\n        bool _optYield,\n        uint _position,\n        address _newParticipant\n    ) internal {\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        require(LibTermStorage._termExists(_termId), \"TT-TF-02\");\n\n        require(\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\n            \"TT-TF-03\"\n        );\n\n        require(collateral.counterMembers < term.totalParticipants, \"TT-TF-04\");\n\n        require(!collateral.isCollateralMember[_newParticipant], \"TT-TF-05\");\n\n        require(_position <= term.totalParticipants - 1, \"TT-TF-06\");\n\n        require(collateral.depositors[_position] == address(0), \"TT-TF-07\");\n\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, _position);\n        require(msg.value >= minAmount, \"TT-TF-08\");\n\n        collateral.collateralMembersBank[_newParticipant] += msg.value;\n        collateral.isCollateralMember[_newParticipant] = true;\n        collateral.depositors[_position] = _newParticipant;\n        collateral.counterMembers++;\n        collateral.collateralDepositByUser[_newParticipant] += msg.value;\n\n        termStorage.participantToTermId[_newParticipant].push(_termId);\n\n        // If the lock is false, I accept the opt in\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\n            yield.hasOptedIn[_newParticipant] = _optYield;\n        } else {\n            // If the lock is true, opt in is always false\n            yield.hasOptedIn[_newParticipant] = false;\n        }\n\n        // TODO: Emit both events to ensure backwards compatibility\n        emit OnCollateralDeposited(_termId, msg.sender, _newParticipant, msg.value);\n        emit OnCollateralDepositedNext(_termId, msg.sender, _newParticipant, msg.value, _position);\n\n        if (collateral.counterMembers == 1) {\n            collateral.firstDepositTime = block.timestamp;\n        }\n\n        // If all the spots are filled, change the collateral\n        if (collateral.counterMembers == term.totalParticipants) {\n            emit OnTermFilled(_termId);\n        }\n    }\n\n    /// @dev Revert if the term doesn't exist\n    /// @dev Revert if the term is not ready to start\n    /// @dev Revert if the term is already active\n    /// @dev Revert if someone is undercollaterized\n    function _startTerm(uint _termId) internal {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n        address[] memory depositors = collateral.depositors;\n\n        uint depositorsArrayLength = depositors.length;\n\n        require(\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\n            \"TT-TF-09\"\n        );\n\n        require(collateral.counterMembers == term.totalParticipants, \"TT-TF-10\");\n\n        // Need to check each user because they can have different collateral amounts\n        for (uint i; i < depositorsArrayLength; ) {\n            require(!LibCollateral._isUnderCollaterized(term.termId, depositors[i]), \"TT-TF-11\");\n\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Actually create and initialize the fund\n        _createFund(term, collateral);\n\n        // If the lock is false\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\n            // Check on each depositor if they opted in for yield generation\n            for (uint i; i < depositorsArrayLength; ) {\n                if (yield.hasOptedIn[depositors[i]]) {\n                    // If someone opted in, create the yield generator\n                    _createYieldGenerator(term, collateral);\n                    break;\n                }\n\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\n                unchecked {\n                    ++i;\n                }\n            }\n        } else {\n            // If the lock is set to true, before the term starts and after users have joined term\n            // There is a chance that somebody has opted in for yield generation\n            for (uint i; i < depositorsArrayLength; ) {\n                if (yield.hasOptedIn[depositors[i]]) {\n                    yield.hasOptedIn[depositors[i]] = false;\n                }\n\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        // Tell the collateral that the term has started\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\n\n        term.state = LibTermStorage.TermStates.ActiveTerm;\n    }\n\n    /// @notice Create a new collateral\n    /// @param _termId The id of the term\n    /// @param _totalParticipants The number of participants in the term\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        newCollateral.initialized = true;\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\n        newCollateral.depositors = new address[](_totalParticipants);\n    }\n\n    /// @notice Create a new fund\n    /// @dev Revert if the fund already exists\n    /// @param _term The term\n    /// @param _collateral The collateral object\n    function _createFund(\n        LibTermStorage.Term memory _term,\n        LibCollateralStorage.Collateral storage _collateral\n    ) internal {\n        require(!LibFundStorage._fundExists(_term.termId), \"TT-TF-12\");\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\n\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\n        newFund.beneficiariesOrder = _collateral.depositors;\n        newFund.initialized = true;\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\n\n        LibFund._initFund(_term.termId);\n    }\n\n    /// @dev Revert if the term or collateral doesn't exist\n    /// @dev Revert if registration period is not ended\n    /// @dev Revert if all spots are filled\n    /// @dev Revert if the term is already expired\n    function _expireTerm(uint _termId) internal {\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        require(\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\n        );\n\n        require(\n            collateral.firstDepositTime != 0 &&\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\n            \"TT-TF-13\"\n        );\n\n        require(collateral.counterMembers < term.totalParticipants, \"TT-TF-14\");\n\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \"TT-TF-15\");\n\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\n\n        emit OnTermExpired(_termId);\n    }\n\n    /// @notice Create a new yield generator\n    /// @param _term The term object\n    /// @param _collateral The collateral object\n    function _createYieldGenerator(\n        LibTermStorage.Term memory _term,\n        LibCollateralStorage.Collateral storage _collateral\n    ) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_term.termId];\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        uint amountToYield;\n\n        address[] memory depositors = _collateral.depositors;\n        uint depositorsArrayLength = depositors.length;\n\n        for (uint i; i < depositorsArrayLength; ) {\n            if (yield.hasOptedIn[depositors[i]]) {\n                yield.yieldUsers.push(depositors[i]);\n                yield.depositedCollateralByUser[depositors[i]] =\n                    (_collateral.collateralMembersBank[depositors[i]] * 95) /\n                    100;\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (amountToYield > 0) {\n            yield.startTimeStamp = block.timestamp;\n            yield.initialized = true;\n            yield.providerAddresses[\"ZaynZap\"] = yieldProviders.providerAddresses[\"ZaynZap\"];\n            yield.providerAddresses[\"ZaynVault\"] = yieldProviders.providerAddresses[\"ZaynVault\"];\n\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\n        }\n    }\n}\n"
    },
    "contracts/facets/WithdrawGoerliEthFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/// @notice: This contract is used for test only, it is not used in the mainnet\n\npragma solidity 0.8.18;\n\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {LibWithdrawGoerliEth} from \"../libraries/LibWithdrawGoerliEth.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\n\ncontract WithdrawTestEthFacet {\n    event OnTestEthWithdraw(uint indexed amount, address indexed receiver);\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyManager(address managerCheck) {\n        LibWithdrawGoerliEth._enforceIsTrustedManager(managerCheck);\n        _;\n    }\n\n    function withdrawTestEth() external onlyOwner onlyManager(msg.sender) {\n        uint balance = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\n        require(success, \"Withdraw failed\");\n        emit OnTestEthWithdraw(balance, msg.sender);\n    }\n\n    function addTrustedAddress(address newManager) external onlyOwner onlyManager(msg.sender) {\n        LibWithdrawGoerliEth._addTrustedAddress(newManager);\n    }\n\n    // The next function is to test the error InsufficientBalance on FundFacet is working\n    function testInsufficientBalance(uint termId) external onlyOwner onlyManager(msg.sender) {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        uint balance = fund.stableToken.balanceOf(address(this));\n        bool success = fund.stableToken.transfer(msg.sender, balance);\n        require(success, \"Transfer failed\");\n    }\n\n    function testGithubCDWorkflows() external pure returns (string memory) {\n        return \"Test Workflow [demo]\";\n    }\n}\n"
    },
    "contracts/facets/YGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\n\nimport {IYGFacetZaynFi} from \"../interfaces/IYGFacetZaynFi.sol\";\n\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\nimport {LibYieldGeneration} from \"../libraries/LibYieldGeneration.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\n\n/// @title Takaturn Yield Facet\n/// @author Maikel Ordaz\n/// @notice Used to operate the yield generation feature\n/// @dev v3.0 (Diamond)\ncontract YGFacetZaynFi is IYGFacetZaynFi {\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\n    event OnYieldClaimed(\n        uint indexed termId,\n        address indexed user,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a user claims their yield\n    event OnYieldReimbursed(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user is reimbursed for a bad transaction\n    event OnYieldCompensated(uint indexed termId, address indexed user, uint indexed amount); // Emits when a user is compensated for a bad transaction\n    event OnWithdrawnBalanceRestored(\n        uint indexed termId,\n        address indexed user,\n        uint indexed amount\n    ); // Emits when a user's withdrawn balance is restored\n    event OnYieldTermUpdated(\n        uint indexed termId,\n        uint indexed amountRestored,\n        uint indexed amountCompensated\n    ); // Emits when a term's yield balance is restored\n\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    /// @param receiver The address of the user who will receive the yield\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\n    function claimAvailableYield(uint termId, address receiver) external {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n\n        address[] memory participants = fund.beneficiariesOrder;\n        uint participantsLength = participants.length;\n        bool canCall;\n\n        for (uint i; i < participantsLength; ) {\n            if (participants[i] == msg.sender) {\n                canCall = true;\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        require(canCall, \"TT-YF-01\");\n\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\n    }\n\n    /// @notice This function allows a user to toggle their yield generation\n    /// @dev only allowed before the term starts\n    /// @dev Revert if the user has not paid the collateral security deposit\n    /// @param termId The term id for which the yield is being claimed\n    function toggleOptInYG(uint termId) external {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[termId];\n\n        require(\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\n            \"TT-YF-02\"\n        );\n        require(collateral.isCollateralMember[msg.sender], \"TT-YF-03\");\n\n        bool optIn = !yield.hasOptedIn[msg.sender];\n        yield.hasOptedIn[msg.sender] = optIn;\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\n    }\n\n    /// @notice This function allows the owner to update the global variable for new yield provider\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateYieldProvider(\n        string memory providerString,\n        address providerAddress\n    ) external onlyOwner {\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        yieldProvider.providerAddresses[providerString] = providerAddress;\n    }\n\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\n    /// @return The new value of the yield lock\n    function toggleYieldLock() external onlyOwner returns (bool) {\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\n\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\n    }\n\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\n    /// @param termId The term id for which the yield is being claimed\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateProviderAddressOnTerms(\n        uint termId,\n        string memory providerString,\n        address providerAddress\n    ) external onlyOwner {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[termId];\n\n        require(LibFundStorage._fundExists(termId), \"TT-YF-04\");\n        require(providerAddress != address(0), \"TT-YF-05\");\n        require(yield.providerAddresses[providerString] != providerAddress, \"TT-YF-06\");\n\n        yield.providerAddresses[providerString] = providerAddress;\n    }\n\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\n    /// @notice The position of each array is used as a set in the calculation\n    /// @param termIds The term ids for which the yield is being rescued\n    /// @param originalWithdrawals The original ETH withdrawal amounts of each bad transaction\n    /// @param originalShares The original calculated shares amounts of each bad transaction\n    /// @param users The users to be reimbursed\n    function rescueStuckYields(\n        uint[] memory termIds,\n        uint[] memory originalWithdrawals,\n        uint[] memory originalShares,\n        address[] memory users\n    ) external payable onlyOwner {\n        // Start with validating the lengths of the arrays\n        uint length = termIds.length;\n        require(\n            length == originalWithdrawals.length &&\n                length == originalShares.length &&\n                length == users.length,\n            \"TT-YF-07\"\n        );\n\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\n\n        // Start looping through each combination\n        for (uint i; i < length; ) {\n            uint termId = termIds[i];\n            address user = users[i];\n\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n                ._yieldStorage()\n                .yields[termId];\n\n            // Make sure user is part of this term and has enabled yield generation\n            require(yield.hasOptedIn[user], \"TT-YF-08\");\n\n            // Zaynfi's addresses\n            address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n            address zapAddress = yield.providerAddresses[\"ZaynZap\"];\n\n            // Calculate what each user is owed\n            int reimbursement = _calculateReimbursement(\n                originalWithdrawals[i],\n                originalShares[i],\n                yield\n            );\n\n            if (reimbursement > 0) {\n                // Reimbursement is positive, this means the user withdrew less shares than he was supposed to\n                uint neededShares = uint(reimbursement);\n\n                // Code copied from _withdrawYG, get the amount of shares back and give it to the user\n                uint withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    neededShares,\n                    termId\n                );\n\n                yield.withdrawnYield[user] += withdrawnYield;\n                yield.availableYield[user] += withdrawnYield;\n\n                // Claim the yield right away and send it to the user\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\n\n                emit OnYieldReimbursed(termId, user, withdrawnYield);\n            } else if (reimbursement < 0) {\n                // When there is a negative reimbursement, we compensate the pool by adding back the exact amount of shares that were lost\n                uint neededShares = uint(reimbursement * -1);\n\n                // Calculate the amount of eth we need to deposit to get the desired shares\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\n\n                uint neededEth = (15 * neededShares * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\n                uint sharesBefore = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n\n                // Make sure we have enough eth\n                require(neededEth + usedValue <= msg.value, \"TT-YF-09\");\n\n                // Deposit the amount of shares we lost\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\n\n                // Increment the used value so far\n                usedValue += neededEth;\n\n                // Validate the amount of shares deposited\n                uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    sharesAfter - sharesBefore - neededShares,\n                    termId\n                );\n\n                uint sharesFinal = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n                require(neededShares == (sharesFinal - sharesBefore), \"TT-YF-10\");\n\n                // Give the extra eth back to msg.sender\n                usedValue -= withdrawnExtraEth;\n\n                emit OnYieldCompensated(termId, user, (neededEth - withdrawnExtraEth));\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Reimburse the leftover eth that the msg.sender sent\n        if (usedValue < msg.value) {\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\"\");\n            require(success, \"TT-YF-11\");\n        }\n    }\n\n    /// @notice To be used in case of emergency, when there are more shares deposited than expected\n    /// @param termIds The term ids for which the yield balance is to be restored\n    function reimburseExtraYield(uint[] memory termIds) external payable onlyOwner {\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\n        for (uint i; i < termIds.length; ) {\n            uint termId = termIds[i];\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n                ._yieldStorage()\n                .yields[termId];\n\n            if (!yield.initialized) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            // Zaynfi's addresses\n            address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n            address zapAddress = yield.providerAddresses[\"ZaynZap\"];\n\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\n                yield.totalDeposit;\n            uint actualShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n\n            if (actualShares == neededShares) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            address[] memory users = yield.yieldUsers;\n            uint reimbursed;\n            uint withdrawnYield;\n\n            // Super small values are removed\n            if ((actualShares - neededShares) < 100000) {\n                // ZapIn some ETH to withdraw the last few shares\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: 100000}(vaultAddress, termId);\n                usedValue += 100000;\n                withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId) - neededShares,\n                    termId\n                );\n                // Send back to msg.sender because there is no profit here\n                usedValue -= withdrawnYield;\n\n                require(\n                    neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId),\n                    \"TT-YF-12\"\n                );\n\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            for (uint j; j < users.length; ) {\n                address user = users[j];\n\n                uint toWithdraw;\n\n                // Prevent rounding errors and make sure everything is withdrawn. This is done at the last user.\n                if (j + 1 == users.length) {\n                    toWithdraw = actualShares - neededShares - reimbursed;\n                } else {\n                    // Distribute the extra shares based on the yield distribution ratio\n                    toWithdraw =\n                        ((actualShares - neededShares) * yield.depositedCollateralByUser[user]) /\n                        yield.totalDeposit;\n                    reimbursed += toWithdraw;\n                }\n\n                // ZapOut the user's portion\n                withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    toWithdraw,\n                    termId\n                );\n\n                yield.withdrawnYield[user] += withdrawnYield;\n                yield.availableYield[user] += withdrawnYield;\n\n                // Claim the yield right away and send it to the user\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\n\n                emit OnYieldCompensated(termId, user, withdrawnYield);\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            require(\n                neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId),\n                \"TT-YF-12\"\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Reimburse the leftover eth that the msg.sender sent\n        if (usedValue < msg.value) {\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\"\");\n            require(success, \"TT-YF-11\");\n        }\n    }\n\n    /// @notice To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\n    /// @param termIds The term ids for which the yield balance is to be restored\n    function restoreYieldBalance(uint[] memory termIds) external payable onlyOwner {\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\n        // Start looping through each term id\n        for (uint i; i < termIds.length; ) {\n            uint termId = termIds[i];\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n                ._yieldStorage()\n                .yields[termId];\n\n            if (!yield.initialized) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            // Zaynfi's addresses\n            address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n            address zapAddress = yield.providerAddresses[\"ZaynZap\"];\n\n            // Validate currentTotalDeposit to match the expected shares\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\n                yield.totalDeposit;\n\n            require(\n                neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId),\n                \"TT-YF-13\"\n            );\n\n            // Deal with the case where the user has withdrawn too much eth from yield\n            // The user did not actually withdraw more ETH to his wallet, just that it was withdrawn back to the smart contract\n            // So no ETH was lost\n            address[] memory users = yield.yieldUsers;\n            uint withdrawnTooMuch;\n\n            for (uint j; j < users.length; ) {\n                address user = users[j];\n\n                uint withdraw = yield.withdrawnCollateral[user];\n                uint deposit = yield.depositedCollateralByUser[user];\n\n                if (withdraw > deposit) {\n                    withdrawnTooMuch += (withdraw - deposit);\n\n                    // Restore the withdrawnCollateral amount of the user to what it's supposed to be\n                    yield.withdrawnCollateral[user] = deposit;\n\n                    emit OnWithdrawnBalanceRestored(termId, user, deposit);\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            // Safety check but most likely the case\n            if (withdrawnTooMuch == 0) {\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            // Restore currentTotalDeposit to what it's supposed to be\n            yield.currentTotalDeposit += withdrawnTooMuch;\n\n            // We calculate the current shares we actually need in total for this term\n            neededShares = (yield.currentTotalDeposit * yield.totalShares) / yield.totalDeposit;\n\n            // withdrawnTooMuch was withdrawn back to the smart contract, we must send it back to the yield vault\n            IZaynZapV2TakaDAO(zapAddress).zapInEth{value: withdrawnTooMuch}(vaultAddress, termId);\n\n            // Get the shares after\n            uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n            if (neededShares > sharesBalance) {\n                // If we still need more shares (which is most likely the case), we compensate by putting the missing amount into the vault\n                // Calculate the amount of eth we need to deposit to get the desired shares\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\n\n                uint neededEth = (15 * (neededShares - sharesBalance) * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\n\n                // Make sure we have enough eth\n                require(neededEth + usedValue <= msg.value, \"TT-YF-09\");\n\n                // Deposit the amount of shares we lost\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\n\n                // Increment the used value so far\n                usedValue += neededEth;\n\n                // Validate the amount of shares deposited\n                sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\n\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    sharesBalance - neededShares,\n                    termId\n                );\n\n                require(\n                    neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId),\n                    \"TT-YF-10\"\n                );\n\n                // Give the extra eth back to msg.sender\n                usedValue -= withdrawnExtraEth;\n\n                emit OnYieldTermUpdated(termId, withdrawnTooMuch, (neededEth - withdrawnExtraEth));\n            } else if (sharesBalance > neededShares) {\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\n                IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n                    vaultAddress,\n                    sharesBalance - neededShares,\n                    termId\n                );\n\n                emit OnYieldTermUpdated(termId, withdrawnTooMuch, 0);\n            }\n\n            // Some sanity checks\n            uint currentTotalDeposit;\n            for (uint j; j < users.length; ) {\n                address user = users[j];\n                uint withdraw = yield.withdrawnCollateral[user];\n                uint deposit = yield.depositedCollateralByUser[user];\n                require(deposit >= withdraw, \"TT-YF-14\");\n\n                currentTotalDeposit +=\n                    yield.depositedCollateralByUser[user] -\n                    yield.withdrawnCollateral[user];\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            require(yield.currentTotalDeposit == currentTotalDeposit, \"TT-YF-15\");\n\n            uint currentShares = (currentTotalDeposit * yield.totalShares) / yield.totalDeposit;\n\n            require(\n                currentShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId),\n                \"TT-YF-16\"\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Reimburse the leftover eth that the msg.sender sent\n        if (usedValue < msg.value) {\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\"\");\n            require(success, \"TT-YF-11\");\n        }\n    }\n\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\n    /// @notice The position of each array is used as a set in the calculation\n    /// @param originalWithdrawal The original ETH withdrawal amount\n    /// @param originalShares The original calculated shares amount\n    /// @param yield the reference to the yield\n    function _calculateReimbursement(\n        uint originalWithdrawal,\n        uint originalShares,\n        LibYieldGenerationStorage.YieldGeneration storage yield\n    ) internal view returns (int) {\n        uint correctedShares = (originalWithdrawal * yield.totalShares) / yield.totalDeposit;\n\n        if (correctedShares > originalShares) {\n            return int(correctedShares - originalShares);\n        } else if (correctedShares < originalShares) {\n            return int(originalShares - correctedShares) * -1;\n        }\n\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\n/// @title Takaturn Collateral Interface\n/// @author Aisha EL Allam\n/// @notice This is used to allow fund to easily communicate with collateral\n/// @dev v2.0 (post-deploy)\n\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\ninterface ICollateral {\n    /// @notice Called from Fund contract when someone defaults\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\n    /// @dev Revert if the caller is not the Diamond proxy\n    /// @param term Term object\n    /// @param defaulters Addressess of all defaulters of the current cycle\n    /// @return expellants array of addresses that were expelled\n    function requestContribution(\n        LibTermStorage.Term memory term,\n        address[] calldata defaulters\n    ) external returns (address[] memory);\n\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId term id\n    function withdrawCollateral(uint termId) external;\n\n    /// @notice Called by each member after during or at the end of the term to withraw collateral to a different address than the caller\n    /// @dev This follows the pull-over-push pattern.\n    /// @dev Revert if the caller is not a participant\n    /// @param termId term id\n    /// @param receiver receiver address\n    function withdrawCollateralToAnotherAddress(uint termId, address receiver) external;\n\n    /// @notice Allows to withdraw all collateral from the at the term's end\n    /// @dev Does not withdraw anything, just set the state for users to withdraw\n    /// @dev Revert if the fund is not closed\n    /// @param termId term id\n    function releaseCollateral(uint termId) external;\n\n    /// @notice allow the owner to empty the Collateral after 180 days\n    /// @dev Revert if the collateral is not at releasing collateral\n    /// @dev Revert if the caller is not the term owner\n    /// @dev Revert if the time is not met\n    /// @param termId The term id\n    function emptyCollateralAfterEnd(uint termId) external;\n}\n"
    },
    "contracts/interfaces/IFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\n/// @title Takaturn Fund Interface\n/// @author Mohammed Haddouti\n/// @notice This is used to allow collateral to easily communicate with fund\n/// @dev v2.0 (post-deploy)\n\nimport {LibFund} from \"../libraries/LibFund.sol\";\n\ninterface IFund {\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\n    /// @param termId the id of the term\n    function startNewCycle(uint termId) external;\n\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\n    /// @dev Revert if still time to contribute\n    /// @dev Revert if Fund is not accepting contributions\n    /// @param termId the id of the term\n    function closeFundingPeriod(uint termId) external;\n\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\n    ///         and prevent the fund to be stuck in limbo\n    /// @dev Revert if the caller is not the term owner\n    /// @dev Revert if the time is not met (180 days)\n    /// @param termId the id of the term\n    function emptyFundAfterEnd(uint termId) external;\n\n    /// @notice function to enable/disable autopay\n    /// @dev Revert if the user is not a collateral member\n    /// @dev Revert if the Fund is closed\n    /// @dev It needs the user to have enough tokens and allow the contract as spender\n    /// @dev Can be set before the Fund starts\n    /// @param termId the id of the term\n    function toggleAutoPay(uint termId) external;\n\n    /// @notice This is the function participants call to pay the contribution\n    /// @param termId the id of the term\n    function payContribution(uint termId) external;\n\n    /// @notice This function is here to give the possibility to pay using a different wallet\n    /// @param termId the id of the term\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\n    function payContributionOnBehalfOf(uint termId, address participant) external;\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId the id of the term\n    function withdrawFund(uint termId) external;\n\n    /// @notice Called by the beneficiary to withdraw the fund\n    /// @dev This follows the pull-over-push pattern.\n    /// @param termId the id of the term\n    /// @param receiver the address that will receive the fund\n    function withdrawFundOnAnotherWallet(uint termId, address receiver) external;\n}\n"
    },
    "contracts/interfaces/IGetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibCollateralStorage} from \"../libraries/LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"../libraries/LibFundStorage.sol\";\nimport {LibGettersHelpers} from \"../libraries/LibGettersHelpers.sol\";\n\ninterface IGetters {\n    /// @notice This function is used as a helper for front-end implementation\n    /// @param termId The term id for which the summary is being requested\n    /// @return term The term object\n    /// @return collateralState The current state of the collateral\n    /// @return fundState The current state of the fund\n    /// @return nonUserRelated A helper struct with the following values:\n    ///                        available positions, security deposits corresponding to each position,\n    ///                        remaining registration time, remaining contribution time,\n    ///                        remaining cycle time, remaining cycles, remaining cycles\n    ///                        contribution in wei, latest price from Chainlink, collateral\n    ///                        first deposit time in seconds, collateral counter members,\n    ///                        fund start time in seconds, fund end time in seconds, current\n    ///                        cycle, expelled participants, total amount of cycles, yield\n    ///                        start time in seconds, total deposit in wei, current total\n    ///                        deposit in wei, total shares\n    function getTermRelatedSummary(\n        uint termId\n    )\n        external\n        view\n        returns (\n            LibTermStorage.Term memory term,\n            LibCollateralStorage.CollateralStates collateralState,\n            LibFundStorage.FundStates fundState,\n            LibGettersHelpers.NonUserRelated memory nonUserRelated\n        );\n\n    /// @notice This function is used as a helper for front-end implementation\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return userRelated an object that contains the following values:\n    ///                     user is collateral member, user is undercollaterized,\n    ///                     current collateral balance, received collateral from defaults,\n    ///                     initial deposited collateral, collateral expulsion limit,\n    ///                     currently withdrawable balance, is fund member, is or was beneficiary,\n    ///                     user paid current cycle, user paid next cycle in advance,\n    ///                     user enabled autopay, user's money pot is frozen, user is exempted this\n    ///                     cycle, the money pot pool the user can withdraw, the cycle the user got\n    ///                     expelled (if applicable), is yield member, amount of collateral deposited\n    ///                     in yield pool, amount of collateral withdrawn from yield pool, available\n    ///                     yield to withdraw, amount of yield withdrawn, yield to be distributed\n    function getUserRelatedSummary(\n        address user,\n        uint termId\n    ) external view returns (LibGettersHelpers.UserRelated memory userRelated);\n\n    /// @notice This function return the current constant values for oracles and yield providers\n    /// @param firstAggregator The name of the first aggregator. Example: \"ETH/USD\"\n    /// @param secondAggregator The name of the second aggregator. Example: \"USDC/USD\"\n    /// @param zapAddress The name of the zap address. Example: \"ZaynZap\"\n    /// @param vaultAddress The name of the vault address. Example: \"ZaynVault\"\n    /// @return The addresses of the oracles and yield providers\n    function getConstants(\n        string memory firstAggregator,\n        string memory secondAggregator,\n        string memory zapAddress,\n        string memory vaultAddress\n    ) external view returns (address, address, address, address);\n\n    /// @notice This function is used to get the current state of the yield lock\n    /// @return The current state of the yield lock\n    function getYieldLockState() external view returns (bool);\n\n    /// @return the current term id\n    /// @return the next term id\n    function getTermsId() external view returns (uint, uint);\n\n    /// @notice Gets the term object\n    /// @param termId the term id\n    /// @return the term object\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\n\n    /// @notice Gets the collateral summary of a term\n    /// @param termId the id of the term\n    /// @return if collateral is initialized\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\n    /// @return current member count\n    /// @return list of depositors\n    function getCollateralSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\n\n    /// @notice Gets the fund summary of a term\n    /// @param termId the id of the term\n    /// @return if fund is initialized\n    /// @return current state of the fund, see States struct in LibFund.sol\n    /// @return stablecoin address used\n    /// @return list for order of beneficiaries\n    /// @return when the fund started in seconds\n    /// @return when the fund ended in seconds, 0 otherwise\n    /// @return current cycle of fund\n    /// @return total amount of cycles in this fund/term\n    function getFundSummary(\n        uint termId\n    )\n        external\n        view\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\n\n    /// @notice Gets the yield object\n    /// @param termId the collateral id\n    /// @return if the yield is initialized\n    /// @return start time stamp for yield deposit\n    /// @return total deposit\n    /// @return current amount in yield\n    /// @return amount of total shares\n    /// @return list of yield users\n    /// @return address of vault\n    /// @return address of zap\n    function getYieldSummary(\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\n\n    /// @notice This function is used to get a term APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @return The APY for the term\n    function termAPY(uint termId) external view returns (uint256);\n\n    /// @notice a function to get the needed allowance\n    /// @param user the user address\n    /// @return the needed allowance\n    function getNeededAllowance(address user) external view returns (uint);\n\n    /// @notice function to get the beneficiary from the current cycle\n    /// @param termId the fund id\n    /// @return the current beneficiary\n    function getCurrentBeneficiary(uint termId) external view returns (address);\n\n    /// @notice Gets the next beneficiary of a term\n    /// @param termId the id of the term\n    /// @return user address\n    function getNextBeneficiary(uint termId) external view returns (address);\n\n    /// @notice Gets a users collateral summary\n    /// @param depositor address\n    /// @param termId the id of the term\n    /// @return if the user is a true member of the term\n    /// @return current users locked collateral balance in wei\n    /// @return current users unlocked collateral balance in wei\n    /// @return initial users deposit in wei\n    /// @return expulsion limit\n    function getDepositorCollateralSummary(\n        address depositor,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint);\n\n    /// @notice function to get fund information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return isParticipant, true if is participant\n    /// @return isBeneficiary, true if has been beneficiary\n    /// @return paidThisCycle, true if has paid the current cycle\n    /// @return autoPayEnabled, true if auto pay is enabled\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\n    function getParticipantFundSummary(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool, bool, bool, uint, bool);\n\n    /// @notice Gets the user yield summary\n    /// @param user the depositor address\n    /// @param termId the collateral id\n    /// @return if the user opted in for yield\n    /// @return amount withdrawn from yield\n    /// @return amount withdrawn from collateral\n    /// @return amount available in yield\n    /// @return amount deposited by user in yield\n    /// @return amount of yield distributed\n    function getUserYieldSummary(\n        address user,\n        uint termId\n    ) external view returns (bool, uint, uint, uint, uint, uint);\n\n    /// @notice function to get cycle information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return on participant set\n    /// @return on beneficiary set\n    /// @return on defaulter set\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool);\n\n    /// @notice Called to check how much collateral a user can withdraw\n    /// @param termId term id\n    /// @param user depositor address\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\n    function getWithdrawableUserBalance(\n        uint termId,\n        address user\n    ) external view returns (uint allowedWithdrawal);\n\n    /// @notice Get all the terms a participant was expelled from\n    /// @param participant the participant address\n    /// @return an array the term ids on which the participant was expelled\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param termId The term id\n    /// @param member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\n\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\n    /// @param termId the id of the term\n    /// @param cycle number\n    /// @param user address\n    /// @return true or false\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\n\n    /// @notice This function is used to check if a user has opted in for yield generation\n    /// @param termId The term id for which the check is being made\n    /// @param user The user for which the check is being made\n    /// @return True if the user has opted in\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\n\n    /// @notice This function is used to get a user APY\n    /// @param termId The term id for which the APY is being calculated\n    /// @param user The user for which the APY is being calculated\n    /// @return The APY for the user\n    function userAPY(uint termId, address user) external view returns (uint256);\n\n    /// @notice function to get fund information of a specific participant\n    /// @param participant the user to get the info from\n    /// @param termId the fund id\n    /// @return paidThisCycle, true if has paid the current cycle\n    /// @return paidNextCycle, true if has paid the next cycle\n    function currentOrNextCyclePaid(\n        address participant,\n        uint termId\n    ) external view returns (bool, bool);\n\n    /// @param termId the id of the term\n    /// @param beneficiary the address of the participant to check\n    /// @return true if the participant is a beneficiary\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\n\n    /// @notice Gets if a user is expelled from a specefic term\n    /// @param termId the id of the term\n    /// @param user address\n    /// @return true or false\n    function wasExpelled(uint termId, address user) external view returns (bool);\n\n    /// @notice checks if a participant have been expelled before being a beneficiary\n    /// @param termId the id of the term\n    /// @param user the address of the participant to check\n    /// @return true if the participant is expelled before being a beneficiary\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\n\n    /// @notice Gets the conversion rate of an amount in ETH to USD\n    /// @param ethAmount The amount in ETH\n    /// @return uint converted amount in USD correct to 18 decimals\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\n\n    /// @notice Gets all remaining cycles of a term\n    /// @param termId the id of the term\n    /// @return remaining cycles\n    function getRemainingCycles(uint termId) external view returns (uint);\n\n    /// @notice Gets the expected remaining contribution amount for users in a term\n    /// @param termId the id of the term\n    /// @return total remaining contribution in wei\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\n\n    /// @notice Called to check the minimum collateral amount to deposit in wei\n    /// @param termId term id\n    /// @param depositorIndex the index the depositor wants to join\n    /// @return amount the minimum collateral amount to deposit in wei\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\n\n    /// @notice Gets latest ETH / USD price\n    /// @dev Revert if there is problem with chainlink data\n    /// @return uint latest price in Wei Note: 18 decimals\n    function getLatestPrice() external view returns (uint);\n\n    /// @notice Gets the conversion rate of an amount in USD to ETH\n    /// @param USDAmount The amount in USD with 18 decimals\n    /// @return uint converted amount in wei\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\n\n    /// @notice This function is used to get the total yield generated for a term\n    /// @param termId The term id for which the yield is being calculated\n    /// @return The total yield generated for the term\n    function totalYieldGenerated(uint termId) external view returns (uint);\n\n    /// @notice Get all the terms a participant is part of\n    /// @param participant the participant address\n    /// @return an array with the term ids the participant is part of\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\n\n    /// @notice Get all the terms a participant is part of by a given state\n    /// @param participant the participant address\n    /// @param state the term state\n    /// @return an array with the term ids the participant is part of, giving the state of the term\n    function getJoinedTermsByState(\n        address participant,\n        LibTermStorage.TermStates state\n    ) external view returns (uint[] memory);\n\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\n    /// @param termId the term id\n    /// @dev Available positions starts at 0\n    /// @return availablePositions an array with the available positions\n    /// @return securityAmount an array with the security amount for each available position\n    function getAvailablePositionsAndSecurityAmount(\n        uint termId\n    ) external view returns (uint[] memory, uint[] memory);\n\n    /// @notice Gets the remaining registration period for a term\n    /// @dev Revert if nobody have deposited\n    /// @param termId the term id\n    /// @return remaining contribution period\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\n\n    /// @notice Must return 0 before closing a contribution period\n    /// @param termId the id of the term\n    /// @return remaining contribution time in seconds\n    function getRemainingContributionTime(uint termId) external view returns (uint);\n\n    /// @notice Must be 0 before starting a new cycle\n    /// @param termId the id of the term\n    /// @return remaining cycle time in seconds\n    function getRemainingCycleTime(uint termId) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ITerm.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\ninterface ITerm {\n    /// @notice Create a new term\n    /// @param totalParticipants The number of participants in the term\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\n    /// @param cycleTime The time in seconds that the term will last\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\n    /// @param stableTokenAddress The address of the stable token\n    /// @return termId The id of the new term\n    function createTerm(\n        uint totalParticipants,\n        uint registrationPeriod,\n        uint cycleTime,\n        uint contributionAmount,\n        uint contributionPeriod,\n        address stableTokenAddress\n    ) external returns (uint);\n\n    /// @notice Join a term at the next available position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    function joinTerm(uint termId, bool optYield) external payable;\n\n    /// @notice Join a term at a specific position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param position The position in the term\n    function joinTermOnPosition(uint termId, bool optYield, uint position) external payable;\n\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param newParticipant The address of the new participant\n    function paySecurityOnBehalfOf(\n        uint termId,\n        bool optYield,\n        address newParticipant\n    ) external payable;\n\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\n    /// @param termId The id of the term\n    /// @param optYield Whether the participant wants to opt in for yield generation\n    /// @param newParticipant The address of the new participant\n    /// @param position The position in the term\n    function paySecurityOnBehalfOf(\n        uint termId,\n        bool optYield,\n        address newParticipant,\n        uint position\n    ) external payable;\n\n    /// @notice Start a term\n    /// @param termId The id of the term\n    function startTerm(uint termId) external;\n\n    /// @notice Expire a term\n    /// @param termId The id of the term\n    function expireTerm(uint termId) external;\n}\n"
    },
    "contracts/interfaces/IYGFacetZaynFi.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\ninterface IYGFacetZaynFi {\n    /// @notice This function allows a user to claim the current available yield\n    /// @param termId The term id for which the yield is being claimed\n    /// @param receiver The address of the user who will receive the yield\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\n    function claimAvailableYield(uint termId, address receiver) external;\n\n    /// @notice This function allows a user to toggle their yield generation\n    /// @dev only allowed before the term starts\n    /// @dev Revert if the user has not paid the collateral security deposit\n    /// @param termId The term id for which the yield is being claimed\n    function toggleOptInYG(uint termId) external;\n\n    /// @notice This function allows the owner to update the global variable for new yield provider\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\n\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\n    /// @return The new value of the yield lock\n    function toggleYieldLock() external returns (bool);\n\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\n    /// @param termId The term id for which the yield is being claimed\n    /// @param providerString The provider string for which the address is being updated\n    /// @param providerAddress The new address of the provider\n    function updateProviderAddressOnTerms(\n        uint termId,\n        string memory providerString,\n        address providerAddress\n    ) external;\n}\n"
    },
    "contracts/interfaces/IZaynVaultV2TakaDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynVaultV2TakaDao {\n    function totalSupply() external view returns (uint256);\n\n    function depositZap(uint256 _amount, uint256 _term) external;\n\n    function withdrawZap(uint256 _shares, uint256 _term) external;\n\n    function want() external view returns (address);\n\n    function balance() external view returns (uint256);\n\n    function strategy() external view returns (address);\n\n    function balanceOf(uint256 term) external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IZaynZapV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynZapV2TakaDAO {\n    function zapInEth(address vault, uint256 termID) external payable;\n\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\n\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\n}\n"
    },
    "contracts/libraries/LibCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {LibCollateralStorage} from \"./LibCollateralStorage.sol\";\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\n\nlibrary LibCollateral {\n    event OnCollateralStateChanged(\n        uint indexed termId,\n        LibCollateralStorage.CollateralStates indexed oldState,\n        LibCollateralStorage.CollateralStates indexed newState\n    ); // Emits when the state of the collateral changes\n    event OnReimbursementWithdrawn(\n        uint indexed termId,\n        address indexed participant,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a participant withdraws their reimbursement\n\n    /// @notice Sets the state of the collateral\n    /// @param _termId term id\n    /// @param _newState collateral state\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\n        collateral.state = _newState;\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\n    }\n\n    /// @notice Allow a user to withdraw their reimbursement\n    /// @dev Reverts if the fund does not exists or if the user has nothing to claim\n    /// @param _termId term id\n    /// @param _participant Address of the depositor\n    /// @param _receiver Address of the receiver\n    function _withdrawReimbursement(\n        uint _termId,\n        address _participant,\n        address _receiver\n    ) internal {\n        require(LibFundStorage._fundExists(_termId), \"TT-LC-01\");\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        uint amount = collateral.collateralPaymentBank[_participant];\n        require(amount > 0, \"TT-LC-02\");\n        collateral.collateralPaymentBank[_participant] = 0;\n\n        (bool success, ) = payable(_receiver).call{value: amount}(\"\");\n        require(success);\n\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\n    }\n\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\n    /// @dev This will revert if called during ReleasingCollateral or after\n    /// @param _termId The fund id\n    /// @param _member The user to check for\n    /// @return Bool check if member is below 1.0x of collateralDeposit\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\n            ._collateralStorage()\n            .collaterals[_termId];\n\n        uint collateralLimit;\n        uint memberCollateral = collateral.collateralMembersBank[_member];\n\n        if (!LibFundStorage._fundExists(_termId)) {\n            // Only check here when starting the term\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\n                _member,\n                _termId\n            );\n        } else {\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\n        }\n\n        return (memberCollateral < collateralLimit);\n    }\n}\n"
    },
    "contracts/libraries/LibCollateralStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibCollateralStorage {\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\"diamond.standard.collateral.storage\");\n\n    enum CollateralStates {\n        AcceptingCollateral, // Initial state where collateral are deposited\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\n        ReleasingCollateral, // Triggered when the fund closes\n        Closed // Triggered when all depositors withdraw their collaterals\n    }\n\n    struct DefaulterState {\n        bool payWithCollateral;\n        bool payWithFrozenPool;\n        bool gettingExpelled;\n        bool isBeneficiary;\n    }\n\n    struct Collateral {\n        bool initialized;\n        CollateralStates state;\n        uint firstDepositTime; // Time when the first deposit was made in seconds\n        uint counterMembers;\n        address[] depositors;\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\n        mapping(address => uint) collateralMembersBank; // Users main balance\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\n    }\n\n    struct CollateralStorage {\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\n    }\n\n    function _collateralExists(uint termId) internal view returns (bool) {\n        return _collateralStorage().collaterals[termId].initialized;\n    }\n\n    function _collateralStorage()\n        internal\n        pure\n        returns (CollateralStorage storage collateralStorage)\n    {\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\n        assembly {\n            collateralStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IGetters} from \"../interfaces/IGetters.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {LibTermStorage} from \"./LibTermStorage.sol\";\nimport {LibFundStorage} from \"./LibFundStorage.sol\";\n\nlibrary LibFund {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\n    event OnFundStateChanged(\n        uint indexed termId,\n        uint indexed currentCycle,\n        LibFundStorage.FundStates indexed newState\n    ); // Emits when state has updated\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\n\n    /// @notice called by the term to init the fund\n    /// @param termId the id of the term\n    function _initFund(uint termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\n        // Set and track participants\n        for (uint i; i < participantsArrayLength; ) {\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\n\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Starts the first cycle\n        _startNewCycle(termId);\n\n        // Set timestamp of deployment, which will be used to determine cycle times\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\n        fund.fundStart = block.timestamp;\n        //emit LibFund.OnTermStart(termId);\n        emit OnTermStart(termId);\n    }\n\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\n    /// @dev Rever if the fund is not in the right state or if it's too early to start a new cycle\n    /// @param _termId The id of the term\n    function _startNewCycle(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n        // currentCycle is 0 when this is called for the first time\n        require(block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart, \"TT-LF-01\");\n        require(\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\n            \"TT-LF-02\"\n        );\n\n        ++fund.currentCycle;\n        uint length = fund.beneficiariesOrder.length;\n        for (uint i; i < length; ) {\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = fund.paidNextCycle[\n                fund.beneficiariesOrder[i]\n            ];\n            fund.paidNextCycle[fund.beneficiariesOrder[i]] = false;\n\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\n\n        // We attempt to make the autopayers pay their contribution right away\n        _autoPay(_termId);\n    }\n\n    /// @notice updates the state according to the input and makes sure the state can't be changed if\n    ///         the fund is closed. Also emits an event that this happened\n    /// @dev Reverts if the fund is closed\n    /// @param _termId The id of the term\n    /// @param _newState The new state of the fund\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \"TT-LF-03\");\n        fund.currentState = _newState;\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\n    }\n\n    /// @notice function to attempt to make autopayers pay their contribution\n    /// @param _termId the id of the term\n    function _autoPay(uint _termId) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n\n        // Get the beneficiary for this cycle\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\n\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\n        uint autoPayersArray = autoPayers.length;\n\n        for (uint i; i < autoPayersArray; ) {\n            address autoPayer = autoPayers[i];\n            // The beneficiary doesn't pay\n            if (currentBeneficiary == autoPayer) {\n                /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n                unchecked {\n                    ++i;\n                }\n                continue;\n            }\n\n            if (\n                fund.autoPayEnabled[autoPayer] &&\n                !fund.paidThisCycle[autoPayer] &&\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\n            ) {\n                _payContributionSafe(_termId, autoPayer, autoPayer);\n            }\n\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\n    /// @param _termId the id of the term\n    /// @param _payer the address that's paying\n    /// @param _participant the (participant) address that's being paid for\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\n\n        // Get the amount and do the actual transfer\n        // This will only succeed if the sender approved this contract address beforehand\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\n            if (success) {\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\n                fund.paidThisCycle[_participant] = true;\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\n            }\n        } catch {}\n    }\n}\n"
    },
    "contracts/libraries/LibFundStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nlibrary LibFundStorage {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 constant FUND_POSITION = keccak256(\"diamond.standard.fund\");\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\"diamond.standard.fund.storage\");\n\n    enum FundStates {\n        InitializingFund, // Time before the first cycle has started\n        AcceptingContributions, // Triggers at the start of a cycle\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\n    }\n\n    struct PayExemption {\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\n    }\n\n    struct Fund {\n        bool initialized;\n        FundStates currentState; // Variable to keep track of the different FundStates\n        IERC20 stableToken; // Instance of the stable token\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\n        uint fundStart; // Timestamp of the start of the fund\n        uint fundEnd; // Timestamp of the end of the fund\n        uint currentCycle; // Index of current cycle\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\n        uint totalAmountOfCycles;\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\n    }\n\n    struct FundStorage {\n        mapping(uint => Fund) funds; // termId => Fund struct\n    }\n\n    function _fundExists(uint termId) internal view returns (bool) {\n        return _fundStorage().funds[termId].initialized;\n    }\n\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\n        bytes32 position = FUND_STORAGE_POSITION;\n        assembly {\n            fundStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibGettersHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibGettersHelpers {\n    struct NonUserRelated {\n        // Positions and security deposits related\n        uint[] availablePositions;\n        uint[] securityDeposits;\n        // Times and contributions related\n        uint remainingRegistrationTime; // In seconds\n        uint remainingContributionTime; // In seconds\n        uint remainingCycleTime; // In seconds\n        uint remainingCycles;\n        uint rcc; // Remaining Contribution Cycles in wei\n        uint latestPrice; // From Chainlink\n        // Collateral related\n        bool collateralInitialized;\n        uint collateralFirstDepositTime; // In seconds\n        uint collateralCounterMembers; // Member count\n        // Fund related\n        bool fundInitialized;\n        uint fundStartTime; // In seconds\n        uint fundEndTime; // In seconds\n        uint fundCurrentCycle;\n        uint fundExpellantsCount;\n        uint fundTotalCycles;\n        address[] fundBeneficiariesOrder;\n        // Yield related\n        bool yieldInitialized;\n        uint yieldStartTime; // In seconds\n        uint yieldTotalDeposit; // In wei\n        uint yieldCurrentTotalDeposit; // In wei\n        uint yieldTotalShares;\n        address[] yieldUsers;\n    }\n\n    struct UserRelated {\n        // Collateral related\n        bool collateralMember;\n        bool isUnderCollaterized;\n        uint membersBank;\n        uint paymentBank;\n        uint deposited;\n        uint expulsonLimit;\n        uint withdrawableBalance;\n        // Fund related\n        bool fundMember;\n        bool beneficiary;\n        bool currentCyclePaid;\n        bool nextCyclePaid;\n        bool autoPayer;\n        bool moneyPotFrozen;\n        bool exemptedThisCycle;\n        uint pool;\n        uint cycleExpelled;\n        // Yield related\n        bool yieldMember;\n        uint collateralDepositedInYield;\n        uint collateralWithdrawnFromYield;\n        uint yieldAvailable;\n        uint yieldWithdrawn;\n        uint distributedYield;\n    }\n}\n"
    },
    "contracts/libraries/LibTermOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\n\nlibrary LibTermOwnership {\n    /// @dev Revert if the sender is not the term owner.\n    function _ensureTermOwner(uint termId) internal view {\n        require(LibTermStorage._termStorage().terms[termId].termOwner == msg.sender, \"TT-LTO-01\");\n    }\n}\n"
    },
    "contracts/libraries/LibTermStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibTermStorage {\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\"diamond.standard.term.consts\");\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\"diamond.standard.term.storage\");\n\n    enum TermStates {\n        InitializingTerm,\n        ActiveTerm,\n        ExpiredTerm,\n        ClosedTerm\n    }\n\n    struct TermConsts {\n        mapping(string => address) aggregatorsAddresses; // \"ETH/USD\" => address , \"USDC/USD\" => address\n    }\n\n    struct Term {\n        bool initialized;\n        TermStates state;\n        address termOwner;\n        uint creationTime; // In seconds\n        uint termId;\n        uint registrationPeriod; // Time for registration (seconds)\n        uint totalParticipants; // Max number of participants\n        uint cycleTime; // Time for single cycle (seconds)\n        uint contributionAmount; // Amount user must pay per cycle (USD)\n        uint contributionPeriod; // The portion of cycle user must make payment\n        address stableTokenAddress;\n    }\n\n    struct TermStorage {\n        uint nextTermId;\n        mapping(uint => Term) terms; // termId => Term struct\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\n    }\n\n    function _termExists(uint termId) internal view returns (bool) {\n        return _termStorage().terms[termId].initialized;\n    }\n\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\n        bytes32 position = TERM_CONSTS_POSITION;\n        assembly {\n            termConsts.slot := position\n        }\n    }\n\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\n        bytes32 position = TERM_STORAGE_POSITION;\n        assembly {\n            termStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibWithdrawGoerliEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibWithdrawGoerliEth {\n    bytes32 constant TRUSTED_MANAGERS_POSITION = keccak256(\"diamond.standard.trusted.managers\");\n\n    struct TrustedManagers {\n        address[] managers;\n    }\n\n    function _trustedManagers() internal pure returns (TrustedManagers storage trustedManagers) {\n        bytes32 position = TRUSTED_MANAGERS_POSITION;\n        assembly {\n            trustedManagers.slot := position\n        }\n    }\n\n    function _addTrustedAddress(address newManager) internal {\n        require(newManager != address(0), \"Invalid address\");\n        TrustedManagers storage managers = _trustedManagers();\n        managers.managers.push(newManager);\n    }\n\n    function _enforceIsTrustedManager(address managerCheck) internal view returns (bool) {\n        TrustedManagers storage managers = _trustedManagers();\n        uint length = managers.managers.length;\n        for (uint i; i < length; ) {\n            if (managers.managers[i] == managerCheck) {\n                return true;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/libraries/LibYieldGeneration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IZaynZapV2TakaDAO} from \"../interfaces/IZaynZapV2TakaDAO.sol\";\nimport {IZaynVaultV2TakaDao} from \"../interfaces/IZaynVaultV2TakaDao.sol\";\n\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\n\nlibrary LibYieldGeneration {\n    event OnYieldClaimed(\n        uint indexed termId,\n        address indexed user,\n        address receiver,\n        uint indexed amount\n    ); // Emits when a user claims their yield\n\n    /// @notice This function is used to deposit collateral for yield generation\n    /// @param _termId The term id for which the collateral is being deposited\n    /// @param _ethAmount The amount of collateral being deposited\n    function _depositYG(uint _termId, uint _ethAmount) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        yield.totalDeposit = _ethAmount;\n        yield.currentTotalDeposit = _ethAmount;\n\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n\n        IZaynZapV2TakaDAO(yield.providerAddresses[\"ZaynZap\"]).zapInEth{value: _ethAmount}(\n            vaultAddress,\n            _termId\n        );\n\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\n    }\n\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\n    /// @param _termId The term id for which the collateral is being withdrawn\n    /// @param _collateralAmount The amount of collateral being withdrawn\n    /// @param _user The user address that is withdrawing the collateral\n    /// @return The amount of yield withdrawn\n    function _withdrawYG(\n        uint _termId,\n        uint256 _collateralAmount,\n        address _user\n    ) internal returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\n\n        yield.withdrawnCollateral[_user] += _collateralAmount;\n        yield.currentTotalDeposit -= _collateralAmount;\n\n        address zapAddress = yield.providerAddresses[\"ZaynZap\"];\n        address vaultAddress = yield.providerAddresses[\"ZaynVault\"];\n\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\n\n        // Prevent rounding errors\n        if (neededShares > sharesBalance) {\n            if (neededShares - sharesBalance < 10000) {\n                neededShares = sharesBalance;\n            }\n        } else {\n            if (sharesBalance - neededShares < 10000) {\n                neededShares = sharesBalance;\n            }\n        }\n\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\n            vaultAddress,\n            neededShares,\n            _termId\n        );\n\n        if (withdrawnAmount < _collateralAmount) {\n            return 0;\n        } else {\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\n            yield.withdrawnYield[_user] += withdrawnYield;\n            yield.availableYield[_user] += withdrawnYield;\n\n            return withdrawnYield;\n        }\n    }\n\n    /// @notice Conversion from shares to eth\n    /// @param _termId The term id\n    /// @param _yield The yield generation struct\n    /// @return Wei equivalent of the shares\n    function _sharesToEth(\n        uint _termId,\n        LibYieldGenerationStorage.YieldGeneration storage _yield\n    ) internal view returns (uint) {\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"]).balanceOf(\n            _termId\n        );\n\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\"ZaynVault\"])\n            .getPricePerFullShare();\n\n        return (termBalance * pricePerShare) / 10 ** 18;\n    }\n\n    /// @notice Conversion from eth to shares\n    /// @param _collateralAmount The amount of collateral to withdraw\n    /// @param _totalShares The total shares in the yield from the term\n    /// @param _totalDeposit The total deposit in the yield from the term\n    /// @return The amount of shares equivalent to a collateral amount\n    function _neededShares(\n        uint _collateralAmount,\n        uint _totalShares,\n        uint _totalDeposit\n    ) internal pure returns (uint) {\n        if (_totalDeposit == 0) return 0;\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\n    }\n\n    /// @notice This function is used to get the current total yield generated for a term\n    /// @param _termId The term id for which the yield is being calculated\n    /// @return The total yield generated for the term\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"]).balanceOf(\n            _termId\n        );\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\"ZaynVault\"])\n            .getPricePerFullShare();\n\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\n        if (sharesInEth > yield.currentTotalDeposit) {\n            return sharesInEth - yield.currentTotalDeposit;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice This function is used to get the yield distribution ratio for a user\n    /// @param _termId The term id for which the ratio is being calculated\n    /// @param _user The user for which the ratio is being calculated\n    /// @return The yield distribution ratio for the user\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        if (yield.currentTotalDeposit == 0) {\n            return 0;\n        } else {\n            return\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\n                    10 ** 18) / yield.currentTotalDeposit;\n        }\n    }\n\n    /// @notice This function is used to get the total yield generated for a user\n    /// @param termId The term id for which the yield is being calculated\n    /// @param user The user for which the yield is being calculated\n    /// @return The total yield generated for the user\n    function _unwithdrawnUserYieldGenerated(\n        uint termId,\n        address user\n    ) internal view returns (uint) {\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\n\n        return yieldDistributed;\n    }\n\n    /// @notice This function is used to claim the available yield for a user\n    /// @param _termId The term id for which the yield is being claimed\n    /// @param _user The user for which the yield is being claimed\n    /// @param _receiver The receiver of the yield\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\n            ._yieldStorage()\n            .yields[_termId];\n\n        uint availableYield = yield.availableYield[_user];\n\n        require(availableYield > 0, \"TT-LYG-01\");\n\n        yield.availableYield[_user] = 0;\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\"\");\n        require(success);\n\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\n    }\n}\n"
    },
    "contracts/libraries/LibYieldGenerationStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nlibrary LibYieldGenerationStorage {\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\"diamond.standard.yield.providers\");\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\"diamond.standard.yield.storage\");\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\"diamond.standard.yield.lock\");\n\n    enum YGProviders {\n        InHouse,\n        ZaynFi\n    }\n\n    struct YieldLock {\n        bool yieldLock;\n    }\n\n    // Both index 0 are reserved for ZaynFi\n    struct YieldProviders {\n        mapping(string => address) providerAddresses;\n    }\n\n    struct YieldGeneration {\n        bool initialized;\n        YGProviders provider;\n        mapping(string => address) providerAddresses;\n        uint startTimeStamp; // In seconds\n        uint totalDeposit; // In wei\n        uint currentTotalDeposit; // In wei\n        uint totalShares;\n        address[] yieldUsers;\n        mapping(address => bool) hasOptedIn;\n        mapping(address => uint256) withdrawnYield; // In wei\n        mapping(address => uint256) withdrawnCollateral; // In wei\n        mapping(address => uint256) availableYield; // In wei\n        mapping(address => uint256) depositedCollateralByUser; // In wei\n    }\n\n    struct YieldStorage {\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\n    }\n\n    function _yieldExists(uint termId) internal view returns (bool) {\n        return _yieldStorage().yields[termId].initialized;\n    }\n\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\n        bytes32 position = YIELD_LOCK_POSITION;\n        assembly {\n            yieldLock.slot := position\n        }\n    }\n\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\n        bytes32 position = YIELD_PROVIDERS_POSITION;\n        assembly {\n            yieldProviders.slot := position\n        }\n    }\n\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\n        bytes32 position = YIELD_STORAGE_POSITION;\n        assembly {\n            yieldStorage.slot := position\n        }\n    }\n}\n"
    },
    "contracts/mocks/aggregator/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.18;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockV3Aggregator is AggregatorV3Interface {\n    int256 price;\n    uint8 numDecimals;\n    uint256 age;\n\n    constructor(uint8 _numDecimals, int256 _price) {\n        price = _price;\n        numDecimals = _numDecimals;\n        age = 30;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return numDecimals;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"Mock Chainlink Oracle Feed\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function setPrice(int256 _price) public {\n        price = _price;\n    }\n\n    function setDecimals(uint8 _decimals) public {\n        numDecimals = _decimals;\n    }\n\n    function setAge(uint256 _age) public {\n        age = _age;\n    }\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = _roundId;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = 0;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n}\n"
    },
    "contracts/mocks/FakeInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport {LibTermStorage} from \"../libraries/LibTermStorage.sol\";\nimport {LibYieldGenerationStorage} from \"../libraries/LibYieldGenerationStorage.sol\";\n\ncontract FakeInit {\n    function init(\n        address _aggregatorAddressEthUsd,\n        address _aggregatorAddressUsdUsdc,\n        address _zapAddress, // Zaynfi Zap address\n        address _vaultAddress, // Zaynfi Vault address\n        bool _yieldLock\n    ) external {\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\n            ._yieldProviders();\n\n        termConsts.aggregatorsAddresses[\"ETH/USD\"] = _aggregatorAddressEthUsd;\n        termConsts.aggregatorsAddresses[\"USDC/USD\"] = _aggregatorAddressUsdUsdc;\n\n        yieldProvider.providerAddresses[\"ZaynZap\"] = _zapAddress;\n        yieldProvider.providerAddresses[\"ZaynVault\"] = _vaultAddress;\n\n        LibYieldGenerationStorage._yieldLock().yieldLock = _yieldLock;\n    }\n}\n"
    },
    "contracts/mocks/MockDiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {IDiamondCut} from \"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\";\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\n\ncontract MockDiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n    }\n}\n"
    },
    "contracts/mocks/tokens/tUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract tUSDC is ERC20 {\n    constructor() ERC20(\"test USDC Token\", \"tUSDC\") {}\n\n    function mintUSDC(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IMasterWombatV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Interface of the MasterWombatV2\n */\ninterface IMasterWombatV2 {\n    function getAssetPid(address asset) external view returns (uint256 pid);\n\n    function poolLength() external view returns (uint256);\n\n    function pendingTokens(\n        uint256 _pid,\n        address _user\n    )\n        external\n        view\n        returns (\n            uint256 pendingRewards,\n            IERC20[] memory bonusTokenAddresses,\n            string[] memory bonusTokenSymbols,\n            uint256[] memory pendingBonusRewards\n        );\n\n    function rewarderBonusTokenInfo(\n        uint256 _pid\n    )\n        external\n        view\n        returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\n\n    function massUpdatePools() external;\n\n    function updatePool(uint256 _pid) external;\n\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\n\n    function multiClaim(\n        uint256[] memory _pids\n    )\n        external\n        returns (\n            uint256 transfered,\n            uint256[] memory rewards,\n            uint256[][] memory additionalRewards\n        );\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function migrate(uint256[] calldata _pids) external;\n\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\n\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\n\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IPool {\n    function getTokens() external view returns (address[] memory);\n\n    function addressOfAsset(address token) external view returns (address);\n\n    function deposit(\n        address token,\n        uint256 amount,\n        uint256 minimumLiquidity,\n        address to,\n        uint256 deadline,\n        bool shouldStake\n    ) external returns (uint256 liquidity);\n\n    function withdraw(\n        address token,\n        uint256 liquidity,\n        uint256 minimumAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amount);\n\n    function withdrawFromOtherAsset(\n        address fromToken,\n        address toToken,\n        uint256 liquidity,\n        uint256 minimumAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amount);\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minimumToAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 actualToAmount, uint256 haircut);\n\n    function quotePotentialDeposit(\n        address token,\n        uint256 amount\n    ) external view returns (uint256 liquidity, uint256 reward);\n\n    function quotePotentialSwap(\n        address fromToken,\n        address toToken,\n        int256 fromAmount\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\n\n    function quotePotentialWithdraw(\n        address token,\n        uint256 liquidity\n    ) external view returns (uint256 amount, uint256 fee);\n\n    function quoteAmountIn(\n        address fromToken,\n        address toToken,\n        int256 toAmount\n    ) external view returns (uint256 amountIn, uint256 haircut);\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStrategy {\n    function vault() external view returns (address);\n\n    function want() external view returns (IERC20);\n\n    function beforeDeposit() external;\n\n    function deposit() external;\n\n    function withdraw(uint256) external;\n\n    function balanceOf() external view returns (uint256);\n\n    function balanceOfWant() external view returns (uint256);\n\n    function balanceOfPool() external view returns (uint256);\n\n    function harvest() external;\n\n    function retireStrat() external;\n\n    function panic() external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function paused() external view returns (bool);\n\n    function unirouter() external view returns (address);\n\n    function migrate() external;\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.9.0;\n\ninterface IUniswapRouter {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountsOut(\n        uint amountIn,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 _amount) external;\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombatLP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWombatLP is IERC20 {\n    function underlyingToken() external view returns (address);\n\n    function pool() external view returns (address);\n\n    function cash() external view returns (uint120);\n\n    function liability() external view returns (uint120);\n\n    function decimals() external view returns (uint8);\n\n    function underlyingTokenDecimals() external view returns (uint8);\n\n    function setPool(address pool_) external;\n\n    function underlyingTokenBalance() external view returns (uint256);\n\n    function transferUnderlyingToken(address to, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function burn(address to, uint256 amount) external;\n\n    function addCash(uint256 amount) external;\n\n    function removeCash(uint256 amount) external;\n\n    function addLiability(uint256 amount) external;\n\n    function removeLiability(uint256 amount) external;\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombatRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IWombatRouter {\n    function getAmountOut(\n        address[] calldata tokenPath,\n        address[] calldata poolPath,\n        int256 amountIn\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\n\n    function swapExactTokensForTokens(\n        address[] calldata tokenPath,\n        address[] calldata poolPath,\n        uint256 fromAmount,\n        uint256 minimumToAmount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IWombexInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IConvexBooster {\n    function deposit(uint256 pid, uint256 amount, bool stake) external returns (bool);\n\n    function poolInfo(\n        uint256 pid\n    )\n        external\n        view\n        returns (address lptoken, address token, address gauge, address crvRewards, bool shutdown);\n}\n\ninterface IConvexRewardPool {\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function periodFinish() external view returns (uint256);\n\n    function getReward() external;\n\n    function getReward(address _account, bool _claimExtras) external;\n\n    function withdrawAndUnwrap(uint256 _amount, bool claim) external;\n\n    function withdrawAllAndUnwrap(bool claim) external;\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynReferrerV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IZaynReferrerV2 {\n    function recordDeposit(address referrer, uint256 amount) external;\n\n    function recordWithdraw(address referrer, uint256 amount) external;\n\n    function recordFeeShare(uint256 amount) external;\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynStrategyV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynStrategyV2 {\n    function wantUnderlyingToken() external view returns (address);\n\n    function revShareToken() external view returns (address);\n}\n"
    },
    "contracts/mocks/zaynfi/interfaces/IZaynVaultV2TakaoDao.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.5;\n\ninterface IZaynVaultV2TakaoDao {\n    function totalSupply() external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function depositZap(uint256 _amount, uint256 _term) external;\n\n    function withdrawZap(uint256 _shares, uint256 _term) external;\n\n    function want() external pure returns (address);\n\n    function balance() external pure returns (uint256);\n\n    function strategy() external pure returns (address);\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/FeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./StratManager.sol\";\n\nabstract contract FeeManager is StratManager {\n    uint public constant MAX_FEE = 5000;\n    uint public constant FEE_DIVISOR = 1000;\n    uint public zaynFee = 200;\n    uint public mgmtFeeDelay = 43200; // 12 hours\n    uint public chargePerDay = 54794520000000; // 0.02 / 365\n    uint public revShareFees = 50; // 0.05 or 5%\n\n    function setZaynFee(uint256 _fee) public onlyManager {\n        require(_fee <= MAX_FEE, \"!cap\");\n        zaynFee = _fee;\n    }\n\n    function setMgmtFeeDelay(uint256 _seconds) public onlyManager {\n        mgmtFeeDelay = _seconds;\n    }\n\n    function setChargePerDay(uint256 _perDay) public onlyManager {\n        chargePerDay = _perDay;\n    }\n\n    function setRevShareFees(uint256 _revShareFees) public onlyManager {\n        revShareFees = _revShareFees;\n    }\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/StrategyV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/IUniswapRouter.sol\";\nimport \"../interfaces/IPool.sol\";\nimport \"../interfaces/IMasterWombatV2.sol\";\nimport \"./StratManager.sol\";\nimport \"./FeeManager.sol\";\nimport \"../interfaces/IZaynReferrerV2.sol\";\nimport \"../interfaces/IWombexInterfaces.sol\";\nimport \"../interfaces/IZaynStrategyV2.sol\";\nimport \"../interfaces/IWombatRouter.sol\";\n\ncontract StrategyV2Mock is StratManager, FeeManager, IZaynStrategyV2 {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // Tokens used\n    address public want;\n    address public override wantUnderlyingToken;\n\n    // Third party contracts\n    // IConvexBooster public booster = IConvexBooster(0x0A251FA652B59592E60f4bfBce3cD9Cb3d3bd5E9);\n    // IPool public wombatPool;\n    // address public rewardPool; // convex base reward pool\n    uint256 public poolId;\n\n    struct RewardV2 {\n        address token;\n        address router; // uniswap v2 router\n        address[] toWantUnderlyingRoute; // uniswap route\n        uint minAmount; // minimum amount to be swapped to native\n    }\n    RewardV2[] public rewards;\n\n    // Zayn settings\n    uint256 public lastFeeCharge;\n    bool public revShareEnabled = false;\n    IZaynReferrerV2 public zaynReferrer;\n    IWombatRouter public WOMBAT_ROUTER;\n    address public WETH;\n    // events\n    event Deposit(uint256 tvl);\n    event Withdraw(uint256 tvl);\n    event AddedLiquidity(uint256 amount);\n    event ChargedFees(uint256 revShareFees, uint256 zaynFees);\n    event ManagementFees(uint256 zaynFees);\n    event StratHarvest(address indexed harvester);\n    event Migrated();\n\n    constructor(\n        address _want,\n        address _wantUnderlyingToken,\n        // IPool _wombatPool,\n        uint256 _poolId,\n        address _vault,\n        address _unirouter,\n        address _manager,\n        address _strategist,\n        address _zaynFeeRecipient,\n        IWombatRouter _wombatRouter,\n        address _weth\n    ) StratManager(_manager, _strategist, _unirouter, _vault, _zaynFeeRecipient) {\n        want = _want;\n        wantUnderlyingToken = _wantUnderlyingToken;\n        // wombatPool = _wombatPool;\n        poolId = _poolId;\n        lastFeeCharge = block.timestamp;\n        WOMBAT_ROUTER = _wombatRouter;\n        WETH = _weth;\n        // Wombex\n        // (,,,rewardPool,) = booster.poolInfo(poolId);\n        // _giveAllowances();\n    }\n\n    // puts the funds to work\n    function deposit() public whenNotPaused {\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\n        if (wantBal > 0) {\n            // booster.deposit(poolId, wantBal, true);\n            emit Deposit(wantBal);\n        }\n    }\n\n    function withdraw(uint256 _amount) external {\n        require(msg.sender == vault, \"!vault\");\n\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\n\n        if (wantBal < _amount) {\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(_amount - wantBal, false);\n            wantBal = IERC20(want).balanceOf(address(this));\n        }\n\n        if (wantBal > _amount) {\n            wantBal = _amount;\n        }\n\n        IERC20(want).safeTransfer(vault, wantBal);\n        emit Withdraw(wantBal);\n    }\n\n    // compounds earnings and charges performance fee\n    function harvest() external whenNotPaused {\n        // IConvexRewardPool(rewardPool).getReward(); // harvest\n        // swapRewardsToUnderlying();\n\n        uint256 swapped = IERC20(wantUnderlyingToken).balanceOf(address(this));\n        if (swapped > 0) {\n            // chargeFees(swapped);\n            // addLiquidity();\n            // deposit();\n        }\n\n        emit StratHarvest(msg.sender);\n    }\n\n    function swapRewardsToUnderlying() internal view {\n        for (uint i; i < rewards.length; ++i) {\n            // uint bal = IERC20(rewards[i].token).balanceOf(address(this));\n            // if (bal >= rewards[i].minAmount) {\n            //     uint256[] memory amountOuts = IUniswapRouter(rewards[i].router).getAmountsOut(bal, rewards[i].toWantUnderlyingRoute);\n            //     uint256 _outputAmount = amountOuts[amountOuts.length - 1];\n            //     uint256 _slippage = _outputAmount.mul(5 * 10 ** 15).div((1e18));\n            //     uint256 _outputAmountAfterSlippage =  _outputAmount.sub(_slippage);\n            //     IUniswapRouter(rewards[i].router).swapExactTokensForTokens(\n            //         bal,\n            //         _outputAmountAfterSlippage,\n            //         rewards[i].toWantUnderlyingRoute,\n            //         address(this),\n            //         block.timestamp\n            //     );\n            // }\n        }\n    }\n\n    function swapEthToUnderlying(\n        address _token,\n        address _underlyingToken,\n        uint256 _amount\n    ) internal returns (uint256 swappedAmount) {\n        // address[] memory _path = new address[](2);\n        // _path[0] = address(_token);\n        // _path[1] = address(_underlyingToken);\n        // address[] memory _poolPathArr = new address[](1);\n        // _poolPathArr[0] = address(poolPath);\n        // (uint256 minDepositOut,) = getAmountOut(_path, _poolPathArr, int256(_amount));\n        // uint256 _before = IERC20(_underlyingToken).balanceOf(address(this));\n        // WOMBAT_ROUTER.swapExactTokensForTokens(\n        //     _path,\n        //     _poolPathArr,\n        //     _amount,\n        //     minDepositOut,\n        //     address(this),\n        //     block.timestamp\n        // );\n        // uint256 _after = IERC20(_underlyingToken).balanceOf(address(this));\n    }\n\n    // performance fees\n    function chargeFees(uint256 swapped) internal {\n        uint256 zaynFee = swapped.mul(zaynFee).div(FEE_DIVISOR);\n        if (revShareEnabled) {\n            uint256 revShareFees = zaynFee.mul(revShareFees).div(FEE_DIVISOR);\n            zaynReferrer.recordFeeShare(revShareFees);\n            IERC20(wantUnderlyingToken).safeTransfer(address(zaynReferrer), revShareFees);\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee.sub(revShareFees));\n            emit ChargedFees(revShareFees, zaynFee.sub(revShareFees));\n        } else {\n            IERC20(wantUnderlyingToken).safeTransfer(zaynFeeRecipient, zaynFee);\n            emit ChargedFees(0, zaynFee);\n        }\n    }\n\n    // Adds liquidity to AMM and gets more LP tokens.\n    function addLiquidity() internal view {\n        // uint256 underlyingAmount = IERC20(wantUnderlyingToken).balanceOf(address(this));\n        // (uint256 minLiq,) = wombatPool.quotePotentialDeposit(wantUnderlyingToken, underlyingAmount);\n        // (uint256 liquidity) = wombatPool.deposit(wantUnderlyingToken, underlyingAmount, 0, address(this), block.timestamp, false);\n        // emit AddedLiquidity(liquidity);\n    }\n\n    // calculate the total underlaying 'want' held by the strat.\n    function balanceOf() public view returns (uint256) {\n        return balanceOfWant().add(balanceOfPool());\n    }\n\n    // it calculates how much 'want' this contract holds.\n    function balanceOfWant() public view returns (uint256) {\n        return IERC20(want).balanceOf(address(this));\n    }\n\n    // it calculates how much 'want' the strategy has working in the farm.\n    function balanceOfPool() public pure returns (uint256) {\n        return 0;\n        // return IConvexRewardPool(rewardPool).balanceOf(address(this));\n    }\n\n    function revShareToken() public view override returns (address) {\n        return wantUnderlyingToken;\n    }\n\n    // called as part of strat migration. Sends all the available funds back to the vault.\n    function retireStrat() external {\n        require(msg.sender == vault, \"!vault\");\n\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\n\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeTransfer(vault, wantBal);\n    }\n\n    // pauses deposits and withdraws all funds from third party systems.\n    function panic() public onlyManager {\n        pause();\n        // IConvexRewardPool(rewardPool).withdrawAllAndUnwrap(false);\n    }\n\n    function pause() public onlyManager {\n        _pause();\n\n        _removeAllowances();\n    }\n\n    function unpause() external onlyManager {\n        _unpause();\n\n        _giveAllowances();\n\n        deposit();\n    }\n\n    function _giveAllowances() internal {\n        // IERC20(want).safeApprove(address(booster), type(uint256).max);\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), type(uint256).max);\n    }\n\n    function _removeAllowances() internal {\n        // IERC20(want).safeApprove(address(booster), 0);\n        // IERC20(wantUnderlyingToken).safeApprove(address(wombatPool), 0);\n    }\n\n    // charges 2% annual management fee per 12 hours.\n    function chargeManagementFees() external {\n        if (block.timestamp >= lastFeeCharge.add(mgmtFeeDelay)) {\n            uint secondsElapsed = block.timestamp - lastFeeCharge;\n            uint chargeAmount = chargePerDay.div(86400).mul(secondsElapsed); // getting 0.02 / 365 / 86400\n\n            uint256 tvl = balanceOf();\n            uint256 fees = tvl.mul(chargeAmount).div(1e18);\n\n            // IConvexRewardPool(rewardPool).withdrawAndUnwrap(fees, false);\n            IERC20(want).safeTransfer(zaynFeeRecipient, fees);\n            lastFeeCharge = block.timestamp;\n            emit ManagementFees(fees);\n        }\n    }\n\n    function enableRevShare(IZaynReferrerV2 _referrer) external onlyOwner {\n        revShareEnabled = true;\n        zaynReferrer = _referrer;\n    }\n\n    function disableRevShare() external onlyOwner {\n        revShareEnabled = false;\n    }\n\n    function migrate() external virtual override {\n        require(msg.sender == vault, \"!vault\");\n        emit Migrated();\n    }\n\n    function addRewardV2(\n        address _router,\n        address[] calldata _rewardToUnderlyingRoute,\n        uint _minAmount\n    ) external onlyOwner {\n        // address token = _rewardToUnderlyingRoute[0];\n        // require(token != want, \"!want\");\n        // require(_rewardToUnderlyingRoute[_rewardToUnderlyingRoute.length - 1] == wantUnderlyingToken, \"!want\");\n        // rewards.push(RewardV2(token, _router, _rewardToUnderlyingRoute, _minAmount));\n        // IERC20(token).safeApprove(_router, 0);\n        // IERC20(token).safeApprove(_router, type(uint).max);\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), 0);\n        // IERC20(WETH).safeApprove(address(WOMBAT_ROUTER), type(uint).max);\n    }\n\n    function resetRewardsV2() external onlyManager {\n        delete rewards;\n    }\n\n    function updateBooster(address _booster) external onlyOwner {\n        // booster = IConvexBooster(_booster);\n    }\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/StratManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract StratManager is Ownable, Pausable {\n    /**\n     * @dev Zayn Fi Contracts:\n     * {manager} - Address to manage a few lower risk features of the strat\n     * {strategist} - Address of the strategy author/deployer where strategist fee will go.\n     * {vault} - Address of the vault that controls the strategy's funds.\n     * {unirouter} - Address of exchange to execute swaps.\n     */\n    address public manager;\n    address public strategist;\n    address public unirouter;\n    address public vault;\n    address public zaynFeeRecipient;\n\n    /**\n     * @dev Initializes the base strategy.\n     * @param _manager address to use as alternative owner.\n     * @param _strategist address where strategist fees go.\n     * @param _unirouter router to use for swaps\n     * @param _vault address of parent vault.\n     * @param _zaynFeeRecipient address where to send Zayn's fees.\n     */\n    constructor(\n        address _manager,\n        address _strategist,\n        address _unirouter,\n        address _vault,\n        address _zaynFeeRecipient\n    ) {\n        manager = _manager;\n        strategist = _strategist;\n        unirouter = _unirouter;\n        vault = _vault;\n        zaynFeeRecipient = _zaynFeeRecipient;\n    }\n\n    // checks that caller is either owner or manager.\n    modifier onlyManager() {\n        require(msg.sender == owner() || msg.sender == manager, \"!manager\");\n        _;\n    }\n\n    function setManager(address _manager) external onlyManager {\n        manager = _manager;\n    }\n\n    /**\n     * @dev Updates address where strategist fee earnings will go.\n     * @param _strategist new strategist address.\n     */\n    function setStrategist(address _strategist) external {\n        require(msg.sender == strategist, \"!strategist\");\n        strategist = _strategist;\n    }\n\n    /**\n     * @dev Updates router that will be used for swaps.\n     * @param _unirouter new unirouter address.\n     */\n    function setUnirouter(address _unirouter) external onlyOwner {\n        unirouter = _unirouter;\n    }\n\n    /**\n     * @dev Updates parent vault.\n     * @param _vault new vault address.\n     */\n    function setVault(address _vault) external onlyOwner {\n        vault = _vault;\n    }\n\n    /**\n     * @dev Updates Zayn's fee recipient.\n     * @param _zaynFeeRecipient new Zayn's fee recipient address.\n     */\n    function setZaynFeeRecipient(address _zaynFeeRecipient) external onlyOwner {\n        zaynFeeRecipient = _zaynFeeRecipient;\n    }\n\n    /**\n     * @dev Function to synchronize balances before new user deposit.\n     * Can be overridden in the strategy.\n     */\n    function beforeDeposit() external virtual {}\n\n    /**\n     * @dev Function to synchronize different want tokens if strategy is changed in vault\n     * Can be overridden in the strategy.\n     */\n    function migrate() external virtual {}\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/ZaynVaultV2TakaDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IZaynReferrerV2.sol\";\n\n// import \"hardhat/console.sol\";\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract ZaynVaultV2TakaDAO is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    struct StratCandidate {\n        address implementation;\n        uint proposedTime;\n    }\n\n    // Info of each user.\n    struct TermInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n    }\n\n    mapping(uint256 => TermInfo) public termInfo;\n    // The last proposed strategy to switch to.\n    StratCandidate public stratCandidate;\n    // The strategy currently in use by the vault.\n    IStrategy public strategy;\n    // The minimum time it has to pass before a strat candidate can be approved.\n    uint256 public immutable approvalDelay;\n\n    uint256 public totalSupply;\n\n    event NewStratCandidate(address implementation);\n    event UpgradeStrat(address implementation);\n    event Deposit(uint256 indexed term, uint256 amount);\n    event Withdraw(uint256 indexed term, uint256 amount);\n\n    address public zapAddress;\n    bool public zapEnabled = false;\n\n    modifier onlyZap() {\n        require(zapAddress == msg.sender, \"Only zap can call\");\n        _;\n    }\n\n    /**\n     * @dev Sets the value of {token} to the token that the vault will\n     * hold as underlying value. It initializes the vault's own 'moo' token.\n     * This token is minted when someone does a deposit. It is burned in order\n     * to withdraw the corresponding portion of the underlying assets.\n     * @param _strategy the address of the strategy.\n     * @param _approvalDelay the delay before a new strat can be approved.\n     */\n    constructor(IStrategy _strategy, uint256 _approvalDelay) {\n        strategy = _strategy;\n        approvalDelay = _approvalDelay;\n    }\n\n    function want() public view returns (IERC20) {\n        return IERC20(strategy.want());\n    }\n\n    /**\n     * @dev It calculates the total underlying value of {token} held by the system.\n     * It takes into account the vault contract balance, the strategy contract balance\n     *  and the balance deployed in other contracts as part of the strategy.\n     */\n    function balance() public view returns (uint) {\n        return want().balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\n    }\n\n    function balanceOf(uint256 termId) public view returns (uint) {\n        TermInfo storage term = termInfo[termId];\n        return term.amount;\n    }\n\n    /**\n     * @dev Custom logic in here for how much the vault allows to be borrowed.\n     * We return 100% of tokens for block.timestamp. Under certain conditions we might\n     * want to keep some of the system funds at hand in the vault, instead\n     * of putting them to work.\n     */\n    function available() public view returns (uint256) {\n        return want().balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n     */\n    function getPricePerFullShare() public view returns (uint256) {\n        return totalSupply == 0 ? 1e18 : balance().mul(1e18).div(totalSupply);\n    }\n\n    /**\n     * @dev The entrypoint of funds into the system. People deposit with this function\n     * into the vault. The vault is then in charge of sending funds into the strategy.\n     */\n    function _deposit(uint _amount, uint256 _term, address _payer) internal {\n        TermInfo storage term = termInfo[_term];\n        // console.log(\"_term\", _term);\n        strategy.beforeDeposit();\n\n        uint256 _pool = balance();\n        want().safeTransferFrom(_payer, address(this), _amount);\n        earn();\n        uint256 _after = balance();\n        _amount = _after.sub(_pool); // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply)).div(_pool);\n        }\n        // console.log(\"_amount\", _amount);\n        // console.log(\"term.amount\", term.amount);\n        // console.log(\"shares\", shares);\n\n        term.amount = term.amount.add(shares);\n        totalSupply = totalSupply.add(shares);\n        emit Deposit(_term, shares);\n    }\n\n    /**\n     * @dev Function to send funds into the strategy and put them to work. It's primarily called\n     * by the vault's deposit() function.\n     */\n    function earn() public {\n        uint _bal = available();\n        want().safeTransfer(address(strategy), _bal);\n        strategy.deposit();\n    }\n\n    function _withdraw(uint256 _shares, uint256 _term, address _receiver) internal {\n        uint256 r = (balance().mul(_shares)).div(totalSupply);\n        TermInfo storage term = termInfo[_term];\n        require(term.amount >= _shares, \"withdraw: not enough balance\");\n        term.amount = term.amount.sub(_shares);\n        totalSupply = totalSupply.sub(_shares);\n        uint b = want().balanceOf(address(this));\n        if (b < r) {\n            uint _withdrawAmount = r.sub(b);\n            strategy.withdraw(_withdrawAmount);\n            uint _after = want().balanceOf(address(this));\n            uint _diff = _after.sub(b);\n            if (_diff < _withdrawAmount) {\n                r = b.add(_diff); // CHECK THIS\n            }\n        }\n        emit Withdraw(_term, _shares);\n        want().safeTransfer(_receiver, r);\n    }\n\n    /**\n     * @dev Sets the candidate for the new strat to use with this vault.\n     * @param _implementation The address of the candidate strategy.\n     */\n    function proposeStrat(address _implementation) public onlyOwner {\n        require(\n            address(this) == IStrategy(_implementation).vault(),\n            \"Proposal not valid for this Vault\"\n        );\n        stratCandidate = StratCandidate({\n            implementation: _implementation,\n            proposedTime: block.timestamp\n        });\n\n        emit NewStratCandidate(_implementation);\n    }\n\n    /**\n     * @dev It switches the active strat for the strat candidate. After upgrading, the\n     * candidate implementation is set to the 0x00 address, and proposedTime to a time\n     * happening in +100 years for safety.\n     */\n\n    function upgradeStrat() public onlyOwner {\n        require(stratCandidate.implementation != address(0), \"There is no candidate\");\n        require(\n            stratCandidate.proposedTime.add(approvalDelay) < block.timestamp,\n            \"Delay has not passed\"\n        );\n\n        emit UpgradeStrat(stratCandidate.implementation);\n        IERC20 oldWant = strategy.want();\n        strategy.retireStrat();\n        strategy = IStrategy(stratCandidate.implementation);\n        uint256 wantBal = oldWant.balanceOf(address(this));\n        oldWant.safeTransfer(address(strategy), wantBal);\n        strategy.migrate();\n        stratCandidate.implementation = address(0);\n        stratCandidate.proposedTime = 5000000000;\n\n        earn();\n    }\n\n    /**\n     * @dev Rescues random funds stuck that the strat can't handle.\n     * @param _token address of the token to rescue.\n     */\n    function rescueTokens(address _token) external onlyOwner {\n        require(_token != address(want()), \"!token\");\n        if (_token == address(0)) {\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\n            require(sent, \"failed to send\");\n        } else {\n            uint256 amount = IERC20(_token).balanceOf(address(this));\n            IERC20(_token).safeTransfer(msg.sender, amount);\n        }\n    }\n\n    // @dev Ability to change the zap address\n    function setZapAddress(address _zapAddress) external onlyOwner {\n        require(_zapAddress != address(0), \"New zap address is zero address\");\n        zapAddress = _zapAddress;\n        zapEnabled = true;\n    }\n\n    function toggleZap(bool _toggle) external onlyOwner {\n        zapEnabled = _toggle;\n    }\n\n    function depositZap(uint256 _amount, uint256 _term) public nonReentrant onlyZap {\n        require(zapEnabled, \"Zap not enabled\");\n        // console.log(\"_term\", _term);\n        // console.log(\"depositZap _amount\", _amount);\n        _deposit(_amount, _term, msg.sender);\n    }\n\n    function withdrawZap(uint256 _shares, uint256 _term) public onlyZap {\n        require(zapEnabled, \"Zap not enabled\");\n        _withdraw(_shares, _term, msg.sender);\n    }\n}\n"
    },
    "contracts/mocks/zaynfi/protocol/ZaynZapV2TakaDAOMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/IWombatRouter.sol\";\nimport \"../interfaces/IPool.sol\";\nimport \"../interfaces/IWombatLP.sol\";\nimport \"../interfaces/IZaynVaultV2TakaoDao.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"./TransferHelper.sol\";\n\ncontract ZaynZapV2TakaDAOMock is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    mapping(address => bool) public allowedTokens;\n    IWombatRouter public WOMBAT_ROUTER;\n    IPool public WOMBAT_POOL;\n    address public WETH;\n    address public poolPath;\n\n    mapping(address => bool) public trustedSenders;\n\n    constructor(IWombatRouter _wombatRouter, IPool _wombatPool, address _poolPath, address _weth) {\n        WOMBAT_ROUTER = _wombatRouter;\n        WOMBAT_POOL = _wombatPool;\n        poolPath = _poolPath;\n        WETH = _weth;\n    }\n\n    modifier onlyTrustedSender() {\n        require(trustedSenders[msg.sender], \"only truster senders can call this\");\n        _;\n    }\n\n    /**\n     * @dev Rescues random funds stuck that the strat can't handle.\n     * @param _token address of the token to rescue.\n     */\n    function recoverTokens(address _token) external onlyOwner {\n        if (_token == address(0)) {\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\n            require(sent, \"failed to send\");\n        } else {\n            uint256 amount = IERC20(_token).balanceOf(address(this));\n            IERC20(_token).safeTransfer(msg.sender, amount);\n        }\n    }\n\n    function allowToken(address _token, bool _allow) external onlyOwner {\n        allowedTokens[_token] = _allow;\n    }\n\n    function toggleTrustedSender(address _trustedSender, bool _allow) external onlyOwner {\n        trustedSenders[_trustedSender] = _allow;\n    }\n\n    function zapInEth(address vault, uint256 termID) external payable onlyTrustedSender {\n        require(msg.value > 0, \"Deposit amount should be greater than 0\");\n\n        address _lpAddress = IZaynVaultV2TakaoDao(vault).want();\n        // address _underlyingToken = IWombatLP(_lpAddress).underlyingToken();\n\n        IWETH(WETH).deposit{value: msg.value}();\n        // swapToUnderlying(WETH, _underlyingToken, msg.value); // WETH to underlying\n        // uint256 liquidity = addLiquidity(_underlyingToken, msg.value); // underlying to LP\n        _approveTokenIfNeeded(_lpAddress, vault); // approve LP to vault\n        IZaynVaultV2TakaoDao(vault).depositZap(msg.value, termID); // deposit LP to vault\n    }\n\n    function swapToUnderlying(\n        address _token,\n        address _underlyingToken,\n        uint256 _amount\n    ) internal returns (uint256 swappedAmount) {\n        // address[] memory _path = new address[](2);\n        // _path[0] = address(_token);\n        // _path[1] = address(_underlyingToken);\n        // address[] memory _poolPathArr = new address[](1);\n        // _poolPathArr[0] = address(poolPath);\n        // (uint256 minDepositOut,) = getAmountOut(_path, _poolPathArr, int256(_amount));\n        // _approveTokenIfNeeded(_token, address(WOMBAT_ROUTER));\n        // uint256 _before = IERC20(_underlyingToken).balanceOf(address(this));\n        // WOMBAT_ROUTER.swapExactTokensForTokens(\n        //     _path,\n        //     _poolPathArr,\n        //     _amount,\n        //     minDepositOut,\n        //     address(this),\n        //     block.timestamp\n        // );\n        // uint256 _after = IERC20(_underlyingToken).balanceOf(address(this));\n        // swappedAmount = _after.sub(_before);\n    }\n\n    function addLiquidity(\n        address _underlyingToken,\n        uint256 depositAmount\n    ) internal returns (uint256 liquidity) {\n        //  (uint256 minLiq,) = WOMBAT_POOL.quotePotentialDeposit(_underlyingToken, depositAmount);\n        // uint256 _slippage = minLiq.mul(5 * 10 ** 15).div((1e18));\n        // minLiq =  minLiq.sub(_slippage);\n        // _approveTokenIfNeeded(_underlyingToken, address(WOMBAT_POOL));\n        // liquidity = WOMBAT_POOL.deposit(\n        //     _underlyingToken,\n        //     depositAmount,\n        //     minLiq,\n        //     address(this),\n        //     block.timestamp,\n        //     false\n        // );\n    }\n\n    function zapOutETH(\n        address vault,\n        uint256 _shares,\n        uint256 termID\n    ) external onlyTrustedSender returns (uint256) {\n        require(_shares > 0, \"Amount should be greater than 0\");\n        IZaynVaultV2TakaoDao vaultObj = IZaynVaultV2TakaoDao(vault);\n        vaultObj.withdrawZap(_shares, termID);\n\n        // address _lpAddress = IZaynVaultV2TakaoDao(vault).want();\n        // address _underlyingToken = IWombatLP(_lpAddress).underlyingToken();\n        // uint256 wantBal = IERC20(_lpAddress).balanceOf(address(this));\n        // _approveTokenIfNeeded(_lpAddress, address(WOMBAT_POOL));\n\n        // address[] memory _poolPathArr = new address[](1);\n        // _poolPathArr[0] = address(poolPath);\n\n        // address[] memory _path = new address[](2);\n        // _path[0] = address(_underlyingToken);\n        // _path[1] = address(WETH);\n\n        // uint256 withdrawnAmount = WOMBAT_POOL.withdraw(_underlyingToken, wantBal, 0, address(this), block.timestamp);\n        // _approveTokenIfNeeded(_underlyingToken, address(WOMBAT_ROUTER));\n        // uint256 wethBefore = IERC20(WETH).balanceOf(address(this));\n        // WOMBAT_ROUTER.swapExactTokensForTokens(_path, _poolPathArr, withdrawnAmount, 0, address(this), block.timestamp);\n        uint256 wethBal = IERC20(WETH).balanceOf(address(this));\n        IWETH(WETH).withdraw(wethBal);\n        TransferHelper.safeTransferETH(msg.sender, wethBal);\n        return wethBal;\n    }\n\n    function _approveTokenIfNeeded(address token, address spender) private {\n        if (IERC20(token).allowance(address(this), spender) == 0) {\n            IERC20(token).safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    function getAmountOut(\n        address[] memory _path,\n        address[] memory _poolPathArr,\n        int256 _amount\n    ) public view returns (uint256 amountOut, uint256[] memory haircuts) {\n        return WOMBAT_ROUTER.getAmountOut(_path, _poolPathArr, _amount);\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}