{
  "address": "0x27a824DbCc8E7B050FA3aD2637e0254d801f1A86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "expelledBeforeBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getAllJoinedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getAvailablePositionsAndSecurityAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "firstAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "zapAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vaultAddress",
          "type": "string"
        }
      ],
      "name": "getConstants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getExpelledTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "enum LibTermStorage.TermStates",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "getJoinedTermsByState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNeededAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRegistrationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToCollateralConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToStableConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldLockState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isExempted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasoptedInYG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "9aeee4a83e32dbfc4bc7e99f3bc4d015",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"expelledBeforeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getAllJoinedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getAvailablePositionsAndSecurityAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"firstAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zapAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vaultAddress\",\"type\":\"string\"}],\"name\":\"getConstants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getExpelledTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"getJoinedTermsByState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNeededAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToCollateralConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToStableConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldLockState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasoptedInYG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"expelledBeforeBeneficiary(uint256,address)\":{\"params\":{\"termId\":\"the id of the term\",\"user\":\"the address of the participant to check\"},\"returns\":{\"_0\":\"true if the participant is expelled before being a beneficiary\"}},\"getAllJoinedTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of\"}},\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"params\":{\"termId\":\"the term id\"}},\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"collateral initialized\",\"_1\":\"collateral state\",\"_2\":\"collateral firstDepositTime\",\"_3\":\"counterMembers\",\"_4\":\"collateral depositors\"}},\"getConstants(string,string,string,string)\":{\"params\":{\"firstAggregator\":\"The name of the first aggregator. Example: \\\"ETH/USD\\\"\",\"secondAggregator\":\"The name of the second aggregator. Example: \\\"USDC/USD\\\"\",\"vaultAddress\":\"The name of the vault address. Example: \\\"ZaynVault\\\"\",\"zapAddress\":\"The name of the zap address. Example: \\\"ZaynZap\\\"\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"isCollateralMember\",\"_1\":\"collateralMembersBank\",\"_2\":\"collateralPaymentBank\",\"_3\":\"collateralDepositByUser\",\"_4\":\"expulsion limit\"}},\"getExpelledTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array the term ids the participant is part of, giving the state of the term\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"fund initialized\",\"_1\":\"fund currentState\",\"_2\":\"fund stableToken\",\"_3\":\"fund beneficiariesOrder\",\"_4\":\"fund fundStart\",\"_5\":\"fund fundEnd\",\"_6\":\"fund currentCycle\",\"_7\":\"fund totalAmountOfCycles\"}},\"getJoinedTermsByState(address,uint8)\":{\"params\":{\"participant\":\"the participant address\",\"state\":\"the term state\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of, giving the state of the term\"}},\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getNeededAllowance(address)\":{\"params\":{\"user\":\"the user address\"},\"returns\":{\"_0\":\"the needed allowance\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"fund isParticipant, true if is participant\",\"_1\":\"fund isBeneficiary, true if has been beneficiary\",\"_2\":\"fund paidThisCycle, true if has paid the current cycle\",\"_3\":\"fund autoPayEnabled, true if auto pay is enabled\",\"_4\":\"fund beneficiariesPool, the beneficiary pool, 6 decimals\",\"_5\":\"fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution\"}},\"getRemainingRegistrationTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining contribution period\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term struct\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToCollateralConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"USDAmount\":\"The amount in USD with 18 decimals\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToStableConversionRate(uint256)\":{\"details\":\"should we always deal with in Wei?\",\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"getUserSet(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"on participant set\",\"_1\":\"on beneficiary set\",\"_2\":\"on defaulter set\"}},\"getUserYieldSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"_0\":\"hasOptedIn\",\"_1\":\"withdrawnYield\",\"_2\":\"withdrawnCollateral\",\"_3\":\"availableYield\",\"_4\":\"depositedCollateralByUser\",\"_5\":\"yieldDistributed\"}},\"getWithdrawableUserBalance(uint256,address)\":{\"params\":{\"termId\":\"term id\",\"user\":\"depositor address\"},\"returns\":{\"allowedWithdrawal\":\"amount the amount of collateral the depositor can withdraw\"}},\"getYieldSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"initialized\",\"_1\":\"startTimeStamp\",\"_2\":\"totalDeposit\",\"_3\":\"currentTotalDeposit\",\"_4\":\"totalShares\",\"_5\":\"yieldUsers\",\"_6\":\"vaultAddress\",\"_7\":\"zapAddress\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"isExempted(uint256,uint256,address)\":{\"params\":{\"cycle\":\"the cycle to check\",\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user is exempted\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"minCollateralToDeposit(uint256,uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5\",\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPY(uint256)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPY(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\",\"user\":\"The user for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the user\"}},\"userHasoptedInYG(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the check is being made\",\"user\":\"The user for which the check is being made\"},\"returns\":{\"_0\":\"True if the user has opted in\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"notice\":\"Gets the remaining positions in a term and the corresponding security amount\"},\"getConstants(string,string,string,string)\":{\"notice\":\"This function return the current constant values for oracles and yield providers\"},\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the current beneficiary\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getNeededAllowance(address)\":{\"notice\":\"a function to get the needed allowance for every active term the user is part of\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getRemainingRegistrationTime(uint256)\":{\"notice\":\"Gets the remaining registration period for a term\"},\"getToCollateralConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToStableConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"getUserSet(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getWithdrawableUserBalance(uint256,address)\":{\"notice\":\"Called to check how much collateral a user can withdraw\"},\"getYieldLockState()\":{\"notice\":\"This function is used to get the current state of the yield lock\"},\"isExempted(uint256,uint256,address)\":{\"notice\":\"function to see if a user is exempted from paying a cycle\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"minCollateralToDeposit(uint256,uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPY(uint256)\":{\"notice\":\"This function is used to get a term APY\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPY(uint256,address)\":{\"notice\":\"This function is used to get a user APY\"},\"userHasoptedInYG(uint256,address)\":{\"notice\":\"This function is used to check if a user has opted in for yield generation\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract GettersFacet is IGetters {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // TERM GETTERS\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint lastTermId = termStorage.nextTermId - 1;\\n        uint nextTermId = termStorage.nextTermId;\\n        return (lastTermId, nextTermId);\\n    }\\n\\n    ///  @notice Gets the remaining registration period for a term\\n    ///  @param termId the term id\\n    ///  @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        require(collateral.firstDepositTime != 0, \\\"Nobody has deposited yet\\\");\\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\\n            return 0;\\n        } else {\\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\\n        }\\n    }\\n\\n    ///@notice Gets the remaining positions in a term and the corresponding security amount\\n    ///@param termId the term id\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) external view returns (uint[] memory, uint[] memory) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        uint depositorsLength = collateral.depositors.length;\\n        uint[] memory availablePositions = new uint[](depositorsLength);\\n\\n        uint availablePositionsCounter;\\n\\n        // Loop through the depositors array and get the available positions\\n        for (uint i; i < depositorsLength; ) {\\n            // The position is available if the depositor is address zero\\n            if (collateral.depositors[i] == address(0)) {\\n                // Add the position to the available positions array\\n                availablePositions[availablePositionsCounter] = i;\\n\\n                // And increment the available positions counter\\n                unchecked {\\n                    ++availablePositionsCounter;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Create the arrays to return\\n        // The available positions array will have the length of the available positions counter\\n        // The security amount array will have the same length\\n        uint[] memory availablePositionsArray = new uint[](availablePositionsCounter);\\n        uint[] memory securityAmountArray = new uint[](availablePositionsCounter);\\n\\n        // Loop through the available positions counter and fill the arrays\\n        for (uint i; i < availablePositionsCounter; ) {\\n            availablePositionsArray[i] = availablePositions[i];\\n            // Get the security amount for the position\\n            securityAmountArray[i] = minCollateralToDeposit(termId, availablePositions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return the arrays, the available positions array and the security amount array are coupled\\n        // availablePositionsArray[0] will have the securityAmountArray[0] and so on\\n        return (availablePositionsArray, securityAmountArray);\\n    }\\n\\n    /// @param termId the term id\\n    /// @return the term struct\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\\n        return (LibTermStorage._termStorage().terms[termId]);\\n    }\\n\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\n        return participantTermIds;\\n    }\\n\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) public view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory userTermsByState = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            userTermsByState[i] = temporaryArray[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return userTermsByState;\\n    }\\n\\n    /// @param participant the participant address\\n    /// @return an array the term ids the participant is part of, giving the state of the term\\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (wasExpelled(joinedTerms[i], participant)) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory termsExpelled = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            termsExpelled[i] = temporaryArray[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return termsExpelled;\\n    }\\n\\n    /// @param termId the term id\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\n    }\\n\\n    /// @param termId the term id\\n    /// @return remaining time in the current cycle\\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\n        if (block.timestamp > cycleEndTimestamp) {\\n            return 0;\\n        } else {\\n            return cycleEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    /// @param termId the term id\\n    /// @return remaining cycles contribution\\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\n        uint contributionAmountWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        return remainingCycles * contributionAmountWei;\\n    }\\n\\n    /// @notice a function to get the needed allowance for every active term the user is part of\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint) {\\n        uint neededAllowance;\\n\\n        uint[] memory activeTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.ActiveTerm\\n        );\\n        uint[] memory initializedTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.InitializingTerm\\n        );\\n\\n        uint activeTermsLength = activeTerms.length;\\n        uint initializedTermsLength = initializedTerms.length;\\n\\n        for (uint i; i < activeTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\\n            uint remainingPayments = term.contributionAmount *\\n                getRemainingCycles(activeTerms[i]) *\\n                10 ** 6;\\n            neededAllowance += remainingPayments;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint i; i < initializedTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\\n                initializedTerms[i]\\n            ];\\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\\n            neededAllowance += totalPayments;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return neededAllowance;\\n    }\\n\\n    // COLLATERAL GETTERS\\n\\n    /// @param depositor the depositor address\\n    /// @param termId the collateral id\\n    /// @return isCollateralMember\\n    /// @return collateralMembersBank\\n    /// @return collateralPaymentBank\\n    /// @return collateralDepositByUser\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint limit;\\n        if (!fund.isBeneficiary[depositor]) {\\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\n        } else {\\n            limit = getRemainingCyclesContributionWei(termId);\\n        }\\n\\n        return (\\n            collateral.isCollateralMember[depositor],\\n            collateral.collateralMembersBank[depositor],\\n            collateral.collateralPaymentBank[depositor],\\n            collateral.collateralDepositByUser[depositor],\\n            limit\\n        );\\n    }\\n\\n    /// @param termId the collateral id\\n    /// @return collateral initialized\\n    /// @return collateral state\\n    /// @return collateral firstDepositTime\\n    /// @return counterMembers\\n    /// @return collateral depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        return (\\n            collateral.initialized,\\n            collateral.state, // Current state of Collateral\\n            collateral.firstDepositTime, // Time when the first deposit was made\\n            collateral.counterMembers, // Current member count\\n            collateral.depositors // List of depositors\\n        );\\n    }\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    /// Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(\\n        uint termId,\\n        uint depositorIndex\\n    ) public view returns (uint amount) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        require(depositorIndex < term.totalParticipants, \\\"Index out of bounds\\\");\\n\\n        uint contributionAmountInWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\n    }\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint userCollateral = collateral.collateralMembersBank[user];\\n        uint availableYield = yield.availableYield[user];\\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\\n\\n        if (\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\n            expelledBeforeBeingBeneficiary\\n        ) {\\n            allowedWithdrawal = userCollateral + availableYield;\\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\n            uint minRequiredCollateral;\\n\\n            // Check if the user has paid this cycle\\n            if (!fund.paidThisCycle[user]) {\\n                // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\n                minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\\n            } else {\\n                // If the user have paid this cycle, we need to check his remaining cycles and get the contribution amount for those\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle;\\n                uint contributionAmountWei = getToCollateralConversionRate(\\n                    term.contributionAmount * 10 ** 18\\n                );\\n\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\n            }\\n\\n            // Collateral must be higher than 1.5 X RCC\\n            if (userCollateral > minRequiredCollateral) {\\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\\n            } else {\\n                allowedWithdrawal = 0;\\n            }\\n        } else {\\n            allowedWithdrawal = 0;\\n        }\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\n        return LibCollateral._isUnderCollaterized(termId, member);\\n    }\\n\\n    // FUND GETTERS\\n\\n    /// @notice function to get the cycle information in one go\\n    /// @param termId the fund id\\n    /// @return fund initialized\\n    /// @return fund currentState\\n    /// @return fund stableToken\\n    /// @return fund beneficiariesOrder\\n    /// @return fund fundStart\\n    /// @return fund fundEnd\\n    /// @return fund currentCycle\\n    /// @return fund totalAmountOfCycles\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\n    {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return (\\n            fund.initialized,\\n            fund.currentState,\\n            fund.stableToken,\\n            fund.beneficiariesOrder,\\n            fund.fundStart,\\n            fund.fundEnd,\\n            fund.currentCycle,\\n            fund.totalAmountOfCycles\\n        );\\n    }\\n\\n    /// @notice function to get the current beneficiary\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\n    }\\n\\n    /// @notice function to know if a user was expelled before\\n    /// @param termId the fund id\\n    /// @param user the user to check\\n    /// @return true if the user was expelled before\\n    function wasExpelled(uint termId, address user) public view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice function to see if a user is exempted from paying a cycle\\n    /// @param termId the fund id\\n    /// @param cycle the cycle to check\\n    /// @param user the user to check\\n    /// @return true if the user is exempted\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isExemptedOnCycle[cycle].exempted[user];\\n    }\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return fund isParticipant, true if is participant\\n    /// @return fund isBeneficiary, true if has been beneficiary\\n    /// @return fund paidThisCycle, true if has paid the current cycle\\n    /// @return fund autoPayEnabled, true if auto pay is enabled\\n    /// @return fund beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return fund beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        bool isMoneyPotFrozen = _checkFrozenMoneyPot(participant, termId);\\n\\n        return (\\n            fund.isParticipant[participant],\\n            fund.isBeneficiary[participant],\\n            fund.paidThisCycle[participant],\\n            fund.autoPayEnabled[participant],\\n            fund.beneficiariesPool[participant],\\n            isMoneyPotFrozen\\n        );\\n    }\\n\\n    function _checkFrozenMoneyPot(\\n        address _participant,\\n        uint _termId\\n    ) internal view returns (bool _isMoneyPotFrozen) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        if (fund.expelledBeforeBeneficiary[_participant]) {\\n            _isMoneyPotFrozen = false;\\n        } else {\\n            uint neededCollateral = (110 * getRemainingCyclesContributionWei(_termId)) / 100; // 1.1 x RCC\\n\\n            if (collateral.collateralMembersBank[_participant] < neededCollateral) {\\n                _isMoneyPotFrozen = true;\\n            } else {\\n                _isMoneyPotFrozen = false;\\n            }\\n        }\\n    }\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\\n    }\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isBeneficiary[beneficiary];\\n    }\\n\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.expelledBeforeBeneficiary[user];\\n    }\\n\\n    /// @notice returns the time left to contribute for this cycle\\n    /// @param termId the fund id\\n    /// @return the time left to contribute\\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\\n            return 0;\\n        }\\n\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\n        uint contributionEndTimestamp = term.cycleTime *\\n            (fund.currentCycle - 1) +\\n            fund.fundStart +\\n            term.contributionPeriod;\\n        if (block.timestamp > contributionEndTimestamp) {\\n            return 0;\\n        } else {\\n            return contributionEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    // CONVERSION GETTERS\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() public view returns (uint) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n\\n        (\\n            uint80 roundID_ethUSD,\\n            int256 price_ethUSD,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\n            uint80 answeredInRound_ethUSD\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        // Check if chainlink data is not stale or incorrect\\n        require(\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\n            \\\"ChainlinkOracle: stale data\\\"\\n        );\\n\\n        (\\n            uint80 roundID_usdUSDC,\\n            int256 price_usdUSDC,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\n            uint80 answeredInRound_usdUSDC\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USDC/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        require(\\n            timeStamp_usdUSDC != 0 &&\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\n                price_usdUSDC > 0,\\n            \\\"ChainlinkOracle: stale data\\\"\\n        );\\n\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\n\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @dev should we always deal with in Wei?\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\\n        uint ethPrice = getLatestPrice();\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\n        return USDAmountInEth;\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @dev should we always deal with in Wei?\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\\n        // NOTE: This will be made internal\\n        uint ethPrice = getLatestPrice();\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\n        return ethAmountInUSD;\\n    }\\n\\n    // YIELD GENERATION GETTERS\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        return yield.hasOptedIn[user];\\n    }\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        uint userYieldGenerated = yield.withdrawnYield[user] +\\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return\\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\\n                365 days) / elaspedTime;\\n    }\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        return\\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\\n            elaspedTime;\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint totalWithdrawnYield;\\n\\n        address[] memory arrayToCheck = yield.yieldUsers;\\n        uint arrayLength = arrayToCheck.length;\\n\\n        for (uint i; i < arrayLength; ) {\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\\n\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return totalWithdrawnYield;\\n        }\\n    }\\n\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return hasOptedIn\\n    /// @return withdrawnYield\\n    /// @return withdrawnCollateral\\n    /// @return availableYield\\n    /// @return depositedCollateralByUser\\n    /// @return yieldDistributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return (\\n            yield.hasOptedIn[user],\\n            yield.withdrawnYield[user],\\n            yield.withdrawnCollateral[user],\\n            yield.availableYield[user],\\n            yield.depositedCollateralByUser[user],\\n            yieldDistributed\\n        );\\n    }\\n\\n    /// @param termId the collateral id\\n    /// @return initialized\\n    /// @return startTimeStamp\\n    /// @return totalDeposit\\n    /// @return currentTotalDeposit\\n    /// @return totalShares\\n    /// @return yieldUsers\\n    /// @return vaultAddress\\n    /// @return zapAddress\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        return (\\n            yield.initialized,\\n            yield.startTimeStamp,\\n            yield.totalDeposit,\\n            yield.currentTotalDeposit,\\n            yield.totalShares,\\n            yield.yieldUsers,\\n            yield.providerAddresses[\\\"ZaynVault\\\"],\\n            yield.providerAddresses[\\\"ZaynZap\\\"]\\n        );\\n    }\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    function getYieldLockState() external view returns (bool) {\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\n    }\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        return (\\n            termConsts.aggregatorsAddresses[firstAggregator],\\n            termConsts.aggregatorsAddresses[secondAggregator],\\n            yieldProvider.providerAddresses[zapAddress],\\n            yieldProvider.providerAddresses[vaultAddress]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6aff80d3cd05da9c058b20958518059470c78438202632b3b3729d58f7659d32\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ninterface IGetters {\\n    // TERM GETTERS\\n\\n    /// @notice Gets the current and next term id\\n    /// @return current termID\\n    /// @return next termID\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Must return 0 before starting the fund\\n    /// @param termId the id of the term\\n    /// @return remaining registration time in seconds\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Get current information of a term\\n    /// @param termId the id of the term\\n    /// @return Term Struct, see LibTermStorage.sol\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets all terms a user has previously joined\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user has previously joined based on the specefied term state\\n    /// @param participant address\\n    /// @param state, can be InitializingTerm, ActiveTerm, ExpiredTerm, ClosedTerm\\n    /// @return List of termIDs\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n\\n    /// @notice Gets all terms a user was previously expelled from\\n    /// @param participant address\\n    /// @return List of termIDs\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    // COLLATERAL GETTERS\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the required minimum collateral deposit based on the position\\n    /// @param termId the term id\\n    /// @param depositorIndex the index of the depositor\\n    /// @return required minimum in wei\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    // FUND GETTERS\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the current beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice Gets a user information of in a fund\\n    /// @param participant address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the fund/term\\n    /// @return if the user was beneficiary in the past\\n    /// @return if the user paid for the current cycle\\n    /// @return if the user has autopay enabled\\n    /// @return users money pot balance\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    // CONVERSION GETTERS\\n\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    // YIELD GENERATION GETTERS\\n\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return hasOptedIn\\n    /// @return withdrawnYield\\n    /// @return withdrawnCollateral\\n    /// @return availableYield\\n    /// @return depositedCollateralByUser\\n    /// @return yieldDistributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @param termId the collateral id\\n    /// @return initialized\\n    /// @return startTimeStamp\\n    /// @return totalDeposit\\n    /// @return currentTotalDeposit\\n    /// @return totalShares\\n    /// @return yieldUsers\\n    /// @return vaultAddress\\n    /// @return zapAddress\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n}\\n\",\"keccak256\":\"0x30af7c1416a0df52d5360ac5fd83a66735db5155e08a64c908b1676aae0f9849\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    );\\n    event OnReimbursementWithdrawn(\\n        uint indexed termId,\\n        address indexed participant,\\n        address receiver,\\n        uint indexed amount\\n    );\\n\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @param _termId term id\\n    /// @param _participant Address of the depositor\\n    function _withdrawReimbursement(\\n        uint _termId,\\n        address _participant,\\n        address _receiver\\n    ) internal {\\n        require(LibFundStorage._fundExists(_termId), \\\"Fund does not exists\\\");\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_participant];\\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        collateral.collateralPaymentBank[_participant] = 0;\\n\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0xef94d70b5c60914d012b7e6cac49b045f16e80b768b4304c06f72007fba9a951\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime;\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e38e087f7ab23dfb967d6fae65a7676851fd31a1d2b61d6b63d760ead53f86f\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8da9bfc4ef1154e188e9fb8249c6314e020355e42dd59830507c122f4ff4d029\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime;\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc48faf4702ebe6ad8376ea4fd6f6911c1ee9558c71acee41ba438723780cd\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n\\n        // Prevent rounding errors\\n        if (neededShares > sharesBalance) {\\n            if (neededShares - sharesBalance < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        } else {\\n            if (sharesBalance - neededShares < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        }\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _totalShares The total shares in the yield from the term\\n    /// @param _totalDeposit The total deposit in the yield from the term\\n    function _neededShares(\\n        uint _collateralAmount,\\n        uint _totalShares,\\n        uint _totalDeposit\\n    ) internal pure returns (uint) {\\n        if (_totalDeposit == 0) return 0;\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.totalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x45b60cca81a7d9669ad0f54d5c30e9e9f6919ae7009d3097d3f6dc80a8f3f868\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp;\\n        uint totalDeposit;\\n        uint currentTotalDeposit;\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield;\\n        mapping(address => uint256) withdrawnCollateral;\\n        mapping(address => uint256) availableYield;\\n        mapping(address => uint256) depositedCollateralByUser;\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1c7ea8a7018a0d03d382bb84f31fb6bfabd585315545f9d7bf09475c3f6dcef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806392a6c80211610125578063d8f8e991116100ad578063dc9e24ae1161007c578063dc9e24ae1461068d578063e51a6295146106a0578063e9783e60146106b3578063f0d826e7146106fd578063fd4dba9d1461071057600080fd5b8063d8f8e9911461060b578063da3791ca14610636578063dbd576831461065a578063dbf428101461067a57600080fd5b8063bb91b76d116100f4578063bb91b76d1461056e578063c177f091146105ab578063d072f4bc146105be578063d72bb87e146105d1578063d7992e5b146105f857600080fd5b806392a6c8021461049d5780639d4eb26f146104b0578063b6abd1a4146104d7578063b7cf483f1461051d57600080fd5b80636bbbb5fb116101a857806377778baf1161017757806377778baf1461043f5780637aed53a614610452578063805307311461046f5780638e15f4731461048257806391ce5ff71461048a57600080fd5b80636bbbb5fb146103775780637063f618146103c157806375aaa78c146103e257806375d4e40b146103f557600080fd5b80631e993b53116101ef5780631e993b53146102e85780633d17f1e0146103085780636191474c1461033e57806362f02abd1461035157806365654fe31461036457600080fd5b80630c64c697146102215780630fc4a7ef146102475780631268612d1461025a5780631c162dbe146102a6575b600080fd5b61023461022f36600461278f565b610742565b6040519081526020015b60405180910390f35b6102346102553660046127b1565b610804565b61026d6102683660046127e6565b610838565b604080519615158752941515602087015292151593850193909352151560608401526080830191909152151560a082015260c00161023e565b6102b96102b43660046127e6565b6108d5565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c00161023e565b6102fb6102f6366004612810565b61096b565b60405161023e9190612866565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff165b604051901515815260200161023e565b61023461034c3660046127b1565b610ade565b61023461035f3660046127b1565b610b9c565b610234610372366004612879565b610bdd565b61032e610385366004612879565b6000918252600080516020612ea4833981519152602090815260408084206001600160a01b039390931684526015909201905290205460ff1690565b6103d46103cf3660046127b1565b610cb4565b60405161023e9291906128a5565b6102fb6103f0366004612810565b610ebd565b61032e610403366004612879565b6000918252600080516020612e84833981519152602090815260408084206001600160a01b039390931684526007909201905290205460ff1690565b61023461044d366004612879565b610f5d565b61045a611135565b6040805192835260208301919091520161023e565b61023461047d3660046127b1565b611166565b6102346111cd565b6102346104983660046127b1565b611461565b6102346104ab3660046127b1565b611529565b6104c36104be3660046127b1565b611576565b60405161023e989796959493929190612903565b6104ea6104e5366004612a03565b6116b1565b604080516001600160a01b039586168152938516602085015291841691830191909152909116606082015260800161023e565b61032e61052b366004612ab0565b6000928352600080516020612ea483398151915260209081526040808520938552600c90930181528284206001600160a01b039290921684525290205460ff1690565b61058161057c3660046127e6565b6117b3565b6040805195151586526020860194909452928401919091526060830152608082015260a00161023e565b61032e6105b9366004612879565b6118ab565b6102346105cc3660046127b1565b6118b7565b6105e46105df3660046127b1565b6118d9565b60405161023e989796959493929190612afb565b61032e610606366004612879565b6119b2565b61061e6106193660046127b1565b611a4c565b6040516001600160a01b03909116815260200161023e565b6106496106443660046127b1565b611aa8565b60405161023e959493929190612b79565b61066d6106683660046127b1565b611b5e565b60405161023e9190612bbc565b6102346106883660046127b1565b611ca7565b6102fb61069b366004612c5a565b611dd2565b6102346106ae366004612810565b611f93565b61032e6106c1366004612879565b6000918252600080516020612ea4833981519152602090815260408084206001600160a01b039390931684526006909201905290205460ff1690565b61023461070b3660046127b1565b6120f6565b61072361071e3660046127e6565b61217f565b604080519315158452911515602084015215159082015260600161023e565b6000828152600080516020612ec483398151915260205260408120600481015483106107ab5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064015b60405180910390fd5b60006107c88260060154670de0b6b3a76400006105cc9190612cab565b905060648483600401546107dc9190612cc2565b6107e69083612cab565b6107f1906096612cab565b6107fb9190612ceb565b95945050505050565b60008061080f6111cd565b90506000670de0b6b3a76400006108268584612cab565b6108309190612ceb565b949350505050565b6000818152600080516020612ea48339815191526020526040812081908190819081908190816108688a8a6121de565b6001600160a01b039a909a1660009081526005830160209081526040808320546006860183528184205460078701845282852054600888018552838620546009909801909452919093205460ff9384169e9184169d9284169c509290941699509097509550909350505050565b6000818152600080516020612e84833981519152602052604081208190819081908190819081610905898b612299565b6001600160a01b039a909a1660009081526007830160209081526040808320546008860183528184205460098701845282852054600a8801855283862054600b909801909452919093205460ff9093169d909c919b509399509097509550909350505050565b6060600061097883610ebd565b90506000815167ffffffffffffffff81111561099657610996612960565b6040519080825280602002602001820160405280156109bf578160200160208202803683370190505b508251909150600090815b81811015610a41576109f58582815181106109e7576109e7612cff565b6020026020010151886119b2565b15610a3957848181518110610a0c57610a0c612cff565b6020026020010151848481518110610a2657610a26612cff565b6020026020010181815250508260010192505b6001016109ca565b5060008267ffffffffffffffff811115610a5d57610a5d612960565b604051908082528060200260200182016040528015610a86578160200160208202803683370190505b50905060005b83811015610ad357848181518110610aa657610aa6612cff565b6020026020010151828281518110610ac057610ac0612cff565b6020908102919091010152600101610a8c565b509695505050505050565b6000818152600080516020612ea483398151915260209081526040808320600080516020612ec483398151915290925282208154600190610100900460ff166004811115610b2e57610b2e612ae5565b14610b3d575060009392505050565b60008160070154836002015460018560040154610b5a9190612cc2565b8460050154610b699190612cab565b610b739190612d15565b610b7d9190612d15565b905080421115610b9257506000949350505050565b6107fb4282612cc2565b6000818152600080516020612ea48339815191526020526040812060048101546014820154610bcc906001612d15565b610bd69190612cc2565b9392505050565b6000828152600080516020612e8483398151915260209081526040808320600080516020612ee4833981519152909252822060028201548390610c209042612cc2565b90506000610c2e8787612299565b6001600160a01b0387166000908152600886016020526040902054610c539190612d15565b6001600160a01b03871660009081526005850160205260409020549091508290610c8583670de0b6b3a7640000612cab565b610c8f9190612ceb565b610c9d906301e13380612cab565b610ca79190612ceb565b9450505050505b92915050565b6000818152600080516020612ee4833981519152602052604081206003810154606092839291908167ffffffffffffffff811115610cf457610cf4612960565b604051908082528060200260200182016040528015610d1d578160200160208202803683370190505b5090506000805b83811015610d945760006001600160a01b0316856003018281548110610d4c57610d4c612cff565b6000918252602090912001546001600160a01b031603610d8c5780838381518110610d7957610d79612cff565b6020026020010181815250508160010191505b600101610d24565b5060008167ffffffffffffffff811115610db057610db0612960565b604051908082528060200260200182016040528015610dd9578160200160208202803683370190505b50905060008267ffffffffffffffff811115610df757610df7612960565b604051908082528060200260200182016040528015610e20578160200160208202803683370190505b50905060005b83811015610eae57848181518110610e4057610e40612cff565b6020026020010151838281518110610e5a57610e5a612cff565b602002602001018181525050610e898a868381518110610e7c57610e7c612cff565b6020026020010151610742565b828281518110610e9b57610e9b612cff565b6020908102919091010152600101610e26565b50909890975095505050505050565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b602090815260408083208054825181850281018501909352808352606094600080516020612f04833981519152949093929190830182828015610f4f57602002820191906000526020600020905b815481526020019060010190808311610f3b575b509398975050505050505050565b6000828152600080516020612ec483398151915260209081526040808320600080516020612ea48339815191528352818420600080516020612ee48339815191528452828520600080516020612e8483398151915285528386206001600160a01b038816875260058201865284872054600a82018752858820546015850190975294872054825494969395929491939160ff91821691600291610100900416600381111561100d5761100d612ae5565b14806110165750805b1561102c576110258284612d15565b9750611128565b60018554610100900460ff16600381111561104957611049612ae5565b03611123576001600160a01b038916600090815260078701602052604081205460ff1661109757600a61107b8c6120f6565b61108690600f612cab565b6110909190612ceb565b90506110f4565b6000876004015488601401546110ad9190612cc2565b905060006110cc8a60060154670de0b6b3a76400006105cc9190612cab565b9050600a6110da8284612cab565b6110e590600f612cab565b6110ef9190612ceb565b925050505b8084111561111857826111078286612cc2565b6111119190612d15565b985061111d565b600098505b50611128565b600097505b5050505050505092915050565b600080516020612f0483398151915280546000918291829061115990600190612cc2565b9154919491935090915050565b6000818152600080516020612e8483398151915260205260408120600281015482906111929042612cc2565b90508082600401546111a386611ca7565b6111b590670de0b6b3a7640000612cab565b6111bf9190612ceb565b610826906301e13380612cab565b6000807f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec490506000806000808460000160405161121790661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa15801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190612d3f565b945094505093509350816000141580156112ba5750836001600160501b0316816001600160501b031610155b80156112c65750600083135b6113125760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107a2565b6000806000808860000160405161133790671554d110cbd554d160c21b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190612d3f565b945094505093509350816000141580156113da5750836001600160501b0316816001600160501b031610155b80156113e65750600083135b6114325760405162461bcd60e51b815260206004820152601b60248201527f436861696e6c696e6b4f7261636c653a207374616c652064617461000000000060448201526064016107a2565b600061143e8489612d8f565b905061145281670de0b6b3a7640000612dbd565b9a505050505050505050505090565b6000818152600080516020612ec483398151915260209081526040808320600080516020612ee48339815191529092528220600181015483036114e65760405162461bcd60e51b815260206004820152601860248201527f4e6f626f647920686173206465706f736974656420796574000000000000000060448201526064016107a2565b816003015481600101546114fa9190612d15565b421061150a575060009392505050565b428260030154826001015461151f9190612d15565b6108309190612cc2565b6000818152600080516020612ea483398151915260209081526040808320600080516020612ec48339815191529092528220600282015460048301546005830154859291610b7391612cab565b6000808080806060818080600080516020612e8483398151915260000160008b815260200190815260200160002090508060000160009054906101000a900460ff16816002015482600301548360040154846005015485600601866001016040516115f0906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316906001890190611626906605a61796e5a61760cc1b815260070190565b908152604080519182900360209081018320548554808302850183019093528284526001600160a01b03169291859183018282801561168e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611670575b505050505092509850985098509850985098509850985050919395975091939597565b6040516000908190819081907f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4907ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b897790829061170e908c90612ded565b908152604051908190036020018120546001600160a01b0316908390611735908c90612ded565b908152604051908190036020018120546001600160a01b031690839061175c908c90612ded565b908152604051908190036020018120546001600160a01b0316908490611783908c90612ded565b9081526040519081900360200190205492985090965094506001600160a01b031692505050945094509450949050565b6000818152600080516020612ee483398151915260209081526040808320600080516020612ea48339815191528352818420600080516020612ec483398151915284528285206001600160a01b038816865260068201909452918420548493849384938493909290849060ff166118465761183f8260060154670de0b6b3a76400006105cc9190612cab565b9050611852565b61184f8a6120f6565b90505b6001600160a01b039a909a1660009081526004840160209081526040808320546005870183528184205460068801845282852054600790980190935292205460ff9092169c909b949a5090985092965091945050505050565b6000610bd683836122c2565b6000806118c26111cd565b905060008161082685670de0b6b3a7640000612cab565b6000808060608180808080600080516020612ea483398151915260008b81526020918252604090819020805460028201546003830154600484015460148501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b031697919691879183018282801561198f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611971575b505050505094509850985098509850985098509850985050919395975091939597565b6000828152600080516020612ea483398151915260209081526040808320600080516020612ee483398151915283528184206001600160a01b0386168552600582019093529083205490919060ff16158015611a2957506001600160a01b038416600090815260048201602052604090205460ff16155b15611a3957600192505050610cae565b600092505050610cae565b505092915050565b6000818152600080516020612ea4833981519152602052604081206004810154600180830191611a7c9190612cc2565b81548110611a8c57611a8c612cff565b6000918252602090912001546001600160a01b03169392505050565b6000808080606081600080516020612ee48339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff808516976101009095041695929491939092918391830182828015611b4357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b25575b50505050509050955095509550955095505091939590929450565b611bce60408051610160810190915260008082526020820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6000828152600080516020612ec4833981519152602090815260409182902082516101608101909352805460ff808216151585529192840191610100909104166003811115611c1f57611c1f612ae5565b6003811115611c3057611c30612ae5565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015292915050565b6000818152600080516020612e8483398151915260209081526040808320600681018054835181860281018601909452808452919385938493909291830182828015611d1c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cfe575b505083519394506000925050505b81811015611d8857846008016000848381518110611d4a57611d4a612cff565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205484611d7e9190612d15565b9350600101611d2a565b506000611d958786612409565b90508460040154811115611dc7576004850154611db28286612d15565b611dbc9190612cc2565b979650505050505050565b509195945050505050565b60606000611ddf84610ebd565b90506000815167ffffffffffffffff811115611dfd57611dfd612960565b604051908082528060200260200182016040528015611e26578160200160208202803683370190505b508251909150600090815b81811015611ef557866003811115611e4b57611e4b612ae5565b600080516020612f048339815191526001016000878481518110611e7157611e71612cff565b6020026020010151815260200190815260200160002060000160019054906101000a900460ff166003811115611ea957611ea9612ae5565b03611eed57848181518110611ec057611ec0612cff565b6020026020010151848481518110611eda57611eda612cff565b6020026020010181815250508260010192505b600101611e31565b5060008267ffffffffffffffff811115611f1157611f11612960565b604051908082528060200260200182016040528015611f3a578160200160208202803683370190505b50905060005b83811015611f8757848181518110611f5a57611f5a612cff565b6020026020010151828281518110611f7457611f74612cff565b6020908102919091010152600101611f40565b50979650505050505050565b6000806000611fa3846001611dd2565b90506000611fb2856000611dd2565b825181519192509060005b82811015612060576000600080516020612f048339815191526001016000878481518110611fed57611fed612cff565b602002602001015181526020019081526020016000209050600061202987848151811061201c5761201c612cff565b6020026020010151610b9c565b82600601546120389190612cab565b61204590620f4240612cab565b90506120518189612d15565b97508260010192505050611fbd565b5060005b818110156120ea576000600080516020612f04833981519152600101600086848151811061209457612094612cff565b6020026020010151815260200190815260200160002090506000816004015482600601546120c29190612cab565b6120cf90620f4240612cab565b90506120db8189612d15565b97508260010192505050612064565b50939695505050505050565b6000818152600080516020612ea483398151915260209081526040808320600080516020612ec4833981519152909252822060048201546014830154849190612140906001612d15565b61214a9190612cc2565b905060006121698360060154670de0b6b3a76400006105cc9190612cab565b90506121758183612cab565b9695505050505050565b6000818152600080516020612ea48339815191526020526040812081908190816121ac600d830188612555565b905060006121bd83600f0189612555565b905060006121ce846011018a612555565b9299919850919650945050505050565b6000818152600080516020612ea483398151915260209081526040808320600080516020612ee483398151915283528184206001600160a01b0387168552601582019093529083205490919060ff161561223b5760009250611a44565b60006064612248866120f6565b61225390606e612cab565b61225d9190612ceb565b6001600160a01b038716600090815260058401602052604090205490915081111561228b5760019350612290565b600093505b50505092915050565b600080670de0b6b3a76400006122af8585612577565b6122b886612603565b6108269190612cab565b6000828152600080516020612ee4833981519152602090815260408083206001600160a01b038516845260058101909252822054829061231e866000908152600080516020612ea4833981519152602052604090205460ff1690565b61239d5760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123919190612e1c565b95506124009350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa1580156123d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fd9190612e6a565b91505b10949350505050565b6000808260010160405161242c906816985e5b95985d5b1d60ba1b815260090190565b90815260405190819003602001812054631398fee160e31b82526001600160a01b031690639cc7f7089061246890879060040190815260200190565b602060405180830381865afa158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a99190612e6a565b90506000836001016040516124cd906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190612e6a565b9050670de0b6b3a76400006107f18284612cab565b6001600160a01b03811660009081526001830160205260408120541515610bd6565b6000828152600080516020612e8483398151915260205260408120600481015482036125a7576000915050610cae565b60038101546001600160a01b0384166000908152600983016020908152604080832054600b8601909252909120546125df9190612cc2565b6125f190670de0b6b3a7640000612cab565b6125fb9190612ceb565b915050610cae565b6000818152600080516020612e84833981519152602052604080822081516816985e5b95985d5b1d60ba1b8152600182016009820152915191829003602901822054631398fee160e31b835260048301859052909183916001600160a01b031690639cc7f70890602401602060405180830381865afa15801561268a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ae9190612e6a565b90506000826001016040516126d2906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015612721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127459190612e6a565b90506000670de0b6b3a764000061275c8385612cab565b6127669190612ceb565b905083600401548111156127835760048401546121759082612cc2565b50600095945050505050565b600080604083850312156127a257600080fd5b50508035926020909101359150565b6000602082840312156127c357600080fd5b5035919050565b80356001600160a01b03811681146127e157600080fd5b919050565b600080604083850312156127f957600080fd5b612802836127ca565b946020939093013593505050565b60006020828403121561282257600080fd5b610bd6826127ca565b600081518084526020808501945080840160005b8381101561285b5781518752958201959082019060010161283f565b509495945050505050565b602081526000610bd6602083018461282b565b6000806040838503121561288c57600080fd5b8235915061289c602084016127ca565b90509250929050565b6040815260006128b8604083018561282b565b82810360208401526107fb818561282b565b600081518084526020808501945080840160005b8381101561285b5781516001600160a01b0316875295820195908201906001016128de565b60006101008a151583528960208401528860408401528760608401528660808401528060a0840152612937818401876128ca565b6001600160a01b0395861660c08501529390941660e09092019190915250979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261298757600080fd5b813567ffffffffffffffff808211156129a2576129a2612960565b604051601f8301601f19908116603f011681019082821181831017156129ca576129ca612960565b816040528381528660208588010111156129e357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612a1957600080fd5b843567ffffffffffffffff80821115612a3157600080fd5b612a3d88838901612976565b95506020870135915080821115612a5357600080fd5b612a5f88838901612976565b94506040870135915080821115612a7557600080fd5b612a8188838901612976565b93506060870135915080821115612a9757600080fd5b50612aa487828801612976565b91505092959194509250565b600080600060608486031215612ac557600080fd5b8335925060208401359150612adc604085016127ca565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60006101008a1515835260058a10612b1557612b15612ae5565b602083018a90526001600160a01b038916604084015260608301819052612b3e818401896128ca565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b60048110612b7657612b76612ae5565b50565b8515158152612b8785612b66565b84602082015283604082015282606082015260a060808201526000611dbc60a08301846128ca565b612bb881612b66565b9052565b81511515815261016081016020830151612bd96020840182612baf565b506040830151612bf460408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151611a44828501826001600160a01b03169052565b60008060408385031215612c6d57600080fd5b612c76836127ca565b9150602083013560048110612c8a57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610cae57610cae612c95565b81810381811115610cae57610cae612c95565b634e487b7160e01b600052601260045260246000fd5b600082612cfa57612cfa612cd5565b500490565b634e487b7160e01b600052603260045260246000fd5b80820180821115610cae57610cae612c95565b80516001600160501b03811681146127e157600080fd5b600080600080600060a08688031215612d5757600080fd5b612d6086612d28565b9450602086015193506040860151925060608601519150612d8360808701612d28565b90509295509295909350565b600082612d9e57612d9e612cd5565b600160ff1b821460001984141615612db857612db8612c95565b500590565b80820260008212600160ff1b84141615612dd957612dd9612c95565b8181058314821517610cae57610cae612c95565b6000825160005b81811015612e0e5760208186018101518583015201612df4565b506000920191825250919050565b600080600080600060a08688031215612e3457600080fd5b85518015158114612e4457600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b600060208284031215612e7c57600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf96751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288887101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89a26469706673582212207ce8f57bbb8ccb69f0b2853bcce3d87dd9d3c646e51cf27339cc9436fe43b72364736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "expelledBeforeBeneficiary(uint256,address)": {
        "params": {
          "termId": "the id of the term",
          "user": "the address of the participant to check"
        },
        "returns": {
          "_0": "true if the participant is expelled before being a beneficiary"
        }
      },
      "getAllJoinedTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of"
        }
      },
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "params": {
          "termId": "the term id"
        }
      },
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "collateral initialized",
          "_1": "collateral state",
          "_2": "collateral firstDepositTime",
          "_3": "counterMembers",
          "_4": "collateral depositors"
        }
      },
      "getConstants(string,string,string,string)": {
        "params": {
          "firstAggregator": "The name of the first aggregator. Example: \"ETH/USD\"",
          "secondAggregator": "The name of the second aggregator. Example: \"USDC/USD\"",
          "vaultAddress": "The name of the vault address. Example: \"ZaynVault\"",
          "zapAddress": "The name of the zap address. Example: \"ZaynZap\""
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "isCollateralMember",
          "_1": "collateralMembersBank",
          "_2": "collateralPaymentBank",
          "_3": "collateralDepositByUser",
          "_4": "expulsion limit"
        }
      },
      "getExpelledTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array the term ids the participant is part of, giving the state of the term"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "fund initialized",
          "_1": "fund currentState",
          "_2": "fund stableToken",
          "_3": "fund beneficiariesOrder",
          "_4": "fund fundStart",
          "_5": "fund fundEnd",
          "_6": "fund currentCycle",
          "_7": "fund totalAmountOfCycles"
        }
      },
      "getJoinedTermsByState(address,uint8)": {
        "params": {
          "participant": "the participant address",
          "state": "the term state"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of, giving the state of the term"
        }
      },
      "getLatestPrice()": {
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getNeededAllowance(address)": {
        "params": {
          "user": "the user address"
        },
        "returns": {
          "_0": "the needed allowance"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "fund isParticipant, true if is participant",
          "_1": "fund isBeneficiary, true if has been beneficiary",
          "_2": "fund paidThisCycle, true if has paid the current cycle",
          "_3": "fund autoPayEnabled, true if auto pay is enabled",
          "_4": "fund beneficiariesPool, the beneficiary pool, 6 decimals",
          "_5": "fund beneficiariesFrozenPool, true if the beneficiary pool is frozen"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution"
        }
      },
      "getRemainingRegistrationTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining contribution period"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term struct"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToCollateralConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "USDAmount": "The amount in USD with 18 decimals"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToStableConversionRate(uint256)": {
        "details": "should we always deal with in Wei?",
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "getUserSet(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "on participant set",
          "_1": "on beneficiary set",
          "_2": "on defaulter set"
        }
      },
      "getUserYieldSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "_0": "hasOptedIn",
          "_1": "withdrawnYield",
          "_2": "withdrawnCollateral",
          "_3": "availableYield",
          "_4": "depositedCollateralByUser",
          "_5": "yieldDistributed"
        }
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "params": {
          "termId": "term id",
          "user": "depositor address"
        },
        "returns": {
          "allowedWithdrawal": "amount the amount of collateral the depositor can withdraw"
        }
      },
      "getYieldSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "initialized",
          "_1": "startTimeStamp",
          "_2": "totalDeposit",
          "_3": "currentTotalDeposit",
          "_4": "totalShares",
          "_5": "yieldUsers",
          "_6": "vaultAddress",
          "_7": "zapAddress"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "isExempted(uint256,uint256,address)": {
        "params": {
          "cycle": "the cycle to check",
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user is exempted"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount, Tp = total participants, I = depositor index (starts at 0). 1.5",
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPY(uint256)": {
        "params": {
          "termId": "The term id for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPY(uint256,address)": {
        "params": {
          "termId": "The term id for which the APY is being calculated",
          "user": "The user for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the user"
        }
      },
      "userHasoptedInYG(uint256,address)": {
        "params": {
          "termId": "The term id for which the check is being made",
          "user": "The user for which the check is being made"
        },
        "returns": {
          "_0": "True if the user has opted in"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "notice": "Gets the remaining positions in a term and the corresponding security amount"
      },
      "getConstants(string,string,string,string)": {
        "notice": "This function return the current constant values for oracles and yield providers"
      },
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the current beneficiary"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getNeededAllowance(address)": {
        "notice": "a function to get the needed allowance for every active term the user is part of"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getRemainingRegistrationTime(uint256)": {
        "notice": "Gets the remaining registration period for a term"
      },
      "getToCollateralConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToStableConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "getUserSet(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "notice": "Called to check how much collateral a user can withdraw"
      },
      "getYieldLockState()": {
        "notice": "This function is used to get the current state of the yield lock"
      },
      "isExempted(uint256,uint256,address)": {
        "notice": "function to see if a user is exempted from paying a cycle"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPY(uint256)": {
        "notice": "This function is used to get a term APY"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPY(uint256,address)": {
        "notice": "This function is used to get a user APY"
      },
      "userHasoptedInYG(uint256,address)": {
        "notice": "This function is used to check if a user has opted in for yield generation"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}