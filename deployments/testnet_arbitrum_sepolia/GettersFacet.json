{
  "address": "0xa7a31A790784f10E380aD5981285289Dc4dbD14b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "currentOrNextCyclePaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "expelledBeforeBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getAllJoinedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getAvailablePositionsAndSecurityAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "firstAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "zapAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vaultAddress",
          "type": "string"
        }
      ],
      "name": "getConstants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getExpelledTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "enum LibTermStorage.TermStates",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "getJoinedTermsByState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNeededAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getNextBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRegistrationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermRelatedSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "term",
          "type": "tuple"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "collateralState",
          "type": "uint8"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "fundState",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "availablePositions",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "securityDeposits",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "remainingRegistrationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingContributionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingCycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingCycles",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rcc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "collateralInitialized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFirstDepositTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralCounterMembers",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fundInitialized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fundStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundCurrentCycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundExpellantsCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundTotalCycles",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "fundBeneficiariesOrder",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "yieldInitialized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "yieldStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldTotalDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldCurrentTotalDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldTotalShares",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "yieldUsers",
              "type": "address[]"
            }
          ],
          "internalType": "struct LibGettersHelpers.NonUserRelated",
          "name": "nonUserRelated",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToCollateralConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToStableConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserRelatedSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "collateralMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderCollaterized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "membersBank",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentBank",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expulsonLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawableBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fundMember",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "beneficiary",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "currentCyclePaid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "nextCyclePaid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoPayer",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "moneyPotFrozen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exemptedThisCycle",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleExpelled",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "yieldMember",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralDepositedInYield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralWithdrawnFromYield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldAvailable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldWithdrawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributedYield",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibGettersHelpers.UserRelated",
          "name": "userRelated",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldLockState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isExempted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasoptedInYG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d4e0809b0e24618533fc41711def2feefe8e5d90b80b45a48db070cc2527efd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "3394514",
    "logsBloom": "0x
    "blockHash": "0x14879fda85936dbfb72f41081036f17467b148616af226c7c59b5e14818f7f24",
    "transactionHash": "0x0d4e0809b0e24618533fc41711def2feefe8e5d90b80b45a48db070cc2527efd",
    "logs": [],
    "blockNumber": 27913393,
    "cumulativeGasUsed": "5375348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "487de8ae64cb645597e858458198626c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"currentOrNextCyclePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"expelledBeforeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getAllJoinedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getAvailablePositionsAndSecurityAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"firstAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zapAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vaultAddress\",\"type\":\"string\"}],\"name\":\"getConstants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getExpelledTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"getJoinedTermsByState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNeededAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getNextBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermRelatedSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"term\",\"type\":\"tuple\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"collateralState\",\"type\":\"uint8\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"fundState\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"availablePositions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityDeposits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"remainingRegistrationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingContributionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingCycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingCycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rcc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"collateralInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFirstDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralCounterMembers\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fundInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fundStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundCurrentCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundExpellantsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundTotalCycles\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"fundBeneficiariesOrder\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"yieldInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"yieldStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldCurrentTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldTotalShares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"yieldUsers\",\"type\":\"address[]\"}],\"internalType\":\"struct LibGettersHelpers.NonUserRelated\",\"name\":\"nonUserRelated\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToCollateralConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToStableConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserRelatedSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"collateralMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderCollaterized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"membersBank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentBank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expulsonLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fundMember\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beneficiary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"currentCyclePaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nextCyclePaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoPayer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"moneyPotFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exemptedThisCycle\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleExpelled\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"yieldMember\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralDepositedInYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralWithdrawnFromYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedYield\",\"type\":\"uint256\"}],\"internalType\":\"struct LibGettersHelpers.UserRelated\",\"name\":\"userRelated\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldLockState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasoptedInYG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Maikel Ordaz\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"paidThisCycle, true if has paid the current cycle\",\"_1\":\"paidNextCycle, true if has paid the next cycle\"}},\"expelledBeforeBeneficiary(uint256,address)\":{\"params\":{\"termId\":\"the id of the term\",\"user\":\"the address of the participant to check\"},\"returns\":{\"_0\":\"true if the participant is expelled before being a beneficiary\"}},\"getAllJoinedTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of\"}},\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"details\":\"Available positions starts at 0\",\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"availablePositions an array with the available positions\",\"_1\":\"securityAmount an array with the security amount for each available position\"}},\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if collateral initialized\",\"_1\":\"current collateral state\",\"_2\":\"time of first deposit\",\"_3\":\"current members count\",\"_4\":\"list of depositors\"}},\"getConstants(string,string,string,string)\":{\"params\":{\"firstAggregator\":\"The name of the first aggregator. Example: \\\"ETH/USD\\\"\",\"secondAggregator\":\"The name of the second aggregator. Example: \\\"USDC/USD\\\"\",\"vaultAddress\":\"The name of the vault address. Example: \\\"ZaynVault\\\"\",\"zapAddress\":\"The name of the zap address. Example: \\\"ZaynZap\\\"\"},\"returns\":{\"_0\":\"The addresses of the oracles and yield providers\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if the user is a true member of the term\",\"_1\":\"current users locked collateral balance in wei\",\"_2\":\"current users unlocked collateral balance in wei\",\"_3\":\"initial users deposit in wei\",\"_4\":\"expulsion limit\"}},\"getExpelledTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array the term ids on which the participant was expelled\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"if fund initialized\",\"_1\":\"current fund state\",\"_2\":\"stable token address used\",\"_3\":\"list of beneficiaries order\",\"_4\":\"when the fund starts in seconds\",\"_5\":\"when the fund ended, 0 if not ended\",\"_6\":\"current cycle number\",\"_7\":\"total amount of cycles\"}},\"getJoinedTermsByState(address,uint8)\":{\"params\":{\"participant\":\"the participant address\",\"state\":\"the term state\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of, giving the state of the term\"}},\"getLatestPrice()\":{\"details\":\"Revert if there is problem with chainlink data\",\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getNeededAllowance(address)\":{\"params\":{\"user\":\"the user address\"},\"returns\":{\"_0\":\"the needed allowance\"}},\"getNextBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the next beneficiary\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"isParticipant, true if is participant\",\"_1\":\"isBeneficiary, true if has been beneficiary\",\"_2\":\"paidThisCycle, true if has paid the current cycle\",\"_3\":\"autoPayEnabled, true if auto pay is enabled\",\"_4\":\"beneficiariesPool, the beneficiary pool, 6 decimals\",\"_5\":\"beneficiariesFrozenPool, true if the beneficiary pool is frozen\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution in wei\"}},\"getRemainingRegistrationTime(uint256)\":{\"details\":\"Revert if nobody has deposited\",\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining contribution period\"}},\"getTermRelatedSummary(uint256)\":{\"params\":{\"termId\":\"The term id for which the summary is being requested\"},\"returns\":{\"collateralState\":\"The current state of the collateral\",\"fundState\":\"The current state of the fund\",\"nonUserRelated\":\"A helper struct with the following values:                        available positions, security deposits corresponding to each position,                        remaining registration time, remaining contribution time,                        remaining cycle time, remaining cycles, remaining cycles                        contribution in wei, latest price from Chainlink, collateral                        first deposit time in seconds, collateral counter members,                        fund start time in seconds, fund end time in seconds, current                        cycle, expelled participants, total amount of cycles, yield                        start time in seconds, total deposit in wei, current total                        deposit in wei, total shares, users opted in for yield\",\"term\":\"The term object\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term object\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToCollateralConversionRate(uint256)\":{\"params\":{\"USDAmount\":\"The amount in USD with 18 decimals\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToStableConversionRate(uint256)\":{\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"getUserRelatedSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"userRelated\":\"an object that contains the following values:                     user is collateral member, user is undercollaterized,                     current collateral balance, received collateral from defaults,                     initial deposited collateral, collateral expulsion limit,                     currently withdrawable balance, is fund member, is or was beneficiary,                     user paid current cycle, user paid next cycle in advance,                     user enabled autopay, user's money pot is frozen, user is exempted this                     cycle, the money pot pool the user can withdraw, the cycle the user got                     expelled (if applicable), is yield member, amount of collateral deposited                     in yield pool, amount of collateral withdrawn from yield pool, available                     yield to withdraw, amount of yield withdrawn, yield to be distributed\"}},\"getUserSet(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"on participant set\",\"_1\":\"on beneficiary set\",\"_2\":\"on defaulter set\"}},\"getUserYieldSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"_0\":\"if the user opted in for yield\",\"_1\":\"amount withdrawn from yield\",\"_2\":\"amount withdrawn from collateral\",\"_3\":\"amount available in yield\",\"_4\":\"amount deposited by user in yield\",\"_5\":\"amount of yield distributed\"}},\"getWithdrawableUserBalance(uint256,address)\":{\"params\":{\"termId\":\"term id\",\"user\":\"depositor address\"},\"returns\":{\"allowedWithdrawal\":\"amount the amount of collateral the depositor can withdraw\"}},\"getYieldLockState()\":{\"returns\":{\"_0\":\"The current state of the yield lock\"}},\"getYieldSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if the yield is initialized\",\"_1\":\"start time stamp for yield deposit\",\"_2\":\"total deposit\",\"_3\":\"current amount in yield\",\"_4\":\"amount of total shares\",\"_5\":\"list of yield users\",\"_6\":\"address of vault\",\"_7\":\"address of zap\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"isExempted(uint256,uint256,address)\":{\"params\":{\"cycle\":\"the cycle to check\",\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user is exempted\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"minCollateralToDeposit(uint256,uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,      Tp = total participants, I = depositor index (starts at 0). 1.5\",\"params\":{\"depositorIndex\":\"the index the depositor wants to join\",\"termId\":\"term id\"},\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPY(uint256)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPY(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\",\"user\":\"The user for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the user\"}},\"userHasoptedInYG(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the check is being made\",\"user\":\"The user for which the check is being made\"},\"returns\":{\"_0\":\"True if the user has opted in\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}}},\"title\":\"Takaturn Getters Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"expelledBeforeBeneficiary(uint256,address)\":{\"notice\":\"checks if a participant have been expelled before being a beneficiary\"},\"getAllJoinedTerms(address)\":{\"notice\":\"Get all the terms a participant is part of\"},\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"notice\":\"Gets the remaining positions in a term and the corresponding security amount\"},\"getCollateralSummary(uint256)\":{\"notice\":\"function to get the collateral object\"},\"getConstants(string,string,string,string)\":{\"notice\":\"This function return the current constant values for oracles and yield providers\"},\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the beneficiary from the current cycle\"},\"getDepositorCollateralSummary(address,uint256)\":{\"notice\":\"function to get the depositor collateral summary\"},\"getExpelledTerms(address)\":{\"notice\":\"Get all the terms a participant was expelled from\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getJoinedTermsByState(address,uint8)\":{\"notice\":\"Get all the terms a participant is part of by a given state\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getNeededAllowance(address)\":{\"notice\":\"a function to get the needed allowance for every active term the user is part of\"},\"getNextBeneficiary(uint256)\":{\"notice\":\"function to get the beneficiary from the next cycle\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getRemainingCycleTime(uint256)\":{\"notice\":\"Get the term's remaining time in the current cycle\"},\"getRemainingCycles(uint256)\":{\"notice\":\"Get the term's remaining cycles\"},\"getRemainingCyclesContributionWei(uint256)\":{\"notice\":\"Get the term's remaining contribution amount converted from USDC to wei\"},\"getRemainingRegistrationTime(uint256)\":{\"notice\":\"Gets the remaining registration period for a term\"},\"getTermRelatedSummary(uint256)\":{\"notice\":\"This function is used as a helper for front-end implementation\"},\"getTermSummary(uint256)\":{\"notice\":\"Gets the term object\"},\"getToCollateralConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToStableConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"getUserRelatedSummary(address,uint256)\":{\"notice\":\"This function is used as a helper for front-end implementation\"},\"getUserSet(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getUserYieldSummary(address,uint256)\":{\"notice\":\"Gets the user yield summary\"},\"getWithdrawableUserBalance(uint256,address)\":{\"notice\":\"Called to check how much collateral a user can withdraw\"},\"getYieldLockState()\":{\"notice\":\"This function is used to get the current state of the yield lock\"},\"getYieldSummary(uint256)\":{\"notice\":\"Gets the yield object\"},\"isBeneficiary(uint256,address)\":{\"notice\":\"checks if a participant have been a beneficiary\"},\"isExempted(uint256,uint256,address)\":{\"notice\":\"function to see if a user is exempted from paying a cycle\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"minCollateralToDeposit(uint256,uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPY(uint256)\":{\"notice\":\"This function is used to get a term APY\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPY(uint256,address)\":{\"notice\":\"This function is used to get a user APY\"},\"userHasoptedInYG(uint256,address)\":{\"notice\":\"This function is used to check if a user has opted in for yield generation\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"}},\"notice\":\"Getters for Takaturn protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LibGettersHelpers} from \\\"../libraries/LibGettersHelpers.sol\\\";\\n\\n/// @title Takaturn Getters Facet\\n/// @author Maikel Ordaz\\n/// @notice Getters for Takaturn protocol\\n/// @dev v3.0 (Diamond)\\ncontract GettersFacet is IGetters {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice This function is used as a helper for front-end implementation\\n    /// @param termId The term id for which the summary is being requested\\n    /// @return term The term object\\n    /// @return collateralState The current state of the collateral\\n    /// @return fundState The current state of the fund\\n    /// @return nonUserRelated A helper struct with the following values:\\n    ///                        available positions, security deposits corresponding to each position,\\n    ///                        remaining registration time, remaining contribution time,\\n    ///                        remaining cycle time, remaining cycles, remaining cycles\\n    ///                        contribution in wei, latest price from Chainlink, collateral\\n    ///                        first deposit time in seconds, collateral counter members,\\n    ///                        fund start time in seconds, fund end time in seconds, current\\n    ///                        cycle, expelled participants, total amount of cycles, yield\\n    ///                        start time in seconds, total deposit in wei, current total\\n    ///                        deposit in wei, total shares, users opted in for yield\\n    function getTermRelatedSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (\\n            LibTermStorage.Term memory term,\\n            LibCollateralStorage.CollateralStates collateralState,\\n            LibFundStorage.FundStates fundState,\\n            LibGettersHelpers.NonUserRelated memory nonUserRelated\\n        )\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        term = LibTermStorage._termStorage().terms[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        (\\n            uint[] memory joinPositions,\\n            uint[] memory joinAmounts\\n        ) = getAvailablePositionsAndSecurityAmount(termId);\\n\\n        collateralState = collateral.state;\\n        fundState = fund.currentState;\\n\\n        nonUserRelated = LibGettersHelpers.NonUserRelated({\\n            availablePositions: joinPositions,\\n            securityDeposits: joinAmounts,\\n            remainingRegistrationTime: getRemainingRegistrationTime(termId),\\n            remainingContributionTime: getRemainingContributionTime(termId),\\n            remainingCycleTime: getRemainingCycleTime(termId),\\n            remainingCycles: getRemainingCycles(termId),\\n            rcc: getRemainingCyclesContributionWei(termId),\\n            latestPrice: getLatestPrice(),\\n            collateralInitialized: collateral.initialized,\\n            collateralFirstDepositTime: collateral.firstDepositTime,\\n            collateralCounterMembers: collateral.counterMembers,\\n            fundInitialized: fund.initialized,\\n            fundStartTime: fund.fundStart,\\n            fundEndTime: fund.fundEnd,\\n            fundCurrentCycle: fund.currentCycle,\\n            fundExpellantsCount: fund.expelledParticipants,\\n            fundTotalCycles: fund.totalAmountOfCycles,\\n            fundBeneficiariesOrder: fund.beneficiariesOrder,\\n            yieldInitialized: yield.initialized,\\n            yieldStartTime: yield.startTimeStamp,\\n            yieldTotalDeposit: yield.totalDeposit,\\n            yieldCurrentTotalDeposit: yield.currentTotalDeposit,\\n            yieldTotalShares: yield.totalShares,\\n            yieldUsers: yield.yieldUsers\\n        });\\n    }\\n\\n    /// @notice This function is used as a helper for front-end implementation\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return userRelated an object that contains the following values:\\n    ///                     user is collateral member, user is undercollaterized,\\n    ///                     current collateral balance, received collateral from defaults,\\n    ///                     initial deposited collateral, collateral expulsion limit,\\n    ///                     currently withdrawable balance, is fund member, is or was beneficiary,\\n    ///                     user paid current cycle, user paid next cycle in advance,\\n    ///                     user enabled autopay, user's money pot is frozen, user is exempted this\\n    ///                     cycle, the money pot pool the user can withdraw, the cycle the user got\\n    ///                     expelled (if applicable), is yield member, amount of collateral deposited\\n    ///                     in yield pool, amount of collateral withdrawn from yield pool, available\\n    ///                     yield to withdraw, amount of yield withdrawn, yield to be distributed\\n    function getUserRelatedSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (LibGettersHelpers.UserRelated memory userRelated) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        bool beneficiary = fund.isBeneficiary[user]; // true if user has been beneficiary\\n\\n        userRelated.collateralMember = collateral.isCollateralMember[user]; // true if member\\n        userRelated.isUnderCollaterized = LibCollateral._isUnderCollaterized(termId, user); // checks if user is undercollaterized\\n        userRelated.membersBank = collateral.collateralMembersBank[user];\\n        userRelated.paymentBank = collateral.collateralPaymentBank[user];\\n        userRelated.deposited = collateral.collateralDepositByUser[user];\\n        userRelated.fundMember = fund.isParticipant[user]; // true if participant\\n        userRelated.beneficiary = beneficiary; // true if user has been beneficiary\\n        userRelated.currentCyclePaid = fund.paidThisCycle[user]; // true if has paid current cycle\\n        userRelated.nextCyclePaid = fund.paidNextCycle[user]; // true if has paid next cycle\\n        userRelated.autoPayer = fund.autoPayEnabled[user]; // true if enabled auto pay\\n        userRelated.moneyPotFrozen = _checkFrozenMoneyPot(user, termId); // true if money pot is frozen\\n        userRelated.exemptedThisCycle = fund.isExemptedOnCycle[fund.currentCycle].exempted[user];\\n        userRelated.yieldMember = yield.hasOptedIn[user]; // true if deposit on yield\\n        userRelated.withdrawableBalance = getWithdrawableUserBalance(termId, user); // Gets the amount of collateral the user can withdraw right now\\n\\n        if (collateral.state != LibCollateralStorage.CollateralStates.AcceptingCollateral) {\\n            uint limit;\\n            if (beneficiary) {\\n                // limit is determined by whether the user is beneficiary or not\\n                limit = getRemainingCyclesContributionWei(termId);\\n            } else {\\n                limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\n            }\\n\\n            userRelated.expulsonLimit = limit;\\n            userRelated.pool = fund.beneficiariesPool[user];\\n            userRelated.cycleExpelled = fund.cycleOfExpulsion[user];\\n\\n            if (yield.hasOptedIn[user]) {\\n                userRelated.collateralDepositedInYield = yield.depositedCollateralByUser[user];\\n                userRelated.collateralWithdrawnFromYield = yield.withdrawnCollateral[user];\\n                userRelated.yieldAvailable = yield.availableYield[user];\\n                userRelated.yieldWithdrawn = yield.withdrawnYield[user];\\n                userRelated.distributedYield = LibYieldGeneration._unwithdrawnUserYieldGenerated(\\n                    termId,\\n                    user\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    /// @return The addresses of the oracles and yield providers\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        return (\\n            termConsts.aggregatorsAddresses[firstAggregator],\\n            termConsts.aggregatorsAddresses[secondAggregator],\\n            yieldProvider.providerAddresses[zapAddress],\\n            yieldProvider.providerAddresses[vaultAddress]\\n        );\\n    }\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    /// @return The current state of the yield lock\\n    function getYieldLockState() external view returns (bool) {\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\n    }\\n\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint lastTermId = termStorage.nextTermId - 1;\\n        uint nextTermId = termStorage.nextTermId;\\n        return (lastTermId, nextTermId);\\n    }\\n\\n    /// @notice Gets the term object\\n    /// @param termId the term id\\n    /// @return the term object\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\\n        return (LibTermStorage._termStorage().terms[termId]);\\n    }\\n\\n    /// @notice function to get the collateral object\\n    /// @param termId the collateral id\\n    /// @return if collateral initialized\\n    /// @return current collateral state\\n    /// @return time of first deposit\\n    /// @return current members count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        return (\\n            collateral.initialized,\\n            collateral.state, // Current state of Collateral\\n            collateral.firstDepositTime, // Time when the first deposit was made\\n            collateral.counterMembers, // Current member count\\n            collateral.depositors // List of depositors\\n        );\\n    }\\n\\n    /// @notice function to get the cycle information in one go\\n    /// @param termId the fund id\\n    /// @return if fund initialized\\n    /// @return current fund state\\n    /// @return stable token address used\\n    /// @return list of beneficiaries order\\n    /// @return when the fund starts in seconds\\n    /// @return when the fund ended, 0 if not ended\\n    /// @return current cycle number\\n    /// @return total amount of cycles\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\n    {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return (\\n            fund.initialized,\\n            fund.currentState,\\n            fund.stableToken,\\n            fund.beneficiariesOrder,\\n            fund.fundStart,\\n            fund.fundEnd,\\n            fund.currentCycle,\\n            fund.totalAmountOfCycles\\n        );\\n    }\\n\\n    /// @notice Gets the yield object\\n    /// @param termId the collateral id\\n    /// @return if the yield is initialized\\n    /// @return start time stamp for yield deposit\\n    /// @return total deposit\\n    /// @return current amount in yield\\n    /// @return amount of total shares\\n    /// @return list of yield users\\n    /// @return address of vault\\n    /// @return address of zap\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        return (\\n            yield.initialized,\\n            yield.startTimeStamp,\\n            yield.totalDeposit,\\n            yield.currentTotalDeposit,\\n            yield.totalShares,\\n            yield.yieldUsers,\\n            yield.providerAddresses[\\\"ZaynVault\\\"],\\n            yield.providerAddresses[\\\"ZaynZap\\\"]\\n        );\\n    }\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        return\\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\\n            elaspedTime;\\n    }\\n\\n    /// @notice a function to get the needed allowance for every active term the user is part of\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint) {\\n        uint neededAllowance;\\n\\n        uint[] memory activeTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.ActiveTerm\\n        );\\n        uint[] memory initializedTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.InitializingTerm\\n        );\\n\\n        uint activeTermsLength = activeTerms.length;\\n        uint initializedTermsLength = initializedTerms.length;\\n\\n        for (uint i; i < activeTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\\n            uint remainingPayments = term.contributionAmount *\\n                getRemainingCycles(activeTerms[i]) *\\n                10 ** 6;\\n            neededAllowance += remainingPayments;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than activeTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint i; i < initializedTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\\n                initializedTerms[i]\\n            ];\\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\\n            neededAllowance += totalPayments;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than initializedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return neededAllowance;\\n    }\\n\\n    /// @notice function to get the beneficiary from the current cycle\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\n    }\\n\\n    /// @notice function to get the beneficiary from the next cycle\\n    /// @param termId the fund id\\n    /// @return the next beneficiary\\n    function getNextBeneficiary(uint termId) external view returns (address) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.beneficiariesOrder[fund.currentCycle];\\n    }\\n\\n    /// @notice function to get the depositor collateral summary\\n    /// @param depositor the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint limit;\\n        if (!fund.isBeneficiary[depositor]) {\\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\n        } else {\\n            limit = getRemainingCyclesContributionWei(termId);\\n        }\\n\\n        return (\\n            collateral.isCollateralMember[depositor],\\n            collateral.collateralMembersBank[depositor],\\n            collateral.collateralPaymentBank[depositor],\\n            collateral.collateralDepositByUser[depositor],\\n            limit\\n        );\\n    }\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return isParticipant, true if is participant\\n    /// @return isBeneficiary, true if has been beneficiary\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return autoPayEnabled, true if auto pay is enabled\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        bool isMoneyPotFrozen = _checkFrozenMoneyPot(participant, termId);\\n\\n        return (\\n            fund.isParticipant[participant],\\n            fund.isBeneficiary[participant],\\n            fund.paidThisCycle[participant],\\n            fund.autoPayEnabled[participant],\\n            fund.beneficiariesPool[participant],\\n            isMoneyPotFrozen\\n        );\\n    }\\n\\n    /// @notice Gets the user yield summary\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user opted in for yield\\n    /// @return amount withdrawn from yield\\n    /// @return amount withdrawn from collateral\\n    /// @return amount available in yield\\n    /// @return amount deposited by user in yield\\n    /// @return amount of yield distributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return (\\n            yield.hasOptedIn[user],\\n            yield.withdrawnYield[user],\\n            yield.withdrawnCollateral[user],\\n            yield.availableYield[user],\\n            yield.depositedCollateralByUser[user],\\n            yieldDistributed\\n        );\\n    }\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\\n    }\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) public view returns (uint allowedWithdrawal) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint userCollateral = collateral.collateralMembersBank[user];\\n        uint availableYield = yield.availableYield[user];\\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\\n\\n        if (\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\n            expelledBeforeBeingBeneficiary\\n        ) {\\n            allowedWithdrawal = userCollateral + availableYield;\\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\n            uint minRequiredCollateral;\\n\\n            // Check if the user has paid this cycle or the next\\n            if (!fund.paidThisCycle[user] && !fund.paidNextCycle[user]) {\\n                // If none have been paid\\n                // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\n                minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\\n            }\\n\\n            // If the user has paid only one of the cycles, current or next\\n            if (\\n                (fund.paidThisCycle[user] && !fund.paidNextCycle[user]) ||\\n                (fund.paidNextCycle[user] && !fund.paidThisCycle[user])\\n            ) {\\n                // We need to check his remaining cycles and get the contribution amount for those\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle;\\n                uint contributionAmountWei = getToCollateralConversionRate(\\n                    term.contributionAmount * 10 ** 18\\n                );\\n\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\n            }\\n\\n            // If the user has paid both cycles, current and next\\n            if (fund.paidThisCycle[user] && fund.paidNextCycle[user]) {\\n                // We need to check his remaining cycles and get the contribution amount for those\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle - 1;\\n                uint contributionAmountWei = getToCollateralConversionRate(\\n                    term.contributionAmount * 10 ** 18\\n                );\\n\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\n            }\\n\\n            // Collateral must be higher than 1.5 X RCC\\n            if (userCollateral > minRequiredCollateral) {\\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\\n            } else {\\n                allowedWithdrawal = 0;\\n            }\\n        } else {\\n            allowedWithdrawal = 0;\\n        }\\n    }\\n\\n    /// @notice Get all the terms a participant was expelled from\\n    /// @param participant the participant address\\n    /// @return an array the term ids on which the participant was expelled\\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (wasExpelled(joinedTerms[i], participant)) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n\\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory termsExpelled = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            termsExpelled[i] = temporaryArray[i];\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than termsCounter\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return termsExpelled;\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\n        return LibCollateral._isUnderCollaterized(termId, member);\\n    }\\n\\n    /// @notice function to see if a user is exempted from paying a cycle\\n    /// @param termId the fund id\\n    /// @param cycle the cycle to check\\n    /// @param user the user to check\\n    /// @return true if the user is exempted\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isExemptedOnCycle[cycle].exempted[user];\\n    }\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        return yield.hasOptedIn[user];\\n    }\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        uint userYieldGenerated = yield.withdrawnYield[user] +\\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return\\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\\n                365 days) / elaspedTime;\\n    }\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return paidNextCycle, true if has paid the next cycle\\n    function currentOrNextCyclePaid(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        return (fund.paidThisCycle[participant], fund.paidNextCycle[participant]);\\n    }\\n\\n    /// @notice checks if a participant have been a beneficiary\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isBeneficiary[beneficiary];\\n    }\\n\\n    /// @notice function to know if a user was expelled before\\n    /// @param termId the fund id\\n    /// @param user the user to check\\n    /// @return true if the user was expelled before\\n    function wasExpelled(uint termId, address user) public view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.expelledBeforeBeneficiary[user];\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\\n        // NOTE: This will be made internal\\n        uint ethPrice = getLatestPrice();\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\n        return ethAmountInUSD;\\n    }\\n\\n    /// @notice Get the term's remaining cycles\\n    /// @param termId the term id\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\n    }\\n\\n    /// @notice Get the term's remaining contribution amount converted from USDC to wei\\n    /// @param termId the term id\\n    /// @return remaining cycles contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\n        uint contributionAmountWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        return remainingCycles * contributionAmountWei;\\n    }\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @param termId term id\\n    /// @param depositorIndex the index the depositor wants to join\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(\\n        uint termId,\\n        uint depositorIndex\\n    ) public view returns (uint amount) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        require(depositorIndex < term.totalParticipants, \\\"TT-GF-01\\\");\\n\\n        uint contributionAmountInWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\n    }\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @dev Revert if there is problem with chainlink data\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() public view returns (uint) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n\\n        (\\n            uint80 roundID_ethUSD,\\n            int256 price_ethUSD,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\n            uint80 answeredInRound_ethUSD\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        // Check if chainlink data is not stale or incorrect\\n        require(\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\n            \\\"TT-GF-02\\\"\\n        );\\n\\n        (\\n            uint80 roundID_usdUSDC,\\n            int256 price_usdUSDC,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\n            uint80 answeredInRound_usdUSDC\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USDC/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        require(\\n            timeStamp_usdUSDC != 0 &&\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\n                price_usdUSDC > 0,\\n            \\\"TT-GF-02\\\"\\n        );\\n\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\n\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\\n        uint ethPrice = getLatestPrice();\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\n        return USDAmountInEth;\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint totalWithdrawnYield;\\n\\n        address[] memory arrayToCheck = yield.yieldUsers;\\n        uint arrayLength = arrayToCheck.length;\\n\\n        for (uint i; i < arrayLength; ) {\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than arrayLength\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\\n\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return totalWithdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Get all the terms a participant is part of\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\n        return participantTermIds;\\n    }\\n\\n    /// @notice Get all the terms a participant is part of by a given state\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) public view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n\\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory userTermsByState = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            userTermsByState[i] = temporaryArray[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return userTermsByState;\\n    }\\n\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\n    /// @param termId the term id\\n    /// @dev Available positions starts at 0\\n    /// @return availablePositions an array with the available positions\\n    /// @return securityAmount an array with the security amount for each available position\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) public view returns (uint[] memory, uint[] memory) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        if (collateral.state != LibCollateralStorage.CollateralStates.AcceptingCollateral) {\\n            return (new uint[](0), new uint[](0));\\n        }\\n\\n        uint depositorsLength = collateral.depositors.length;\\n        uint[] memory availablePositions = new uint[](depositorsLength);\\n\\n        uint availablePositionsCounter;\\n\\n        // Loop through the depositors array and get the available positions\\n        for (uint i; i < depositorsLength; ) {\\n            // The position is available if the depositor is address zero\\n            if (collateral.depositors[i] == address(0)) {\\n                // Add the position to the available positions array\\n                availablePositions[availablePositionsCounter] = i;\\n\\n                // And increment the available positions counter\\n                unchecked {\\n                    ++availablePositionsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Create the arrays to return\\n        // The available positions array will have the length of the available positions counter\\n        // The security amount array will have the same length\\n        uint[] memory availablePositionsArray = new uint[](availablePositionsCounter);\\n        uint[] memory securityAmountArray = new uint[](availablePositionsCounter);\\n\\n        // Loop through the available positions counter and fill the arrays\\n        for (uint i; i < availablePositionsCounter; ) {\\n            availablePositionsArray[i] = availablePositions[i];\\n            // Get the security amount for the position\\n            securityAmountArray[i] = minCollateralToDeposit(termId, availablePositions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return the arrays, the available positions array and the security amount array are coupled\\n        // availablePositionsArray[0] will have the securityAmountArray[0] and so on\\n        return (availablePositionsArray, securityAmountArray);\\n    }\\n\\n    /// @notice Gets the remaining registration period for a term\\n    /// @dev Revert if nobody has deposited\\n    /// @param termId the term id\\n    /// @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) public view returns (uint) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        if (\\n            collateral.firstDepositTime == 0 ||\\n            block.timestamp >= collateral.firstDepositTime + term.registrationPeriod\\n        ) {\\n            return 0;\\n        } else {\\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice returns the time left to contribute for this cycle\\n    /// @param termId the fund id\\n    /// @return the time left to contribute\\n    function getRemainingContributionTime(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\\n            return 0;\\n        }\\n\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\n        uint contributionEndTimestamp = term.cycleTime *\\n            (fund.currentCycle - 1) +\\n            fund.fundStart +\\n            term.contributionPeriod;\\n        if (block.timestamp > contributionEndTimestamp) {\\n            return 0;\\n        } else {\\n            return contributionEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Get the term's remaining time in the current cycle\\n    /// @param termId the term id\\n    /// @return remaining time in the current cycle\\n    function getRemainingCycleTime(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\n        if (block.timestamp > cycleEndTimestamp) {\\n            return 0;\\n        } else {\\n            return cycleEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice checks if the money pot is frozen for a participant\\n    /// @param _participant the user to check\\n    /// @param _termId the fund id\\n    /// @return _isMoneyPotFrozen true if the money pot is frozen\\n    function _checkFrozenMoneyPot(\\n        address _participant,\\n        uint _termId\\n    ) internal view returns (bool _isMoneyPotFrozen) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        if (fund.expelledBeforeBeneficiary[_participant]) {\\n            _isMoneyPotFrozen = false;\\n        } else {\\n            uint neededCollateral = (110 * getRemainingCyclesContributionWei(_termId)) / 100; // 1.1 x RCC\\n\\n            if (collateral.collateralMembersBank[_participant] < neededCollateral) {\\n                _isMoneyPotFrozen = true;\\n            } else {\\n                _isMoneyPotFrozen = false;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf15b8e28a864a5a696a2343aeb197c73322b5a358bf1596471bd4fca635e2828\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibGettersHelpers} from \\\"../libraries/LibGettersHelpers.sol\\\";\\n\\ninterface IGetters {\\n    /// @notice This function is used as a helper for front-end implementation\\n    /// @param termId The term id for which the summary is being requested\\n    /// @return term The term object\\n    /// @return collateralState The current state of the collateral\\n    /// @return fundState The current state of the fund\\n    /// @return nonUserRelated A helper struct with the following values:\\n    ///                        available positions, security deposits corresponding to each position,\\n    ///                        remaining registration time, remaining contribution time,\\n    ///                        remaining cycle time, remaining cycles, remaining cycles\\n    ///                        contribution in wei, latest price from Chainlink, collateral\\n    ///                        first deposit time in seconds, collateral counter members,\\n    ///                        fund start time in seconds, fund end time in seconds, current\\n    ///                        cycle, expelled participants, total amount of cycles, yield\\n    ///                        start time in seconds, total deposit in wei, current total\\n    ///                        deposit in wei, total shares\\n    function getTermRelatedSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (\\n            LibTermStorage.Term memory term,\\n            LibCollateralStorage.CollateralStates collateralState,\\n            LibFundStorage.FundStates fundState,\\n            LibGettersHelpers.NonUserRelated memory nonUserRelated\\n        );\\n\\n    /// @notice This function is used as a helper for front-end implementation\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return userRelated an object that contains the following values:\\n    ///                     user is collateral member, user is undercollaterized,\\n    ///                     current collateral balance, received collateral from defaults,\\n    ///                     initial deposited collateral, collateral expulsion limit,\\n    ///                     currently withdrawable balance, is fund member, is or was beneficiary,\\n    ///                     user paid current cycle, user paid next cycle in advance,\\n    ///                     user enabled autopay, user's money pot is frozen, user is exempted this\\n    ///                     cycle, the money pot pool the user can withdraw, the cycle the user got\\n    ///                     expelled (if applicable), is yield member, amount of collateral deposited\\n    ///                     in yield pool, amount of collateral withdrawn from yield pool, available\\n    ///                     yield to withdraw, amount of yield withdrawn, yield to be distributed\\n    function getUserRelatedSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (LibGettersHelpers.UserRelated memory userRelated);\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    /// @return The addresses of the oracles and yield providers\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    /// @return The current state of the yield lock\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Gets the term object\\n    /// @param termId the term id\\n    /// @return the term object\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the yield object\\n    /// @param termId the collateral id\\n    /// @return if the yield is initialized\\n    /// @return start time stamp for yield deposit\\n    /// @return total deposit\\n    /// @return current amount in yield\\n    /// @return amount of total shares\\n    /// @return list of yield users\\n    /// @return address of vault\\n    /// @return address of zap\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    /// @notice function to get the beneficiary from the current cycle\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets the next beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getNextBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return isParticipant, true if is participant\\n    /// @return isBeneficiary, true if has been beneficiary\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return autoPayEnabled, true if auto pay is enabled\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Gets the user yield summary\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user opted in for yield\\n    /// @return amount withdrawn from yield\\n    /// @return amount withdrawn from collateral\\n    /// @return amount available in yield\\n    /// @return amount deposited by user in yield\\n    /// @return amount of yield distributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Get all the terms a participant was expelled from\\n    /// @param participant the participant address\\n    /// @return an array the term ids on which the participant was expelled\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return paidNextCycle, true if has paid the next cycle\\n    function currentOrNextCyclePaid(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @param termId term id\\n    /// @param depositorIndex the index the depositor wants to join\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @dev Revert if there is problem with chainlink data\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() external view returns (uint);\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @notice Get all the terms a participant is part of\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Get all the terms a participant is part of by a given state\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\n    /// @param termId the term id\\n    /// @dev Available positions starts at 0\\n    /// @return availablePositions an array with the available positions\\n    /// @return securityAmount an array with the security amount for each available position\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) external view returns (uint[] memory, uint[] memory);\\n\\n    /// @notice Gets the remaining registration period for a term\\n    /// @dev Revert if nobody have deposited\\n    /// @param termId the term id\\n    /// @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x5c5f03636df84a0e7481e43052a508c645e4f9e1b0a70639e361068993f0f38c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    ); // Emits when the state of the collateral changes\\n    event OnReimbursementWithdrawn(\\n        uint indexed termId,\\n        address indexed participant,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a participant withdraws their reimbursement\\n\\n    /// @notice Sets the state of the collateral\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @notice Allow a user to withdraw their reimbursement\\n    /// @dev Reverts if the fund does not exists or if the user has nothing to claim\\n    /// @param _termId term id\\n    /// @param _participant Address of the depositor\\n    /// @param _receiver Address of the receiver\\n    function _withdrawReimbursement(\\n        uint _termId,\\n        address _participant,\\n        address _receiver\\n    ) internal {\\n        require(LibFundStorage._fundExists(_termId), \\\"TT-LC-01\\\");\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_participant];\\n        require(amount > 0, \\\"TT-LC-02\\\");\\n        collateral.collateralPaymentBank[_participant] = 0;\\n\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0xf01d58df0cd05ab82e84f093e533f97eb8367ae13a490764e1335f5dccb01044\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime; // Time when the first deposit was made in seconds\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0346bf8df22a8caf2c15afd027d7d3001681e6e169af5f20df4f99e7bd79f23b\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7190084bd2a279424a536b51ac7fa2bccda2b2914d8da928a318f3a20dc1e489\",\"license\":\"MIT\"},\"contracts/libraries/LibGettersHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibGettersHelpers {\\n    struct NonUserRelated {\\n        // Positions and security deposits related\\n        uint[] availablePositions;\\n        uint[] securityDeposits;\\n        // Times and contributions related\\n        uint remainingRegistrationTime; // In seconds\\n        uint remainingContributionTime; // In seconds\\n        uint remainingCycleTime; // In seconds\\n        uint remainingCycles;\\n        uint rcc; // Remaining Contribution Cycles in wei\\n        uint latestPrice; // From Chainlink\\n        // Collateral related\\n        bool collateralInitialized;\\n        uint collateralFirstDepositTime; // In seconds\\n        uint collateralCounterMembers; // Member count\\n        // Fund related\\n        bool fundInitialized;\\n        uint fundStartTime; // In seconds\\n        uint fundEndTime; // In seconds\\n        uint fundCurrentCycle;\\n        uint fundExpellantsCount;\\n        uint fundTotalCycles;\\n        address[] fundBeneficiariesOrder;\\n        // Yield related\\n        bool yieldInitialized;\\n        uint yieldStartTime; // In seconds\\n        uint yieldTotalDeposit; // In wei\\n        uint yieldCurrentTotalDeposit; // In wei\\n        uint yieldTotalShares;\\n        address[] yieldUsers;\\n    }\\n\\n    struct UserRelated {\\n        // Collateral related\\n        bool collateralMember;\\n        bool isUnderCollaterized;\\n        uint membersBank;\\n        uint paymentBank;\\n        uint deposited;\\n        uint expulsonLimit;\\n        uint withdrawableBalance;\\n        // Fund related\\n        bool fundMember;\\n        bool beneficiary;\\n        bool currentCyclePaid;\\n        bool nextCyclePaid;\\n        bool autoPayer;\\n        bool moneyPotFrozen;\\n        bool exemptedThisCycle;\\n        uint pool;\\n        uint cycleExpelled;\\n        // Yield related\\n        bool yieldMember;\\n        uint collateralDepositedInYield;\\n        uint collateralWithdrawnFromYield;\\n        uint yieldAvailable;\\n        uint yieldWithdrawn;\\n        uint distributedYield;\\n    }\\n}\\n\",\"keccak256\":\"0x1cff213f2c4593cb5305eec23f046022ff9ebeb74127bd34b9a4dfdbde946225\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime; // In seconds\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc671ba65f7ac40f73277faaa02649273153214e4a47aa5557b8b63b08270f6da\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    /// @return The amount of yield withdrawn\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n\\n        // Prevent rounding errors\\n        if (neededShares > sharesBalance) {\\n            if (neededShares - sharesBalance < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        } else {\\n            if (sharesBalance - neededShares < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        }\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    /// @return Wei equivalent of the shares\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _totalShares The total shares in the yield from the term\\n    /// @param _totalDeposit The total deposit in the yield from the term\\n    /// @return The amount of shares equivalent to a collateral amount\\n    function _neededShares(\\n        uint _collateralAmount,\\n        uint _totalShares,\\n        uint _totalDeposit\\n    ) internal pure returns (uint) {\\n        if (_totalDeposit == 0) return 0;\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.currentTotalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    /// @notice This function is used to claim the available yield for a user\\n    /// @param _termId The term id for which the yield is being claimed\\n    /// @param _user The user for which the yield is being claimed\\n    /// @param _receiver The receiver of the yield\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"TT-LYG-01\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0xc527afb23d193f10e20ebb82041d0c38eefde8dac3b5d86893f2f7d6db974621\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp; // In seconds\\n        uint totalDeposit; // In wei\\n        uint currentTotalDeposit; // In wei\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield; // In wei\\n        mapping(address => uint256) withdrawnCollateral; // In wei\\n        mapping(address => uint256) availableYield; // In wei\\n        mapping(address => uint256) depositedCollateralByUser; // In wei\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x303632621c5f7451ec19c0b69f50cb02c559e4e037bc2dce99218ec48a650234\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c806391ce5ff71161013b578063d8f8e991116100b8578063e51a62951161007c578063e51a6295146106b7578063e9783e60146106ca578063f0d826e7146106dd578063f1ecd5d9146106f0578063fd4dba9d1461071057600080fd5b8063d8f8e9911461063a578063da3791ca1461064d578063dbd5768314610671578063dbf4281014610691578063dc9e24ae146106a457600080fd5b8063bb91b76d116100ff578063bb91b76d1461059d578063c177f091146105da578063d072f4bc146105ed578063d72bb87e14610600578063d7992e5b1461062757600080fd5b806391ce5ff7146104f757806392a6c8021461050a5780639d4eb26f1461051d578063b6abd1a414610544578063b7cf483f1461058a57600080fd5b80636bbbb5fb116101c957806377778baf1161018d57806377778baf146104825780637aed53a61461049557806380530731146104b257806384bc198d146104c55780638e15f473146104ef57600080fd5b80636bbbb5fb146103ce5780637063f618146103e157806375aaa78c1461040257806375d4e40b14610415578063762877921461045f57600080fd5b80632d591bdc116102105780632d591bdc146103345780633d17f1e01461035f5780636191474c1461039557806362f02abd146103a857806365654fe3146103bb57600080fd5b80630c64c6971461024d5780630fc4a7ef146102735780631268612d146102865780631c162dbe146102d25780631e993b5314610314575b600080fd5b61026061025b3660046131af565b610742565b6040519081526020015b60405180910390f35b6102606102813660046131d1565b6107f9565b610299610294366004613206565b61082d565b604080519615158752941515602087015292151593850193909352151560608401526080830191909152151560a082015260c00161026a565b6102e56102e0366004613206565b6108c8565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c00161026a565b610327610322366004613230565b61095e565b60405161026a9190613286565b6103476103423660046131d1565b610ad1565b6040516001600160a01b03909116815260200161026a565b7f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f35460ff165b604051901515815260200161026a565b6102606103a33660046131d1565b610b24565b6102606103b63660046131d1565b610be2565b6102606103c9366004613299565b610c26565b6103856103dc366004613299565b610cfd565b6103f46103ef3660046131d1565b610d37565b60405161026a9291906132c5565b610327610410366004613230565b610f81565b610385610423366004613299565b6000918252600080516020613b9e833981519152602090815260408084206001600160a01b039390931684526007909201905290205460ff1690565b61047261046d3660046131d1565b611021565b60405161026a9493929190613408565b610260610490366004613299565b611419565b61049d61175c565b6040805192835260208301919091520161026a565b6102606104c03660046131d1565b61178d565b6104d86104d3366004613206565b6117f4565b60408051921515835290151560208301520161026a565b610260611843565b6102606105053660046131d1565b611aad565b6102606105183660046131d1565b611b31565b61053061052b3660046131d1565b611b7e565b60405161026a9897969594939291906135d8565b6105576105523660046136d8565b611cb9565b604080516001600160a01b039586168152938516602085015291841691830191909152909116606082015260800161026a565b610385610598366004613785565b611dbb565b6105b06105ab366004613206565b611dfe565b6040805195151586526020860194909452928401919091526060830152608082015260a00161026a565b6103856105e8366004613299565b611ef5565b6102606105fb3660046131d1565b611f01565b61061361060e3660046131d1565b611f23565b60405161026a9897969594939291906137ba565b610385610635366004613299565b611ff9565b6103476106483660046131d1565b61208e565b61066061065b3660046131d1565b6120d0565b60405161026a95949392919061381b565b61068461067f3660046131d1565b612186565b60405161026a9190613851565b61026061069f3660046131d1565b612267565b6103276106b2366004613860565b612392565b6102606106c5366004613230565b612553565b6103856106d8366004613299565b6126b6565b6102606106eb3660046131d1565b6126f0565b6107036106fe366004613206565b612777565b60405161026a919061389b565b61072361071e366004613206565b612b13565b604080519315158452911515602084015215159082015260600161026a565b6000828152600080516020613bbe83398151915260205260408120600481015483106107a05760405162461bcd60e51b815260206004820152600860248201526754542d47462d303160c01b60448201526064015b60405180910390fd5b60006107bd8260060154670de0b6b3a76400006105fb91906139c5565b905060648483600401546107d191906139dc565b6107db90836139c5565b6107e69060966139c5565b6107f09190613a05565b95945050505050565b600080610804611843565b90506000670de0b6b3a764000061081b85846139c5565b6108259190613a05565b949350505050565b6000806000806000806000610840612b71565b600089815260209190915260408120915061085b8a8a612b95565b6001600160a01b039a909a1660009081526005830160209081526040808320546006860183528184205460078701845282852054600888018552838620546009909801909452919093205460ff9384169e9184169d9284169c509290941699509097509550909350505050565b6000818152600080516020613b9e8339815191526020526040812081908190819081908190816108f8898b612c4b565b6001600160a01b039a909a1660009081526007830160209081526040808320546008860183528184205460098701845282852054600a8801855283862054600b909801909452919093205460ff9093169d909c919b509399509097509550909350505050565b6060600061096b83610f81565b90506000815167ffffffffffffffff81111561098957610989613635565b6040519080825280602002602001820160405280156109b2578160200160208202803683370190505b508251909150600090815b81811015610a34576109e88582815181106109da576109da613a19565b602002602001015188611ff9565b15610a2c578481815181106109ff576109ff613a19565b6020026020010151848481518110610a1957610a19613a19565b6020026020010181815250508260010192505b6001016109bd565b5060008267ffffffffffffffff811115610a5057610a50613635565b604051908082528060200260200182016040528015610a79578160200160208202803683370190505b50905060005b83811015610ac657848181518110610a9957610a99613a19565b6020026020010151828281518110610ab357610ab3613a19565b6020908102919091010152600101610a7f565b509695505050505050565b600080610adc612b71565b6000848152602091909152604090206004810154600182018054929350918110610b0857610b08613a19565b6000918252602090912001546001600160a01b03169392505050565b600080610b2f612b71565b600084815260209182526040808220600080516020613bbe8339815191529093529020815491925090600190610100900460ff166004811115610b7457610b746132ea565b14610b83575060009392505050565b60008160070154836002015460018560040154610ba091906139dc565b8460050154610baf91906139c5565b610bb99190613a2f565b610bc39190613a2f565b905080421115610bd857506000949350505050565b6107f042826139dc565b600080610bed612b71565b6000848152602091909152604090206004810154601482015491925090610c15906001613a2f565b610c1f91906139dc565b9392505050565b6000828152600080516020613b9e83398151915260209081526040808320600080516020613bde833981519152909252822060028201548390610c6990426139dc565b90506000610c778787612c4b565b6001600160a01b0387166000908152600886016020526040902054610c9c9190613a2f565b6001600160a01b03871660009081526005850160205260409020549091508290610cce83670de0b6b3a76400006139c5565b610cd89190613a05565b610ce6906301e133806139c5565b610cf09190613a05565b9450505050505b92915050565b600080610d08612b71565b6000858152602091825260408082206001600160a01b0387168352601501909252205460ff1691505092915050565b6000818152600080516020613bde833981519152602052604081208054606092839291610100900460ff166003811115610d7357610d736132ea565b14610d9857505060408051600080825260208201908152818301909252939092509050565b600381015460008167ffffffffffffffff811115610db857610db8613635565b604051908082528060200260200182016040528015610de1578160200160208202803683370190505b5090506000805b83811015610e585760006001600160a01b0316856003018281548110610e1057610e10613a19565b6000918252602090912001546001600160a01b031603610e505780838381518110610e3d57610e3d613a19565b6020026020010181815250508160010191505b600101610de8565b5060008167ffffffffffffffff811115610e7457610e74613635565b604051908082528060200260200182016040528015610e9d578160200160208202803683370190505b50905060008267ffffffffffffffff811115610ebb57610ebb613635565b604051908082528060200260200182016040528015610ee4578160200160208202803683370190505b50905060005b83811015610f7257848181518110610f0457610f04613a19565b6020026020010151838281518110610f1e57610f1e613a19565b602002602001018181525050610f4d8a868381518110610f4057610f40613a19565b6020026020010151610742565b828281518110610f5f57610f5f613a19565b6020908102919091010152600101610eea565b50909890975095505050505050565b6001600160a01b03811660009081527f87101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8b602090815260408083208054825181850281018501909352808352606094600080516020613bfe83398151915294909392919083018282801561101357602002820191906000526020600020905b815481526020019060010190808311610fff575b509398975050505050505050565b611029613142565b6000806110ea6040518061030001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160001515815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000858152600080516020613bde833981519152602052604081209061110e612b71565b600088815260209182526040808220600080516020613bbe83398151915284529181902081516101608101909252805460ff8082161515845293955091939092908401916101009004166003811115611169576111696132ea565b600381111561117a5761117a6132ea565b815281546201000090046001600160a01b039081166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015295506000600080516020613b9e8339815191526000898152602091909152604081209150806112198a610d37565b8654865460408051610300810182528581526020810185905260ff6101009485900481169e50939092049092169a5092945090925081016112598c611aad565b81526020016112678c610b24565b81526020016112758c611b31565b81526020016112838c610be2565b81526020016112918c6126f0565b815260200161129e611843565b8152865460ff90811615156020808401919091526001808a01546040808601919091526002808c015460608701528a54909416151560808601529289015460a0850152600389015460c0850152600489015460e0850152601389015461010085015260148901546101208501528801805483518184028101840190945280845261014090940193909183018282801561136057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611342575b505050505081526020018460000160009054906101000a900460ff1615158152602001846002015481526020018460030154815260200184600401548152602001846005015481526020018460060180548060200260200160405190810160405280929190818152602001828054801561140357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113e5575b5050505050815250955050505050509193509193565b6000828152600080516020613bbe833981519152602052604081208161143d612b71565b600086815260209182526040808220600080516020613bde8339815191528452818320600080516020613b9e83398151915285528284206001600160a01b038a16855260058201865283852054600a8201875284862054601585019097529390942054815492965090949160ff9182169160029161010090041660038111156114c8576114c86132ea565b14806114d15750805b156114e7576114e08284613a2f565b975061174f565b60018554610100900460ff166003811115611504576115046132ea565b0361174a576001600160a01b038916600090815260078701602052604081205460ff1615801561154f57506001600160a01b038a16600090815260168801602052604090205460ff16155b1561157757600a61155f8c6126f0565b61156a90600f6139c5565b6115749190613a05565b90505b6001600160a01b038a16600090815260078801602052604090205460ff1680156115bc57506001600160a01b038a16600090815260168801602052604090205460ff16155b8061160757506001600160a01b038a16600090815260168801602052604090205460ff16801561160757506001600160a01b038a16600090815260078801602052604090205460ff16155b156116695760008760040154886014015461162291906139dc565b905060006116418a60060154670de0b6b3a76400006105fb91906139c5565b9050600a61164f82846139c5565b61165a90600f6139c5565b6116649190613a05565b925050505b6001600160a01b038a16600090815260078801602052604090205460ff1680156116ad57506001600160a01b038a16600090815260168801602052604090205460ff165b1561171b5760006001886004015489601401546116ca91906139dc565b6116d491906139dc565b905060006116f38a60060154670de0b6b3a76400006105fb91906139c5565b9050600a61170182846139c5565b61170c90600f6139c5565b6117169190613a05565b925050505b8084111561173f578261172e82866139dc565b6117389190613a2f565b9850611744565b600098505b5061174f565b600097505b5050505050505092915050565b600080516020613bfe833981519152805460009182918290611780906001906139dc565b9154919491935090915050565b6000818152600080516020613b9e83398151915260205260408120600281015482906117b990426139dc565b90508082600401546117ca86612267565b6117dc90670de0b6b3a76400006139c5565b6117e69190613a05565b61081b906301e133806139c5565b6000806000611801612b71565b6000858152602091825260408082206001600160a01b038916835260078101845281832054601690910190935290205460ff9182169450169150509250929050565b6000807f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec490506000806000808460000160405161188d90661155120bd554d160ca1b815260070190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119049190613a59565b945094505093509350816000141580156119305750836001600160501b0316816001600160501b031610155b801561193c5750600083135b6119735760405162461bcd60e51b81526020600482015260086024820152672a2a16a3a316981960c11b6044820152606401610797565b6000806000808860000160405161199890671554d110cbd554d160c21b815260080190565b9081526040805191829003602001822054633fabe5a360e21b835290516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f9190613a59565b94509450509350935081600014158015611a3b5750836001600160501b0316816001600160501b031610155b8015611a475750600083135b611a7e5760405162461bcd60e51b81526020600482015260086024820152672a2a16a3a316981960c11b6044820152606401610797565b6000611a8a8489613aa9565b9050611a9e81670de0b6b3a7640000613ad7565b9a505050505050505050505090565b6000818152600080516020613bbe83398151915260209081526040808320600080516020613bde833981519152909252822060018101541580611b03575081600301548160010154611aff9190613a2f565b4210155b15611b12575060009392505050565b4282600301548260010154611b279190613a2f565b61082591906139dc565b600080611b3c612b71565b600084815260209182526040808220600080516020613bbe833981519152909352812060028301546004840154600583015494955091939091610bb9916139c5565b6000808080806060818080600080516020613b9e83398151915260000160008b815260200190815260200160002090508060000160009054906101000a900460ff1681600201548260030154836004015484600501548560060186600101604051611bf8906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316906001890190611c2e906605a61796e5a61760cc1b815260070190565b908152604080519182900360209081018320548554808302850183019093528284526001600160a01b031692918591830182828015611c9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c78575b505050505092509850985098509850985098509850985050919395975091939597565b6040516000908190819081907f138fa7b895cc6132bd44317f3510a9c38821e93ca223f9fdc532527c01963ec4907ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977908290611d16908c90613b07565b908152604051908190036020018120546001600160a01b0316908390611d3d908c90613b07565b908152604051908190036020018120546001600160a01b0316908390611d64908c90613b07565b908152604051908190036020018120546001600160a01b0316908490611d8b908c90613b07565b9081526040519081900360200190205492985090965094506001600160a01b031692505050945094509450949050565b600080611dc6612b71565b600086815260209182526040808220878352600c0183528082206001600160a01b0387168352909252205460ff169150509392505050565b6000818152600080516020613bde83398151915260205260408120819081908190819081611e2a612b71565b600089815260209182526040808220600080516020613bbe83398151915284528183206001600160a01b038e168452600682019094529082205490935060ff16611e9057611e898260060154670de0b6b3a76400006105fb91906139c5565b9050611e9c565b611e998a6126f0565b90505b6001600160a01b039a909a1660009081526004840160209081526040808320546005870183528184205460068801845282852054600790980190935292205460ff9092169c909b949a5090985092965091945050505050565b6000610c1f8383612c74565b600080611f0c611843565b905060008161081b85670de0b6b3a76400006139c5565b600080600060606000806000806000611f3a612b71565b60008b81526020918252604090819020805460028201546003830154600484015460148501546001860180548851818b0281018b0190995280895296995060ff80871699610100880490911698620100009097046001600160a01b0316979196918791830182828015611fd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fb8575b505050505094509850985098509850985098509850985050919395975091939597565b600080612004612b71565b600085815260209182526040808220600080516020613bde83398151915284528183206001600160a01b03881684526005820190945291205490925060ff1615801561206b57506001600160a01b038416600090815260048201602052604090205460ff16155b1561207b57600192505050610cf7565b600092505050610cf7565b505092915050565b600080612099612b71565b60008481526020919091526040902060048101549091506001808301916120c091906139dc565b81548110610b0857610b08613a19565b6000808080606081600080516020613bde8339815191526000888152602091825260409081902080546001820154600283015460038401805486518189028101890190975280875294975060ff80851697610100909504169592949193909291839183018282801561216b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161214d575b50505050509050955095509550955095505091939590929450565b61218e613142565b6000828152600080516020613bbe833981519152602090815260409182902082516101608101909352805460ff8082161515855291928401916101009091041660038111156121df576121df6132ea565b60038111156121f0576121f06132ea565b815281546001600160a01b036201000090910481166020830152600183015460408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301546101008301526008909201549091166101209091015292915050565b6000818152600080516020613b9e833981519152602090815260408083206006810180548351818602810186019094528084529193859384939092918301828280156122dc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122be575b505083519394506000925050505b818110156123485784600801600084838151811061230a5761230a613a19565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548461233e9190613a2f565b93506001016122ea565b5060006123558786612d9e565b905084600401548111156123875760048501546123728286613a2f565b61237c91906139dc565b979650505050505050565b509195945050505050565b6060600061239f84610f81565b90506000815167ffffffffffffffff8111156123bd576123bd613635565b6040519080825280602002602001820160405280156123e6578160200160208202803683370190505b508251909150600090815b818110156124b55786600381111561240b5761240b6132ea565b600080516020613bfe833981519152600101600087848151811061243157612431613a19565b6020026020010151815260200190815260200160002060000160019054906101000a900460ff166003811115612469576124696132ea565b036124ad5784818151811061248057612480613a19565b602002602001015184848151811061249a5761249a613a19565b6020026020010181815250508260010192505b6001016123f1565b5060008267ffffffffffffffff8111156124d1576124d1613635565b6040519080825280602002602001820160405280156124fa578160200160208202803683370190505b50905060005b838110156125475784818151811061251a5761251a613a19565b602002602001015182828151811061253457612534613a19565b6020908102919091010152600101612500565b50979650505050505050565b6000806000612563846001612392565b90506000612572856000612392565b825181519192509060005b82811015612620576000600080516020613bfe83398151915260010160008784815181106125ad576125ad613a19565b60200260200101518152602001908152602001600020905060006125e98784815181106125dc576125dc613a19565b6020026020010151610be2565b82600601546125f891906139c5565b61260590620f42406139c5565b90506126118189613a2f565b9750826001019250505061257d565b5060005b818110156126aa576000600080516020613bfe833981519152600101600086848151811061265457612654613a19565b60200260200101518152602001908152602001600020905060008160040154826006015461268291906139c5565b61268f90620f42406139c5565b905061269b8189613a2f565b97508260010192505050612624565b50939695505050505050565b6000806126c1612b71565b6000858152602091825260408082206001600160a01b0387168352600601909252205460ff1691505092915050565b6000806126fb612b71565b600084815260209182526040808220600080516020613bbe8339815191529093528120600483015460148401549394509092612738906001613a2f565b61274291906139dc565b905060006127618360060154670de0b6b3a76400006105fb91906139c5565b905061276d81836139c5565b9695505050505050565b612835604051806102c001604052806000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000828152600080516020613bde8339815191526020526040812090612859612b71565b600085815260209182526040808220600080516020613bbe8339815191528452818320600080516020613b9e83398151915285528284206001600160a01b038b1685526006830186528385205460048901909652929093205460ff9081161515885290945091929091166128cd8789612c74565b15156020808801919091526001600160a01b038916600081815260058089018452604080832054818c015283835260068a0185528083205460608c01528383526007808b0186528184205460808d015284845291890185528083205460ff908116151560e08d01528615156101008d0152848452918901855280832054821615156101208c015283835260168901855280832054821615156101408c015292825260088801909352205416151561016087015261298a8888612b95565b151561018087015260048401546000908152600c8501602090815260408083206001600160a01b038c168085529083528184205460ff90811615156101a08c015290845260078601909252909120541615156102008701526129ec8789611419565b60c087015260008554610100900460ff166003811115612a0e57612a0e6132ea565b14612b085760008115612a2b57612a24886126f0565b9050612a49565b612a468460060154670de0b6b3a76400006105fb91906139c5565b90505b60a087018190526001600160a01b03891660008181526009870160209081526040808320546101c08c0152838352600b89018252808320546101e08c0152928252600786019052205460ff1615612b06576001600160a01b0389166000818152600b850160209081526040808320546102208c0152838352600987018252808320546102408c0152838352600a87018252808320546102608c01529282526008860190522054610280880152612aff888a612c4b565b6102a08801525b505b505050505092915050565b600080600080612b21612b71565b6000868152602091909152604081209150612b3f600d830188612eea565b90506000612b5083600f0189612eea565b90506000612b61846011018a612eea565b9299919850919650945050505050565b7f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c90565b600080612ba0612b71565b600084815260209182526040808220600080516020613bde83398151915284528183206001600160a01b03891684526015820190945291205490925060ff1615612bed5760009250612086565b60006064612bfa866126f0565b612c0590606e6139c5565b612c0f9190613a05565b6001600160a01b0387166000908152600584016020526040902054909150811115612c3d5760019350612c42565b600093505b50505092915050565b600080670de0b6b3a7640000612c618585612f0c565b612c6a86612f98565b61081b91906139c5565b6000828152600080516020613bde833981519152602090815260408083206001600160a01b0385168452600581019092528220548290612cb386613124565b612d325760405163bb91b76d60e01b81526001600160a01b038616600482015260248101879052309063bb91b76d9060440160a060405180830381865afa158015612d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d269190613b36565b9550612d959350505050565b60405163f0d826e760e01b815260048101879052309063f0d826e790602401602060405180830381865afa158015612d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d929190613b84565b91505b10949350505050565b60008082600101604051612dc1906816985e5b95985d5b1d60ba1b815260090190565b90815260405190819003602001812054631398fee160e31b82526001600160a01b031690639cc7f70890612dfd90879060040190815260200190565b602060405180830381865afa158015612e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3e9190613b84565b9050600083600101604051612e62906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa158015612eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed59190613b84565b9050670de0b6b3a76400006107e682846139c5565b6001600160a01b03811660009081526001830160205260408120541515610c1f565b6000828152600080516020613b9e8339815191526020526040812060048101548203612f3c576000915050610cf7565b60048101546001600160a01b0384166000908152600983016020908152604080832054600b860190925290912054612f7491906139dc565b612f8690670de0b6b3a76400006139c5565b612f909190613a05565b915050610cf7565b6000818152600080516020613b9e833981519152602052604080822081516816985e5b95985d5b1d60ba1b8152600182016009820152915191829003602901822054631398fee160e31b835260048301859052909183916001600160a01b031690639cc7f70890602401602060405180830381865afa15801561301f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130439190613b84565b9050600082600101604051613067906816985e5b95985d5b1d60ba1b815260090190565b908152604080516020928190038301812054631df1ee3f60e21b825291516001600160a01b03909216926377c7b8fc926004808401938290030181865afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190613b84565b90506000670de0b6b3a76400006130f183856139c5565b6130fb9190613a05565b9050836004015481111561311857600484015461276d90826139dc565b50600095945050505050565b600061312e612b71565b600092835260205250604090205460ff1690565b60408051610160810190915260008082526020820190815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600080604083850312156131c257600080fd5b50508035926020909101359150565b6000602082840312156131e357600080fd5b5035919050565b80356001600160a01b038116811461320157600080fd5b919050565b6000806040838503121561321957600080fd5b613222836131ea565b946020939093013593505050565b60006020828403121561324257600080fd5b610c1f826131ea565b600081518084526020808501945080840160005b8381101561327b5781518752958201959082019060010161325f565b509495945050505050565b602081526000610c1f602083018461324b565b600080604083850312156132ac57600080fd5b823591506132bc602084016131ea565b90509250929050565b6040815260006132d8604083018561324b565b82810360208401526107f0818561324b565b634e487b7160e01b600052602160045260246000fd5b60048110613310576133106132ea565b50565b61331c81613300565b9052565b80511515825260208101516133386020840182613313565b50604081015161335360408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516133b9828501826001600160a01b03169052565b50505050565b6005811061331c5761331c6132ea565b600081518084526020808501945080840160005b8381101561327b5781516001600160a01b0316875295820195908201906001016133e3565b60006101c06134178388613320565b61342086613300565b856101608401526134356101808401866133bf565b806101a08401528351610300828501526134536104c085018261324b565b905060208501516101bf1980868403016101e0870152613473838361324b565b92506040870151915061020082818801526060880151925061022083818901526080890151935061024084818a015260a08a0151945061026085818b015260c08b0151955061028086818c015260e08c015196506102a087818d01526101008d015197506102c06134e7818e018a15159052565b6101208e015198506102e089818f01526101408f01516103008f01526101608f0151995061351a6103208f018b15159052565b6101808f01516103408f01526101a08f01516103608f01529a8e01516103808e01526101e08e01516103a08e0152868e01516103c08e0152858e01518d8b0389016103e08f01529a61356c8b8d6133cf565b9b50858f01519a506135836104008f018c15159052565b938e01516104208e0152918d01516104408d01528c01516104608c01528b01516104808b01528a01518988039094016104a08a0152509193506135cc92508491508390506133cf565b98975050505050505050565b60006101008a151583528960208401528860408401528760608401528660808401528060a084015261360c818401876133cf565b6001600160a01b0395861660c08501529390941660e09092019190915250979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261365c57600080fd5b813567ffffffffffffffff8082111561367757613677613635565b604051601f8301601f19908116603f0116810190828211818310171561369f5761369f613635565b816040528381528660208588010111156136b857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156136ee57600080fd5b843567ffffffffffffffff8082111561370657600080fd5b6137128883890161364b565b9550602087013591508082111561372857600080fd5b6137348883890161364b565b9450604087013591508082111561374a57600080fd5b6137568883890161364b565b9350606087013591508082111561376c57600080fd5b506137798782880161364b565b91505092959194509250565b60008060006060848603121561379a57600080fd5b83359250602084013591506137b1604085016131ea565b90509250925092565b60006101008a151583526137d1602084018b6133bf565b6001600160a01b0389166040840152606083018190526137f3818401896133cf565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b851515815261382985613300565b84602082015283604082015282606082015260a06080820152600061237c60a08301846133cf565b6101608101610cf78284613320565b6000806040838503121561387357600080fd5b61387c836131ea565b915060208301356004811061389057600080fd5b809150509250929050565b8151151581526102c0810160208301516138b9602084018215159052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e08301516138ff60e084018215159052565b5061010083810151151590830152610120808401511515908301526101408084015115159083015261016080840151151590830152610180808401511515908301526101a0808401511515908301526101c080840151908301526101e080840151908301526102008084015115159083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a092830151929091019190915290565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610cf757610cf76139af565b81810381811115610cf757610cf76139af565b634e487b7160e01b600052601260045260246000fd5b600082613a1457613a146139ef565b500490565b634e487b7160e01b600052603260045260246000fd5b80820180821115610cf757610cf76139af565b80516001600160501b038116811461320157600080fd5b600080600080600060a08688031215613a7157600080fd5b613a7a86613a42565b9450602086015193506040860151925060608601519150613a9d60808701613a42565b90509295509295909350565b600082613ab857613ab86139ef565b600160ff1b821460001984141615613ad257613ad26139af565b500590565b80820260008212600160ff1b84141615613af357613af36139af565b8181058314821517610cf757610cf76139af565b6000825160005b81811015613b285760208186018101518583015201613b0e565b506000920191825250919050565b600080600080600060a08688031215613b4e57600080fd5b85518015158114613b5e57600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b600060208284031215613b9657600080fd5b505191905056fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf987101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac8a35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e56288887101b21d556417ad2b8e8f2700dbad90721d5d50a1f435f2dee0b9dc981ac89a26469706673582212209aa2aa505ab2377fe36865af22ea5ed25fa253aadfb47936a2d5afb9cda3b05864736f6c63430008120033",
  "devdoc": {
    "author": "Maikel Ordaz",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "paidThisCycle, true if has paid the current cycle",
          "_1": "paidNextCycle, true if has paid the next cycle"
        }
      },
      "expelledBeforeBeneficiary(uint256,address)": {
        "params": {
          "termId": "the id of the term",
          "user": "the address of the participant to check"
        },
        "returns": {
          "_0": "true if the participant is expelled before being a beneficiary"
        }
      },
      "getAllJoinedTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of"
        }
      },
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "details": "Available positions starts at 0",
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "availablePositions an array with the available positions",
          "_1": "securityAmount an array with the security amount for each available position"
        }
      },
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if collateral initialized",
          "_1": "current collateral state",
          "_2": "time of first deposit",
          "_3": "current members count",
          "_4": "list of depositors"
        }
      },
      "getConstants(string,string,string,string)": {
        "params": {
          "firstAggregator": "The name of the first aggregator. Example: \"ETH/USD\"",
          "secondAggregator": "The name of the second aggregator. Example: \"USDC/USD\"",
          "vaultAddress": "The name of the vault address. Example: \"ZaynVault\"",
          "zapAddress": "The name of the zap address. Example: \"ZaynZap\""
        },
        "returns": {
          "_0": "The addresses of the oracles and yield providers"
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if the user is a true member of the term",
          "_1": "current users locked collateral balance in wei",
          "_2": "current users unlocked collateral balance in wei",
          "_3": "initial users deposit in wei",
          "_4": "expulsion limit"
        }
      },
      "getExpelledTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array the term ids on which the participant was expelled"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "if fund initialized",
          "_1": "current fund state",
          "_2": "stable token address used",
          "_3": "list of beneficiaries order",
          "_4": "when the fund starts in seconds",
          "_5": "when the fund ended, 0 if not ended",
          "_6": "current cycle number",
          "_7": "total amount of cycles"
        }
      },
      "getJoinedTermsByState(address,uint8)": {
        "params": {
          "participant": "the participant address",
          "state": "the term state"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of, giving the state of the term"
        }
      },
      "getLatestPrice()": {
        "details": "Revert if there is problem with chainlink data",
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getNeededAllowance(address)": {
        "params": {
          "user": "the user address"
        },
        "returns": {
          "_0": "the needed allowance"
        }
      },
      "getNextBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the next beneficiary"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "isParticipant, true if is participant",
          "_1": "isBeneficiary, true if has been beneficiary",
          "_2": "paidThisCycle, true if has paid the current cycle",
          "_3": "autoPayEnabled, true if auto pay is enabled",
          "_4": "beneficiariesPool, the beneficiary pool, 6 decimals",
          "_5": "beneficiariesFrozenPool, true if the beneficiary pool is frozen"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution in wei"
        }
      },
      "getRemainingRegistrationTime(uint256)": {
        "details": "Revert if nobody has deposited",
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining contribution period"
        }
      },
      "getTermRelatedSummary(uint256)": {
        "params": {
          "termId": "The term id for which the summary is being requested"
        },
        "returns": {
          "collateralState": "The current state of the collateral",
          "fundState": "The current state of the fund",
          "nonUserRelated": "A helper struct with the following values:                        available positions, security deposits corresponding to each position,                        remaining registration time, remaining contribution time,                        remaining cycle time, remaining cycles, remaining cycles                        contribution in wei, latest price from Chainlink, collateral                        first deposit time in seconds, collateral counter members,                        fund start time in seconds, fund end time in seconds, current                        cycle, expelled participants, total amount of cycles, yield                        start time in seconds, total deposit in wei, current total                        deposit in wei, total shares, users opted in for yield",
          "term": "The term object"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term object"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToCollateralConversionRate(uint256)": {
        "params": {
          "USDAmount": "The amount in USD with 18 decimals"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToStableConversionRate(uint256)": {
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "getUserRelatedSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "userRelated": "an object that contains the following values:                     user is collateral member, user is undercollaterized,                     current collateral balance, received collateral from defaults,                     initial deposited collateral, collateral expulsion limit,                     currently withdrawable balance, is fund member, is or was beneficiary,                     user paid current cycle, user paid next cycle in advance,                     user enabled autopay, user's money pot is frozen, user is exempted this                     cycle, the money pot pool the user can withdraw, the cycle the user got                     expelled (if applicable), is yield member, amount of collateral deposited                     in yield pool, amount of collateral withdrawn from yield pool, available                     yield to withdraw, amount of yield withdrawn, yield to be distributed"
        }
      },
      "getUserSet(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "on participant set",
          "_1": "on beneficiary set",
          "_2": "on defaulter set"
        }
      },
      "getUserYieldSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "_0": "if the user opted in for yield",
          "_1": "amount withdrawn from yield",
          "_2": "amount withdrawn from collateral",
          "_3": "amount available in yield",
          "_4": "amount deposited by user in yield",
          "_5": "amount of yield distributed"
        }
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "params": {
          "termId": "term id",
          "user": "depositor address"
        },
        "returns": {
          "allowedWithdrawal": "amount the amount of collateral the depositor can withdraw"
        }
      },
      "getYieldLockState()": {
        "returns": {
          "_0": "The current state of the yield lock"
        }
      },
      "getYieldSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if the yield is initialized",
          "_1": "start time stamp for yield deposit",
          "_2": "total deposit",
          "_3": "current amount in yield",
          "_4": "amount of total shares",
          "_5": "list of yield users",
          "_6": "address of vault",
          "_7": "address of zap"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "isExempted(uint256,uint256,address)": {
        "params": {
          "cycle": "the cycle to check",
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user is exempted"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,      Tp = total participants, I = depositor index (starts at 0). 1.5",
        "params": {
          "depositorIndex": "the index the depositor wants to join",
          "termId": "term id"
        },
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPY(uint256)": {
        "params": {
          "termId": "The term id for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPY(uint256,address)": {
        "params": {
          "termId": "The term id for which the APY is being calculated",
          "user": "The user for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the user"
        }
      },
      "userHasoptedInYG(uint256,address)": {
        "params": {
          "termId": "The term id for which the check is being made",
          "user": "The user for which the check is being made"
        },
        "returns": {
          "_0": "True if the user has opted in"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      }
    },
    "title": "Takaturn Getters Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "expelledBeforeBeneficiary(uint256,address)": {
        "notice": "checks if a participant have been expelled before being a beneficiary"
      },
      "getAllJoinedTerms(address)": {
        "notice": "Get all the terms a participant is part of"
      },
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "notice": "Gets the remaining positions in a term and the corresponding security amount"
      },
      "getCollateralSummary(uint256)": {
        "notice": "function to get the collateral object"
      },
      "getConstants(string,string,string,string)": {
        "notice": "This function return the current constant values for oracles and yield providers"
      },
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the beneficiary from the current cycle"
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "notice": "function to get the depositor collateral summary"
      },
      "getExpelledTerms(address)": {
        "notice": "Get all the terms a participant was expelled from"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getJoinedTermsByState(address,uint8)": {
        "notice": "Get all the terms a participant is part of by a given state"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getNeededAllowance(address)": {
        "notice": "a function to get the needed allowance for every active term the user is part of"
      },
      "getNextBeneficiary(uint256)": {
        "notice": "function to get the beneficiary from the next cycle"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getRemainingCycleTime(uint256)": {
        "notice": "Get the term's remaining time in the current cycle"
      },
      "getRemainingCycles(uint256)": {
        "notice": "Get the term's remaining cycles"
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "notice": "Get the term's remaining contribution amount converted from USDC to wei"
      },
      "getRemainingRegistrationTime(uint256)": {
        "notice": "Gets the remaining registration period for a term"
      },
      "getTermRelatedSummary(uint256)": {
        "notice": "This function is used as a helper for front-end implementation"
      },
      "getTermSummary(uint256)": {
        "notice": "Gets the term object"
      },
      "getToCollateralConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToStableConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "getUserRelatedSummary(address,uint256)": {
        "notice": "This function is used as a helper for front-end implementation"
      },
      "getUserSet(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getUserYieldSummary(address,uint256)": {
        "notice": "Gets the user yield summary"
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "notice": "Called to check how much collateral a user can withdraw"
      },
      "getYieldLockState()": {
        "notice": "This function is used to get the current state of the yield lock"
      },
      "getYieldSummary(uint256)": {
        "notice": "Gets the yield object"
      },
      "isBeneficiary(uint256,address)": {
        "notice": "checks if a participant have been a beneficiary"
      },
      "isExempted(uint256,uint256,address)": {
        "notice": "function to see if a user is exempted from paying a cycle"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPY(uint256)": {
        "notice": "This function is used to get a term APY"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPY(uint256,address)": {
        "notice": "This function is used to get a user APY"
      },
      "userHasoptedInYG(uint256,address)": {
        "notice": "This function is used to check if a user has opted in for yield generation"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      }
    },
    "notice": "Getters for Takaturn protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}