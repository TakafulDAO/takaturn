{
  "address": "0x0c0B03E8Af6C1FC6d46E5F3CeEc62954ED900A7a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "currentOrNextCyclePaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "expelledBeforeBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getAllJoinedTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getAvailablePositionsAndSecurityAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibCollateralStorage.CollateralStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "firstAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondAggregator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "zapAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "vaultAddress",
          "type": "string"
        }
      ],
      "name": "getConstants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getDepositorCollateralSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getExpelledTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum LibFundStorage.FundStates",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "enum LibTermStorage.TermStates",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "getJoinedTermsByState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNeededAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getNextBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantFundSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingContributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCycles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingCyclesContributionWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingRegistrationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getTermSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "enum LibTermStorage.TermStates",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "termOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "termId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "registrationPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contributionPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stableTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LibTermStorage.Term",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTermsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDAmount",
          "type": "uint256"
        }
      ],
      "name": "getToCollateralConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getToStableConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getUserYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allowedWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldLockState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getYieldSummary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "isBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isExempted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "isUnderCollaterized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorIndex",
          "type": "uint256"
        }
      ],
      "name": "minCollateralToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "termAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "totalYieldGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasoptedInYG",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "wasExpelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7baf335a16867a266b6f2c45a069eb5105b669088bbd1ddf4dbd3f38b20671d9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "3853037",
    "logsBloom": "0x
    "blockHash": "0x93362328eebea5a12dfff277f68cd6107cda4ab5f13caa50a26a68c1caf3ccee",
    "transactionHash": "0x7baf335a16867a266b6f2c45a069eb5105b669088bbd1ddf4dbd3f38b20671d9",
    "logs": [],
    "blockNumber": 26792657,
    "cumulativeGasUsed": "4300055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "9ff99cd523283007852f1e2d08c39f7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"currentOrNextCyclePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"expelledBeforeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getAllJoinedTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getAvailablePositionsAndSecurityAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibCollateralStorage.CollateralStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"firstAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondAggregator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zapAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vaultAddress\",\"type\":\"string\"}],\"name\":\"getConstants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getCurrentBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getDepositorCollateralSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getExpelledTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum LibFundStorage.FundStates\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"getJoinedTermsByState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNeededAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getNextBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getParticipantFundSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingContributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingCyclesContributionWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getRemainingRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getTermSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"enum LibTermStorage.TermStates\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibTermStorage.Term\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTermsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDAmount\",\"type\":\"uint256\"}],\"name\":\"getToCollateralConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getToStableConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getUserYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldLockState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getYieldSummary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isUnderCollaterized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorIndex\",\"type\":\"uint256\"}],\"name\":\"minCollateralToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"termAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"totalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasoptedInYG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wasExpelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Maikel Ordaz\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"paidThisCycle, true if has paid the current cycle\",\"_1\":\"paidNextCycle, true if has paid the next cycle\"}},\"expelledBeforeBeneficiary(uint256,address)\":{\"params\":{\"termId\":\"the id of the term\",\"user\":\"the address of the participant to check\"},\"returns\":{\"_0\":\"true if the participant is expelled before being a beneficiary\"}},\"getAllJoinedTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of\"}},\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"details\":\"Available positions starts at 0\",\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"availablePositions an array with the available positions\",\"_1\":\"securityAmount an array with the security amount for each available position\"}},\"getCollateralSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if collateral initialized\",\"_1\":\"current collateral state\",\"_2\":\"time of first deposit\",\"_3\":\"current members count\",\"_4\":\"list of depositors\"}},\"getConstants(string,string,string,string)\":{\"params\":{\"firstAggregator\":\"The name of the first aggregator. Example: \\\"ETH/USD\\\"\",\"secondAggregator\":\"The name of the second aggregator. Example: \\\"USDC/USD\\\"\",\"vaultAddress\":\"The name of the vault address. Example: \\\"ZaynVault\\\"\",\"zapAddress\":\"The name of the zap address. Example: \\\"ZaynZap\\\"\"},\"returns\":{\"_0\":\"The addresses of the oracles and yield providers\"}},\"getCurrentBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the current beneficiary\"}},\"getDepositorCollateralSummary(address,uint256)\":{\"params\":{\"depositor\":\"the depositor address\",\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if the user is a true member of the term\",\"_1\":\"current users locked collateral balance in wei\",\"_2\":\"current users unlocked collateral balance in wei\",\"_3\":\"initial users deposit in wei\",\"_4\":\"expulsion limit\"}},\"getExpelledTerms(address)\":{\"params\":{\"participant\":\"the participant address\"},\"returns\":{\"_0\":\"an array the term ids on which the participant was expelled\"}},\"getFundSummary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"if fund initialized\",\"_1\":\"current fund state\",\"_2\":\"stablecoin address used\",\"_3\":\"list of beneficiaries order\",\"_4\":\"when the fund starts in seconds\",\"_5\":\"when the fund ended, 0 if not ended\",\"_6\":\"current cycle number\",\"_7\":\"total amount of cycles\"}},\"getJoinedTermsByState(address,uint8)\":{\"params\":{\"participant\":\"the participant address\",\"state\":\"the term state\"},\"returns\":{\"_0\":\"an array with the term ids the participant is part of, giving the state of the term\"}},\"getLatestPrice()\":{\"details\":\"Revert if there is problem with chainlink data\",\"returns\":{\"_0\":\"uint latest price in Wei Note: 18 decimals\"}},\"getNeededAllowance(address)\":{\"params\":{\"user\":\"the user address\"},\"returns\":{\"_0\":\"the needed allowance\"}},\"getNextBeneficiary(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the next beneficiary\"}},\"getParticipantFundSummary(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"isParticipant, true if is participant\",\"_1\":\"isBeneficiary, true if has been beneficiary\",\"_2\":\"paidThisCycle, true if has paid the current cycle\",\"_3\":\"autoPayEnabled, true if auto pay is enabled\",\"_4\":\"beneficiariesPool, the beneficiary pool, 6 decimals\",\"_5\":\"beneficiariesFrozenPool, true if the beneficiary pool is frozen\"}},\"getRemainingContributionTime(uint256)\":{\"params\":{\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"the time left to contribute\"}},\"getRemainingCycleTime(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining time in the current cycle\"}},\"getRemainingCycles(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles\"}},\"getRemainingCyclesContributionWei(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining cycles contribution in wei\"}},\"getRemainingRegistrationTime(uint256)\":{\"details\":\"Revert if nobody has deposited\",\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"remaining contribution period\"}},\"getTermSummary(uint256)\":{\"params\":{\"termId\":\"the term id\"},\"returns\":{\"_0\":\"the term object\"}},\"getTermsId()\":{\"returns\":{\"_0\":\"the current term id\",\"_1\":\"the next term id\"}},\"getToCollateralConversionRate(uint256)\":{\"params\":{\"USDAmount\":\"The amount in USD with 18 decimals\"},\"returns\":{\"_0\":\"uint converted amount in wei\"}},\"getToStableConversionRate(uint256)\":{\"params\":{\"ethAmount\":\"The amount in ETH\"},\"returns\":{\"_0\":\"uint converted amount in USD correct to 18 decimals\"}},\"getUserSet(address,uint256)\":{\"params\":{\"participant\":\"the user to get the info from\",\"termId\":\"the fund id\"},\"returns\":{\"_0\":\"on participant set\",\"_1\":\"on beneficiary set\",\"_2\":\"on defaulter set\"}},\"getUserYieldSummary(address,uint256)\":{\"params\":{\"termId\":\"the collateral id\",\"user\":\"the depositor address\"},\"returns\":{\"_0\":\"if the user opted in for yield\",\"_1\":\"amount withdrawn from yield\",\"_2\":\"amount withdrawn from collateral\",\"_3\":\"amount available in yield\",\"_4\":\"amount deposited by user in yield\",\"_5\":\"amount of yield distributed\"}},\"getWithdrawableUserBalance(uint256,address)\":{\"params\":{\"termId\":\"term id\",\"user\":\"depositor address\"},\"returns\":{\"allowedWithdrawal\":\"amount the amount of collateral the depositor can withdraw\"}},\"getYieldLockState()\":{\"returns\":{\"_0\":\"The current state of the yield lock\"}},\"getYieldSummary(uint256)\":{\"params\":{\"termId\":\"the collateral id\"},\"returns\":{\"_0\":\"if the yield is initialized\",\"_1\":\"start time stamp for yield deposit\",\"_2\":\"total deposit\",\"_3\":\"current amount in yield\",\"_4\":\"amount of total shares\",\"_5\":\"list of yield users\",\"_6\":\"address of vault\",\"_7\":\"address of zap\"}},\"isBeneficiary(uint256,address)\":{\"params\":{\"beneficiary\":\"the address of the participant to check\",\"termId\":\"the id of the term\"},\"returns\":{\"_0\":\"true if the participant is a beneficiary\"}},\"isExempted(uint256,uint256,address)\":{\"params\":{\"cycle\":\"the cycle to check\",\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user is exempted\"}},\"isUnderCollaterized(uint256,address)\":{\"details\":\"This will revert if called during ReleasingCollateral or after\",\"params\":{\"member\":\"The user to check for\",\"termId\":\"The term id\"},\"returns\":{\"_0\":\"Bool check if member is below 1.0x of collateralDeposit\"}},\"minCollateralToDeposit(uint256,uint256)\":{\"details\":\"The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,      Tp = total participants, I = depositor index (starts at 0). 1.5\",\"params\":{\"depositorIndex\":\"the index the depositor wants to join\",\"termId\":\"term id\"},\"returns\":{\"amount\":\"the minimum collateral amount to deposit in wei\"}},\"termAPY(uint256)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the term\"}},\"totalYieldGenerated(uint256)\":{\"params\":{\"termId\":\"The term id for which the yield is being calculated\"},\"returns\":{\"_0\":\"The total yield generated for the term\"}},\"userAPY(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the APY is being calculated\",\"user\":\"The user for which the APY is being calculated\"},\"returns\":{\"_0\":\"The APY for the user\"}},\"userHasoptedInYG(uint256,address)\":{\"params\":{\"termId\":\"The term id for which the check is being made\",\"user\":\"The user for which the check is being made\"},\"returns\":{\"_0\":\"True if the user has opted in\"}},\"wasExpelled(uint256,address)\":{\"params\":{\"termId\":\"the fund id\",\"user\":\"the user to check\"},\"returns\":{\"_0\":\"true if the user was expelled before\"}}},\"title\":\"Takaturn Getters Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentOrNextCyclePaid(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"expelledBeforeBeneficiary(uint256,address)\":{\"notice\":\"checks if a participant have been expelled before being a beneficiary\"},\"getAllJoinedTerms(address)\":{\"notice\":\"Get all the terms a participant is part of\"},\"getAvailablePositionsAndSecurityAmount(uint256)\":{\"notice\":\"Gets the remaining positions in a term and the corresponding security amount\"},\"getCollateralSummary(uint256)\":{\"notice\":\"function to get the collateral object\"},\"getConstants(string,string,string,string)\":{\"notice\":\"This function return the current constant values for oracles and yield providers\"},\"getCurrentBeneficiary(uint256)\":{\"notice\":\"function to get the beneficiary from the current cycle\"},\"getDepositorCollateralSummary(address,uint256)\":{\"notice\":\"function to get the depositor collateral summary\"},\"getExpelledTerms(address)\":{\"notice\":\"Get all the terms a participant was expelled from\"},\"getFundSummary(uint256)\":{\"notice\":\"function to get the cycle information in one go\"},\"getJoinedTermsByState(address,uint8)\":{\"notice\":\"Get all the terms a participant is part of by a given state\"},\"getLatestPrice()\":{\"notice\":\"Gets latest ETH / USD price\"},\"getNeededAllowance(address)\":{\"notice\":\"a function to get the needed allowance for every active term the user is part of\"},\"getNextBeneficiary(uint256)\":{\"notice\":\"function to get the beneficiary from the next cycle\"},\"getParticipantFundSummary(address,uint256)\":{\"notice\":\"function to get fund information of a specific participant\"},\"getRemainingContributionTime(uint256)\":{\"notice\":\"returns the time left to contribute for this cycle\"},\"getRemainingCycleTime(uint256)\":{\"notice\":\"Get the term's remaining time in the current cycle\"},\"getRemainingCycles(uint256)\":{\"notice\":\"Get the term's remaining cycles\"},\"getRemainingCyclesContributionWei(uint256)\":{\"notice\":\"Get the term's remaining contribution amount converted from USDC to wei\"},\"getRemainingRegistrationTime(uint256)\":{\"notice\":\"Gets the remaining registration period for a term\"},\"getTermSummary(uint256)\":{\"notice\":\"Gets the term object\"},\"getToCollateralConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in USD to ETH\"},\"getToStableConversionRate(uint256)\":{\"notice\":\"Gets the conversion rate of an amount in ETH to USD\"},\"getUserSet(address,uint256)\":{\"notice\":\"function to get cycle information of a specific participant\"},\"getUserYieldSummary(address,uint256)\":{\"notice\":\"Gets the user yield summary\"},\"getWithdrawableUserBalance(uint256,address)\":{\"notice\":\"Called to check how much collateral a user can withdraw\"},\"getYieldLockState()\":{\"notice\":\"This function is used to get the current state of the yield lock\"},\"getYieldSummary(uint256)\":{\"notice\":\"Gets the yield object\"},\"isBeneficiary(uint256,address)\":{\"notice\":\"checks if a participant have been a beneficiary\"},\"isExempted(uint256,uint256,address)\":{\"notice\":\"function to see if a user is exempted from paying a cycle\"},\"isUnderCollaterized(uint256,address)\":{\"notice\":\"Checks if a user has a collateral below 1.0x of total contribution amount\"},\"minCollateralToDeposit(uint256,uint256)\":{\"notice\":\"Called to check the minimum collateral amount to deposit in wei\"},\"termAPY(uint256)\":{\"notice\":\"This function is used to get a term APY\"},\"totalYieldGenerated(uint256)\":{\"notice\":\"This function is used to get the total yield generated for a term\"},\"userAPY(uint256,address)\":{\"notice\":\"This function is used to get a user APY\"},\"userHasoptedInYG(uint256,address)\":{\"notice\":\"This function is used to check if a user has opted in for yield generation\"},\"wasExpelled(uint256,address)\":{\"notice\":\"function to know if a user was expelled before\"}},\"notice\":\"Getters for Takaturn protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/GettersFacet.sol\":\"GettersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/GettersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @title Takaturn Getters Facet\\n/// @author Maikel Ordaz\\n/// @notice Getters for Takaturn protocol\\n/// @dev v3.0 (Diamond)\\ncontract GettersFacet is IGetters {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    /// @return The addresses of the oracles and yield providers\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        return (\\n            termConsts.aggregatorsAddresses[firstAggregator],\\n            termConsts.aggregatorsAddresses[secondAggregator],\\n            yieldProvider.providerAddresses[zapAddress],\\n            yieldProvider.providerAddresses[vaultAddress]\\n        );\\n    }\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    /// @return The current state of the yield lock\\n    function getYieldLockState() external view returns (bool) {\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\n    }\\n\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint lastTermId = termStorage.nextTermId - 1;\\n        uint nextTermId = termStorage.nextTermId;\\n        return (lastTermId, nextTermId);\\n    }\\n\\n    /// @notice Gets the term object\\n    /// @param termId the term id\\n    /// @return the term object\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory) {\\n        return (LibTermStorage._termStorage().terms[termId]);\\n    }\\n\\n    /// @notice function to get the collateral object\\n    /// @param termId the collateral id\\n    /// @return if collateral initialized\\n    /// @return current collateral state\\n    /// @return time of first deposit\\n    /// @return current members count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory)\\n    {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        return (\\n            collateral.initialized,\\n            collateral.state, // Current state of Collateral\\n            collateral.firstDepositTime, // Time when the first deposit was made\\n            collateral.counterMembers, // Current member count\\n            collateral.depositors // List of depositors\\n        );\\n    }\\n\\n    /// @notice function to get the cycle information in one go\\n    /// @param termId the fund id\\n    /// @return if fund initialized\\n    /// @return current fund state\\n    /// @return stablecoin address used\\n    /// @return list of beneficiaries order\\n    /// @return when the fund starts in seconds\\n    /// @return when the fund ended, 0 if not ended\\n    /// @return current cycle number\\n    /// @return total amount of cycles\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint)\\n    {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return (\\n            fund.initialized,\\n            fund.currentState,\\n            fund.stableToken,\\n            fund.beneficiariesOrder,\\n            fund.fundStart,\\n            fund.fundEnd,\\n            fund.currentCycle,\\n            fund.totalAmountOfCycles\\n        );\\n    }\\n\\n    /// @notice Gets the yield object\\n    /// @param termId the collateral id\\n    /// @return if the yield is initialized\\n    /// @return start time stamp for yield deposit\\n    /// @return total deposit\\n    /// @return current amount in yield\\n    /// @return amount of total shares\\n    /// @return list of yield users\\n    /// @return address of vault\\n    /// @return address of zap\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        return (\\n            yield.initialized,\\n            yield.startTimeStamp,\\n            yield.totalDeposit,\\n            yield.currentTotalDeposit,\\n            yield.totalShares,\\n            yield.yieldUsers,\\n            yield.providerAddresses[\\\"ZaynVault\\\"],\\n            yield.providerAddresses[\\\"ZaynZap\\\"]\\n        );\\n    }\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        return\\n            (((totalYieldGenerated(termId) * 10 ** 18) / yield.currentTotalDeposit) * 365 days) /\\n            elaspedTime;\\n    }\\n\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\n    /// @param termId the term id\\n    /// @dev Available positions starts at 0\\n    /// @return availablePositions an array with the available positions\\n    /// @return securityAmount an array with the security amount for each available position\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) external view returns (uint[] memory, uint[] memory) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        uint depositorsLength = collateral.depositors.length;\\n        uint[] memory availablePositions = new uint[](depositorsLength);\\n\\n        uint availablePositionsCounter;\\n\\n        // Loop through the depositors array and get the available positions\\n        for (uint i; i < depositorsLength; ) {\\n            // The position is available if the depositor is address zero\\n            if (collateral.depositors[i] == address(0)) {\\n                // Add the position to the available positions array\\n                availablePositions[availablePositionsCounter] = i;\\n\\n                // And increment the available positions counter\\n                unchecked {\\n                    ++availablePositionsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Create the arrays to return\\n        // The available positions array will have the length of the available positions counter\\n        // The security amount array will have the same length\\n        uint[] memory availablePositionsArray = new uint[](availablePositionsCounter);\\n        uint[] memory securityAmountArray = new uint[](availablePositionsCounter);\\n\\n        // Loop through the available positions counter and fill the arrays\\n        for (uint i; i < availablePositionsCounter; ) {\\n            availablePositionsArray[i] = availablePositions[i];\\n            // Get the security amount for the position\\n            securityAmountArray[i] = minCollateralToDeposit(termId, availablePositions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return the arrays, the available positions array and the security amount array are coupled\\n        // availablePositionsArray[0] will have the securityAmountArray[0] and so on\\n        return (availablePositionsArray, securityAmountArray);\\n    }\\n\\n    /// @notice Gets the remaining registration period for a term\\n    /// @dev Revert if nobody has deposited\\n    /// @param termId the term id\\n    /// @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        require(collateral.firstDepositTime != 0, \\\"Nobody has deposited yet\\\");\\n        if (block.timestamp >= collateral.firstDepositTime + term.registrationPeriod) {\\n            return 0;\\n        } else {\\n            return collateral.firstDepositTime + term.registrationPeriod - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice returns the time left to contribute for this cycle\\n    /// @param termId the fund id\\n    /// @return the time left to contribute\\n    function getRemainingContributionTime(uint termId) external view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        if (fund.currentState != LibFundStorage.FundStates.AcceptingContributions) {\\n            return 0;\\n        }\\n\\n        // Current cycle minus 1 because we use the previous cycle time as start point then add contribution period\\n        uint contributionEndTimestamp = term.cycleTime *\\n            (fund.currentCycle - 1) +\\n            fund.fundStart +\\n            term.contributionPeriod;\\n        if (block.timestamp > contributionEndTimestamp) {\\n            return 0;\\n        } else {\\n            return contributionEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Get the term's remaining time in the current cycle\\n    /// @param termId the term id\\n    /// @return remaining time in the current cycle\\n    function getRemainingCycleTime(uint termId) external view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        uint cycleEndTimestamp = term.cycleTime * fund.currentCycle + fund.fundStart;\\n        if (block.timestamp > cycleEndTimestamp) {\\n            return 0;\\n        } else {\\n            return cycleEndTimestamp - block.timestamp;\\n        }\\n    }\\n\\n    /// @notice a function to get the needed allowance for every active term the user is part of\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint) {\\n        uint neededAllowance;\\n\\n        uint[] memory activeTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.ActiveTerm\\n        );\\n        uint[] memory initializedTerms = getJoinedTermsByState(\\n            user,\\n            LibTermStorage.TermStates.InitializingTerm\\n        );\\n\\n        uint activeTermsLength = activeTerms.length;\\n        uint initializedTermsLength = initializedTerms.length;\\n\\n        for (uint i; i < activeTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[activeTerms[i]];\\n            uint remainingPayments = term.contributionAmount *\\n                getRemainingCycles(activeTerms[i]) *\\n                10 ** 6;\\n            neededAllowance += remainingPayments;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than activeTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint i; i < initializedTermsLength; ) {\\n            LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[\\n                initializedTerms[i]\\n            ];\\n            uint totalPayments = term.contributionAmount * term.totalParticipants * 10 ** 6;\\n            neededAllowance += totalPayments;\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than initializedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return neededAllowance;\\n    }\\n\\n    /// @notice function to get the beneficiary from the current cycle\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.beneficiariesOrder[fund.currentCycle - 1];\\n    }\\n\\n    /// @notice function to get the beneficiary from the next cycle\\n    /// @param termId the fund id\\n    /// @return the next beneficiary\\n    function getNextBeneficiary(uint termId) external view returns (address) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.beneficiariesOrder[fund.currentCycle];\\n    }\\n\\n    /// @notice function to get the depositor collateral summary\\n    /// @param depositor the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint limit;\\n        if (!fund.isBeneficiary[depositor]) {\\n            limit = getToCollateralConversionRate(term.contributionAmount * 10 ** 18);\\n        } else {\\n            limit = getRemainingCyclesContributionWei(termId);\\n        }\\n\\n        return (\\n            collateral.isCollateralMember[depositor],\\n            collateral.collateralMembersBank[depositor],\\n            collateral.collateralPaymentBank[depositor],\\n            collateral.collateralDepositByUser[depositor],\\n            limit\\n        );\\n    }\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return isParticipant, true if is participant\\n    /// @return isBeneficiary, true if has been beneficiary\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return autoPayEnabled, true if auto pay is enabled\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        bool isMoneyPotFrozen = _checkFrozenMoneyPot(participant, termId);\\n\\n        return (\\n            fund.isParticipant[participant],\\n            fund.isBeneficiary[participant],\\n            fund.paidThisCycle[participant],\\n            fund.autoPayEnabled[participant],\\n            fund.beneficiariesPool[participant],\\n            isMoneyPotFrozen\\n        );\\n    }\\n\\n    /// @notice Gets the user yield summary\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user opted in for yield\\n    /// @return amount withdrawn from yield\\n    /// @return amount withdrawn from collateral\\n    /// @return amount available in yield\\n    /// @return amount deposited by user in yield\\n    /// @return amount of yield distributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint yieldDistributed = LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return (\\n            yield.hasOptedIn[user],\\n            yield.withdrawnYield[user],\\n            yield.withdrawnCollateral[user],\\n            yield.availableYield[user],\\n            yield.depositedCollateralByUser[user],\\n            yieldDistributed\\n        );\\n    }\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        bool onParticipantSet = EnumerableSet.contains(fund._participants, participant);\\n        bool onBeneficiarySet = EnumerableSet.contains(fund._beneficiaries, participant);\\n        bool onDefaulterSet = EnumerableSet.contains(fund._defaulters, participant);\\n        return (onParticipantSet, onBeneficiarySet, onDefaulterSet);\\n    }\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint userCollateral = collateral.collateralMembersBank[user];\\n        uint availableYield = yield.availableYield[user];\\n        bool expelledBeforeBeingBeneficiary = fund.expelledBeforeBeneficiary[user];\\n\\n        if (\\n            collateral.state == LibCollateralStorage.CollateralStates.ReleasingCollateral ||\\n            expelledBeforeBeingBeneficiary\\n        ) {\\n            allowedWithdrawal = userCollateral + availableYield;\\n        } else if (collateral.state == LibCollateralStorage.CollateralStates.CycleOngoing) {\\n            uint minRequiredCollateral;\\n\\n            // Check if the user has paid this cycle or the next\\n            if (!fund.paidThisCycle[user] && !fund.paidNextCycle[user]) {\\n                // If none have been paid\\n                // Everything above 1.5 X remaining cycles contribution (RCC) can be withdrawn\\n                minRequiredCollateral = (getRemainingCyclesContributionWei(termId) * 15) / 10; // 1.5 X RCC in wei\\n            }\\n\\n            // If the user has paid only one of the cycles, current or next\\n            if (\\n                (fund.paidThisCycle[user] && !fund.paidNextCycle[user]) ||\\n                (fund.paidNextCycle[user] && !fund.paidThisCycle[user])\\n            ) {\\n                // We need to check his remaining cycles and get the contribution amount for those\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle;\\n                uint contributionAmountWei = getToCollateralConversionRate(\\n                    term.contributionAmount * 10 ** 18\\n                );\\n\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\n            }\\n\\n            // If the user has paid both cycles, current and next\\n            if (fund.paidThisCycle[user] && fund.paidNextCycle[user]) {\\n                // We need to check his remaining cycles and get the contribution amount for those\\n                uint remainingCycles = fund.totalAmountOfCycles - fund.currentCycle - 1;\\n                uint contributionAmountWei = getToCollateralConversionRate(\\n                    term.contributionAmount * 10 ** 18\\n                );\\n\\n                minRequiredCollateral = (remainingCycles * contributionAmountWei * 15) / 10; // 1.5 times of what the user needs to pay for the remaining cycles\\n            }\\n\\n            // Collateral must be higher than 1.5 X RCC\\n            if (userCollateral > minRequiredCollateral) {\\n                allowedWithdrawal = userCollateral - minRequiredCollateral + availableYield; // We allow to withdraw the positive difference\\n            } else {\\n                allowedWithdrawal = 0;\\n            }\\n        } else {\\n            allowedWithdrawal = 0;\\n        }\\n    }\\n\\n    /// @notice Get all the terms a participant was expelled from\\n    /// @param participant the participant address\\n    /// @return an array the term ids on which the participant was expelled\\n    function getExpelledTerms(address participant) external view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (wasExpelled(joinedTerms[i], participant)) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n\\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory termsExpelled = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            termsExpelled[i] = temporaryArray[i];\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than termsCounter\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return termsExpelled;\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool) {\\n        return LibCollateral._isUnderCollaterized(termId, member);\\n    }\\n\\n    /// @notice function to see if a user is exempted from paying a cycle\\n    /// @param termId the fund id\\n    /// @param cycle the cycle to check\\n    /// @param user the user to check\\n    /// @return true if the user is exempted\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isExemptedOnCycle[cycle].exempted[user];\\n    }\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        return yield.hasOptedIn[user];\\n    }\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        uint256 elaspedTime = block.timestamp - yield.startTimeStamp;\\n\\n        uint userYieldGenerated = yield.withdrawnYield[user] +\\n            LibYieldGeneration._unwithdrawnUserYieldGenerated(termId, user);\\n\\n        return\\n            (((userYieldGenerated * 10 ** 18) / collateral.collateralMembersBank[user]) *\\n                365 days) / elaspedTime;\\n    }\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return paidNextCycle, true if has paid the next cycle\\n    function currentOrNextCyclePaid(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        return (fund.paidThisCycle[participant], fund.paidNextCycle[participant]);\\n    }\\n\\n    /// @notice checks if a participant have been a beneficiary\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.isBeneficiary[beneficiary];\\n    }\\n\\n    /// @notice function to know if a user was expelled before\\n    /// @param termId the fund id\\n    /// @param user the user to check\\n    /// @return true if the user was expelled before\\n    function wasExpelled(uint termId, address user) public view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        if (!fund.isParticipant[user] && !collateral.isCollateralMember[user]) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        return fund.expelledBeforeBeneficiary[user];\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint) {\\n        // NOTE: This will be made internal\\n        uint ethPrice = getLatestPrice();\\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 10 ** 18;\\n        return ethAmountInUSD;\\n    }\\n\\n    /// @notice Get the term's remaining cycles\\n    /// @param termId the term id\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        return (1 + fund.totalAmountOfCycles - fund.currentCycle);\\n    }\\n\\n    /// @notice Get the term's remaining contribution amount converted from USDC to wei\\n    /// @param termId the term id\\n    /// @return remaining cycles contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) public view returns (uint) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        uint remainingCycles = 1 + fund.totalAmountOfCycles - fund.currentCycle;\\n        uint contributionAmountWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        return remainingCycles * contributionAmountWei;\\n    }\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @param termId term id\\n    /// @param depositorIndex the index the depositor wants to join\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(\\n        uint termId,\\n        uint depositorIndex\\n    ) public view returns (uint amount) {\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[termId];\\n\\n        require(depositorIndex < term.totalParticipants, \\\"Index out of bounds\\\");\\n\\n        uint contributionAmountInWei = getToCollateralConversionRate(\\n            term.contributionAmount * 10 ** 18\\n        );\\n\\n        amount = (contributionAmountInWei * (term.totalParticipants - depositorIndex) * 150) / 100;\\n    }\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @dev Revert if there is problem with chainlink data\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() public view returns (uint) {\\n        LibTermStorage.TermConsts storage termConsts = LibTermStorage._termConsts();\\n\\n        (\\n            uint80 roundID_ethUSD,\\n            int256 price_ethUSD,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_ethUSD,\\n            uint80 answeredInRound_ethUSD\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"ETH/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        // Check if chainlink data is not stale or incorrect\\n        require(\\n            timeStamp_ethUSD != 0 && answeredInRound_ethUSD >= roundID_ethUSD && price_ethUSD > 0,\\n            \\\"ChainlinkOracle: stale data\\\"\\n        );\\n\\n        (\\n            uint80 roundID_usdUSDC,\\n            int256 price_usdUSDC,\\n            ,\\n            /*uint startedAt*/ uint256 timeStamp_usdUSDC,\\n            uint80 answeredInRound_usdUSDC\\n        ) = AggregatorV3Interface(termConsts.aggregatorsAddresses[\\\"USDC/USD\\\"]).latestRoundData(); //8 decimals\\n\\n        require(\\n            timeStamp_usdUSDC != 0 &&\\n                answeredInRound_usdUSDC >= roundID_usdUSDC &&\\n                price_usdUSDC > 0,\\n            \\\"ChainlinkOracle: stale data\\\"\\n        );\\n\\n        int256 ethUSDC = price_ethUSD / price_usdUSDC;\\n\\n        return uint(ethUSDC * 10 ** 18); //18 decimals\\n    }\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) public view returns (uint) {\\n        uint ethPrice = getLatestPrice();\\n        uint USDAmountInEth = (USDAmount * 10 ** 18) / ethPrice;\\n        return USDAmountInEth;\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) public view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        uint totalWithdrawnYield;\\n\\n        address[] memory arrayToCheck = yield.yieldUsers;\\n        uint arrayLength = arrayToCheck.length;\\n\\n        for (uint i; i < arrayLength; ) {\\n            totalWithdrawnYield += yield.withdrawnYield[arrayToCheck[i]];\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than arrayLength\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint sharesInEth = LibYieldGeneration._sharesToEth(termId, yield);\\n\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return totalWithdrawnYield + sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return totalWithdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Get all the terms a participant is part of\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) public view returns (uint[] memory) {\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\n        uint[] memory participantTermIds = termStorage.participantToTermId[participant];\\n        return participantTermIds;\\n    }\\n\\n    /// @notice Get all the terms a participant is part of by a given state\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) public view returns (uint[] memory) {\\n        uint[] memory joinedTerms = getAllJoinedTerms(participant);\\n        uint[] memory temporaryArray = new uint[](joinedTerms.length);\\n        uint termsCounter;\\n        uint joinedTermsLength = joinedTerms.length;\\n\\n        for (uint i; i < joinedTermsLength; ) {\\n            if (LibTermStorage._termStorage().terms[joinedTerms[i]].state == state) {\\n                temporaryArray[termsCounter] = joinedTerms[i];\\n\\n                /// @custom:unchecked-block without risk, termsCounter can't be higher than joinedTerms length\\n                unchecked {\\n                    ++termsCounter;\\n                }\\n            }\\n\\n            /// @custom:unchecked-block without risk, i can't be higher than joinedTerms length\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint[] memory userTermsByState = new uint[](termsCounter);\\n\\n        for (uint i; i < termsCounter; ) {\\n            userTermsByState[i] = temporaryArray[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return userTermsByState;\\n    }\\n\\n    /// @notice checks if the money pot is frozen for a participant\\n    /// @param _participant the user to check\\n    /// @param _termId the fund id\\n    /// @return _isMoneyPotFrozen true if the money pot is frozen\\n    function _checkFrozenMoneyPot(\\n        address _participant,\\n        uint _termId\\n    ) internal view returns (bool _isMoneyPotFrozen) {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        if (fund.expelledBeforeBeneficiary[_participant]) {\\n            _isMoneyPotFrozen = false;\\n        } else {\\n            uint neededCollateral = (110 * getRemainingCyclesContributionWei(_termId)) / 100; // 1.1 x RCC\\n\\n            if (collateral.collateralMembersBank[_participant] < neededCollateral) {\\n                _isMoneyPotFrozen = true;\\n            } else {\\n                _isMoneyPotFrozen = false;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5ff4cbd28119b246d8210111d9c6ef0767d20ab75b342fa1126ece14a42def5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ninterface IGetters {\\n    /// @notice This function return the current constant values for oracles and yield providers\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\n    /// @return The addresses of the oracles and yield providers\\n    function getConstants(\\n        string memory firstAggregator,\\n        string memory secondAggregator,\\n        string memory zapAddress,\\n        string memory vaultAddress\\n    ) external view returns (address, address, address, address);\\n\\n    /// @notice This function is used to get the current state of the yield lock\\n    /// @return The current state of the yield lock\\n    function getYieldLockState() external view returns (bool);\\n\\n    /// @return the current term id\\n    /// @return the next term id\\n    function getTermsId() external view returns (uint, uint);\\n\\n    /// @notice Gets the term object\\n    /// @param termId the term id\\n    /// @return the term object\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\n\\n    /// @notice Gets the collateral summary of a term\\n    /// @param termId the id of the term\\n    /// @return if collateral is initialized\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\n    /// @return current member count\\n    /// @return list of depositors\\n    function getCollateralSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\n\\n    /// @notice Gets the fund summary of a term\\n    /// @param termId the id of the term\\n    /// @return if fund is initialized\\n    /// @return current state of the fund, see States struct in LibFund.sol\\n    /// @return stablecoin address used\\n    /// @return list for order of beneficiaries\\n    /// @return when the fund started in seconds\\n    /// @return when the fund ended in seconds, 0 otherwise\\n    /// @return current cycle of fund\\n    /// @return total amount of cycles in this fund/term\\n    function getFundSummary(\\n        uint termId\\n    )\\n        external\\n        view\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\n\\n    /// @notice Gets the yield object\\n    /// @param termId the collateral id\\n    /// @return if the yield is initialized\\n    /// @return start time stamp for yield deposit\\n    /// @return total deposit\\n    /// @return current amount in yield\\n    /// @return amount of total shares\\n    /// @return list of yield users\\n    /// @return address of vault\\n    /// @return address of zap\\n    function getYieldSummary(\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\n\\n    /// @notice This function is used to get a term APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @return The APY for the term\\n    function termAPY(uint termId) external view returns (uint256);\\n\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\n    /// @param termId the term id\\n    /// @dev Available positions starts at 0\\n    /// @return availablePositions an array with the available positions\\n    /// @return securityAmount an array with the security amount for each available position\\n    function getAvailablePositionsAndSecurityAmount(\\n        uint termId\\n    ) external view returns (uint[] memory, uint[] memory);\\n\\n    /// @notice Gets the remaining registration period for a term\\n    /// @dev Revert if nobody have deposited\\n    /// @param termId the term id\\n    /// @return remaining contribution period\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must return 0 before closing a contribution period\\n    /// @param termId the id of the term\\n    /// @return remaining contribution time in seconds\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\n\\n    /// @notice Must be 0 before starting a new cycle\\n    /// @param termId the id of the term\\n    /// @return remaining cycle time in seconds\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\n\\n    /// @notice a function to get the needed allowance\\n    /// @param user the user address\\n    /// @return the needed allowance\\n    function getNeededAllowance(address user) external view returns (uint);\\n\\n    /// @notice function to get the beneficiary from the current cycle\\n    /// @param termId the fund id\\n    /// @return the current beneficiary\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets the next beneficiary of a term\\n    /// @param termId the id of the term\\n    /// @return user address\\n    function getNextBeneficiary(uint termId) external view returns (address);\\n\\n    /// @notice Gets a users collateral summary\\n    /// @param depositor address\\n    /// @param termId the id of the term\\n    /// @return if the user is a true member of the term\\n    /// @return current users locked collateral balance in wei\\n    /// @return current users unlocked collateral balance in wei\\n    /// @return initial users deposit in wei\\n    /// @return expulsion limit\\n    function getDepositorCollateralSummary(\\n        address depositor,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return isParticipant, true if is participant\\n    /// @return isBeneficiary, true if has been beneficiary\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return autoPayEnabled, true if auto pay is enabled\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\n    function getParticipantFundSummary(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\n\\n    /// @notice Gets the user yield summary\\n    /// @param user the depositor address\\n    /// @param termId the collateral id\\n    /// @return if the user opted in for yield\\n    /// @return amount withdrawn from yield\\n    /// @return amount withdrawn from collateral\\n    /// @return amount available in yield\\n    /// @return amount deposited by user in yield\\n    /// @return amount of yield distributed\\n    function getUserYieldSummary(\\n        address user,\\n        uint termId\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\n\\n    /// @notice function to get cycle information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return on participant set\\n    /// @return on beneficiary set\\n    /// @return on defaulter set\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool);\\n\\n    /// @notice Called to check how much collateral a user can withdraw\\n    /// @param termId term id\\n    /// @param user depositor address\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\n    function getWithdrawableUserBalance(\\n        uint termId,\\n        address user\\n    ) external view returns (uint allowedWithdrawal);\\n\\n    /// @notice Get all the terms a participant was expelled from\\n    /// @param participant the participant address\\n    /// @return an array the term ids on which the participant was expelled\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param termId The term id\\n    /// @param member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\n\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\n    /// @param termId the id of the term\\n    /// @param cycle number\\n    /// @param user address\\n    /// @return true or false\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\n\\n    /// @notice This function is used to check if a user has opted in for yield generation\\n    /// @param termId The term id for which the check is being made\\n    /// @param user The user for which the check is being made\\n    /// @return True if the user has opted in\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\n\\n    /// @notice This function is used to get a user APY\\n    /// @param termId The term id for which the APY is being calculated\\n    /// @param user The user for which the APY is being calculated\\n    /// @return The APY for the user\\n    function userAPY(uint termId, address user) external view returns (uint256);\\n\\n    /// @notice function to get fund information of a specific participant\\n    /// @param participant the user to get the info from\\n    /// @param termId the fund id\\n    /// @return paidThisCycle, true if has paid the current cycle\\n    /// @return paidNextCycle, true if has paid the next cycle\\n    function currentOrNextCyclePaid(\\n        address participant,\\n        uint termId\\n    ) external view returns (bool, bool);\\n\\n    /// @param termId the id of the term\\n    /// @param beneficiary the address of the participant to check\\n    /// @return true if the participant is a beneficiary\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\n\\n    /// @notice Gets if a user is expelled from a specefic term\\n    /// @param termId the id of the term\\n    /// @param user address\\n    /// @return true or false\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\n\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\n    /// @param termId the id of the term\\n    /// @param user the address of the participant to check\\n    /// @return true if the participant is expelled before being a beneficiary\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\n\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\n    /// @param ethAmount The amount in ETH\\n    /// @return uint converted amount in USD correct to 18 decimals\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\n\\n    /// @notice Gets all remaining cycles of a term\\n    /// @param termId the id of the term\\n    /// @return remaining cycles\\n    function getRemainingCycles(uint termId) external view returns (uint);\\n\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\n    /// @param termId the id of the term\\n    /// @return total remaining contribution in wei\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\n\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\n    /// @param termId term id\\n    /// @param depositorIndex the index the depositor wants to join\\n    /// @return amount the minimum collateral amount to deposit in wei\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\n\\n    /// @notice Gets latest ETH / USD price\\n    /// @dev Revert if there is problem with chainlink data\\n    /// @return uint latest price in Wei Note: 18 decimals\\n    function getLatestPrice() external view returns (uint);\\n\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\n    /// @param USDAmount The amount in USD with 18 decimals\\n    /// @return uint converted amount in wei\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\n\\n    /// @notice This function is used to get the total yield generated for a term\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\n\\n    /// @notice Get all the terms a participant is part of\\n    /// @param participant the participant address\\n    /// @return an array with the term ids the participant is part of\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\n\\n    /// @notice Get all the terms a participant is part of by a given state\\n    /// @param participant the participant address\\n    /// @param state the term state\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\n    function getJoinedTermsByState(\\n        address participant,\\n        LibTermStorage.TermStates state\\n    ) external view returns (uint[] memory);\\n}\\n\",\"keccak256\":\"0xfdb9cbdf236afcfae49f3c5fcd9d9caab724c98f6a6972c2f28f9f9183a120e7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\n\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\n\\nlibrary LibCollateral {\\n    event OnCollateralStateChanged(\\n        uint indexed termId,\\n        LibCollateralStorage.CollateralStates indexed oldState,\\n        LibCollateralStorage.CollateralStates indexed newState\\n    ); // Emits when the state of the collateral changes\\n    event OnReimbursementWithdrawn(\\n        uint indexed termId,\\n        address indexed participant,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a participant withdraws their reimbursement\\n\\n    /// @notice Sets the state of the collateral\\n    /// @param _termId term id\\n    /// @param _newState collateral state\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\n        collateral.state = _newState;\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\n    }\\n\\n    /// @notice Allow a user to withdraw their reimbursement\\n    /// @dev Reverts if the fund does not exists or if the user has nothing to claim\\n    /// @param _termId term id\\n    /// @param _participant Address of the depositor\\n    /// @param _receiver Address of the receiver\\n    function _withdrawReimbursement(\\n        uint _termId,\\n        address _participant,\\n        address _receiver\\n    ) internal {\\n        require(LibFundStorage._fundExists(_termId), \\\"Fund does not exists\\\");\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint amount = collateral.collateralPaymentBank[_participant];\\n        require(amount > 0, \\\"Nothing to claim\\\");\\n        collateral.collateralPaymentBank[_participant] = 0;\\n\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\n        require(success);\\n\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\n    }\\n\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\n    /// @dev This will revert if called during ReleasingCollateral or after\\n    /// @param _termId The fund id\\n    /// @param _member The user to check for\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[_termId];\\n\\n        uint collateralLimit;\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\n\\n        if (!LibFundStorage._fundExists(_termId)) {\\n            // Only check here when starting the term\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\n                _member,\\n                _termId\\n            );\\n        } else {\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\n        }\\n\\n        return (memberCollateral < collateralLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x46b7c65dcde54c215ab69f9ed0c5207954d498494472a4071650c00b1d3c9879\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime; // Time when the first deposit was made in seconds\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0346bf8df22a8caf2c15afd027d7d3001681e6e169af5f20df4f99e7bd79f23b\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7190084bd2a279424a536b51ac7fa2bccda2b2914d8da928a318f3a20dc1e489\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime; // In seconds\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc671ba65f7ac40f73277faaa02649273153214e4a47aa5557b8b63b08270f6da\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    /// @return The amount of yield withdrawn\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n\\n        // Prevent rounding errors\\n        if (neededShares > sharesBalance) {\\n            if (neededShares - sharesBalance < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        } else {\\n            if (sharesBalance - neededShares < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        }\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    /// @return Wei equivalent of the shares\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _totalShares The total shares in the yield from the term\\n    /// @param _totalDeposit The total deposit in the yield from the term\\n    /// @return The amount of shares equivalent to a collateral amount\\n    function _neededShares(\\n        uint _collateralAmount,\\n        uint _totalShares,\\n        uint _totalDeposit\\n    ) internal pure returns (uint) {\\n        if (_totalDeposit == 0) return 0;\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.currentTotalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    /// @notice This function is used to claim the available yield for a user\\n    /// @param _termId The term id for which the yield is being claimed\\n    /// @param _user The user for which the yield is being claimed\\n    /// @param _receiver The receiver of the yield\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x70d01bc5ab29d195fc25a8d4f31db57dcd81fd4799d2ccba28d9494cf98ee6ac\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp; // In seconds\\n        uint totalDeposit; // In wei\\n        uint currentTotalDeposit; // In wei\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield; // In wei\\n        mapping(address => uint256) withdrawnCollateral; // In wei\\n        mapping(address => uint256) availableYield; // In wei\\n        mapping(address => uint256) depositedCollateralByUser; // In wei\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x303632621c5f7451ec19c0b69f50cb02c559e4e037bc2dce99218ec48a650234\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Maikel Ordaz",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "paidThisCycle, true if has paid the current cycle",
          "_1": "paidNextCycle, true if has paid the next cycle"
        }
      },
      "expelledBeforeBeneficiary(uint256,address)": {
        "params": {
          "termId": "the id of the term",
          "user": "the address of the participant to check"
        },
        "returns": {
          "_0": "true if the participant is expelled before being a beneficiary"
        }
      },
      "getAllJoinedTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of"
        }
      },
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "details": "Available positions starts at 0",
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "availablePositions an array with the available positions",
          "_1": "securityAmount an array with the security amount for each available position"
        }
      },
      "getCollateralSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if collateral initialized",
          "_1": "current collateral state",
          "_2": "time of first deposit",
          "_3": "current members count",
          "_4": "list of depositors"
        }
      },
      "getConstants(string,string,string,string)": {
        "params": {
          "firstAggregator": "The name of the first aggregator. Example: \"ETH/USD\"",
          "secondAggregator": "The name of the second aggregator. Example: \"USDC/USD\"",
          "vaultAddress": "The name of the vault address. Example: \"ZaynVault\"",
          "zapAddress": "The name of the zap address. Example: \"ZaynZap\""
        },
        "returns": {
          "_0": "The addresses of the oracles and yield providers"
        }
      },
      "getCurrentBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the current beneficiary"
        }
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "params": {
          "depositor": "the depositor address",
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if the user is a true member of the term",
          "_1": "current users locked collateral balance in wei",
          "_2": "current users unlocked collateral balance in wei",
          "_3": "initial users deposit in wei",
          "_4": "expulsion limit"
        }
      },
      "getExpelledTerms(address)": {
        "params": {
          "participant": "the participant address"
        },
        "returns": {
          "_0": "an array the term ids on which the participant was expelled"
        }
      },
      "getFundSummary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "if fund initialized",
          "_1": "current fund state",
          "_2": "stablecoin address used",
          "_3": "list of beneficiaries order",
          "_4": "when the fund starts in seconds",
          "_5": "when the fund ended, 0 if not ended",
          "_6": "current cycle number",
          "_7": "total amount of cycles"
        }
      },
      "getJoinedTermsByState(address,uint8)": {
        "params": {
          "participant": "the participant address",
          "state": "the term state"
        },
        "returns": {
          "_0": "an array with the term ids the participant is part of, giving the state of the term"
        }
      },
      "getLatestPrice()": {
        "details": "Revert if there is problem with chainlink data",
        "returns": {
          "_0": "uint latest price in Wei Note: 18 decimals"
        }
      },
      "getNeededAllowance(address)": {
        "params": {
          "user": "the user address"
        },
        "returns": {
          "_0": "the needed allowance"
        }
      },
      "getNextBeneficiary(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the next beneficiary"
        }
      },
      "getParticipantFundSummary(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "isParticipant, true if is participant",
          "_1": "isBeneficiary, true if has been beneficiary",
          "_2": "paidThisCycle, true if has paid the current cycle",
          "_3": "autoPayEnabled, true if auto pay is enabled",
          "_4": "beneficiariesPool, the beneficiary pool, 6 decimals",
          "_5": "beneficiariesFrozenPool, true if the beneficiary pool is frozen"
        }
      },
      "getRemainingContributionTime(uint256)": {
        "params": {
          "termId": "the fund id"
        },
        "returns": {
          "_0": "the time left to contribute"
        }
      },
      "getRemainingCycleTime(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining time in the current cycle"
        }
      },
      "getRemainingCycles(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles"
        }
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining cycles contribution in wei"
        }
      },
      "getRemainingRegistrationTime(uint256)": {
        "details": "Revert if nobody has deposited",
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "remaining contribution period"
        }
      },
      "getTermSummary(uint256)": {
        "params": {
          "termId": "the term id"
        },
        "returns": {
          "_0": "the term object"
        }
      },
      "getTermsId()": {
        "returns": {
          "_0": "the current term id",
          "_1": "the next term id"
        }
      },
      "getToCollateralConversionRate(uint256)": {
        "params": {
          "USDAmount": "The amount in USD with 18 decimals"
        },
        "returns": {
          "_0": "uint converted amount in wei"
        }
      },
      "getToStableConversionRate(uint256)": {
        "params": {
          "ethAmount": "The amount in ETH"
        },
        "returns": {
          "_0": "uint converted amount in USD correct to 18 decimals"
        }
      },
      "getUserSet(address,uint256)": {
        "params": {
          "participant": "the user to get the info from",
          "termId": "the fund id"
        },
        "returns": {
          "_0": "on participant set",
          "_1": "on beneficiary set",
          "_2": "on defaulter set"
        }
      },
      "getUserYieldSummary(address,uint256)": {
        "params": {
          "termId": "the collateral id",
          "user": "the depositor address"
        },
        "returns": {
          "_0": "if the user opted in for yield",
          "_1": "amount withdrawn from yield",
          "_2": "amount withdrawn from collateral",
          "_3": "amount available in yield",
          "_4": "amount deposited by user in yield",
          "_5": "amount of yield distributed"
        }
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "params": {
          "termId": "term id",
          "user": "depositor address"
        },
        "returns": {
          "allowedWithdrawal": "amount the amount of collateral the depositor can withdraw"
        }
      },
      "getYieldLockState()": {
        "returns": {
          "_0": "The current state of the yield lock"
        }
      },
      "getYieldSummary(uint256)": {
        "params": {
          "termId": "the collateral id"
        },
        "returns": {
          "_0": "if the yield is initialized",
          "_1": "start time stamp for yield deposit",
          "_2": "total deposit",
          "_3": "current amount in yield",
          "_4": "amount of total shares",
          "_5": "list of yield users",
          "_6": "address of vault",
          "_7": "address of zap"
        }
      },
      "isBeneficiary(uint256,address)": {
        "params": {
          "beneficiary": "the address of the participant to check",
          "termId": "the id of the term"
        },
        "returns": {
          "_0": "true if the participant is a beneficiary"
        }
      },
      "isExempted(uint256,uint256,address)": {
        "params": {
          "cycle": "the cycle to check",
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user is exempted"
        }
      },
      "isUnderCollaterized(uint256,address)": {
        "details": "This will revert if called during ReleasingCollateral or after",
        "params": {
          "member": "The user to check for",
          "termId": "The term id"
        },
        "returns": {
          "_0": "Bool check if member is below 1.0x of collateralDeposit"
        }
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "details": "The minimum collateral amount is calculated based on the index on the depositors arrayThe return value should be the minimum msg.value when calling joinTermC = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,      Tp = total participants, I = depositor index (starts at 0). 1.5",
        "params": {
          "depositorIndex": "the index the depositor wants to join",
          "termId": "term id"
        },
        "returns": {
          "amount": "the minimum collateral amount to deposit in wei"
        }
      },
      "termAPY(uint256)": {
        "params": {
          "termId": "The term id for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the term"
        }
      },
      "totalYieldGenerated(uint256)": {
        "params": {
          "termId": "The term id for which the yield is being calculated"
        },
        "returns": {
          "_0": "The total yield generated for the term"
        }
      },
      "userAPY(uint256,address)": {
        "params": {
          "termId": "The term id for which the APY is being calculated",
          "user": "The user for which the APY is being calculated"
        },
        "returns": {
          "_0": "The APY for the user"
        }
      },
      "userHasoptedInYG(uint256,address)": {
        "params": {
          "termId": "The term id for which the check is being made",
          "user": "The user for which the check is being made"
        },
        "returns": {
          "_0": "True if the user has opted in"
        }
      },
      "wasExpelled(uint256,address)": {
        "params": {
          "termId": "the fund id",
          "user": "the user to check"
        },
        "returns": {
          "_0": "true if the user was expelled before"
        }
      }
    },
    "title": "Takaturn Getters Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentOrNextCyclePaid(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "expelledBeforeBeneficiary(uint256,address)": {
        "notice": "checks if a participant have been expelled before being a beneficiary"
      },
      "getAllJoinedTerms(address)": {
        "notice": "Get all the terms a participant is part of"
      },
      "getAvailablePositionsAndSecurityAmount(uint256)": {
        "notice": "Gets the remaining positions in a term and the corresponding security amount"
      },
      "getCollateralSummary(uint256)": {
        "notice": "function to get the collateral object"
      },
      "getConstants(string,string,string,string)": {
        "notice": "This function return the current constant values for oracles and yield providers"
      },
      "getCurrentBeneficiary(uint256)": {
        "notice": "function to get the beneficiary from the current cycle"
      },
      "getDepositorCollateralSummary(address,uint256)": {
        "notice": "function to get the depositor collateral summary"
      },
      "getExpelledTerms(address)": {
        "notice": "Get all the terms a participant was expelled from"
      },
      "getFundSummary(uint256)": {
        "notice": "function to get the cycle information in one go"
      },
      "getJoinedTermsByState(address,uint8)": {
        "notice": "Get all the terms a participant is part of by a given state"
      },
      "getLatestPrice()": {
        "notice": "Gets latest ETH / USD price"
      },
      "getNeededAllowance(address)": {
        "notice": "a function to get the needed allowance for every active term the user is part of"
      },
      "getNextBeneficiary(uint256)": {
        "notice": "function to get the beneficiary from the next cycle"
      },
      "getParticipantFundSummary(address,uint256)": {
        "notice": "function to get fund information of a specific participant"
      },
      "getRemainingContributionTime(uint256)": {
        "notice": "returns the time left to contribute for this cycle"
      },
      "getRemainingCycleTime(uint256)": {
        "notice": "Get the term's remaining time in the current cycle"
      },
      "getRemainingCycles(uint256)": {
        "notice": "Get the term's remaining cycles"
      },
      "getRemainingCyclesContributionWei(uint256)": {
        "notice": "Get the term's remaining contribution amount converted from USDC to wei"
      },
      "getRemainingRegistrationTime(uint256)": {
        "notice": "Gets the remaining registration period for a term"
      },
      "getTermSummary(uint256)": {
        "notice": "Gets the term object"
      },
      "getToCollateralConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in USD to ETH"
      },
      "getToStableConversionRate(uint256)": {
        "notice": "Gets the conversion rate of an amount in ETH to USD"
      },
      "getUserSet(address,uint256)": {
        "notice": "function to get cycle information of a specific participant"
      },
      "getUserYieldSummary(address,uint256)": {
        "notice": "Gets the user yield summary"
      },
      "getWithdrawableUserBalance(uint256,address)": {
        "notice": "Called to check how much collateral a user can withdraw"
      },
      "getYieldLockState()": {
        "notice": "This function is used to get the current state of the yield lock"
      },
      "getYieldSummary(uint256)": {
        "notice": "Gets the yield object"
      },
      "isBeneficiary(uint256,address)": {
        "notice": "checks if a participant have been a beneficiary"
      },
      "isExempted(uint256,uint256,address)": {
        "notice": "function to see if a user is exempted from paying a cycle"
      },
      "isUnderCollaterized(uint256,address)": {
        "notice": "Checks if a user has a collateral below 1.0x of total contribution amount"
      },
      "minCollateralToDeposit(uint256,uint256)": {
        "notice": "Called to check the minimum collateral amount to deposit in wei"
      },
      "termAPY(uint256)": {
        "notice": "This function is used to get a term APY"
      },
      "totalYieldGenerated(uint256)": {
        "notice": "This function is used to get the total yield generated for a term"
      },
      "userAPY(uint256,address)": {
        "notice": "This function is used to get a user APY"
      },
      "userHasoptedInYG(uint256,address)": {
        "notice": "This function is used to check if a user has opted in for yield generation"
      },
      "wasExpelled(uint256,address)": {
        "notice": "function to know if a user was expelled before"
      }
    },
    "notice": "Getters for Takaturn protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}