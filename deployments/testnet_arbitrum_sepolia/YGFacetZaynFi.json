{
  "address": "0x1253b989D58b7808936969BAB72ec49f97f99F82",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnWithdrawnBalanceRestored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "optedIn",
          "type": "bool"
        }
      ],
      "name": "OnYGOptInToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldCompensated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnYieldReimbursed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountRestored",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountCompensated",
          "type": "uint256"
        }
      ],
      "name": "OnYieldTermUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "claimAvailableYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "termIds",
          "type": "uint256[]"
        }
      ],
      "name": "reimburseExtraYield",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "termIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "originalWithdrawals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "originalShares",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "rescueStuckYields",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "termIds",
          "type": "uint256[]"
        }
      ],
      "name": "restoreYieldBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "toggleOptInYG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleYieldLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateProviderAddressOnTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "providerString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "providerAddress",
          "type": "address"
        }
      ],
      "name": "updateYieldProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4ddaf325ce348cc43efc8f2b327a4cf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawnBalanceRestored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"optedIn\",\"type\":\"bool\"}],\"name\":\"OnYGOptInToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnYieldReimbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountRestored\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountCompensated\",\"type\":\"uint256\"}],\"name\":\"OnYieldTermUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimAvailableYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"termIds\",\"type\":\"uint256[]\"}],\"name\":\"reimburseExtraYield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"termIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"originalWithdrawals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"originalShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"rescueStuckYields\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"termIds\",\"type\":\"uint256[]\"}],\"name\":\"restoreYieldBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"toggleOptInYG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleYieldLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateProviderAddressOnTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"providerString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"}],\"name\":\"updateYieldProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"details\":\"for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\",\"params\":{\"receiver\":\"The address of the user who will receive the yield\",\"termId\":\"The term id for which the yield is being claimed\"}},\"reimburseExtraYield(uint256[])\":{\"params\":{\"termIds\":\"The term ids for which the yield balance is to be restored\"}},\"rescueStuckYields(uint256[],uint256[],uint256[],address[])\":{\"params\":{\"originalShares\":\"The original calculated shares amounts of each bad transaction\",\"originalWithdrawals\":\"The original ETH withdrawal amounts of each bad transaction\",\"termIds\":\"The term ids for which the yield is being rescued\",\"users\":\"The users to be reimbursed\"}},\"restoreYieldBalance(uint256[])\":{\"params\":{\"termIds\":\"The term ids for which the yield balance is to be restored\"}},\"toggleOptInYG(uint256)\":{\"details\":\"only allowed before the term starts\",\"params\":{\"termId\":\"The term id for which the yield is being claimed\"}},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\",\"termId\":\"The term id for which the yield is being claimed\"}},\"updateYieldProvider(string,address)\":{\"params\":{\"providerAddress\":\"The new address of the provider\",\"providerString\":\"The provider string for which the address is being updated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAvailableYield(uint256,address)\":{\"notice\":\"This function allows a user to claim the current available yield\"},\"reimburseExtraYield(uint256[])\":{\"notice\":\"To be used in case of emergency, when there are more shares deposited than expected\"},\"rescueStuckYields(uint256[],uint256[],uint256[],address[])\":{\"notice\":\"To be used in case of emergency, when yield got stuck in the vaultThe position of each array is used as a set in the calculation\"},\"restoreYieldBalance(uint256[])\":{\"notice\":\"To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\"},\"toggleOptInYG(uint256)\":{\"notice\":\"This function allows a user to toggle their yield generation\"},\"toggleYieldLock()\":{\"notice\":\"This function allows the owner to disable the yield generation feature in case of emergency\"},\"updateProviderAddressOnTerms(uint256,string,address)\":{\"notice\":\"To be used in case of emergency, when the provider needs to change the zap or the vault\"},\"updateYieldProvider(string,address)\":{\"notice\":\"This function allows the owner to update the global variable for new yield provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/YGFacetZaynFi.sol\":\"YGFacetZaynFi\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/YGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\n\\ncontract YGFacetZaynFi is IYGFacetZaynFi {\\n    event OnYGOptInToggled(uint indexed termId, address indexed user, bool indexed optedIn); // Emits when a user succesfully toggles yield generation\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n    event OnYieldReimbursed(uint indexed termId, address indexed user, uint indexed amount);\\n    event OnYieldCompensated(uint indexed termId, address indexed user, uint indexed amount);\\n    event OnWithdrawnBalanceRestored(\\n        uint indexed termId,\\n        address indexed user,\\n        uint indexed amount\\n    );\\n    event OnYieldTermUpdated(\\n        uint indexed termId,\\n        uint indexed amountRestored,\\n        uint indexed amountCompensated\\n    );\\n\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\\n    function claimAvailableYield(uint termId, address receiver) external {\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\n\\n        address[] memory participants = fund.beneficiariesOrder;\\n        uint participantsLength = participants.length;\\n        bool canCall;\\n\\n        for (uint i; i < participantsLength; ) {\\n            if (participants[i] == msg.sender) {\\n                canCall = true;\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        require(canCall, \\\"The caller must be a participant\\\");\\n\\n        LibYieldGeneration._claimAvailableYield(termId, msg.sender, receiver);\\n    }\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\n            ._collateralStorage()\\n            .collaterals[termId];\\n\\n        require(\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\n            \\\"Too late to change YG opt in\\\"\\n        );\\n        require(\\n            collateral.isCollateralMember[msg.sender],\\n            \\\"Pay the collateral security deposit first\\\"\\n        );\\n\\n        bool optIn = !yield.hasOptedIn[msg.sender];\\n        yield.hasOptedIn[msg.sender] = optIn;\\n        emit OnYGOptInToggled(termId, msg.sender, optIn);\\n    }\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(\\n        string memory providerString,\\n        address providerAddress\\n    ) external onlyOwner {\\n        LibYieldGenerationStorage.YieldProviders storage yieldProvider = LibYieldGenerationStorage\\n            ._yieldProviders();\\n\\n        yieldProvider.providerAddresses[providerString] = providerAddress;\\n    }\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external onlyOwner returns (bool) {\\n        bool newYieldLock = !LibYieldGenerationStorage._yieldLock().yieldLock;\\n        LibYieldGenerationStorage._yieldLock().yieldLock = newYieldLock;\\n\\n        return LibYieldGenerationStorage._yieldLock().yieldLock;\\n    }\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external onlyOwner {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[termId];\\n\\n        require(LibFundStorage._fundExists(termId), \\\"Fund does not exist\\\");\\n        require(providerAddress != address(0), \\\"Invalid provider address\\\");\\n        require(\\n            yield.providerAddresses[providerString] != providerAddress,\\n            \\\"Same provider address\\\"\\n        );\\n\\n        yield.providerAddresses[providerString] = providerAddress;\\n    }\\n\\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\\n    /// @notice The position of each array is used as a set in the calculation\\n    /// @param termIds The term ids for which the yield is being rescued\\n    /// @param originalWithdrawals The original ETH withdrawal amounts of each bad transaction\\n    /// @param originalShares The original calculated shares amounts of each bad transaction\\n    /// @param users The users to be reimbursed\\n    function rescueStuckYields(\\n        uint[] memory termIds,\\n        uint[] memory originalWithdrawals,\\n        uint[] memory originalShares,\\n        address[] memory users\\n    ) external payable onlyOwner {\\n        // Start with validating the lengths of the arrays\\n        uint length = termIds.length;\\n        require(\\n            length == originalWithdrawals.length &&\\n                length == originalShares.length &&\\n                length == users.length,\\n            \\\"Arrays don't match\\\"\\n        );\\n\\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\\n\\n        // Start looping through each combination\\n        for (uint i; i < length; ) {\\n            uint termId = termIds[i];\\n            address user = users[i];\\n\\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n                ._yieldStorage()\\n                .yields[termId];\\n\\n            // Make sure user is part of this term and has enabled yield generation\\n            require(yield.hasOptedIn[user], \\\"User not part of yield generation\\\");\\n\\n            // Zaynfi's addresses\\n            address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n            address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n\\n            // Calculate what each user is owed\\n            int reimbursement = _calculateReimbursement(\\n                originalWithdrawals[i],\\n                originalShares[i],\\n                yield\\n            );\\n\\n            if (reimbursement > 0) {\\n                // Reimbursement is positive, this means the user withdrew less shares than he was supposed to\\n                uint neededShares = uint(reimbursement);\\n\\n                // Code copied from _withdrawYG, get the amount of shares back and give it to the user\\n                uint withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    neededShares,\\n                    termId\\n                );\\n\\n                yield.withdrawnYield[user] += withdrawnYield;\\n                yield.availableYield[user] += withdrawnYield;\\n\\n                // Claim the yield right away and send it to the user\\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\\n\\n                emit OnYieldReimbursed(termId, user, withdrawnYield);\\n            } else if (reimbursement < 0) {\\n                // When there is a negative reimbursement, we compensate the pool by adding back the exact amount of shares that were lost\\n                uint neededShares = uint(reimbursement * -1);\\n\\n                // Calculate the amount of eth we need to deposit to get the desired shares\\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\\n\\n                uint neededEth = (15 * neededShares * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\\n                uint sharesBefore = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n\\n                // Make sure we have enough eth\\n                require(neededEth + usedValue <= msg.value, \\\"Not enough ETH value sent\\\");\\n\\n                // Deposit the amount of shares we lost\\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\\n\\n                // Increment the used value so far\\n                usedValue += neededEth;\\n\\n                // Validate the amount of shares deposited\\n                uint sharesAfter = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n\\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    sharesAfter - sharesBefore - neededShares,\\n                    termId\\n                );\\n\\n                uint sharesFinal = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n                require(neededShares == (sharesFinal - sharesBefore), \\\"Final share balance incorrect\\\");\\n\\n                // Give the extra eth back to msg.sender\\n                usedValue -= withdrawnExtraEth;\\n\\n                emit OnYieldCompensated(termId, user, (neededEth - withdrawnExtraEth));\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Reimburse the leftover eth that the msg.sender sent\\n        if (usedValue < msg.value) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\\\"\\\");\\n            require(success, \\\"Failed to send leftover ETH back\\\");\\n        }\\n    }\\n\\n    \\n    /// @notice To be used in case of emergency, when there are more shares deposited than expected\\n    /// @param termIds The term ids for which the yield balance is to be restored\\n    function reimburseExtraYield(uint[] memory termIds) external payable onlyOwner {\\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\\n        for (uint i; i < termIds.length; ) {\\n            uint termId = termIds[i];\\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n                ._yieldStorage()\\n                .yields[termId];\\n\\n            if (!yield.initialized) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            // Zaynfi's addresses\\n            address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n            address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n\\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\\n                yield.totalDeposit;\\n            uint actualShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n\\n            if (actualShares == neededShares) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            address[] memory users = yield.yieldUsers;\\n            uint reimbursed;\\n            uint withdrawnYield;\\n\\n            // Super small values are removed\\n            if ((actualShares - neededShares) < 100000 ) {\\n                // ZapIn some ETH to withdraw the last few shares\\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: 100000 }(vaultAddress, termId);\\n                usedValue += 100000;\\n                withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId) - neededShares,\\n                    termId\\n                );\\n                // Send back to msg.sender because there is no profit here\\n                usedValue -= withdrawnYield;\\n \\n                require(neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId), \\\"Shares target not reached!\\\");\\n\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            \\n            for (uint j; j < users.length; ) {\\n                address user = users[j];\\n\\n                uint toWithdraw;\\n\\n                // Prevent rounding errors and make sure everything is withdrawn. This is done at the last user.\\n                if (j + 1 == users.length) {\\n                    toWithdraw = actualShares - neededShares - reimbursed;\\n                } else {\\n                    // Distribute the extra shares based on the yield distribution ratio\\n                    toWithdraw = (actualShares - neededShares) * yield.depositedCollateralByUser[user] / yield.totalDeposit;\\n                    reimbursed += toWithdraw;\\n                }\\n\\n                // ZapOut the user's portion\\n                withdrawnYield = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    toWithdraw,\\n                    termId\\n                );\\n\\n                yield.withdrawnYield[user] += withdrawnYield;\\n                yield.availableYield[user] += withdrawnYield;\\n\\n                // Claim the yield right away and send it to the user\\n                LibYieldGeneration._claimAvailableYield(termId, user, user);\\n                    \\n                emit OnYieldCompensated(termId, user, withdrawnYield);\\n                \\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            require(neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId), \\\"Shares target not reached!\\\");\\n            \\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        \\n        // Reimburse the leftover eth that the msg.sender sent\\n        if (usedValue < msg.value) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\\\"\\\");\\n            require(success, \\\"Failed to send leftover ETH back\\\");\\n        }\\n    }\\n\\n\\n    /// @notice To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract\\n    /// @param termIds The term ids for which the yield balance is to be restored\\n    function restoreYieldBalance(uint[] memory termIds) external payable onlyOwner {\\n        uint usedValue = 0; // Used to keep track of the lost ETH stored back into zaynfi\\n        // Start looping through each term id\\n        for (uint i; i < termIds.length; ) {\\n            uint termId = termIds[i];\\n            LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n                ._yieldStorage()\\n                .yields[termId];\\n\\n            if (!yield.initialized) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            // Zaynfi's addresses\\n            address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n            address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n\\n            // Validate currentTotalDeposit to match the expected shares\\n            uint neededShares = (yield.currentTotalDeposit * yield.totalShares) /\\n                yield.totalDeposit;\\n\\n            require(neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId), \\\"currentTotalDeposit does not match needed shares!\\\");\\n\\n            // Deal with the case where the user has withdrawn too much eth from yield\\n            // The user did not actually withdraw more ETH to his wallet, just that it was withdrawn back to the smart contract\\n            // So no ETH was lost\\n            address[] memory users = yield.yieldUsers;\\n            uint withdrawnTooMuch;\\n\\n            for (uint j; j < users.length; ) {\\n                address user = users[j];\\n\\n                uint withdraw = yield.withdrawnCollateral[user];\\n                uint deposit = yield.depositedCollateralByUser[user];\\n\\n                if (withdraw > deposit) {\\n                    withdrawnTooMuch += (withdraw - deposit);\\n\\n                    // Restore the withdrawnCollateral amount of the user to what it's supposed to be\\n                    yield.withdrawnCollateral[user] = deposit;\\n\\n                    emit OnWithdrawnBalanceRestored(termId, user, deposit);\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            // Safety check but most likely the case\\n            if (withdrawnTooMuch == 0) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n\\n            // Restore currentTotalDeposit to what it's supposed to be\\n            yield.currentTotalDeposit += withdrawnTooMuch;\\n\\n            // We calculate the current shares we actually need in total for this term\\n            neededShares = (yield.currentTotalDeposit * yield.totalShares) /\\n                yield.totalDeposit;\\n\\n            // withdrawnTooMuch was withdrawn back to the smart contract, we must send it back to the yield vault\\n            IZaynZapV2TakaDAO(zapAddress).zapInEth{value: withdrawnTooMuch}(vaultAddress, termId);\\n\\n            // Get the shares after\\n            uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n            if (neededShares > sharesBalance) {\\n                // If we still need more shares (which is most likely the case), we compensate by putting the missing amount into the vault\\n                // Calculate the amount of eth we need to deposit to get the desired shares\\n                uint pricePerShare = IZaynVaultV2TakaDao(vaultAddress).getPricePerFullShare();\\n\\n                uint neededEth = (15 * (neededShares - sharesBalance) * pricePerShare) / 10 ** 19; // We ask for 150% of the shares we need to compensate for the slippage\\n\\n                // Make sure we have enough eth\\n                require(neededEth + usedValue <= msg.value, \\\"Not enough ETH value sent\\\");\\n\\n                // Deposit the amount of shares we lost\\n                IZaynZapV2TakaDAO(zapAddress).zapInEth{value: neededEth}(vaultAddress, termId);\\n\\n                // Increment the used value so far\\n                usedValue += neededEth;\\n\\n                // Validate the amount of shares deposited\\n                sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId);\\n\\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\\n                uint withdrawnExtraEth = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    sharesBalance - neededShares,\\n                    termId\\n                );\\n\\n                require(neededShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId), \\\"Final share balance incorrect\\\");\\n\\n                // Give the extra eth back to msg.sender\\n                usedValue -= withdrawnExtraEth;\\n\\n                emit OnYieldTermUpdated(termId, withdrawnTooMuch, (neededEth - withdrawnExtraEth));\\n            } else if (sharesBalance > neededShares) {\\n                // If we deposited more shares than we needed, we withdraw the extra shares and send them back to the caller\\n                IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n                    vaultAddress,\\n                    sharesBalance - neededShares,\\n                    termId\\n                );\\n\\n                emit OnYieldTermUpdated(termId, withdrawnTooMuch, 0);\\n            }\\n\\n            // Some sanity checks\\n            uint currentTotalDeposit;\\n            for (uint j; j < users.length; ) {\\n                address user = users[j];\\n                uint withdraw = yield.withdrawnCollateral[user];\\n                uint deposit = yield.depositedCollateralByUser[user];\\n                require(deposit >= withdraw, \\\"Withdraw greater than deposit\\\");\\n\\n                currentTotalDeposit += yield.depositedCollateralByUser[user] - yield.withdrawnCollateral[user];\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            require(yield.currentTotalDeposit == currentTotalDeposit, \\\"currentTotalDeposit invalid\\\");\\n\\n            uint currentShares = currentTotalDeposit * yield.totalShares / yield.totalDeposit;\\n\\n            require(currentShares == IZaynVaultV2TakaDao(vaultAddress).balanceOf(termId), \\\"Shares invalid\\\");\\n\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Reimburse the leftover eth that the msg.sender sent\\n        if (usedValue < msg.value) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value - usedValue}(\\\"\\\");\\n            require(success, \\\"Failed to send leftover ETH back\\\");\\n        }\\n    }\\n\\n    /// @notice To be used in case of emergency, when yield got stuck in the vault\\n    /// @notice The position of each array is used as a set in the calculation\\n    /// @param originalWithdrawal The original ETH withdrawal amount\\n    /// @param originalShares The original calculated shares amount\\n    /// @param yield the reference to the yield\\n    function _calculateReimbursement(\\n        uint originalWithdrawal,\\n        uint originalShares,\\n        LibYieldGenerationStorage.YieldGeneration storage yield\\n    ) internal view returns (int) {\\n        uint correctedShares = (originalWithdrawal * yield.totalShares) / yield.totalDeposit;\\n\\n        if (correctedShares > originalShares) {\\n            return int(correctedShares - originalShares);\\n        } else if (correctedShares < originalShares) {\\n            return int(originalShares - correctedShares) * -1;\\n        }\\n\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x554128e1977bbc8a692fc96b7efb50050d5be75f4748e4a6f85fe97b495c1ab0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\n\\ninterface IYGFacetZaynFi {\\n    /// @notice This function allows a user to claim the current available yield\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param receiver The address of the user who will receive the yield\\n    function claimAvailableYield(uint termId, address receiver) external;\\n\\n    /// @notice This function allows a user to toggle their yield generation\\n    /// @dev only allowed before the term starts\\n    /// @param termId The term id for which the yield is being claimed\\n    function toggleOptInYG(uint termId) external;\\n\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\n\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\n    function toggleYieldLock() external returns (bool);\\n\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\n    /// @param termId The term id for which the yield is being claimed\\n    /// @param providerString The provider string for which the address is being updated\\n    /// @param providerAddress The new address of the provider\\n    function updateProviderAddressOnTerms(\\n        uint termId,\\n        string memory providerString,\\n        address providerAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf56dd1c20333c177d123190b7f854360fc8e6e925f49ad1fe9781a4e5ad56895\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynVaultV2TakaDao {\\n    function totalSupply() external view returns (uint256);\\n\\n    function depositZap(uint256 _amount, uint256 _term) external;\\n\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\n\\n    function want() external view returns (address);\\n\\n    function balance() external view returns (uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function balanceOf(uint256 term) external view returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xee7a30457db30a9e42fb7a83811fc11a9efa4843cca98ef0efb2038e33f04bf2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IZaynZapV2TakaDAO {\\n    function zapInEth(address vault, uint256 termID) external payable;\\n\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\n\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\n}\\n\",\"keccak256\":\"0x7364df81b80a69d857ba6e8156724f4525c0f91c26c48b120fddfdedd20baddc\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibCollateralStorage {\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\n\\n    enum CollateralStates {\\n        AcceptingCollateral, // Initial state where collateral are deposited\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\n        ReleasingCollateral, // Triggered when the fund closes\\n        Closed // Triggered when all depositors withdraw their collaterals\\n    }\\n\\n    struct DefaulterState {\\n        bool payWithCollateral;\\n        bool payWithFrozenPool;\\n        bool gettingExpelled;\\n        bool isBeneficiary;\\n    }\\n\\n    struct Collateral {\\n        bool initialized;\\n        CollateralStates state;\\n        uint firstDepositTime;\\n        uint counterMembers;\\n        address[] depositors;\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\n    }\\n\\n    struct CollateralStorage {\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\n    }\\n\\n    function _collateralExists(uint termId) internal view returns (bool) {\\n        return _collateralStorage().collaterals[termId].initialized;\\n    }\\n\\n    function _collateralStorage()\\n        internal\\n        pure\\n        returns (CollateralStorage storage collateralStorage)\\n    {\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\n        assembly {\\n            collateralStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e38e087f7ab23dfb967d6fae65a7676851fd31a1d2b61d6b63d760ead53f86f\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibFundStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\n\\n    enum FundStates {\\n        InitializingFund, // Time before the first cycle has started\\n        AcceptingContributions, // Triggers at the start of a cycle\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\n    }\\n\\n    struct PayExemption {\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\n    }\\n\\n    struct Fund {\\n        bool initialized;\\n        FundStates currentState; // Variable to keep track of the different FundStates\\n        IERC20 stableToken; // Instance of the stable token\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\n        uint fundStart; // Timestamp of the start of the fund\\n        uint fundEnd; // Timestamp of the end of the fund\\n        uint currentCycle; // Index of current cycle\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\n        uint totalAmountOfCycles;\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\n    }\\n\\n    struct FundStorage {\\n        mapping(uint => Fund) funds; // termId => Fund struct\\n    }\\n\\n    function _fundExists(uint termId) internal view returns (bool) {\\n        return _fundStorage().funds[termId].initialized;\\n    }\\n\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\n        bytes32 position = FUND_STORAGE_POSITION;\\n        assembly {\\n            fundStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8da9bfc4ef1154e188e9fb8249c6314e020355e42dd59830507c122f4ff4d029\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibTermStorage {\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\n\\n    enum TermStates {\\n        InitializingTerm,\\n        ActiveTerm,\\n        ExpiredTerm,\\n        ClosedTerm\\n    }\\n\\n    struct TermConsts {\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\n    }\\n\\n    struct Term {\\n        bool initialized;\\n        TermStates state;\\n        address termOwner;\\n        uint creationTime;\\n        uint termId;\\n        uint registrationPeriod; // Time for registration (seconds)\\n        uint totalParticipants; // Max number of participants\\n        uint cycleTime; // Time for single cycle (seconds)\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\n        uint contributionPeriod; // The portion of cycle user must make payment\\n        address stableTokenAddress;\\n    }\\n\\n    struct TermStorage {\\n        uint nextTermId;\\n        mapping(uint => Term) terms; // termId => Term struct\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\n    }\\n\\n    function _termExists(uint termId) internal view returns (bool) {\\n        return _termStorage().terms[termId].initialized;\\n    }\\n\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\n        bytes32 position = TERM_CONSTS_POSITION;\\n        assembly {\\n            termConsts.slot := position\\n        }\\n    }\\n\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\n        bytes32 position = TERM_STORAGE_POSITION;\\n        assembly {\\n            termStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6cc48faf4702ebe6ad8376ea4fd6f6911c1ee9558c71acee41ba438723780cd\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\n\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\n\\nlibrary LibYieldGeneration {\\n    event OnYieldClaimed(\\n        uint indexed termId,\\n        address indexed user,\\n        address receiver,\\n        uint indexed amount\\n    ); // Emits when a user claims their yield\\n\\n    /// @notice This function is used to deposit collateral for yield generation\\n    /// @param _termId The term id for which the collateral is being deposited\\n    /// @param _ethAmount The amount of collateral being deposited\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        yield.totalDeposit = _ethAmount;\\n        yield.currentTotalDeposit = _ethAmount;\\n\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\n            vaultAddress,\\n            _termId\\n        );\\n\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n    }\\n\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\n    /// @param _termId The term id for which the collateral is being withdrawn\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\n    /// @param _user The user address that is withdrawing the collateral\\n    function _withdrawYG(\\n        uint _termId,\\n        uint256 _collateralAmount,\\n        address _user\\n    ) internal returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\n\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\n        yield.currentTotalDeposit -= _collateralAmount;\\n\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\n\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\n\\n        // Prevent rounding errors\\n        if (neededShares > sharesBalance) {\\n            if (neededShares - sharesBalance < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        } else {\\n            if (sharesBalance - neededShares < 10000) {\\n                neededShares = sharesBalance;\\n            }\\n        }\\n\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\n            vaultAddress,\\n            neededShares,\\n            _termId\\n        );\\n\\n        if (withdrawnAmount < _collateralAmount) {\\n            return 0;\\n        } else {\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\n            yield.withdrawnYield[_user] += withdrawnYield;\\n            yield.availableYield[_user] += withdrawnYield;\\n\\n            return withdrawnYield;\\n        }\\n    }\\n\\n    /// @notice Conversion from shares to eth\\n    /// @param _termId The term id\\n    /// @param _yield The yield generation struct\\n    function _sharesToEth(\\n        uint _termId,\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\n    ) internal view returns (uint) {\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        return (termBalance * pricePerShare) / 10 ** 18;\\n    }\\n\\n    /// @notice Conversion from eth to shares\\n    /// @param _collateralAmount The amount of collateral to withdraw\\n    /// @param _totalShares The total shares in the yield from the term\\n    /// @param _totalDeposit The total deposit in the yield from the term\\n    function _neededShares(\\n        uint _collateralAmount,\\n        uint _totalShares,\\n        uint _totalDeposit\\n    ) internal pure returns (uint) {\\n        if (_totalDeposit == 0) return 0;\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\n    }\\n\\n    /// @notice This function is used to get the current total yield generated for a term\\n    /// @param _termId The term id for which the yield is being calculated\\n    /// @return The total yield generated for the term\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\n            _termId\\n        );\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\n            .getPricePerFullShare();\\n\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\n        if (sharesInEth > yield.currentTotalDeposit) {\\n            return sharesInEth - yield.currentTotalDeposit;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the yield distribution ratio for a user\\n    /// @param _termId The term id for which the ratio is being calculated\\n    /// @param _user The user for which the ratio is being calculated\\n    /// @return The yield distribution ratio for the user\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        if (yield.currentTotalDeposit == 0) {\\n            return 0;\\n        } else {\\n            return\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\n                    10 ** 18) / yield.totalDeposit;\\n        }\\n    }\\n\\n    /// @notice This function is used to get the total yield generated for a user\\n    /// @param termId The term id for which the yield is being calculated\\n    /// @param user The user for which the yield is being calculated\\n    /// @return The total yield generated for the user\\n    function _unwithdrawnUserYieldGenerated(\\n        uint termId,\\n        address user\\n    ) internal view returns (uint) {\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\n\\n        return yieldDistributed;\\n    }\\n\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\n            ._yieldStorage()\\n            .yields[_termId];\\n\\n        uint availableYield = yield.availableYield[_user];\\n\\n        require(availableYield > 0, \\\"No yield to withdraw\\\");\\n\\n        yield.availableYield[_user] = 0;\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\n        require(success);\\n\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\n    }\\n}\\n\",\"keccak256\":\"0x45b60cca81a7d9669ad0f54d5c30e9e9f6919ae7009d3097d3f6dc80a8f3f868\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nlibrary LibYieldGenerationStorage {\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\n\\n    enum YGProviders {\\n        InHouse,\\n        ZaynFi\\n    }\\n\\n    struct YieldLock {\\n        bool yieldLock;\\n    }\\n\\n    // Both index 0 are reserved for ZaynFi\\n    struct YieldProviders {\\n        mapping(string => address) providerAddresses;\\n    }\\n\\n    struct YieldGeneration {\\n        bool initialized;\\n        YGProviders provider;\\n        mapping(string => address) providerAddresses;\\n        uint startTimeStamp;\\n        uint totalDeposit;\\n        uint currentTotalDeposit;\\n        uint totalShares;\\n        address[] yieldUsers;\\n        mapping(address => bool) hasOptedIn;\\n        mapping(address => uint256) withdrawnYield;\\n        mapping(address => uint256) withdrawnCollateral;\\n        mapping(address => uint256) availableYield;\\n        mapping(address => uint256) depositedCollateralByUser;\\n    }\\n\\n    struct YieldStorage {\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\n    }\\n\\n    function _yieldExists(uint termId) internal view returns (bool) {\\n        return _yieldStorage().yields[termId].initialized;\\n    }\\n\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\n        bytes32 position = YIELD_LOCK_POSITION;\\n        assembly {\\n            yieldLock.slot := position\\n        }\\n    }\\n\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\n        assembly {\\n            yieldProviders.slot := position\\n        }\\n    }\\n\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\n        bytes32 position = YIELD_STORAGE_POSITION;\\n        assembly {\\n            yieldStorage.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1c7ea8a7018a0d03d382bb84f31fb6bfabd585315545f9d7bf09475c3f6dcef\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612744806100206000396000f3fe60806040526004361061007b5760003560e01c8063c8eeb5781161004e578063c8eeb578146100e8578063efbb976114610111578063f6a40d2a14610131578063f741e19e1461015157600080fd5b806327ff9f351461008057806383da1d76146100a257806383de6e99146100c25780639253c073146100d5575b600080fd5b34801561008c57600080fd5b506100a061009b366004612227565b610164565b005b3480156100ae57600080fd5b506100a06100bd366004612313565b6102e3565b6100a06100d03660046123f0565b610353565b6100a06100e33660046124f7565b610b45565b3480156100f457600080fd5b506100fd61123e565b604051901515815260200160405180910390f35b34801561011d57600080fd5b506100a061012c366004612534565b611281565b34801561013d57600080fd5b506100a061014c36600461258b565b61142c565b6100a061015f3660046124f7565b611565565b60008181526000805160206126ef833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff1660038111156101c7576101c76125ae565b146102195760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff1661028c5760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b6064820152608401610210565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b6102eb611ffd565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977908290829061031f9086906125c4565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b61035b611ffd565b835183518114801561036d5750825181145b80156103795750815181145b6103ba5760405162461bcd60e51b8152602060048201526012602482015271082e4e4c2f2e640c8dedc4ee840dac2e8c6d60731b6044820152606401610210565b6000805b82811015610a935760008782815181106103da576103da6125f3565b6020026020010151905060008583815181106103f8576103f86125f3565b6020026020010151905060006104196000805160206126ef83398151915290565b6000848152602091825260408082206001600160a01b03861683526007810190935290205490915060ff1661049a5760405162461bcd60e51b815260206004820152602160248201527f55736572206e6f742070617274206f66207969656c642067656e65726174696f6044820152603760f91b6064820152608401610210565b6000816001016040516104bc906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316915060009060018401906104f6906605a61796e5a61760cc1b815260070190565b908152602001604051809103902060009054906101000a90046001600160a01b0316905060006105598c8881518110610531576105316125f3565b60200260200101518c898151811061054b5761054b6125f3565b602002602001015186612086565b90506000811315610689576040516316d5e29b60e11b815281906000906001600160a01b03851690632dabc5369061059990889086908d90600401612609565b6020604051808303816000875af11580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc919061262a565b6001600160a01b038816600090815260088801602052604081208054929350839290919061060b908490612659565b90915550506001600160a01b0387166000908152600a870160205260408120805483929061063a908490612659565b9091555061064b90508888806120ef565b80876001600160a01b0316897e94f0db15b32d9d12a13c5a2c4be5153bda7550fd0cbf0abc3fc6a5d0d41d7a60405160405180910390a45050610a82565b6000811215610a825760006106a082600019612672565b90506000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610706919061262a565b90506000678ac7230489e800008261071f85600f6126a2565b61072991906126a2565b61073391906126b9565b604051631398fee160e31b8152600481018b90529091506000906001600160a01b03881690639cc7f70890602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a2919061262a565b9050346107af8d84612659565b11156107f95760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b6044820152606401610210565b604051632af34be360e11b81526001600160a01b038881166004830152602482018c90528716906355e697c69084906044016000604051808303818588803b15801561084457600080fd5b505af1158015610858573d6000803e3d6000fd5b5050505050818c6108699190612659565b604051631398fee160e31b8152600481018c9052909c506000906001600160a01b03891690639cc7f70890602401602060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d8919061262a565b905060006001600160a01b038816632dabc5368a886108f787876126db565b61090191906126db565b8f6040518463ffffffff1660e01b815260040161092093929190612609565b6020604051808303816000875af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061262a565b604051631398fee160e31b8152600481018e90529091506000906001600160a01b038b1690639cc7f70890602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d2919061262a565b90506109de84826126db565b8714610a2c5760405162461bcd60e51b815260206004820152601d60248201527f46696e616c2073686172652062616c616e636520696e636f72726563740000006044820152606401610210565b818f610a3891906126db565b9e50610a4482866126db565b6040516001600160a01b038e16908f907fb661b35109646d6776b783a742f7e50d155cebc74454b6b8ab6dec5cf6f0a2e890600090a4505050505050505b8660010196505050505050506103be565b5034811015610b3d57600033610aa983346126db565b604051600081818185875af1925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5050905080610b3b5760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b6044820152606401610210565b505b505050505050565b610b4d611ffd565b6000805b8251811015611190576000838281518110610b6e57610b6e6125f3565b602002602001015190506000610b8f6000805160206126ef83398151915290565b600083815260209190915260409020805490915060ff16610bb4575050600101610b51565b600081600101604051610bd6906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b031691506000906001840190610c10906605a61796e5a61760cc1b815260070190565b908152604051908190036020019020546003840154600585015460048601546001600160a01b039093169350600092610c4991906126a2565b610c5391906126b9565b604051631398fee160e31b8152600481018790529091506000906001600160a01b03851690639cc7f70890602401602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc2919061262a565b9050818103610cdc57866001019650505050505050610b51565b600085600601805480602002602001604051908101604052809291908181526020018280548015610d3657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d18575b50505050509050600080620186a08585610d5091906126db565b1015610f9557604051632af34be360e11b81526001600160a01b038881166004830152602482018b90528716906355e697c690620186a0906044016000604051808303818588803b158015610da457600080fd5b505af1158015610db8573d6000803e3d6000fd5b5050505050620186a08b610dcc9190612659565b9a50856001600160a01b0316632dabc53688878a6001600160a01b0316639cc7f7088e6040518263ffffffff1660e01b8152600401610e0d91815260200190565b602060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e919061262a565b610e5891906126db565b8c6040518463ffffffff1660e01b8152600401610e7793929190612609565b6020604051808303816000875af1158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba919061262a565b9050610ec6818c6126db565b604051631398fee160e31b8152600481018b9052909b506001600160a01b03881690639cc7f708906024015b602060405180830381865afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f33919061262a565b8514610f815760405162461bcd60e51b815260206004820152601a60248201527f53686172657320746172676574206e6f742072656163686564210000000000006044820152606401610210565b896001019950505050505050505050610b51565b60005b8351811015611162576000848281518110610fb557610fb56125f3565b6020026020010151905060008551836001610fd09190612659565b03610ff15784610fe089896126db565b610fea91906126db565b905061103e565b60038b01546001600160a01b0383166000908152600b8d01602052604090205461101b8a8a6126db565b61102591906126a2565b61102f91906126b9565b905061103b8186612659565b94505b886001600160a01b0316632dabc5368b838f6040518463ffffffff1660e01b815260040161106e93929190612609565b6020604051808303816000875af115801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b1919061262a565b6001600160a01b038316600090815260088d0160205260408120805492965086929091906110e0908490612659565b90915550506001600160a01b0382166000908152600a8c0160205260408120805486929061110f908490612659565b9091555061112090508c83806120ef565b83826001600160a01b03168d7fb661b35109646d6776b783a742f7e50d155cebc74454b6b8ab6dec5cf6f0a2e860405160405180910390a45050600101610f98565b50604051631398fee160e31b8152600481018a90526001600160a01b03881690639cc7f70890602401610ef2565b503481101561123a576000336111a683346126db565b604051600081818185875af1925050503d80600081146111e2576040519150601f19603f3d011682016040523d82523d6000602084013e6111e7565b606091505b50509050806112385760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b6044820152606401610210565b505b5050565b6000611248611ffd565b507f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f3805460ff19811660ff918216159081179092551690565b611289611ffd565b60008381526000805160206126ef833981519152602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9092529091205460ff166113145760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610210565b6001600160a01b03821661136a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606401610210565b816001600160a01b0316816001018460405161138691906125c4565b908152604051908190036020019020546001600160a01b0316036113e45760405162461bcd60e51b815260206004820152601560248201527453616d652070726f7669646572206164647265737360581b6044820152606401610210565b8181600101846040516113f791906125c4565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050565b60008281527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c602090815260408083206001810180548351818602810186019094528084529194939091908301828280156114b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611492575b505050505090506000815190506000805b8281101561150c57336001600160a01b03168482815181106114e5576114e56125f3565b60200260200101516001600160a01b031603611504576001915061150c565b6001016114c1565b508061155a5760405162461bcd60e51b815260206004820181905260248201527f5468652063616c6c6572206d7573742062652061207061727469636970616e746044820152606401610210565b610b3d8633876120ef565b61156d611ffd565b6000805b825181101561119057600083828151811061158e5761158e6125f3565b6020026020010151905060006115af6000805160206126ef83398151915290565b600083815260209190915260409020805490915060ff166115d4575050600101611571565b6000816001016040516115f6906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b031691506000906001840190611630906605a61796e5a61760cc1b815260070190565b908152604051908190036020019020546003840154600585015460048601546001600160a01b03909316935060009261166991906126a2565b61167391906126b9565b604051631398fee160e31b8152600481018790529091506001600160a01b03841690639cc7f70890602401602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df919061262a565b81146117475760405162461bcd60e51b815260206004820152603160248201527f63757272656e74546f74616c4465706f73697420646f6573206e6f74206d61746044820152706368206e6565646564207368617265732160781b6064820152608401610210565b6000846006018054806020026020016040519081016040528092919081815260200182805480156117a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611783575b505050505090506000805b82518110156118715760008382815181106117c9576117c96125f3565b6020908102919091018101516001600160a01b038116600090815260098b018352604080822054600b8d01909452902054909250808211156118635761180f81836126db565b6118199086612659565b6001600160a01b038416600081815260098d0160205260408082208590555192975083928e917fc12f54eeeae0f5ca9f6561845a215b9d282ff63875074a39ac0679eb904bd80491a45b8360010193505050506117ac565b508060000361188c5787600101975050505050505050611571565b808660040160008282546118a09190612659565b90915550506003860154600587015460048801546118be91906126a2565b6118c891906126b9565b604051632af34be360e11b81526001600160a01b038781166004830152602482018a9052919450908516906355e697c69083906044016000604051808303818588803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018b9052600093506001600160a01b0389169250639cc7f7089150602401602060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c919061262a565b905080841115611cf9576000866001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a919061262a565b90506000678ac7230489e8000082611a2285896126db565b611a2d90600f6126a2565b611a3791906126a2565b611a4191906126b9565b905034611a4e8d83612659565b1115611a985760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b6044820152606401610210565b604051632af34be360e11b81526001600160a01b038981166004830152602482018c90528816906355e697c69083906044016000604051808303818588803b158015611ae357600080fd5b505af1158015611af7573d6000803e3d6000fd5b5050505050808c611b089190612659565b604051631398fee160e31b8152600481018c9052909c506001600160a01b03891690639cc7f70890602401602060405180830381865afa158015611b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b74919061262a565b925060006001600160a01b038816632dabc5368a611b928a886126db565b8e6040518463ffffffff1660e01b8152600401611bb193929190612609565b6020604051808303816000875af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf4919061262a565b604051631398fee160e31b8152600481018d90529091506001600160a01b038a1690639cc7f70890602401602060405180830381865afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c60919061262a565b8714611cae5760405162461bcd60e51b815260206004820152601d60248201527f46696e616c2073686172652062616c616e636520696e636f72726563740000006044820152606401610210565b611cb8818e6126db565b9c50611cc481836126db565b60405186908d907fd061db9ba41d1cdaa449d1cc902bdabf9f54ecf0ea1e6f32695e61d70dd039aa90600090a4505050611daf565b83811115611daf576001600160a01b038516632dabc53687611d1b87856126db565b8b6040518463ffffffff1660e01b8152600401611d3a93929190612609565b6020604051808303816000875af1158015611d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7d919061262a565b50600082897fd061db9ba41d1cdaa449d1cc902bdabf9f54ecf0ea1e6f32695e61d70dd039aa60405160405180910390a45b6000805b8451811015611ec8576000858281518110611dd057611dd06125f3565b6020908102919091018101516001600160a01b038116600090815260098d018352604080822054600b8f0190945290205490925081811015611e545760405162461bcd60e51b815260206004820152601d60248201527f57697468647261772067726561746572207468616e206465706f7369740000006044820152606401610210565b8b6009016000846001600160a01b03166001600160a01b03168152602001908152602001600020548c600b016000856001600160a01b03166001600160a01b0316815260200190815260200160002054611eae91906126db565b611eb89086612659565b9450836001019350505050611db3565b5080886004015414611f1c5760405162461bcd60e51b815260206004820152601b60248201527f63757272656e74546f74616c4465706f73697420696e76616c696400000000006044820152606401610210565b60008860030154896005015483611f3391906126a2565b611f3d91906126b9565b604051631398fee160e31b8152600481018c90529091506001600160a01b03891690639cc7f70890602401602060405180830381865afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa9919061262a565b8114611fe85760405162461bcd60e51b815260206004820152600e60248201526d14da185c995cc81a5b9d985b1a5960921b6044820152606401610210565b8a6001019a5050505050505050505050611571565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146120845760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610210565b565b600080826003015483600501548661209e91906126a2565b6120a891906126b9565b9050838111156120c4576120bc84826126db565b9150506120e8565b838110156120e2576120d681856126db565b6120bc90600019612672565b60009150505b9392505050565b60008381526000805160206126ef833981519152602090815260408083206001600160a01b0386168452600a810190925290912054806121685760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610210565b6001600160a01b038481166000908152600a8401602052604080822082905551909185169083908381818185875af1925050503d80600081146121c7576040519150601f19603f3d011682016040523d82523d6000602084013e6121cc565b606091505b50509050806121da57600080fd5b6040516001600160a01b03858116825283919087169088907fdb2460ca9a22614b8fe3f598b727569022250e691340edbbaf8ff069969155f09060200160405180910390a4505050505050565b60006020828403121561223957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561227f5761227f612240565b604052919050565b600082601f83011261229857600080fd5b813567ffffffffffffffff8111156122b2576122b2612240565b6122c5601f8201601f1916602001612256565b8181528460208386010111156122da57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461230e57600080fd5b919050565b6000806040838503121561232657600080fd5b823567ffffffffffffffff81111561233d57600080fd5b61234985828601612287565b925050612358602084016122f7565b90509250929050565b600067ffffffffffffffff82111561237b5761237b612240565b5060051b60200190565b600082601f83011261239657600080fd5b813560206123ab6123a683612361565b612256565b82815260059290921b840181019181810190868411156123ca57600080fd5b8286015b848110156123e557803583529183019183016123ce565b509695505050505050565b6000806000806080858703121561240657600080fd5b843567ffffffffffffffff8082111561241e57600080fd5b61242a88838901612385565b955060209150818701358181111561244157600080fd5b61244d89828a01612385565b95505060408701358181111561246257600080fd5b61246e89828a01612385565b94505060608701358181111561248357600080fd5b87019050601f8101881361249657600080fd5b80356124a46123a682612361565b81815260059190911b8201830190838101908a8311156124c357600080fd5b928401925b828410156124e8576124d9846122f7565b825292840192908401906124c8565b979a9699509497505050505050565b60006020828403121561250957600080fd5b813567ffffffffffffffff81111561252057600080fd5b61252c84828501612385565b949350505050565b60008060006060848603121561254957600080fd5b83359250602084013567ffffffffffffffff81111561256757600080fd5b61257386828701612287565b925050612582604085016122f7565b90509250925092565b6000806040838503121561259e57600080fd5b82359150612358602084016122f7565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156125e557602081860181015185830152016125cb565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b60006020828403121561263c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561266c5761266c612643565b92915050565b80820260008212600160ff1b8414161561268e5761268e612643565b818105831482151761266c5761266c612643565b808202811582820484141761266c5761266c612643565b6000826126d657634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561266c5761266c61264356fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a264697066735822122007775e500a6b0fb8bdb51c0554983ac473e0b0f889496e47515f11cf0e40506764736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063c8eeb5781161004e578063c8eeb578146100e8578063efbb976114610111578063f6a40d2a14610131578063f741e19e1461015157600080fd5b806327ff9f351461008057806383da1d76146100a257806383de6e99146100c25780639253c073146100d5575b600080fd5b34801561008c57600080fd5b506100a061009b366004612227565b610164565b005b3480156100ae57600080fd5b506100a06100bd366004612313565b6102e3565b6100a06100d03660046123f0565b610353565b6100a06100e33660046124f7565b610b45565b3480156100f457600080fd5b506100fd61123e565b604051901515815260200160405180910390f35b34801561011d57600080fd5b506100a061012c366004612534565b611281565b34801561013d57600080fd5b506100a061014c36600461258b565b61142c565b6100a061015f3660046124f7565b611565565b60008181526000805160206126ef833981519152602090815260408083207f35fa70a6f9ae8a4d427ebe0c1be62ffd2870fecc1df41c6fda0bf5803e5628889092528220805491929091610100900460ff1660038111156101c7576101c76125ae565b146102195760405162461bcd60e51b815260206004820152601c60248201527f546f6f206c61746520746f206368616e6765205947206f707420696e0000000060448201526064015b60405180910390fd5b33600090815260048201602052604090205460ff1661028c5760405162461bcd60e51b815260206004820152602960248201527f5061792074686520636f6c6c61746572616c207365637572697479206465706f6044820152681cda5d08199a5c9cdd60ba1b6064820152608401610210565b336000818152600784016020526040808220805460ff81161560ff199091168117909155905190928392909187917f9c0d71d8ccd3ac3b8b8463f9dff1237a9e545a61f6e803ee0948ff02c7cef56691a450505050565b6102eb611ffd565b6040517ff27a5986330dc78d016d8604ee1a040d5a789fbaa2d0c27f5dfded4b616b8977908290829061031f9086906125c4565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055505050565b61035b611ffd565b835183518114801561036d5750825181145b80156103795750815181145b6103ba5760405162461bcd60e51b8152602060048201526012602482015271082e4e4c2f2e640c8dedc4ee840dac2e8c6d60731b6044820152606401610210565b6000805b82811015610a935760008782815181106103da576103da6125f3565b6020026020010151905060008583815181106103f8576103f86125f3565b6020026020010151905060006104196000805160206126ef83398151915290565b6000848152602091825260408082206001600160a01b03861683526007810190935290205490915060ff1661049a5760405162461bcd60e51b815260206004820152602160248201527f55736572206e6f742070617274206f66207969656c642067656e65726174696f6044820152603760f91b6064820152608401610210565b6000816001016040516104bc906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b0316915060009060018401906104f6906605a61796e5a61760cc1b815260070190565b908152602001604051809103902060009054906101000a90046001600160a01b0316905060006105598c8881518110610531576105316125f3565b60200260200101518c898151811061054b5761054b6125f3565b602002602001015186612086565b90506000811315610689576040516316d5e29b60e11b815281906000906001600160a01b03851690632dabc5369061059990889086908d90600401612609565b6020604051808303816000875af11580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc919061262a565b6001600160a01b038816600090815260088801602052604081208054929350839290919061060b908490612659565b90915550506001600160a01b0387166000908152600a870160205260408120805483929061063a908490612659565b9091555061064b90508888806120ef565b80876001600160a01b0316897e94f0db15b32d9d12a13c5a2c4be5153bda7550fd0cbf0abc3fc6a5d0d41d7a60405160405180910390a45050610a82565b6000811215610a825760006106a082600019612672565b90506000846001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610706919061262a565b90506000678ac7230489e800008261071f85600f6126a2565b61072991906126a2565b61073391906126b9565b604051631398fee160e31b8152600481018b90529091506000906001600160a01b03881690639cc7f70890602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a2919061262a565b9050346107af8d84612659565b11156107f95760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b6044820152606401610210565b604051632af34be360e11b81526001600160a01b038881166004830152602482018c90528716906355e697c69084906044016000604051808303818588803b15801561084457600080fd5b505af1158015610858573d6000803e3d6000fd5b5050505050818c6108699190612659565b604051631398fee160e31b8152600481018c9052909c506000906001600160a01b03891690639cc7f70890602401602060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d8919061262a565b905060006001600160a01b038816632dabc5368a886108f787876126db565b61090191906126db565b8f6040518463ffffffff1660e01b815260040161092093929190612609565b6020604051808303816000875af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061262a565b604051631398fee160e31b8152600481018e90529091506000906001600160a01b038b1690639cc7f70890602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d2919061262a565b90506109de84826126db565b8714610a2c5760405162461bcd60e51b815260206004820152601d60248201527f46696e616c2073686172652062616c616e636520696e636f72726563740000006044820152606401610210565b818f610a3891906126db565b9e50610a4482866126db565b6040516001600160a01b038e16908f907fb661b35109646d6776b783a742f7e50d155cebc74454b6b8ab6dec5cf6f0a2e890600090a4505050505050505b8660010196505050505050506103be565b5034811015610b3d57600033610aa983346126db565b604051600081818185875af1925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5050905080610b3b5760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b6044820152606401610210565b505b505050505050565b610b4d611ffd565b6000805b8251811015611190576000838281518110610b6e57610b6e6125f3565b602002602001015190506000610b8f6000805160206126ef83398151915290565b600083815260209190915260409020805490915060ff16610bb4575050600101610b51565b600081600101604051610bd6906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b031691506000906001840190610c10906605a61796e5a61760cc1b815260070190565b908152604051908190036020019020546003840154600585015460048601546001600160a01b039093169350600092610c4991906126a2565b610c5391906126b9565b604051631398fee160e31b8152600481018790529091506000906001600160a01b03851690639cc7f70890602401602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc2919061262a565b9050818103610cdc57866001019650505050505050610b51565b600085600601805480602002602001604051908101604052809291908181526020018280548015610d3657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d18575b50505050509050600080620186a08585610d5091906126db565b1015610f9557604051632af34be360e11b81526001600160a01b038881166004830152602482018b90528716906355e697c690620186a0906044016000604051808303818588803b158015610da457600080fd5b505af1158015610db8573d6000803e3d6000fd5b5050505050620186a08b610dcc9190612659565b9a50856001600160a01b0316632dabc53688878a6001600160a01b0316639cc7f7088e6040518263ffffffff1660e01b8152600401610e0d91815260200190565b602060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e919061262a565b610e5891906126db565b8c6040518463ffffffff1660e01b8152600401610e7793929190612609565b6020604051808303816000875af1158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba919061262a565b9050610ec6818c6126db565b604051631398fee160e31b8152600481018b9052909b506001600160a01b03881690639cc7f708906024015b602060405180830381865afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f33919061262a565b8514610f815760405162461bcd60e51b815260206004820152601a60248201527f53686172657320746172676574206e6f742072656163686564210000000000006044820152606401610210565b896001019950505050505050505050610b51565b60005b8351811015611162576000848281518110610fb557610fb56125f3565b6020026020010151905060008551836001610fd09190612659565b03610ff15784610fe089896126db565b610fea91906126db565b905061103e565b60038b01546001600160a01b0383166000908152600b8d01602052604090205461101b8a8a6126db565b61102591906126a2565b61102f91906126b9565b905061103b8186612659565b94505b886001600160a01b0316632dabc5368b838f6040518463ffffffff1660e01b815260040161106e93929190612609565b6020604051808303816000875af115801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b1919061262a565b6001600160a01b038316600090815260088d0160205260408120805492965086929091906110e0908490612659565b90915550506001600160a01b0382166000908152600a8c0160205260408120805486929061110f908490612659565b9091555061112090508c83806120ef565b83826001600160a01b03168d7fb661b35109646d6776b783a742f7e50d155cebc74454b6b8ab6dec5cf6f0a2e860405160405180910390a45050600101610f98565b50604051631398fee160e31b8152600481018a90526001600160a01b03881690639cc7f70890602401610ef2565b503481101561123a576000336111a683346126db565b604051600081818185875af1925050503d80600081146111e2576040519150601f19603f3d011682016040523d82523d6000602084013e6111e7565b606091505b50509050806112385760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e64206c6566746f76657220455448206261636b6044820152606401610210565b505b5050565b6000611248611ffd565b507f7c039906f7f8ca11e01b6987a88513563589699678f7d2a6c8447f44d69375f3805460ff19811660ff918216159081179092551690565b611289611ffd565b60008381526000805160206126ef833981519152602090815260408083207f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c9092529091205460ff166113145760405162461bcd60e51b8152602060048201526013602482015272119d5b9908191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610210565b6001600160a01b03821661136a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606401610210565b816001600160a01b0316816001018460405161138691906125c4565b908152604051908190036020019020546001600160a01b0316036113e45760405162461bcd60e51b815260206004820152601560248201527453616d652070726f7669646572206164647265737360581b6044820152606401610210565b8181600101846040516113f791906125c4565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050565b60008281527f6751f7e27cecf86d7136f5749c224248cae80a39fafb59f8f6bf12c52816307c602090815260408083206001810180548351818602810186019094528084529194939091908301828280156114b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611492575b505050505090506000815190506000805b8281101561150c57336001600160a01b03168482815181106114e5576114e56125f3565b60200260200101516001600160a01b031603611504576001915061150c565b6001016114c1565b508061155a5760405162461bcd60e51b815260206004820181905260248201527f5468652063616c6c6572206d7573742062652061207061727469636970616e746044820152606401610210565b610b3d8633876120ef565b61156d611ffd565b6000805b825181101561119057600083828151811061158e5761158e6125f3565b6020026020010151905060006115af6000805160206126ef83398151915290565b600083815260209190915260409020805490915060ff166115d4575050600101611571565b6000816001016040516115f6906816985e5b95985d5b1d60ba1b815260090190565b908152604051908190036020018120546001600160a01b031691506000906001840190611630906605a61796e5a61760cc1b815260070190565b908152604051908190036020019020546003840154600585015460048601546001600160a01b03909316935060009261166991906126a2565b61167391906126b9565b604051631398fee160e31b8152600481018790529091506001600160a01b03841690639cc7f70890602401602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df919061262a565b81146117475760405162461bcd60e51b815260206004820152603160248201527f63757272656e74546f74616c4465706f73697420646f6573206e6f74206d61746044820152706368206e6565646564207368617265732160781b6064820152608401610210565b6000846006018054806020026020016040519081016040528092919081815260200182805480156117a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611783575b505050505090506000805b82518110156118715760008382815181106117c9576117c96125f3565b6020908102919091018101516001600160a01b038116600090815260098b018352604080822054600b8d01909452902054909250808211156118635761180f81836126db565b6118199086612659565b6001600160a01b038416600081815260098d0160205260408082208590555192975083928e917fc12f54eeeae0f5ca9f6561845a215b9d282ff63875074a39ac0679eb904bd80491a45b8360010193505050506117ac565b508060000361188c5787600101975050505050505050611571565b808660040160008282546118a09190612659565b90915550506003860154600587015460048801546118be91906126a2565b6118c891906126b9565b604051632af34be360e11b81526001600160a01b038781166004830152602482018a9052919450908516906355e697c69083906044016000604051808303818588803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b5050604051631398fee160e31b8152600481018b9052600093506001600160a01b0389169250639cc7f7089150602401602060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c919061262a565b905080841115611cf9576000866001600160a01b03166377c7b8fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a919061262a565b90506000678ac7230489e8000082611a2285896126db565b611a2d90600f6126a2565b611a3791906126a2565b611a4191906126b9565b905034611a4e8d83612659565b1115611a985760405162461bcd60e51b8152602060048201526019602482015278139bdd08195b9bdd59da08115512081d985b1d59481cd95b9d603a1b6044820152606401610210565b604051632af34be360e11b81526001600160a01b038981166004830152602482018c90528816906355e697c69083906044016000604051808303818588803b158015611ae357600080fd5b505af1158015611af7573d6000803e3d6000fd5b5050505050808c611b089190612659565b604051631398fee160e31b8152600481018c9052909c506001600160a01b03891690639cc7f70890602401602060405180830381865afa158015611b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b74919061262a565b925060006001600160a01b038816632dabc5368a611b928a886126db565b8e6040518463ffffffff1660e01b8152600401611bb193929190612609565b6020604051808303816000875af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf4919061262a565b604051631398fee160e31b8152600481018d90529091506001600160a01b038a1690639cc7f70890602401602060405180830381865afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c60919061262a565b8714611cae5760405162461bcd60e51b815260206004820152601d60248201527f46696e616c2073686172652062616c616e636520696e636f72726563740000006044820152606401610210565b611cb8818e6126db565b9c50611cc481836126db565b60405186908d907fd061db9ba41d1cdaa449d1cc902bdabf9f54ecf0ea1e6f32695e61d70dd039aa90600090a4505050611daf565b83811115611daf576001600160a01b038516632dabc53687611d1b87856126db565b8b6040518463ffffffff1660e01b8152600401611d3a93929190612609565b6020604051808303816000875af1158015611d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7d919061262a565b50600082897fd061db9ba41d1cdaa449d1cc902bdabf9f54ecf0ea1e6f32695e61d70dd039aa60405160405180910390a45b6000805b8451811015611ec8576000858281518110611dd057611dd06125f3565b6020908102919091018101516001600160a01b038116600090815260098d018352604080822054600b8f0190945290205490925081811015611e545760405162461bcd60e51b815260206004820152601d60248201527f57697468647261772067726561746572207468616e206465706f7369740000006044820152606401610210565b8b6009016000846001600160a01b03166001600160a01b03168152602001908152602001600020548c600b016000856001600160a01b03166001600160a01b0316815260200190815260200160002054611eae91906126db565b611eb89086612659565b9450836001019350505050611db3565b5080886004015414611f1c5760405162461bcd60e51b815260206004820152601b60248201527f63757272656e74546f74616c4465706f73697420696e76616c696400000000006044820152606401610210565b60008860030154896005015483611f3391906126a2565b611f3d91906126b9565b604051631398fee160e31b8152600481018c90529091506001600160a01b03891690639cc7f70890602401602060405180830381865afa158015611f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa9919061262a565b8114611fe85760405162461bcd60e51b815260206004820152600e60248201526d14da185c995cc81a5b9d985b1a5960921b6044820152606401610210565b8a6001019a5050505050505050505050611571565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146120845760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610210565b565b600080826003015483600501548661209e91906126a2565b6120a891906126b9565b9050838111156120c4576120bc84826126db565b9150506120e8565b838110156120e2576120d681856126db565b6120bc90600019612672565b60009150505b9392505050565b60008381526000805160206126ef833981519152602090815260408083206001600160a01b0386168452600a810190925290912054806121685760405162461bcd60e51b81526020600482015260146024820152734e6f207969656c6420746f20776974686472617760601b6044820152606401610210565b6001600160a01b038481166000908152600a8401602052604080822082905551909185169083908381818185875af1925050503d80600081146121c7576040519150601f19603f3d011682016040523d82523d6000602084013e6121cc565b606091505b50509050806121da57600080fd5b6040516001600160a01b03858116825283919087169088907fdb2460ca9a22614b8fe3f598b727569022250e691340edbbaf8ff069969155f09060200160405180910390a4505050505050565b60006020828403121561223957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561227f5761227f612240565b604052919050565b600082601f83011261229857600080fd5b813567ffffffffffffffff8111156122b2576122b2612240565b6122c5601f8201601f1916602001612256565b8181528460208386010111156122da57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461230e57600080fd5b919050565b6000806040838503121561232657600080fd5b823567ffffffffffffffff81111561233d57600080fd5b61234985828601612287565b925050612358602084016122f7565b90509250929050565b600067ffffffffffffffff82111561237b5761237b612240565b5060051b60200190565b600082601f83011261239657600080fd5b813560206123ab6123a683612361565b612256565b82815260059290921b840181019181810190868411156123ca57600080fd5b8286015b848110156123e557803583529183019183016123ce565b509695505050505050565b6000806000806080858703121561240657600080fd5b843567ffffffffffffffff8082111561241e57600080fd5b61242a88838901612385565b955060209150818701358181111561244157600080fd5b61244d89828a01612385565b95505060408701358181111561246257600080fd5b61246e89828a01612385565b94505060608701358181111561248357600080fd5b87019050601f8101881361249657600080fd5b80356124a46123a682612361565b81815260059190911b8201830190838101908a8311156124c357600080fd5b928401925b828410156124e8576124d9846122f7565b825292840192908401906124c8565b979a9699509497505050505050565b60006020828403121561250957600080fd5b813567ffffffffffffffff81111561252057600080fd5b61252c84828501612385565b949350505050565b60008060006060848603121561254957600080fd5b83359250602084013567ffffffffffffffff81111561256757600080fd5b61257386828701612287565b925050612582604085016122f7565b90509250925092565b6000806040838503121561259e57600080fd5b82359150612358602084016122f7565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156125e557602081860181015185830152016125cb565b506000920191825250919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b60006020828403121561263c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561266c5761266c612643565b92915050565b80820260008212600160ff1b8414161561268e5761268e612643565b818105831482151761266c5761266c612643565b808202811582820484141761266c5761266c612643565b6000826126d657634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561266c5761266c61264356fe29d9cba46c358ba7c1b8945751229339792c7c62e3197c240fa98916e75ffbf9a264697066735822122007775e500a6b0fb8bdb51c0554983ac473e0b0f889496e47515f11cf0e40506764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "details": "for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral",
        "params": {
          "receiver": "The address of the user who will receive the yield",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "reimburseExtraYield(uint256[])": {
        "params": {
          "termIds": "The term ids for which the yield balance is to be restored"
        }
      },
      "rescueStuckYields(uint256[],uint256[],uint256[],address[])": {
        "params": {
          "originalShares": "The original calculated shares amounts of each bad transaction",
          "originalWithdrawals": "The original ETH withdrawal amounts of each bad transaction",
          "termIds": "The term ids for which the yield is being rescued",
          "users": "The users to be reimbursed"
        }
      },
      "restoreYieldBalance(uint256[])": {
        "params": {
          "termIds": "The term ids for which the yield balance is to be restored"
        }
      },
      "toggleOptInYG(uint256)": {
        "details": "only allowed before the term starts",
        "params": {
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated",
          "termId": "The term id for which the yield is being claimed"
        }
      },
      "updateYieldProvider(string,address)": {
        "params": {
          "providerAddress": "The new address of the provider",
          "providerString": "The provider string for which the address is being updated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAvailableYield(uint256,address)": {
        "notice": "This function allows a user to claim the current available yield"
      },
      "reimburseExtraYield(uint256[])": {
        "notice": "To be used in case of emergency, when there are more shares deposited than expected"
      },
      "rescueStuckYields(uint256[],uint256[],uint256[],address[])": {
        "notice": "To be used in case of emergency, when yield got stuck in the vaultThe position of each array is used as a set in the calculation"
      },
      "restoreYieldBalance(uint256[])": {
        "notice": "To be used in case of emergency, when the user has withdrawn too much eth from yield into the smart contract"
      },
      "toggleOptInYG(uint256)": {
        "notice": "This function allows a user to toggle their yield generation"
      },
      "toggleYieldLock()": {
        "notice": "This function allows the owner to disable the yield generation feature in case of emergency"
      },
      "updateProviderAddressOnTerms(uint256,string,address)": {
        "notice": "To be used in case of emergency, when the provider needs to change the zap or the vault"
      },
      "updateYieldProvider(string,address)": {
        "notice": "This function allows the owner to update the global variable for new yield provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}