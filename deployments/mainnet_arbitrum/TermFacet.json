{
  "address": "0x03D53260e5104a631a89aD3c372C6CB61B4BF0C6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "OnCollateralDepositedNext",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "termOwner",
          "type": "address"
        }
      ],
      "name": "OnTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "OnTermStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registrationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cycleTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stableTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "expireTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        }
      ],
      "name": "joinTerm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "joinTermOnPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "newParticipant",
          "type": "address"
        }
      ],
      "name": "paySecurityOnBehalfOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "optYield",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "newParticipant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "paySecurityOnBehalfOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "startTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03f8a1d8fe818de0dcd45383d6317be56eca3a189d669f7d13c2051e3a753f4e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF5C5B85eA5f255495e037563cB8cDe3513eE602e",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "18010848",
    "logsBloom": "0x
    "blockHash": "0xec1f958b9fe802bfafab0194f6a61c5614317df8ff29456c0fca1fd0e5e3135a",
    "transactionHash": "0x03f8a1d8fe818de0dcd45383d6317be56eca3a189d669f7d13c2051e3a753f4e",
    "logs": [],
    "blockNumber": 195155603,
    "cumulativeGasUsed": "19860522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "8aac5fcf8ebc49c601b044ae916756bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"OnCollateralDepositedNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"termOwner\",\"type\":\"address\"}],\"name\":\"OnTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"OnTermStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableTokenAddress\",\"type\":\"address\"}],\"name\":\"createTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"expireTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"}],\"name\":\"joinTerm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"joinTermOnPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newParticipant\",\"type\":\"address\"}],\"name\":\"paySecurityOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optYield\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newParticipant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"paySecurityOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"startTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mohammed Haddouti\",\"details\":\"v3.0 (Diamond)\",\"kind\":\"dev\",\"methods\":{\"createTerm(uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"contributionAmount\":\"The amount of stable token that each participant will have to contribute\",\"contributionPeriod\":\"The time in seconds that the participants will have to contribute\",\"cycleTime\":\"The time in seconds that the term will last\",\"registrationPeriod\":\"The time in seconds that the term will be open for registration\",\"stableTokenAddress\":\"The address of the stable token\",\"totalParticipants\":\"The number of participants in the term\"},\"returns\":{\"_0\":\"termId The id of the new term\"}},\"expireTerm(uint256)\":{\"params\":{\"termId\":\"The id of the term\"}},\"joinTerm(uint256,bool)\":{\"params\":{\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"termId\":\"The id of the term\"}},\"joinTermOnPosition(uint256,bool,uint256)\":{\"params\":{\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"position\":\"The position in the term\",\"termId\":\"The id of the term\"}},\"paySecurityOnBehalfOf(uint256,bool,address)\":{\"params\":{\"newParticipant\":\"The address of the new participant\",\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"termId\":\"The id of the term\"}},\"paySecurityOnBehalfOf(uint256,bool,address,uint256)\":{\"params\":{\"newParticipant\":\"The address of the new participant\",\"optYield\":\"Whether the participant wants to opt in for yield generation\",\"position\":\"The position in the term\",\"termId\":\"The id of the term\"}},\"startTerm(uint256)\":{\"params\":{\"termId\":\"The id of the term\"}}},\"title\":\"Takaturn Term Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTerm(uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Create a new term\"},\"expireTerm(uint256)\":{\"notice\":\"Expire a term\"},\"joinTerm(uint256,bool)\":{\"notice\":\"Join a term at the next available position\"},\"joinTermOnPosition(uint256,bool,uint256)\":{\"notice\":\"Join a term at a specific position\"},\"paySecurityOnBehalfOf(uint256,bool,address)\":{\"notice\":\"Pay security deposit on behalf of someone else, at the next available position\"},\"paySecurityOnBehalfOf(uint256,bool,address,uint256)\":{\"notice\":\"Pay security deposit on behalf of someone else, at a specific position\"},\"startTerm(uint256)\":{\"notice\":\"Start a term\"}},\"notice\":\"This is used to create terms\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TermFacet.sol\":\"TermFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/facets/TermFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IFund} from \\\"../interfaces/IFund.sol\\\";\\r\\nimport {ICollateral} from \\\"../interfaces/ICollateral.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ITerm} from \\\"../interfaces/ITerm.sol\\\";\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\nimport {IYGFacetZaynFi} from \\\"../interfaces/IYGFacetZaynFi.sol\\\";\\r\\n\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateral} from \\\"../libraries/LibCollateral.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\nimport {LibYieldGeneration} from \\\"../libraries/LibYieldGeneration.sol\\\";\\r\\n\\r\\n/// @title Takaturn Term Facet\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to create terms\\r\\n/// @dev v3.0 (Diamond)\\r\\ncontract TermFacet is ITerm {\\r\\n    event OnTermCreated(uint indexed termId, address indexed termOwner); // Emits when a new term is created\\r\\n    event OnCollateralDeposited(\\r\\n        uint indexed termId,\\r\\n        address payer,\\r\\n        address indexed user,\\r\\n        uint amount\\r\\n    ); // TODO: To be deprecated, here to ensure backwards compatibility with the old event\\r\\n    event OnCollateralDepositedNext(\\r\\n        uint indexed termId,\\r\\n        address payer,\\r\\n        address indexed user,\\r\\n        uint amount,\\r\\n        uint indexed position\\r\\n    ); // Emits when a user joins a term // Todo: To be renamed to OnCollateralDeposited\\r\\n    event OnTermFilled(uint indexed termId); // Emits when all the spots are filled\\r\\n    event OnTermExpired(uint indexed termId); // Emits when a term expires\\r\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\r\\n\\r\\n    /// @notice Create a new term\\r\\n    /// @param totalParticipants The number of participants in the term\\r\\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\\r\\n    /// @param cycleTime The time in seconds that the term will last\\r\\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\\r\\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\\r\\n    /// @param stableTokenAddress The address of the stable token\\r\\n    /// @return termId The id of the new term\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount, // in stable token, without decimals\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint) {\\r\\n        return\\r\\n            _createTerm(\\r\\n                totalParticipants,\\r\\n                registrationPeriod,\\r\\n                cycleTime,\\r\\n                contributionAmount,\\r\\n                contributionPeriod,\\r\\n                stableTokenAddress\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Join a term at the next available position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    function joinTerm(uint termId, bool optYield) external payable {\\r\\n        _joinTerm(termId, optYield, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Join a term at a specific position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param position The position in the term\\r\\n    // TODO: To be renamed to joinTerm, this name only to ensure backwards compatibility\\r\\n    function joinTermOnPosition(uint termId, bool optYield, uint position) external payable {\\r\\n        _joinTermByPosition(termId, optYield, position, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param newParticipant The address of the new participant\\r\\n    function paySecurityOnBehalfOf(\\r\\n        uint termId,\\r\\n        bool optYield,\\r\\n        address newParticipant\\r\\n    ) external payable {\\r\\n        _joinTerm(termId, optYield, newParticipant);\\r\\n    }\\r\\n\\r\\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param newParticipant The address of the new participant\\r\\n    /// @param position The position in the term\\r\\n    function paySecurityOnBehalfOf(\\r\\n        uint termId,\\r\\n        bool optYield,\\r\\n        address newParticipant,\\r\\n        uint position\\r\\n    ) external payable {\\r\\n        _joinTermByPosition(termId, optYield, position, newParticipant);\\r\\n    }\\r\\n\\r\\n    /// @notice Start a term\\r\\n    /// @param termId The id of the term\\r\\n    function startTerm(uint termId) external {\\r\\n        _startTerm(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice Expire a term\\r\\n    /// @param termId The id of the term\\r\\n    function expireTerm(uint termId) external {\\r\\n        _expireTerm(termId);\\r\\n    }\\r\\n\\r\\n    /// @dev Revert if the cycle time is 0\\r\\n    /// @dev Revert if the contribution amount is 0\\r\\n    /// @dev Revert if the contribution period is 0\\r\\n    /// @dev Revert if the total participants is 0\\r\\n    /// @dev Revert if the registration period is 0\\r\\n    /// @dev Revert if the contribution period is greater than the cycle time\\r\\n    /// @dev Revert if the stable token address is 0\\r\\n    function _createTerm(\\r\\n        uint _totalParticipants,\\r\\n        uint _registrationPeriod,\\r\\n        uint _cycleTime,\\r\\n        uint _contributionAmount,\\r\\n        uint _contributionPeriod,\\r\\n        address _stableTokenAddress\\r\\n    ) internal returns (uint) {\\r\\n        require(\\r\\n            _cycleTime != 0 &&\\r\\n                _contributionAmount != 0 &&\\r\\n                _contributionPeriod != 0 &&\\r\\n                _totalParticipants != 0 &&\\r\\n                _registrationPeriod != 0 &&\\r\\n                _contributionPeriod < _cycleTime &&\\r\\n                _stableTokenAddress != address(0),\\r\\n            \\\"TT-TF-01\\\"\\r\\n        );\\r\\n\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        uint termId = termStorage.nextTermId;\\r\\n\\r\\n        LibTermStorage.Term memory newTerm;\\r\\n\\r\\n        newTerm.termId = termId;\\r\\n        newTerm.totalParticipants = _totalParticipants;\\r\\n        newTerm.registrationPeriod = _registrationPeriod;\\r\\n        newTerm.cycleTime = _cycleTime;\\r\\n        newTerm.contributionAmount = _contributionAmount; // stored without decimals\\r\\n        newTerm.contributionPeriod = _contributionPeriod;\\r\\n        newTerm.stableTokenAddress = _stableTokenAddress;\\r\\n        newTerm.termOwner = msg.sender;\\r\\n        newTerm.creationTime = block.timestamp;\\r\\n        newTerm.initialized = true;\\r\\n        newTerm.state = LibTermStorage.TermStates.InitializingTerm;\\r\\n\\r\\n        termStorage.terms[termId] = newTerm;\\r\\n        termStorage.nextTermId++;\\r\\n\\r\\n        _createCollateral(termId, _totalParticipants);\\r\\n\\r\\n        emit OnTermCreated(termId, msg.sender);\\r\\n\\r\\n        return termId;\\r\\n    }\\r\\n\\r\\n    /// @dev Revert if the term doesn't exist\\r\\n    /// @dev Revert if the collateral is not accepting collateral\\r\\n    /// @dev Revert if the collateral is full\\r\\n    /// @dev Revert if the new participant is already a collateral member\\r\\n    function _joinTerm(uint _termId, bool _optYield, address _newParticipant) internal {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(LibTermStorage._termExists(_termId), \\\"TT-TF-02\\\");\\r\\n\\r\\n        require(\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\r\\n            \\\"TT-TF-03\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"TT-TF-04\\\");\\r\\n\\r\\n        require(!collateral.isCollateralMember[_newParticipant], \\\"TT-TF-05\\\");\\r\\n\\r\\n        uint memberIndex;\\r\\n\\r\\n        for (uint i; i < term.totalParticipants; ) {\\r\\n            if (collateral.depositors[i] == address(0)) {\\r\\n                memberIndex = i;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than term total participants\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _joinTermByPosition(_termId, _optYield, memberIndex, _newParticipant);\\r\\n    }\\r\\n\\r\\n    /// @dev Revert if the term doesn't exist\\r\\n    /// @dev Revert if the collateral is not accepting collateral\\r\\n    /// @dev Revert if the collateral is full\\r\\n    /// @dev Revert if the new participant is already a collateral member\\r\\n    /// @dev Revert if the position is higher than the total participants\\r\\n    /// @dev Revert if the position is already taken\\r\\n    /// @dev Revert if the msg.value is lower than the min amount\\r\\n    function _joinTermByPosition(\\r\\n        uint _termId,\\r\\n        bool _optYield,\\r\\n        uint _position,\\r\\n        address _newParticipant\\r\\n    ) internal {\\r\\n        LibTermStorage.TermStorage storage termStorage = LibTermStorage._termStorage();\\r\\n        LibTermStorage.Term memory term = termStorage.terms[_termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        require(LibTermStorage._termExists(_termId), \\\"TT-TF-02\\\");\\r\\n\\r\\n        require(\\r\\n            collateral.state == LibCollateralStorage.CollateralStates.AcceptingCollateral,\\r\\n            \\\"TT-TF-03\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"TT-TF-04\\\");\\r\\n\\r\\n        require(!collateral.isCollateralMember[_newParticipant], \\\"TT-TF-05\\\");\\r\\n\\r\\n        require(_position <= term.totalParticipants - 1, \\\"TT-TF-06\\\");\\r\\n\\r\\n        require(collateral.depositors[_position] == address(0), \\\"TT-TF-07\\\");\\r\\n\\r\\n        uint minAmount = IGetters(address(this)).minCollateralToDeposit(_termId, _position);\\r\\n        require(msg.value >= minAmount, \\\"TT-TF-08\\\");\\r\\n\\r\\n        collateral.collateralMembersBank[_newParticipant] += msg.value;\\r\\n        collateral.isCollateralMember[_newParticipant] = true;\\r\\n        collateral.depositors[_position] = _newParticipant;\\r\\n        collateral.counterMembers++;\\r\\n        collateral.collateralDepositByUser[_newParticipant] += msg.value;\\r\\n\\r\\n        termStorage.participantToTermId[_newParticipant].push(_termId);\\r\\n\\r\\n        // If the lock is false, I accept the opt in\\r\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\r\\n            yield.hasOptedIn[_newParticipant] = _optYield;\\r\\n        } else {\\r\\n            // If the lock is true, opt in is always false\\r\\n            yield.hasOptedIn[_newParticipant] = false;\\r\\n        }\\r\\n\\r\\n        // TODO: Emit both events to ensure backwards compatibility\\r\\n        emit OnCollateralDeposited(_termId, msg.sender, _newParticipant, msg.value);\\r\\n        emit OnCollateralDepositedNext(_termId, msg.sender, _newParticipant, msg.value, _position);\\r\\n\\r\\n        if (collateral.counterMembers == 1) {\\r\\n            collateral.firstDepositTime = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // If all the spots are filled, change the collateral\\r\\n        if (collateral.counterMembers == term.totalParticipants) {\\r\\n            emit OnTermFilled(_termId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Revert if the term doesn't exist\\r\\n    /// @dev Revert if the term is not ready to start\\r\\n    /// @dev Revert if the term is already active\\r\\n    /// @dev Revert if someone is undercollaterized\\r\\n    function _startTerm(uint _termId) internal {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n        address[] memory depositors = collateral.depositors;\\r\\n\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        require(\\r\\n            block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\r\\n            \\\"TT-TF-09\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers == term.totalParticipants, \\\"TT-TF-10\\\");\\r\\n\\r\\n        // Need to check each user because they can have different collateral amounts\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            require(!LibCollateral._isUnderCollaterized(term.termId, depositors[i]), \\\"TT-TF-11\\\");\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Actually create and initialize the fund\\r\\n        _createFund(term, collateral);\\r\\n\\r\\n        // If the lock is false\\r\\n        if (!LibYieldGenerationStorage._yieldLock().yieldLock) {\\r\\n            // Check on each depositor if they opted in for yield generation\\r\\n            for (uint i; i < depositorsArrayLength; ) {\\r\\n                if (yield.hasOptedIn[depositors[i]]) {\\r\\n                    // If someone opted in, create the yield generator\\r\\n                    _createYieldGenerator(term, collateral);\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // If the lock is set to true, before the term starts and after users have joined term\\r\\n            // There is a chance that somebody has opted in for yield generation\\r\\n            for (uint i; i < depositorsArrayLength; ) {\\r\\n                if (yield.hasOptedIn[depositors[i]]) {\\r\\n                    yield.hasOptedIn[depositors[i]] = false;\\r\\n                }\\r\\n\\r\\n                /// @custom:unchecked-block without risk, i can't be higher than depositors length\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Tell the collateral that the term has started\\r\\n        LibCollateral._setState(term.termId, LibCollateralStorage.CollateralStates.CycleOngoing);\\r\\n\\r\\n        term.state = LibTermStorage.TermStates.ActiveTerm;\\r\\n    }\\r\\n\\r\\n    /// @notice Create a new collateral\\r\\n    /// @param _termId The id of the term\\r\\n    /// @param _totalParticipants The number of participants in the term\\r\\n    function _createCollateral(uint _termId, uint _totalParticipants) internal {\\r\\n        LibCollateralStorage.Collateral storage newCollateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        newCollateral.initialized = true;\\r\\n        newCollateral.state = LibCollateralStorage.CollateralStates.AcceptingCollateral;\\r\\n        newCollateral.depositors = new address[](_totalParticipants);\\r\\n    }\\r\\n\\r\\n    /// @notice Create a new fund\\r\\n    /// @dev Revert if the fund already exists\\r\\n    /// @param _term The term\\r\\n    /// @param _collateral The collateral object\\r\\n    function _createFund(\\r\\n        LibTermStorage.Term memory _term,\\r\\n        LibCollateralStorage.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        require(!LibFundStorage._fundExists(_term.termId), \\\"TT-TF-12\\\");\\r\\n        LibFundStorage.Fund storage newFund = LibFundStorage._fundStorage().funds[_term.termId];\\r\\n\\r\\n        newFund.stableToken = IERC20(_term.stableTokenAddress);\\r\\n        newFund.beneficiariesOrder = _collateral.depositors;\\r\\n        newFund.initialized = true;\\r\\n        newFund.totalAmountOfCycles = newFund.beneficiariesOrder.length;\\r\\n        newFund.currentState = LibFundStorage.FundStates.InitializingFund;\\r\\n\\r\\n        LibFund._initFund(_term.termId);\\r\\n    }\\r\\n\\r\\n    /// @dev Revert if the term or collateral doesn't exist\\r\\n    /// @dev Revert if registration period is not ended\\r\\n    /// @dev Revert if all spots are filled\\r\\n    /// @dev Revert if the term is already expired\\r\\n    function _expireTerm(uint _termId) internal {\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        require(\\r\\n            LibTermStorage._termExists(_termId) && LibCollateralStorage._collateralExists(_termId)\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            collateral.firstDepositTime != 0 &&\\r\\n                block.timestamp > collateral.firstDepositTime + term.registrationPeriod,\\r\\n            \\\"TT-TF-13\\\"\\r\\n        );\\r\\n\\r\\n        require(collateral.counterMembers < term.totalParticipants, \\\"TT-TF-14\\\");\\r\\n\\r\\n        require(term.state != LibTermStorage.TermStates.ExpiredTerm, \\\"TT-TF-15\\\");\\r\\n\\r\\n        term.state = LibTermStorage.TermStates.ExpiredTerm;\\r\\n        collateral.state = LibCollateralStorage.CollateralStates.ReleasingCollateral;\\r\\n\\r\\n        emit OnTermExpired(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice Create a new yield generator\\r\\n    /// @param _term The term object\\r\\n    /// @param _collateral The collateral object\\r\\n    function _createYieldGenerator(\\r\\n        LibTermStorage.Term memory _term,\\r\\n        LibCollateralStorage.Collateral storage _collateral\\r\\n    ) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_term.termId];\\r\\n        LibYieldGenerationStorage.YieldProviders storage yieldProviders = LibYieldGenerationStorage\\r\\n            ._yieldProviders();\\r\\n\\r\\n        uint amountToYield;\\r\\n\\r\\n        address[] memory depositors = _collateral.depositors;\\r\\n        uint depositorsArrayLength = depositors.length;\\r\\n\\r\\n        for (uint i; i < depositorsArrayLength; ) {\\r\\n            if (yield.hasOptedIn[depositors[i]]) {\\r\\n                yield.yieldUsers.push(depositors[i]);\\r\\n                yield.depositedCollateralByUser[depositors[i]] =\\r\\n                    (_collateral.collateralMembersBank[depositors[i]] * 95) /\\r\\n                    100;\\r\\n                amountToYield += yield.depositedCollateralByUser[depositors[i]];\\r\\n            }\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than depositors length\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amountToYield > 0) {\\r\\n            yield.startTimeStamp = block.timestamp;\\r\\n            yield.initialized = true;\\r\\n            yield.providerAddresses[\\\"ZaynZap\\\"] = yieldProviders.providerAddresses[\\\"ZaynZap\\\"];\\r\\n            yield.providerAddresses[\\\"ZaynVault\\\"] = yieldProviders.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n            LibYieldGeneration._depositYG(_term.termId, amountToYield);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x631613d21ddbbc26a400604bf451d001646d04a896cf3f0d6f31bd2da013cf52\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Collateral Interface\\r\\n/// @author Aisha EL Allam\\r\\n/// @notice This is used to allow fund to easily communicate with collateral\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\n\\r\\ninterface ICollateral {\\r\\n    /// @notice Called from Fund contract when someone defaults\\r\\n    /// @dev Check EnumerableMap (openzeppelin) for arrays that are being accessed from Fund contract\\r\\n    /// @dev Revert if the caller is not the Diamond proxy\\r\\n    /// @param term Term object\\r\\n    /// @param defaulters Addressess of all defaulters of the current cycle\\r\\n    /// @return expellants array of addresses that were expelled\\r\\n    function requestContribution(\\r\\n        LibTermStorage.Term memory term,\\r\\n        address[] calldata defaulters\\r\\n    ) external returns (address[] memory);\\r\\n\\r\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId term id\\r\\n    function withdrawCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice Called by each member after during or at the end of the term to withraw collateral to a different address than the caller\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @dev Revert if the caller is not a participant\\r\\n    /// @param termId term id\\r\\n    /// @param receiver receiver address\\r\\n    function withdrawCollateralToAnotherAddress(uint termId, address receiver) external;\\r\\n\\r\\n    /// @notice Allows to withdraw all collateral from the at the term's end\\r\\n    /// @dev Does not withdraw anything, just set the state for users to withdraw\\r\\n    /// @dev Revert if the fund is not closed\\r\\n    /// @param termId term id\\r\\n    function releaseCollateral(uint termId) external;\\r\\n\\r\\n    /// @notice allow the owner to empty the Collateral after 180 days\\r\\n    /// @dev Revert if the collateral is not at releasing collateral\\r\\n    /// @dev Revert if the caller is not the term owner\\r\\n    /// @dev Revert if the time is not met\\r\\n    /// @param termId The term id\\r\\n    function emptyCollateralAfterEnd(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd4f9363f08e8047d9c0469ccf562ddba7f3dd1227400cd0be93885b30f216b92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Takaturn Fund Interface\\r\\n/// @author Mohammed Haddouti\\r\\n/// @notice This is used to allow collateral to easily communicate with fund\\r\\n/// @dev v2.0 (post-deploy)\\r\\n\\r\\nimport {LibFund} from \\\"../libraries/LibFund.sol\\\";\\r\\n\\r\\ninterface IFund {\\r\\n    /// @notice starts a new cycle manually called by the owner. Only the first cycle starts automatically upon deploy\\r\\n    /// @param termId the id of the term\\r\\n    function startNewCycle(uint termId) external;\\r\\n\\r\\n    /// @notice Must be called at the end of the contribution period after the time has passed by the owner\\r\\n    /// @dev Revert if still time to contribute\\r\\n    /// @dev Revert if Fund is not accepting contributions\\r\\n    /// @param termId the id of the term\\r\\n    function closeFundingPeriod(uint termId) external;\\r\\n\\r\\n    /// @notice allow the owner to empty the fund if there's any excess fund left after 180 days,\\r\\n    ///         this with the assumption that beneficiaries can't claim it themselves due to losing their keys for example,\\r\\n    ///         and prevent the fund to be stuck in limbo\\r\\n    /// @dev Revert if the caller is not the term owner\\r\\n    /// @dev Revert if the time is not met (180 days)\\r\\n    /// @param termId the id of the term\\r\\n    function emptyFundAfterEnd(uint termId) external;\\r\\n\\r\\n    /// @notice function to enable/disable autopay\\r\\n    /// @dev Revert if the user is not a collateral member\\r\\n    /// @dev Revert if the Fund is closed\\r\\n    /// @dev It needs the user to have enough tokens and allow the contract as spender\\r\\n    /// @dev Can be set before the Fund starts\\r\\n    /// @param termId the id of the term\\r\\n    function toggleAutoPay(uint termId) external;\\r\\n\\r\\n    /// @notice This is the function participants call to pay the contribution\\r\\n    /// @param termId the id of the term\\r\\n    function payContribution(uint termId) external;\\r\\n\\r\\n    /// @notice This function is here to give the possibility to pay using a different wallet\\r\\n    /// @param termId the id of the term\\r\\n    /// @param participant the address the msg.sender is paying for, the address must be part of the fund\\r\\n    function payContributionOnBehalfOf(uint termId, address participant) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId the id of the term\\r\\n    function withdrawFund(uint termId) external;\\r\\n\\r\\n    /// @notice Called by the beneficiary to withdraw the fund\\r\\n    /// @dev This follows the pull-over-push pattern.\\r\\n    /// @param termId the id of the term\\r\\n    /// @param receiver the address that will receive the fund\\r\\n    function withdrawFundOnAnotherWallet(uint termId, address receiver) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x28bf953305375ca3e0f8abc0661318007be1e3a3fe2abace5ebb644ad852b782\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\nimport {LibCollateralStorage} from \\\"../libraries/LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"../libraries/LibFundStorage.sol\\\";\\r\\nimport {LibGettersHelpers} from \\\"../libraries/LibGettersHelpers.sol\\\";\\r\\n\\r\\ninterface IGetters {\\r\\n    /// @notice This function is used as a helper for front-end implementation\\r\\n    /// @param termId The term id for which the summary is being requested\\r\\n    /// @return term The term object\\r\\n    /// @return collateralState The current state of the collateral\\r\\n    /// @return fundState The current state of the fund\\r\\n    /// @return nonUserRelated A helper struct with the following values:\\r\\n    ///                        available positions, security deposits corresponding to each position,\\r\\n    ///                        remaining registration time, remaining contribution time,\\r\\n    ///                        remaining cycle time, remaining cycles, remaining cycles\\r\\n    ///                        contribution in wei, latest price from Chainlink, collateral\\r\\n    ///                        first deposit time in seconds, collateral counter members,\\r\\n    ///                        fund start time in seconds, fund end time in seconds, current\\r\\n    ///                        cycle, expelled participants, total amount of cycles, yield\\r\\n    ///                        start time in seconds, total deposit in wei, current total\\r\\n    ///                        deposit in wei, total shares\\r\\n    function getTermRelatedSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            LibTermStorage.Term memory term,\\r\\n            LibCollateralStorage.CollateralStates collateralState,\\r\\n            LibFundStorage.FundStates fundState,\\r\\n            LibGettersHelpers.NonUserRelated memory nonUserRelated\\r\\n        );\\r\\n\\r\\n    /// @notice This function is used as a helper for front-end implementation\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return userRelated an object that contains the following values:\\r\\n    ///                     user is collateral member, user is undercollaterized,\\r\\n    ///                     current collateral balance, received collateral from defaults,\\r\\n    ///                     initial deposited collateral, collateral expulsion limit,\\r\\n    ///                     currently withdrawable balance, is fund member, is or was beneficiary,\\r\\n    ///                     user paid current cycle, user paid next cycle in advance,\\r\\n    ///                     user enabled autopay, user's money pot is frozen, user is exempted this\\r\\n    ///                     cycle, the money pot pool the user can withdraw, the cycle the user got\\r\\n    ///                     expelled (if applicable), is yield member, amount of collateral deposited\\r\\n    ///                     in yield pool, amount of collateral withdrawn from yield pool, available\\r\\n    ///                     yield to withdraw, amount of yield withdrawn, yield to be distributed\\r\\n    function getUserRelatedSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (LibGettersHelpers.UserRelated memory userRelated);\\r\\n\\r\\n    /// @notice This function return the current constant values for oracles and yield providers\\r\\n    /// @param firstAggregator The name of the first aggregator. Example: \\\"ETH/USD\\\"\\r\\n    /// @param secondAggregator The name of the second aggregator. Example: \\\"USDC/USD\\\"\\r\\n    /// @param zapAddress The name of the zap address. Example: \\\"ZaynZap\\\"\\r\\n    /// @param vaultAddress The name of the vault address. Example: \\\"ZaynVault\\\"\\r\\n    /// @return The addresses of the oracles and yield providers\\r\\n    function getConstants(\\r\\n        string memory firstAggregator,\\r\\n        string memory secondAggregator,\\r\\n        string memory zapAddress,\\r\\n        string memory vaultAddress\\r\\n    ) external view returns (address, address, address, address);\\r\\n\\r\\n    /// @notice This function is used to get the current state of the yield lock\\r\\n    /// @return The current state of the yield lock\\r\\n    function getYieldLockState() external view returns (bool);\\r\\n\\r\\n    /// @return the current term id\\r\\n    /// @return the next term id\\r\\n    function getTermsId() external view returns (uint, uint);\\r\\n\\r\\n    /// @notice Gets the term object\\r\\n    /// @param termId the term id\\r\\n    /// @return the term object\\r\\n    function getTermSummary(uint termId) external view returns (LibTermStorage.Term memory);\\r\\n\\r\\n    /// @notice Gets the collateral summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if collateral is initialized\\r\\n    /// @return current state of the collateral, see States struct in LibCollateralStorage.sol\\r\\n    /// @return time of first deposit in seconds, 0 if no deposit occured yet\\r\\n    /// @return current member count\\r\\n    /// @return list of depositors\\r\\n    function getCollateralSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibCollateralStorage.CollateralStates, uint, uint, address[] memory);\\r\\n\\r\\n    /// @notice Gets the fund summary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if fund is initialized\\r\\n    /// @return current state of the fund, see States struct in LibFund.sol\\r\\n    /// @return stablecoin address used\\r\\n    /// @return list for order of beneficiaries\\r\\n    /// @return when the fund started in seconds\\r\\n    /// @return when the fund ended in seconds, 0 otherwise\\r\\n    /// @return current cycle of fund\\r\\n    /// @return total amount of cycles in this fund/term\\r\\n    function getFundSummary(\\r\\n        uint termId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool, LibFundStorage.FundStates, IERC20, address[] memory, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice Gets the yield object\\r\\n    /// @param termId the collateral id\\r\\n    /// @return if the yield is initialized\\r\\n    /// @return start time stamp for yield deposit\\r\\n    /// @return total deposit\\r\\n    /// @return current amount in yield\\r\\n    /// @return amount of total shares\\r\\n    /// @return list of yield users\\r\\n    /// @return address of vault\\r\\n    /// @return address of zap\\r\\n    function getYieldSummary(\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, address[] memory, address, address);\\r\\n\\r\\n    /// @notice This function is used to get a term APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @return The APY for the term\\r\\n    function termAPY(uint termId) external view returns (uint256);\\r\\n\\r\\n    /// @notice a function to get the needed allowance\\r\\n    /// @param user the user address\\r\\n    /// @return the needed allowance\\r\\n    function getNeededAllowance(address user) external view returns (uint);\\r\\n\\r\\n    /// @notice function to get the beneficiary from the current cycle\\r\\n    /// @param termId the fund id\\r\\n    /// @return the current beneficiary\\r\\n    function getCurrentBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets the next beneficiary of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return user address\\r\\n    function getNextBeneficiary(uint termId) external view returns (address);\\r\\n\\r\\n    /// @notice Gets a users collateral summary\\r\\n    /// @param depositor address\\r\\n    /// @param termId the id of the term\\r\\n    /// @return if the user is a true member of the term\\r\\n    /// @return current users locked collateral balance in wei\\r\\n    /// @return current users unlocked collateral balance in wei\\r\\n    /// @return initial users deposit in wei\\r\\n    /// @return expulsion limit\\r\\n    function getDepositorCollateralSummary(\\r\\n        address depositor,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return isParticipant, true if is participant\\r\\n    /// @return isBeneficiary, true if has been beneficiary\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return autoPayEnabled, true if auto pay is enabled\\r\\n    /// @return beneficiariesPool, the beneficiary pool, 6 decimals\\r\\n    /// @return beneficiariesFrozenPool, true if the beneficiary pool is frozen\\r\\n    function getParticipantFundSummary(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool, bool, bool, uint, bool);\\r\\n\\r\\n    /// @notice Gets the user yield summary\\r\\n    /// @param user the depositor address\\r\\n    /// @param termId the collateral id\\r\\n    /// @return if the user opted in for yield\\r\\n    /// @return amount withdrawn from yield\\r\\n    /// @return amount withdrawn from collateral\\r\\n    /// @return amount available in yield\\r\\n    /// @return amount deposited by user in yield\\r\\n    /// @return amount of yield distributed\\r\\n    function getUserYieldSummary(\\r\\n        address user,\\r\\n        uint termId\\r\\n    ) external view returns (bool, uint, uint, uint, uint, uint);\\r\\n\\r\\n    /// @notice function to get cycle information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return on participant set\\r\\n    /// @return on beneficiary set\\r\\n    /// @return on defaulter set\\r\\n    function getUserSet(address participant, uint termId) external view returns (bool, bool, bool);\\r\\n\\r\\n    /// @notice Called to check how much collateral a user can withdraw\\r\\n    /// @param termId term id\\r\\n    /// @param user depositor address\\r\\n    /// @return allowedWithdrawal amount the amount of collateral the depositor can withdraw\\r\\n    function getWithdrawableUserBalance(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) external view returns (uint allowedWithdrawal);\\r\\n\\r\\n    /// @notice Get all the terms a participant was expelled from\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array the term ids on which the participant was expelled\\r\\n    function getExpelledTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param termId The term id\\r\\n    /// @param member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function isUnderCollaterized(uint termId, address member) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is exempted from paying for a specefic cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @param cycle number\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function isExempted(uint termId, uint cycle, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice This function is used to check if a user has opted in for yield generation\\r\\n    /// @param termId The term id for which the check is being made\\r\\n    /// @param user The user for which the check is being made\\r\\n    /// @return True if the user has opted in\\r\\n    function userHasoptedInYG(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice This function is used to get a user APY\\r\\n    /// @param termId The term id for which the APY is being calculated\\r\\n    /// @param user The user for which the APY is being calculated\\r\\n    /// @return The APY for the user\\r\\n    function userAPY(uint termId, address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice function to get fund information of a specific participant\\r\\n    /// @param participant the user to get the info from\\r\\n    /// @param termId the fund id\\r\\n    /// @return paidThisCycle, true if has paid the current cycle\\r\\n    /// @return paidNextCycle, true if has paid the next cycle\\r\\n    function currentOrNextCyclePaid(\\r\\n        address participant,\\r\\n        uint termId\\r\\n    ) external view returns (bool, bool);\\r\\n\\r\\n    /// @param termId the id of the term\\r\\n    /// @param beneficiary the address of the participant to check\\r\\n    /// @return true if the participant is a beneficiary\\r\\n    function isBeneficiary(uint termId, address beneficiary) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets if a user is expelled from a specefic term\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user address\\r\\n    /// @return true or false\\r\\n    function wasExpelled(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice checks if a participant have been expelled before being a beneficiary\\r\\n    /// @param termId the id of the term\\r\\n    /// @param user the address of the participant to check\\r\\n    /// @return true if the participant is expelled before being a beneficiary\\r\\n    function expelledBeforeBeneficiary(uint termId, address user) external view returns (bool);\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in ETH to USD\\r\\n    /// @param ethAmount The amount in ETH\\r\\n    /// @return uint converted amount in USD correct to 18 decimals\\r\\n    function getToStableConversionRate(uint ethAmount) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets all remaining cycles of a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycles\\r\\n    function getRemainingCycles(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the expected remaining contribution amount for users in a term\\r\\n    /// @param termId the id of the term\\r\\n    /// @return total remaining contribution in wei\\r\\n    function getRemainingCyclesContributionWei(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Called to check the minimum collateral amount to deposit in wei\\r\\n    /// @param termId term id\\r\\n    /// @param depositorIndex the index the depositor wants to join\\r\\n    /// @return amount the minimum collateral amount to deposit in wei\\r\\n    /// @dev The minimum collateral amount is calculated based on the index on the depositors array\\r\\n    /// @dev The return value should be the minimum msg.value when calling joinTerm\\r\\n    /// @dev C = 1.5 Cp (Tp - I) where C = minimum collateral amount, Cp = contribution amount,\\r\\n    ///      Tp = total participants, I = depositor index (starts at 0). 1.5\\r\\n    function minCollateralToDeposit(uint termId, uint depositorIndex) external view returns (uint);\\r\\n\\r\\n    /// @notice Gets latest ETH / USD price\\r\\n    /// @dev Revert if there is problem with chainlink data\\r\\n    /// @return uint latest price in Wei Note: 18 decimals\\r\\n    function getLatestPrice() external view returns (uint);\\r\\n\\r\\n    /// @notice Gets the conversion rate of an amount in USD to ETH\\r\\n    /// @param USDAmount The amount in USD with 18 decimals\\r\\n    /// @return uint converted amount in wei\\r\\n    function getToCollateralConversionRate(uint USDAmount) external view returns (uint);\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a term\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function totalYieldGenerated(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Get all the terms a participant is part of\\r\\n    /// @param participant the participant address\\r\\n    /// @return an array with the term ids the participant is part of\\r\\n    function getAllJoinedTerms(address participant) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Get all the terms a participant is part of by a given state\\r\\n    /// @param participant the participant address\\r\\n    /// @param state the term state\\r\\n    /// @return an array with the term ids the participant is part of, giving the state of the term\\r\\n    function getJoinedTermsByState(\\r\\n        address participant,\\r\\n        LibTermStorage.TermStates state\\r\\n    ) external view returns (uint[] memory);\\r\\n\\r\\n    /// @notice Gets the remaining positions in a term and the corresponding security amount\\r\\n    /// @param termId the term id\\r\\n    /// @dev Available positions starts at 0\\r\\n    /// @return availablePositions an array with the available positions\\r\\n    /// @return securityAmount an array with the security amount for each available position\\r\\n    function getAvailablePositionsAndSecurityAmount(\\r\\n        uint termId\\r\\n    ) external view returns (uint[] memory, uint[] memory);\\r\\n\\r\\n    /// @notice Gets the remaining registration period for a term\\r\\n    /// @dev Revert if nobody have deposited\\r\\n    /// @param termId the term id\\r\\n    /// @return remaining contribution period\\r\\n    function getRemainingRegistrationTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must return 0 before closing a contribution period\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining contribution time in seconds\\r\\n    function getRemainingContributionTime(uint termId) external view returns (uint);\\r\\n\\r\\n    /// @notice Must be 0 before starting a new cycle\\r\\n    /// @param termId the id of the term\\r\\n    /// @return remaining cycle time in seconds\\r\\n    function getRemainingCycleTime(uint termId) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xcc358838108ee7ec55a708f40d0d55528c7761c9f348099754fbee8e64864fe4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITerm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITerm {\\r\\n    /// @notice Create a new term\\r\\n    /// @param totalParticipants The number of participants in the term\\r\\n    /// @param registrationPeriod The time in seconds that the term will be open for registration\\r\\n    /// @param cycleTime The time in seconds that the term will last\\r\\n    /// @param contributionAmount The amount of stable token that each participant will have to contribute\\r\\n    /// @param contributionPeriod The time in seconds that the participants will have to contribute\\r\\n    /// @param stableTokenAddress The address of the stable token\\r\\n    /// @return termId The id of the new term\\r\\n    function createTerm(\\r\\n        uint totalParticipants,\\r\\n        uint registrationPeriod,\\r\\n        uint cycleTime,\\r\\n        uint contributionAmount,\\r\\n        uint contributionPeriod,\\r\\n        address stableTokenAddress\\r\\n    ) external returns (uint);\\r\\n\\r\\n    /// @notice Join a term at the next available position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    function joinTerm(uint termId, bool optYield) external payable;\\r\\n\\r\\n    /// @notice Join a term at a specific position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param position The position in the term\\r\\n    function joinTermOnPosition(uint termId, bool optYield, uint position) external payable;\\r\\n\\r\\n    /// @notice Pay security deposit on behalf of someone else, at the next available position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param newParticipant The address of the new participant\\r\\n    function paySecurityOnBehalfOf(\\r\\n        uint termId,\\r\\n        bool optYield,\\r\\n        address newParticipant\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Pay security deposit on behalf of someone else, at a specific position\\r\\n    /// @param termId The id of the term\\r\\n    /// @param optYield Whether the participant wants to opt in for yield generation\\r\\n    /// @param newParticipant The address of the new participant\\r\\n    /// @param position The position in the term\\r\\n    function paySecurityOnBehalfOf(\\r\\n        uint termId,\\r\\n        bool optYield,\\r\\n        address newParticipant,\\r\\n        uint position\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Start a term\\r\\n    /// @param termId The id of the term\\r\\n    function startTerm(uint termId) external;\\r\\n\\r\\n    /// @notice Expire a term\\r\\n    /// @param termId The id of the term\\r\\n    function expireTerm(uint termId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc4a2ac0a059062f730e0cab78f5eea13265c827ddb06fe9892ab55d4cc4bca98\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IYGFacetZaynFi.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {LibTermStorage} from \\\"../libraries/LibTermStorage.sol\\\";\\r\\n\\r\\ninterface IYGFacetZaynFi {\\r\\n    /// @notice This function allows a user to claim the current available yield\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param receiver The address of the user who will receive the yield\\r\\n    /// @dev for emergency use only, in case the claimed yield is not sent to the user when withdrawing the collateral\\r\\n    function claimAvailableYield(uint termId, address receiver) external;\\r\\n\\r\\n    /// @notice This function allows a user to toggle their yield generation\\r\\n    /// @dev only allowed before the term starts\\r\\n    /// @dev Revert if the user has not paid the collateral security deposit\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    function toggleOptInYG(uint termId) external;\\r\\n\\r\\n    /// @notice This function allows the owner to update the global variable for new yield provider\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateYieldProvider(string memory providerString, address providerAddress) external;\\r\\n\\r\\n    /// @notice This function allows the owner to disable the yield generation feature in case of emergency\\r\\n    /// @return The new value of the yield lock\\r\\n    function toggleYieldLock() external returns (bool);\\r\\n\\r\\n    /// @notice To be used in case of emergency, when the provider needs to change the zap or the vault\\r\\n    /// @param termId The term id for which the yield is being claimed\\r\\n    /// @param providerString The provider string for which the address is being updated\\r\\n    /// @param providerAddress The new address of the provider\\r\\n    function updateProviderAddressOnTerms(\\r\\n        uint termId,\\r\\n        string memory providerString,\\r\\n        address providerAddress\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdcbfcfd55a5548093b2ef13eab5c652e00d1730e2c2edb79aada588577e6c779\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynVaultV2TakaDao.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynVaultV2TakaDao {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function depositZap(uint256 _amount, uint256 _term) external;\\r\\n\\r\\n    function withdrawZap(uint256 _shares, uint256 _term) external;\\r\\n\\r\\n    function want() external view returns (address);\\r\\n\\r\\n    function balance() external view returns (uint256);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function balanceOf(uint256 term) external view returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x78699e5f3347a796b59482d2d5ad459c68125c87223e0d4634188f3e1339cf7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IZaynZapV2TakaDAO.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\ninterface IZaynZapV2TakaDAO {\\r\\n    function zapInEth(address vault, uint256 termID) external payable;\\r\\n\\r\\n    function zapOutETH(address vault, uint256 _shares, uint256 termID) external returns (uint);\\r\\n\\r\\n    function toggleTrustedSender(address _trustedSender, bool _allow) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d0cdf796501fc604bc1c83c28ff89fefe49ea1b994677c60dc62312af143c94\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {LibCollateralStorage} from \\\"./LibCollateralStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\r\\n\\r\\nlibrary LibCollateral {\\r\\n    event OnCollateralStateChanged(\\r\\n        uint indexed termId,\\r\\n        LibCollateralStorage.CollateralStates indexed oldState,\\r\\n        LibCollateralStorage.CollateralStates indexed newState\\r\\n    ); // Emits when the state of the collateral changes\\r\\n    event OnReimbursementWithdrawn(\\r\\n        uint indexed termId,\\r\\n        address indexed participant,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    ); // Emits when a participant withdraws their reimbursement\\r\\n\\r\\n    /// @notice Sets the state of the collateral\\r\\n    /// @param _termId term id\\r\\n    /// @param _newState collateral state\\r\\n    function _setState(uint _termId, LibCollateralStorage.CollateralStates _newState) internal {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n        LibCollateralStorage.CollateralStates oldState = collateral.state;\\r\\n        collateral.state = _newState;\\r\\n        emit OnCollateralStateChanged(_termId, oldState, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow a user to withdraw their reimbursement\\r\\n    /// @dev Reverts if the fund does not exists or if the user has nothing to claim\\r\\n    /// @param _termId term id\\r\\n    /// @param _participant Address of the depositor\\r\\n    /// @param _receiver Address of the receiver\\r\\n    function _withdrawReimbursement(\\r\\n        uint _termId,\\r\\n        address _participant,\\r\\n        address _receiver\\r\\n    ) internal {\\r\\n        require(LibFundStorage._fundExists(_termId), \\\"TT-LC-01\\\");\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint amount = collateral.collateralPaymentBank[_participant];\\r\\n        require(amount > 0, \\\"TT-LC-02\\\");\\r\\n        collateral.collateralPaymentBank[_participant] = 0;\\r\\n\\r\\n        (bool success, ) = payable(_receiver).call{value: amount}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnReimbursementWithdrawn(_termId, _participant, _receiver, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user has a collateral below 1.0x of total contribution amount\\r\\n    /// @dev This will revert if called during ReleasingCollateral or after\\r\\n    /// @param _termId The fund id\\r\\n    /// @param _member The user to check for\\r\\n    /// @return Bool check if member is below 1.0x of collateralDeposit\\r\\n    function _isUnderCollaterized(uint _termId, address _member) internal view returns (bool) {\\r\\n        LibCollateralStorage.Collateral storage collateral = LibCollateralStorage\\r\\n            ._collateralStorage()\\r\\n            .collaterals[_termId];\\r\\n\\r\\n        uint collateralLimit;\\r\\n        uint memberCollateral = collateral.collateralMembersBank[_member];\\r\\n\\r\\n        if (!LibFundStorage._fundExists(_termId)) {\\r\\n            // Only check here when starting the term\\r\\n            (, , , , collateralLimit) = IGetters(address(this)).getDepositorCollateralSummary(\\r\\n                _member,\\r\\n                _termId\\r\\n            );\\r\\n        } else {\\r\\n            collateralLimit = IGetters(address(this)).getRemainingCyclesContributionWei(_termId);\\r\\n        }\\r\\n\\r\\n        return (memberCollateral < collateralLimit);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x54a2946e46bed73e1c9d5fb61c91d22b98da40f318a43fe13eda51f377534dc2\",\"license\":\"MIT\"},\"contracts/libraries/LibCollateralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibCollateralStorage {\\r\\n    bytes32 constant COLLATERAL_STORAGE_POSITION = keccak256(\\\"diamond.standard.collateral.storage\\\");\\r\\n\\r\\n    enum CollateralStates {\\r\\n        AcceptingCollateral, // Initial state where collateral are deposited\\r\\n        CycleOngoing, // Triggered when a fund instance is created, no collateral can be accepted\\r\\n        ReleasingCollateral, // Triggered when the fund closes\\r\\n        Closed // Triggered when all depositors withdraw their collaterals\\r\\n    }\\r\\n\\r\\n    struct DefaulterState {\\r\\n        bool payWithCollateral;\\r\\n        bool payWithFrozenPool;\\r\\n        bool gettingExpelled;\\r\\n        bool isBeneficiary;\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        bool initialized;\\r\\n        CollateralStates state;\\r\\n        uint firstDepositTime; // Time when the first deposit was made in seconds\\r\\n        uint counterMembers;\\r\\n        address[] depositors;\\r\\n        mapping(address => bool) isCollateralMember; // Determines if a depositor is a valid user\\r\\n        mapping(address => uint) collateralMembersBank; // Users main balance\\r\\n        mapping(address => uint) collateralPaymentBank; // Users reimbursement balance after someone defaults\\r\\n        mapping(address => uint) collateralDepositByUser; // Depends on the depositors index\\r\\n    }\\r\\n\\r\\n    struct CollateralStorage {\\r\\n        mapping(uint => Collateral) collaterals; // termId => Collateral struct\\r\\n    }\\r\\n\\r\\n    function _collateralExists(uint termId) internal view returns (bool) {\\r\\n        return _collateralStorage().collaterals[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _collateralStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (CollateralStorage storage collateralStorage)\\r\\n    {\\r\\n        bytes32 position = COLLATERAL_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            collateralStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x983bffd1c10250f021a365d5eab5e0268638a5e57bf3def27a4816dbb0765845\",\"license\":\"MIT\"},\"contracts/libraries/LibFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IGetters} from \\\"../interfaces/IGetters.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {LibTermStorage} from \\\"./LibTermStorage.sol\\\";\\r\\nimport {LibFundStorage} from \\\"./LibFundStorage.sol\\\";\\r\\n\\r\\nlibrary LibFund {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    event OnTermStart(uint indexed termId); // Emits when a new term starts, this also marks the start of the first cycle\\r\\n    event OnFundStateChanged(\\r\\n        uint indexed termId,\\r\\n        uint indexed currentCycle,\\r\\n        LibFundStorage.FundStates indexed newState\\r\\n    ); // Emits when state has updated\\r\\n    event OnPaidContribution(uint indexed termId, address indexed payer, uint indexed currentCycle); // Emits when participant pays the contribution\\r\\n\\r\\n    /// @notice called by the term to init the fund\\r\\n    /// @param termId the id of the term\\r\\n    function _initFund(uint termId) internal {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[termId];\\r\\n        uint participantsArrayLength = fund.beneficiariesOrder.length;\\r\\n        // Set and track participants\\r\\n        for (uint i; i < participantsArrayLength; ) {\\r\\n            EnumerableSet.add(fund._participants, fund.beneficiariesOrder[i]);\\r\\n            fund.isParticipant[fund.beneficiariesOrder[i]] = true;\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Starts the first cycle\\r\\n        _startNewCycle(termId);\\r\\n\\r\\n        // Set timestamp of deployment, which will be used to determine cycle times\\r\\n        // We do this after starting the first cycle to make sure the first cycle starts smoothly\\r\\n        fund.fundStart = block.timestamp;\\r\\n        //emit LibFund.OnTermStart(termId);\\r\\n        emit OnTermStart(termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This starts the new cycle and can only be called internally. Used upon deploy\\r\\n    /// @dev Rever if the fund is not in the right state or if it's too early to start a new cycle\\r\\n    /// @param _termId The id of the term\\r\\n    function _startNewCycle(uint _termId) internal {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\r\\n        // currentCycle is 0 when this is called for the first time\\r\\n        require(block.timestamp > term.cycleTime * fund.currentCycle + fund.fundStart, \\\"TT-LF-01\\\");\\r\\n        require(\\r\\n            fund.currentState == LibFundStorage.FundStates.InitializingFund ||\\r\\n                fund.currentState == LibFundStorage.FundStates.CycleOngoing,\\r\\n            \\\"TT-LF-02\\\"\\r\\n        );\\r\\n\\r\\n        ++fund.currentCycle;\\r\\n        uint length = fund.beneficiariesOrder.length;\\r\\n        for (uint i; i < length; ) {\\r\\n            fund.paidThisCycle[fund.beneficiariesOrder[i]] = fund.paidNextCycle[\\r\\n                fund.beneficiariesOrder[i]\\r\\n            ];\\r\\n            fund.paidNextCycle[fund.beneficiariesOrder[i]] = false;\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _setState(_termId, LibFundStorage.FundStates.AcceptingContributions);\\r\\n\\r\\n        // We attempt to make the autopayers pay their contribution right away\\r\\n        _autoPay(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice updates the state according to the input and makes sure the state can't be changed if\\r\\n    ///         the fund is closed. Also emits an event that this happened\\r\\n    /// @dev Reverts if the fund is closed\\r\\n    /// @param _termId The id of the term\\r\\n    /// @param _newState The new state of the fund\\r\\n    function _setState(uint _termId, LibFundStorage.FundStates _newState) internal {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\r\\n        require(fund.currentState != LibFundStorage.FundStates.FundClosed, \\\"TT-LF-03\\\");\\r\\n        fund.currentState = _newState;\\r\\n        emit OnFundStateChanged(_termId, fund.currentCycle, _newState);\\r\\n    }\\r\\n\\r\\n    /// @notice function to attempt to make autopayers pay their contribution\\r\\n    /// @param _termId the id of the term\\r\\n    function _autoPay(uint _termId) internal {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\r\\n\\r\\n        // Get the beneficiary for this cycle\\r\\n        address currentBeneficiary = IGetters(address(this)).getCurrentBeneficiary(_termId);\\r\\n\\r\\n        address[] memory autoPayers = fund.beneficiariesOrder; // use beneficiariesOrder because it is a single array with all participants\\r\\n        uint autoPayersArray = autoPayers.length;\\r\\n\\r\\n        for (uint i; i < autoPayersArray; ) {\\r\\n            address autoPayer = autoPayers[i];\\r\\n            // The beneficiary doesn't pay\\r\\n            if (currentBeneficiary == autoPayer) {\\r\\n                /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                fund.autoPayEnabled[autoPayer] &&\\r\\n                !fund.paidThisCycle[autoPayer] &&\\r\\n                !fund.isExemptedOnCycle[fund.currentCycle].exempted[autoPayer]\\r\\n            ) {\\r\\n                _payContributionSafe(_termId, autoPayer, autoPayer);\\r\\n            }\\r\\n\\r\\n            /// @custom:unchecked-block without risk, i can't be higher than beneficiariesOrder length\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice function to pay the actual contribution for the cycle, used for autopay to prevent reverts\\r\\n    /// @param _termId the id of the term\\r\\n    /// @param _payer the address that's paying\\r\\n    /// @param _participant the (participant) address that's being paid for\\r\\n    function _payContributionSafe(uint _termId, address _payer, address _participant) internal {\\r\\n        LibFundStorage.Fund storage fund = LibFundStorage._fundStorage().funds[_termId];\\r\\n        LibTermStorage.Term storage term = LibTermStorage._termStorage().terms[_termId];\\r\\n\\r\\n        // Get the amount and do the actual transfer\\r\\n        // This will only succeed if the sender approved this contract address beforehand\\r\\n        uint amount = term.contributionAmount * 10 ** 6; // Deducted from user's wallet, six decimals\\r\\n        try fund.stableToken.transferFrom(_payer, address(this), amount) returns (bool success) {\\r\\n            if (success) {\\r\\n                // Finish up, set that the participant paid for this cycle and emit an event that it's been done\\r\\n                fund.paidThisCycle[_participant] = true;\\r\\n                emit OnPaidContribution(_termId, _participant, fund.currentCycle);\\r\\n            }\\r\\n        } catch {}\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6446d20caee4d34061cf84331bacf0a1af8318daa58334c17ce66c4689b9a276\",\"license\":\"MIT\"},\"contracts/libraries/LibFundStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary LibFundStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bytes32 constant FUND_POSITION = keccak256(\\\"diamond.standard.fund\\\");\\r\\n    bytes32 constant FUND_STORAGE_POSITION = keccak256(\\\"diamond.standard.fund.storage\\\");\\r\\n\\r\\n    enum FundStates {\\r\\n        InitializingFund, // Time before the first cycle has started\\r\\n        AcceptingContributions, // Triggers at the start of a cycle\\r\\n        AwardingBeneficiary, // Contributions are closed, beneficiary is chosen, people default etc.\\r\\n        CycleOngoing, // Time after beneficiary is chosen, up till the start of the next cycle\\r\\n        FundClosed // Triggers at the end of the last contribution period, no state changes after this\\r\\n    }\\r\\n\\r\\n    struct PayExemption {\\r\\n        mapping(address => bool) exempted; // Mapping to keep track of if someone is exempted from paying\\r\\n    }\\r\\n\\r\\n    struct Fund {\\r\\n        bool initialized;\\r\\n        FundStates currentState; // Variable to keep track of the different FundStates\\r\\n        IERC20 stableToken; // Instance of the stable token\\r\\n        address[] beneficiariesOrder; // The correct order of who gets to be next beneficiary, determined by collateral contract\\r\\n        uint fundStart; // Timestamp of the start of the fund\\r\\n        uint fundEnd; // Timestamp of the end of the fund\\r\\n        uint currentCycle; // Index of current cycle\\r\\n        mapping(address => bool) isParticipant; // Mapping to keep track of who's a participant or not\\r\\n        mapping(address => bool) isBeneficiary; // Mapping to keep track of who's a beneficiary or not\\r\\n        mapping(address => bool) paidThisCycle; // Mapping to keep track of who paid for this cycle\\r\\n        mapping(address => bool) autoPayEnabled; // Wheter to attempt to automate payments at the end of the contribution period\\r\\n        mapping(address => uint) beneficiariesPool; // Mapping to keep track on how much each beneficiary can claim. Six decimals\\r\\n        mapping(address => bool) beneficiariesFrozenPool; // Frozen pool by beneficiaries, it can claim when his collateral is at least 1.1 X RCC\\r\\n        mapping(address => uint) cycleOfExpulsion; // Mapping to keep track on which cycle a user was expelled\\r\\n        mapping(uint => PayExemption) isExemptedOnCycle; // Mapping to keep track of if someone is exempted from paying this cycle\\r\\n        EnumerableSet.AddressSet _participants; // Those who have not been beneficiaries yet and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _beneficiaries; // Those who have been beneficiaries and have not defaulted this cycle\\r\\n        EnumerableSet.AddressSet _defaulters; // Both participants and beneficiaries who have defaulted this cycle\\r\\n        uint expelledParticipants; // Total amount of participants that have been expelled so far\\r\\n        uint totalAmountOfCycles;\\r\\n        mapping(address => bool) expelledBeforeBeneficiary; // Mapping to keep track of who has been expelled before being a beneficiary\\r\\n        mapping(address => bool) paidNextCycle; // Mapping to keep track of who has paid for the next cycle\\r\\n    }\\r\\n\\r\\n    struct FundStorage {\\r\\n        mapping(uint => Fund) funds; // termId => Fund struct\\r\\n    }\\r\\n\\r\\n    function _fundExists(uint termId) internal view returns (bool) {\\r\\n        return _fundStorage().funds[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _fundStorage() internal pure returns (FundStorage storage fundStorage) {\\r\\n        bytes32 position = FUND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            fundStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdc5fee2561d7cce812c38156de9b39f94f6805d5c9c5f2a6faf26d3ff5b3a6b5\",\"license\":\"MIT\"},\"contracts/libraries/LibGettersHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibGettersHelpers {\\r\\n    struct NonUserRelated {\\r\\n        // Positions and security deposits related\\r\\n        uint[] availablePositions;\\r\\n        uint[] securityDeposits;\\r\\n        // Times and contributions related\\r\\n        uint remainingRegistrationTime; // In seconds\\r\\n        uint remainingContributionTime; // In seconds\\r\\n        uint remainingCycleTime; // In seconds\\r\\n        uint remainingCycles;\\r\\n        uint rcc; // Remaining Contribution Cycles in wei\\r\\n        uint latestPrice; // From Chainlink\\r\\n        // Collateral related\\r\\n        bool collateralInitialized;\\r\\n        uint collateralFirstDepositTime; // In seconds\\r\\n        uint collateralCounterMembers; // Member count\\r\\n        // Fund related\\r\\n        bool fundInitialized;\\r\\n        uint fundStartTime; // In seconds\\r\\n        uint fundEndTime; // In seconds\\r\\n        uint fundCurrentCycle;\\r\\n        uint fundExpellantsCount;\\r\\n        uint fundTotalCycles;\\r\\n        address[] fundBeneficiariesOrder;\\r\\n        // Yield related\\r\\n        bool yieldInitialized;\\r\\n        uint yieldStartTime; // In seconds\\r\\n        uint yieldTotalDeposit; // In wei\\r\\n        uint yieldCurrentTotalDeposit; // In wei\\r\\n        uint yieldTotalShares;\\r\\n        address[] yieldUsers;\\r\\n    }\\r\\n\\r\\n    struct UserRelated {\\r\\n        // Collateral related\\r\\n        bool collateralMember;\\r\\n        bool isUnderCollaterized;\\r\\n        uint membersBank;\\r\\n        uint paymentBank;\\r\\n        uint deposited;\\r\\n        uint expulsonLimit;\\r\\n        uint withdrawableBalance;\\r\\n        // Fund related\\r\\n        bool fundMember;\\r\\n        bool beneficiary;\\r\\n        bool currentCyclePaid;\\r\\n        bool nextCyclePaid;\\r\\n        bool autoPayer;\\r\\n        bool moneyPotFrozen;\\r\\n        bool exemptedThisCycle;\\r\\n        uint pool;\\r\\n        uint cycleExpelled;\\r\\n        // Yield related\\r\\n        bool yieldMember;\\r\\n        uint collateralDepositedInYield;\\r\\n        uint collateralWithdrawnFromYield;\\r\\n        uint yieldAvailable;\\r\\n        uint yieldWithdrawn;\\r\\n        uint distributedYield;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a871e3679a4b960dc0294080f91bfd22c09fcbb0d7331c8bb6ce7e04868a30d\",\"license\":\"MIT\"},\"contracts/libraries/LibTermStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibTermStorage {\\r\\n    bytes32 constant TERM_CONSTS_POSITION = keccak256(\\\"diamond.standard.term.consts\\\");\\r\\n    bytes32 constant TERM_STORAGE_POSITION = keccak256(\\\"diamond.standard.term.storage\\\");\\r\\n\\r\\n    enum TermStates {\\r\\n        InitializingTerm,\\r\\n        ActiveTerm,\\r\\n        ExpiredTerm,\\r\\n        ClosedTerm\\r\\n    }\\r\\n\\r\\n    struct TermConsts {\\r\\n        mapping(string => address) aggregatorsAddresses; // \\\"ETH/USD\\\" => address , \\\"USDC/USD\\\" => address\\r\\n    }\\r\\n\\r\\n    struct Term {\\r\\n        bool initialized;\\r\\n        TermStates state;\\r\\n        address termOwner;\\r\\n        uint creationTime; // In seconds\\r\\n        uint termId;\\r\\n        uint registrationPeriod; // Time for registration (seconds)\\r\\n        uint totalParticipants; // Max number of participants\\r\\n        uint cycleTime; // Time for single cycle (seconds)\\r\\n        uint contributionAmount; // Amount user must pay per cycle (USD)\\r\\n        uint contributionPeriod; // The portion of cycle user must make payment\\r\\n        address stableTokenAddress;\\r\\n    }\\r\\n\\r\\n    struct TermStorage {\\r\\n        uint nextTermId;\\r\\n        mapping(uint => Term) terms; // termId => Term struct\\r\\n        mapping(address => uint[]) participantToTermId; // userAddress => [termId1, termId2, ...]\\r\\n    }\\r\\n\\r\\n    function _termExists(uint termId) internal view returns (bool) {\\r\\n        return _termStorage().terms[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _termConsts() internal pure returns (TermConsts storage termConsts) {\\r\\n        bytes32 position = TERM_CONSTS_POSITION;\\r\\n        assembly {\\r\\n            termConsts.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _termStorage() internal pure returns (TermStorage storage termStorage) {\\r\\n        bytes32 position = TERM_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            termStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe7f461ea1a6e8785a584a08595542d15b02bb22c0b9b4a376e00df734ce599de\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IZaynZapV2TakaDAO} from \\\"../interfaces/IZaynZapV2TakaDAO.sol\\\";\\r\\nimport {IZaynVaultV2TakaDao} from \\\"../interfaces/IZaynVaultV2TakaDao.sol\\\";\\r\\n\\r\\nimport {LibYieldGenerationStorage} from \\\"../libraries/LibYieldGenerationStorage.sol\\\";\\r\\n\\r\\nlibrary LibYieldGeneration {\\r\\n    event OnYieldClaimed(\\r\\n        uint indexed termId,\\r\\n        address indexed user,\\r\\n        address receiver,\\r\\n        uint indexed amount\\r\\n    ); // Emits when a user claims their yield\\r\\n\\r\\n    /// @notice This function is used to deposit collateral for yield generation\\r\\n    /// @param _termId The term id for which the collateral is being deposited\\r\\n    /// @param _ethAmount The amount of collateral being deposited\\r\\n    function _depositYG(uint _termId, uint _ethAmount) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        yield.totalDeposit = _ethAmount;\\r\\n        yield.currentTotalDeposit = _ethAmount;\\r\\n\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        IZaynZapV2TakaDAO(yield.providerAddresses[\\\"ZaynZap\\\"]).zapInEth{value: _ethAmount}(\\r\\n            vaultAddress,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        yield.totalShares = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to withdraw collateral from the yield generation protocol\\r\\n    /// @param _termId The term id for which the collateral is being withdrawn\\r\\n    /// @param _collateralAmount The amount of collateral being withdrawn\\r\\n    /// @param _user The user address that is withdrawing the collateral\\r\\n    /// @return The amount of yield withdrawn\\r\\n    function _withdrawYG(\\r\\n        uint _termId,\\r\\n        uint256 _collateralAmount,\\r\\n        address _user\\r\\n    ) internal returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint neededShares = _neededShares(_collateralAmount, yield.totalShares, yield.totalDeposit);\\r\\n\\r\\n        yield.withdrawnCollateral[_user] += _collateralAmount;\\r\\n        yield.currentTotalDeposit -= _collateralAmount;\\r\\n\\r\\n        address zapAddress = yield.providerAddresses[\\\"ZaynZap\\\"];\\r\\n        address vaultAddress = yield.providerAddresses[\\\"ZaynVault\\\"];\\r\\n\\r\\n        uint sharesBalance = IZaynVaultV2TakaDao(vaultAddress).balanceOf(_termId);\\r\\n\\r\\n        // Prevent rounding errors\\r\\n        if (neededShares > sharesBalance) {\\r\\n            if (neededShares - sharesBalance < 10000) {\\r\\n                neededShares = sharesBalance;\\r\\n            }\\r\\n        } else {\\r\\n            if (sharesBalance - neededShares < 10000) {\\r\\n                neededShares = sharesBalance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint withdrawnAmount = IZaynZapV2TakaDAO(zapAddress).zapOutETH(\\r\\n            vaultAddress,\\r\\n            neededShares,\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        if (withdrawnAmount < _collateralAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint withdrawnYield = withdrawnAmount - _collateralAmount;\\r\\n            yield.withdrawnYield[_user] += withdrawnYield;\\r\\n            yield.availableYield[_user] += withdrawnYield;\\r\\n\\r\\n            return withdrawnYield;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from shares to eth\\r\\n    /// @param _termId The term id\\r\\n    /// @param _yield The yield generation struct\\r\\n    /// @return Wei equivalent of the shares\\r\\n    function _sharesToEth(\\r\\n        uint _termId,\\r\\n        LibYieldGenerationStorage.YieldGeneration storage _yield\\r\\n    ) internal view returns (uint) {\\r\\n        uint termBalance = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(_yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        return (termBalance * pricePerShare) / 10 ** 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Conversion from eth to shares\\r\\n    /// @param _collateralAmount The amount of collateral to withdraw\\r\\n    /// @param _totalShares The total shares in the yield from the term\\r\\n    /// @param _totalDeposit The total deposit in the yield from the term\\r\\n    /// @return The amount of shares equivalent to a collateral amount\\r\\n    function _neededShares(\\r\\n        uint _collateralAmount,\\r\\n        uint _totalShares,\\r\\n        uint _totalDeposit\\r\\n    ) internal pure returns (uint) {\\r\\n        if (_totalDeposit == 0) return 0;\\r\\n        return ((_collateralAmount * _totalShares) / _totalDeposit);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the current total yield generated for a term\\r\\n    /// @param _termId The term id for which the yield is being calculated\\r\\n    /// @return The total yield generated for the term\\r\\n    function _currentYieldGenerated(uint _termId) internal view returns (uint) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint termBalance = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"]).balanceOf(\\r\\n            _termId\\r\\n        );\\r\\n        uint pricePerShare = IZaynVaultV2TakaDao(yield.providerAddresses[\\\"ZaynVault\\\"])\\r\\n            .getPricePerFullShare();\\r\\n\\r\\n        uint sharesInEth = (termBalance * pricePerShare) / 10 ** 18;\\r\\n        if (sharesInEth > yield.currentTotalDeposit) {\\r\\n            return sharesInEth - yield.currentTotalDeposit;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the yield distribution ratio for a user\\r\\n    /// @param _termId The term id for which the ratio is being calculated\\r\\n    /// @param _user The user for which the ratio is being calculated\\r\\n    /// @return The yield distribution ratio for the user\\r\\n    function _yieldDistributionRatio(uint _termId, address _user) internal view returns (uint256) {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        if (yield.currentTotalDeposit == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                ((yield.depositedCollateralByUser[_user] - yield.withdrawnCollateral[_user]) *\\r\\n                    10 ** 18) / yield.currentTotalDeposit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to get the total yield generated for a user\\r\\n    /// @param termId The term id for which the yield is being calculated\\r\\n    /// @param user The user for which the yield is being calculated\\r\\n    /// @return The total yield generated for the user\\r\\n    function _unwithdrawnUserYieldGenerated(\\r\\n        uint termId,\\r\\n        address user\\r\\n    ) internal view returns (uint) {\\r\\n        uint yieldDistributed = (_currentYieldGenerated(termId) *\\r\\n            _yieldDistributionRatio(termId, user)) / 10 ** 18;\\r\\n\\r\\n        return yieldDistributed;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to claim the available yield for a user\\r\\n    /// @param _termId The term id for which the yield is being claimed\\r\\n    /// @param _user The user for which the yield is being claimed\\r\\n    /// @param _receiver The receiver of the yield\\r\\n    function _claimAvailableYield(uint _termId, address _user, address _receiver) internal {\\r\\n        LibYieldGenerationStorage.YieldGeneration storage yield = LibYieldGenerationStorage\\r\\n            ._yieldStorage()\\r\\n            .yields[_termId];\\r\\n\\r\\n        uint availableYield = yield.availableYield[_user];\\r\\n\\r\\n        require(availableYield > 0, \\\"TT-LYG-01\\\");\\r\\n\\r\\n        yield.availableYield[_user] = 0;\\r\\n        (bool success, ) = payable(_receiver).call{value: availableYield}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit OnYieldClaimed(_termId, _user, _receiver, availableYield);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8efc9c5a2d1e7c6cc19f5981dc3209f00f11af1091b97028cc676bd76136d1a8\",\"license\":\"MIT\"},\"contracts/libraries/LibYieldGenerationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary LibYieldGenerationStorage {\\r\\n    bytes32 constant YIELD_PROVIDERS_POSITION = keccak256(\\\"diamond.standard.yield.providers\\\");\\r\\n    bytes32 constant YIELD_STORAGE_POSITION = keccak256(\\\"diamond.standard.yield.storage\\\");\\r\\n    bytes32 constant YIELD_LOCK_POSITION = keccak256(\\\"diamond.standard.yield.lock\\\");\\r\\n\\r\\n    enum YGProviders {\\r\\n        InHouse,\\r\\n        ZaynFi\\r\\n    }\\r\\n\\r\\n    struct YieldLock {\\r\\n        bool yieldLock;\\r\\n    }\\r\\n\\r\\n    // Both index 0 are reserved for ZaynFi\\r\\n    struct YieldProviders {\\r\\n        mapping(string => address) providerAddresses;\\r\\n    }\\r\\n\\r\\n    struct YieldGeneration {\\r\\n        bool initialized;\\r\\n        YGProviders provider;\\r\\n        mapping(string => address) providerAddresses;\\r\\n        uint startTimeStamp; // In seconds\\r\\n        uint totalDeposit; // In wei\\r\\n        uint currentTotalDeposit; // In wei\\r\\n        uint totalShares;\\r\\n        address[] yieldUsers;\\r\\n        mapping(address => bool) hasOptedIn;\\r\\n        mapping(address => uint256) withdrawnYield; // In wei\\r\\n        mapping(address => uint256) withdrawnCollateral; // In wei\\r\\n        mapping(address => uint256) availableYield; // In wei\\r\\n        mapping(address => uint256) depositedCollateralByUser; // In wei\\r\\n    }\\r\\n\\r\\n    struct YieldStorage {\\r\\n        mapping(uint => YieldGeneration) yields; // termId => YieldGeneration struct\\r\\n    }\\r\\n\\r\\n    function _yieldExists(uint termId) internal view returns (bool) {\\r\\n        return _yieldStorage().yields[termId].initialized;\\r\\n    }\\r\\n\\r\\n    function _yieldLock() internal pure returns (YieldLock storage yieldLock) {\\r\\n        bytes32 position = YIELD_LOCK_POSITION;\\r\\n        assembly {\\r\\n            yieldLock.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldProviders() internal pure returns (YieldProviders storage yieldProviders) {\\r\\n        bytes32 position = YIELD_PROVIDERS_POSITION;\\r\\n        assembly {\\r\\n            yieldProviders.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _yieldStorage() internal pure returns (YieldStorage storage yieldStorage) {\\r\\n        bytes32 position = YIELD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            yieldStorage.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26baa6eee3422b370c241a266e2a54d14f804bb745c51146e201301ad69c1e6f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Mohammed Haddouti",
    "details": "v3.0 (Diamond)",
    "kind": "dev",
    "methods": {
      "createTerm(uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "contributionAmount": "The amount of stable token that each participant will have to contribute",
          "contributionPeriod": "The time in seconds that the participants will have to contribute",
          "cycleTime": "The time in seconds that the term will last",
          "registrationPeriod": "The time in seconds that the term will be open for registration",
          "stableTokenAddress": "The address of the stable token",
          "totalParticipants": "The number of participants in the term"
        },
        "returns": {
          "_0": "termId The id of the new term"
        }
      },
      "expireTerm(uint256)": {
        "params": {
          "termId": "The id of the term"
        }
      },
      "joinTerm(uint256,bool)": {
        "params": {
          "optYield": "Whether the participant wants to opt in for yield generation",
          "termId": "The id of the term"
        }
      },
      "joinTermOnPosition(uint256,bool,uint256)": {
        "params": {
          "optYield": "Whether the participant wants to opt in for yield generation",
          "position": "The position in the term",
          "termId": "The id of the term"
        }
      },
      "paySecurityOnBehalfOf(uint256,bool,address)": {
        "params": {
          "newParticipant": "The address of the new participant",
          "optYield": "Whether the participant wants to opt in for yield generation",
          "termId": "The id of the term"
        }
      },
      "paySecurityOnBehalfOf(uint256,bool,address,uint256)": {
        "params": {
          "newParticipant": "The address of the new participant",
          "optYield": "Whether the participant wants to opt in for yield generation",
          "position": "The position in the term",
          "termId": "The id of the term"
        }
      },
      "startTerm(uint256)": {
        "params": {
          "termId": "The id of the term"
        }
      }
    },
    "title": "Takaturn Term Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTerm(uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "Create a new term"
      },
      "expireTerm(uint256)": {
        "notice": "Expire a term"
      },
      "joinTerm(uint256,bool)": {
        "notice": "Join a term at the next available position"
      },
      "joinTermOnPosition(uint256,bool,uint256)": {
        "notice": "Join a term at a specific position"
      },
      "paySecurityOnBehalfOf(uint256,bool,address)": {
        "notice": "Pay security deposit on behalf of someone else, at the next available position"
      },
      "paySecurityOnBehalfOf(uint256,bool,address,uint256)": {
        "notice": "Pay security deposit on behalf of someone else, at a specific position"
      },
      "startTerm(uint256)": {
        "notice": "Start a term"
      }
    },
    "notice": "This is used to create terms",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}